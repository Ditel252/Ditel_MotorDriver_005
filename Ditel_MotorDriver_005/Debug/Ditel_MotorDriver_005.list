
Ditel_MotorDriver_005.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000067d4  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ae8  08006964  08006964  00007964  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800744c  0800744c  0000905c  2**0
                  CONTENTS
  4 .ARM          00000008  0800744c  0800744c  0000844c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007454  08007454  0000905c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007454  08007454  00008454  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007458  08007458  00008458  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  0800745c  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000905c  2**0
                  CONTENTS
 10 .bss          00000d58  2000005c  2000005c  0000905c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000db4  20000db4  0000905c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000905c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00012cd4  00000000  00000000  0000908c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002e8a  00000000  00000000  0001bd60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000fa8  00000000  00000000  0001ebf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c43  00000000  00000000  0001fb98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001d7d0  00000000  00000000  000207db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000167ce  00000000  00000000  0003dfab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a868c  00000000  00000000  00054779  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000fce05  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004530  00000000  00000000  000fce48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006a  00000000  00000000  00101378  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000005c 	.word	0x2000005c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800694c 	.word	0x0800694c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000060 	.word	0x20000060
 80001cc:	0800694c 	.word	0x0800694c

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <_7SegInit>:

#include <D-M-005/7Seg.h>

_7SEG_SETTING _7SegSetting;

void _7SegInit(_7SEG_SETTING *__7SegSetting){
 80002a0:	b580      	push	{r7, lr}
 80002a2:	b082      	sub	sp, #8
 80002a4:	af00      	add	r7, sp, #0
 80002a6:	6078      	str	r0, [r7, #4]
	_7SegSetting.__7SegSi_GpioPort = __7SegSetting->__7SegSi_GpioPort;
 80002a8:	687b      	ldr	r3, [r7, #4]
 80002aa:	681b      	ldr	r3, [r3, #0]
 80002ac:	4a18      	ldr	r2, [pc, #96]	@ (8000310 <_7SegInit+0x70>)
 80002ae:	6013      	str	r3, [r2, #0]
	_7SegSetting.__7SegSi_Pin = __7SegSetting->__7SegSi_Pin;
 80002b0:	687b      	ldr	r3, [r7, #4]
 80002b2:	889a      	ldrh	r2, [r3, #4]
 80002b4:	4b16      	ldr	r3, [pc, #88]	@ (8000310 <_7SegInit+0x70>)
 80002b6:	809a      	strh	r2, [r3, #4]
	_7SegSetting.__7SegRck_GpioPort = __7SegSetting->__7SegRck_GpioPort;
 80002b8:	687b      	ldr	r3, [r7, #4]
 80002ba:	689b      	ldr	r3, [r3, #8]
 80002bc:	4a14      	ldr	r2, [pc, #80]	@ (8000310 <_7SegInit+0x70>)
 80002be:	6093      	str	r3, [r2, #8]
	_7SegSetting.__7SegRck_Pin = __7SegSetting->__7SegRck_Pin;
 80002c0:	687b      	ldr	r3, [r7, #4]
 80002c2:	899a      	ldrh	r2, [r3, #12]
 80002c4:	4b12      	ldr	r3, [pc, #72]	@ (8000310 <_7SegInit+0x70>)
 80002c6:	819a      	strh	r2, [r3, #12]
	_7SegSetting.__7SegSck_GpioPort = __7SegSetting->__7SegSck_GpioPort;
 80002c8:	687b      	ldr	r3, [r7, #4]
 80002ca:	691b      	ldr	r3, [r3, #16]
 80002cc:	4a10      	ldr	r2, [pc, #64]	@ (8000310 <_7SegInit+0x70>)
 80002ce:	6113      	str	r3, [r2, #16]
	_7SegSetting.__7SegSck_Pin = __7SegSetting->__7SegSck_Pin;
 80002d0:	687b      	ldr	r3, [r7, #4]
 80002d2:	8a9a      	ldrh	r2, [r3, #20]
 80002d4:	4b0e      	ldr	r3, [pc, #56]	@ (8000310 <_7SegInit+0x70>)
 80002d6:	829a      	strh	r2, [r3, #20]

	HAL_GPIO_WritePin(_7SegSetting.__7SegSi_GpioPort, _7SegSetting.__7SegSi_Pin, GPIO_PIN_RESET);
 80002d8:	4b0d      	ldr	r3, [pc, #52]	@ (8000310 <_7SegInit+0x70>)
 80002da:	681b      	ldr	r3, [r3, #0]
 80002dc:	4a0c      	ldr	r2, [pc, #48]	@ (8000310 <_7SegInit+0x70>)
 80002de:	8891      	ldrh	r1, [r2, #4]
 80002e0:	2200      	movs	r2, #0
 80002e2:	4618      	mov	r0, r3
 80002e4:	f002 f97e 	bl	80025e4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(_7SegSetting.__7SegRck_GpioPort, _7SegSetting.__7SegRck_Pin, GPIO_PIN_RESET);
 80002e8:	4b09      	ldr	r3, [pc, #36]	@ (8000310 <_7SegInit+0x70>)
 80002ea:	689b      	ldr	r3, [r3, #8]
 80002ec:	4a08      	ldr	r2, [pc, #32]	@ (8000310 <_7SegInit+0x70>)
 80002ee:	8991      	ldrh	r1, [r2, #12]
 80002f0:	2200      	movs	r2, #0
 80002f2:	4618      	mov	r0, r3
 80002f4:	f002 f976 	bl	80025e4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(_7SegSetting.__7SegSck_GpioPort, _7SegSetting.__7SegSck_Pin, GPIO_PIN_RESET);
 80002f8:	4b05      	ldr	r3, [pc, #20]	@ (8000310 <_7SegInit+0x70>)
 80002fa:	691b      	ldr	r3, [r3, #16]
 80002fc:	4a04      	ldr	r2, [pc, #16]	@ (8000310 <_7SegInit+0x70>)
 80002fe:	8a91      	ldrh	r1, [r2, #20]
 8000300:	2200      	movs	r2, #0
 8000302:	4618      	mov	r0, r3
 8000304:	f002 f96e 	bl	80025e4 <HAL_GPIO_WritePin>
}
 8000308:	bf00      	nop
 800030a:	3708      	adds	r7, #8
 800030c:	46bd      	mov	sp, r7
 800030e:	bd80      	pop	{r7, pc}
 8000310:	20000078 	.word	0x20000078

08000314 <_7SegReset>:
            __7Seg1byteDisplay(~(0b00011110 | (isDisplayDp ? 0b10000000 : 0b00000000)));
            break;
    }
}

void _7SegReset(){
 8000314:	b580      	push	{r7, lr}
 8000316:	af00      	add	r7, sp, #0
    __7Seg1byteDisplay(~(0b00000000));
 8000318:	f04f 30ff 	mov.w	r0, #4294967295
 800031c:	f000 f878 	bl	8000410 <__7Seg1byteDisplay>
    __7Seg1byteDisplay(~(0b00000000));
 8000320:	f04f 30ff 	mov.w	r0, #4294967295
 8000324:	f000 f874 	bl	8000410 <__7Seg1byteDisplay>
}
 8000328:	bf00      	nop
 800032a:	bd80      	pop	{r7, pc}

0800032c <_7SegSetUpAnimation>:

void _7SegSetUpAnimation(_SETUP_STEP_FOR_7SEG __SetupStep){
 800032c:	b580      	push	{r7, lr}
 800032e:	b082      	sub	sp, #8
 8000330:	af00      	add	r7, sp, #0
 8000332:	4603      	mov	r3, r0
 8000334:	71fb      	strb	r3, [r7, #7]
	switch (__SetupStep) {
 8000336:	79fb      	ldrb	r3, [r7, #7]
 8000338:	3b01      	subs	r3, #1
 800033a:	2b08      	cmp	r3, #8
 800033c:	d863      	bhi.n	8000406 <_7SegSetUpAnimation+0xda>
 800033e:	a201      	add	r2, pc, #4	@ (adr r2, 8000344 <_7SegSetUpAnimation+0x18>)
 8000340:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000344:	08000369 	.word	0x08000369
 8000348:	0800037b 	.word	0x0800037b
 800034c:	0800038d 	.word	0x0800038d
 8000350:	0800039f 	.word	0x0800039f
 8000354:	080003b1 	.word	0x080003b1
 8000358:	080003c3 	.word	0x080003c3
 800035c:	080003d5 	.word	0x080003d5
 8000360:	080003e7 	.word	0x080003e7
 8000364:	080003f9 	.word	0x080003f9
		case _SETUP_STEP_START_PROGRAM:
			__7Seg1byteDisplay(__7SEG_NULL_1Byte);
 8000368:	f04f 30ff 	mov.w	r0, #4294967295
 800036c:	f000 f850 	bl	8000410 <__7Seg1byteDisplay>
			__7Seg1byteDisplay(__7SEG_ONLY_A_1Byte);
 8000370:	f06f 0002 	mvn.w	r0, #2
 8000374:	f000 f84c 	bl	8000410 <__7Seg1byteDisplay>
			break;
 8000378:	e045      	b.n	8000406 <_7SegSetUpAnimation+0xda>
		case _SETUP_STEP_SETUP_MOTOR:
			__7Seg1byteDisplay(__7SEG_ONLY_A_1Byte);
 800037a:	f06f 0002 	mvn.w	r0, #2
 800037e:	f000 f847 	bl	8000410 <__7Seg1byteDisplay>
			__7Seg1byteDisplay(__7SEG_NULL_1Byte);
 8000382:	f04f 30ff 	mov.w	r0, #4294967295
 8000386:	f000 f843 	bl	8000410 <__7Seg1byteDisplay>
			break;
 800038a:	e03c      	b.n	8000406 <_7SegSetUpAnimation+0xda>
		case _SETUP_STEP_SETUP_AND_READ_SWICH:
			__7Seg1byteDisplay(__7SEG_ONLY_B_1Byte);
 800038c:	f06f 0001 	mvn.w	r0, #1
 8000390:	f000 f83e 	bl	8000410 <__7Seg1byteDisplay>
			__7Seg1byteDisplay(__7SEG_NULL_1Byte);
 8000394:	f04f 30ff 	mov.w	r0, #4294967295
 8000398:	f000 f83a 	bl	8000410 <__7Seg1byteDisplay>
			break;
 800039c:	e033      	b.n	8000406 <_7SegSetUpAnimation+0xda>
		case _SETUP_STEP_SETUP_CONSOLE:
			__7Seg1byteDisplay(__7SEG_ONLY_C_1Byte);
 800039e:	f06f 0040 	mvn.w	r0, #64	@ 0x40
 80003a2:	f000 f835 	bl	8000410 <__7Seg1byteDisplay>
			__7Seg1byteDisplay(__7SEG_NULL_1Byte);
 80003a6:	f04f 30ff 	mov.w	r0, #4294967295
 80003aa:	f000 f831 	bl	8000410 <__7Seg1byteDisplay>
			break;
 80003ae:	e02a      	b.n	8000406 <_7SegSetUpAnimation+0xda>
		case _SETUP_STEP_NULL3:
			__7Seg1byteDisplay(__7SEG_ONLY_D_1Byte);
 80003b0:	f06f 0020 	mvn.w	r0, #32
 80003b4:	f000 f82c 	bl	8000410 <__7Seg1byteDisplay>
			__7Seg1byteDisplay(__7SEG_NULL_1Byte);
 80003b8:	f04f 30ff 	mov.w	r0, #4294967295
 80003bc:	f000 f828 	bl	8000410 <__7Seg1byteDisplay>
			break;
 80003c0:	e021      	b.n	8000406 <_7SegSetUpAnimation+0xda>
		case _SETUP_STEP_NULL4:
			__7Seg1byteDisplay(__7SEG_NULL_1Byte);
 80003c2:	f04f 30ff 	mov.w	r0, #4294967295
 80003c6:	f000 f823 	bl	8000410 <__7Seg1byteDisplay>
			__7Seg1byteDisplay(__7SEG_ONLY_D_1Byte);
 80003ca:	f06f 0020 	mvn.w	r0, #32
 80003ce:	f000 f81f 	bl	8000410 <__7Seg1byteDisplay>
			break;
 80003d2:	e018      	b.n	8000406 <_7SegSetUpAnimation+0xda>
		case _SETUP_STEP_NULL5:
			__7Seg1byteDisplay(__7SEG_NULL_1Byte);
 80003d4:	f04f 30ff 	mov.w	r0, #4294967295
 80003d8:	f000 f81a 	bl	8000410 <__7Seg1byteDisplay>
			__7Seg1byteDisplay(__7SEG_ONLY_E_1Byte);
 80003dc:	f06f 0010 	mvn.w	r0, #16
 80003e0:	f000 f816 	bl	8000410 <__7Seg1byteDisplay>
			break;
 80003e4:	e00f      	b.n	8000406 <_7SegSetUpAnimation+0xda>
		case _SETUP_STEP_NULL6:
			__7Seg1byteDisplay(__7SEG_NULL_1Byte);
 80003e6:	f04f 30ff 	mov.w	r0, #4294967295
 80003ea:	f000 f811 	bl	8000410 <__7Seg1byteDisplay>
			__7Seg1byteDisplay(__7SEG_ONLY_F_1Byte);
 80003ee:	f06f 0004 	mvn.w	r0, #4
 80003f2:	f000 f80d 	bl	8000410 <__7Seg1byteDisplay>
			break;
 80003f6:	e006      	b.n	8000406 <_7SegSetUpAnimation+0xda>
		case _SETUP_STEP_FINISH:
			__7Seg1byteDisplay(~__7SEG_ONLY_G_1Byte | ~__7SEG_ONLY_DP_1Byte);
 80003f8:	2088      	movs	r0, #136	@ 0x88
 80003fa:	f000 f809 	bl	8000410 <__7Seg1byteDisplay>
			__7Seg1byteDisplay(~__7SEG_ONLY_G_1Byte | ~__7SEG_ONLY_DP_1Byte);
 80003fe:	2088      	movs	r0, #136	@ 0x88
 8000400:	f000 f806 	bl	8000410 <__7Seg1byteDisplay>
			break;
 8000404:	bf00      	nop
	}
}
 8000406:	bf00      	nop
 8000408:	3708      	adds	r7, #8
 800040a:	46bd      	mov	sp, r7
 800040c:	bd80      	pop	{r7, pc}
 800040e:	bf00      	nop

08000410 <__7Seg1byteDisplay>:

void __7Seg1byteDisplay(uint8_t _displayContent){
 8000410:	b580      	push	{r7, lr}
 8000412:	b084      	sub	sp, #16
 8000414:	af00      	add	r7, sp, #0
 8000416:	4603      	mov	r3, r0
 8000418:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(_7SegSetting.__7SegRck_GpioPort, _7SegSetting.__7SegRck_Pin, GPIO_PIN_RESET);
 800041a:	4b1e      	ldr	r3, [pc, #120]	@ (8000494 <__7Seg1byteDisplay+0x84>)
 800041c:	689b      	ldr	r3, [r3, #8]
 800041e:	4a1d      	ldr	r2, [pc, #116]	@ (8000494 <__7Seg1byteDisplay+0x84>)
 8000420:	8991      	ldrh	r1, [r2, #12]
 8000422:	2200      	movs	r2, #0
 8000424:	4618      	mov	r0, r3
 8000426:	f002 f8dd 	bl	80025e4 <HAL_GPIO_WritePin>
    for (int i = 0; i < 8; i++){
 800042a:	2300      	movs	r3, #0
 800042c:	60fb      	str	r3, [r7, #12]
 800042e:	e021      	b.n	8000474 <__7Seg1byteDisplay+0x64>
        HAL_GPIO_WritePin(_7SegSetting.__7SegSi_GpioPort, _7SegSetting.__7SegSi_Pin, (_displayContent & (1U << i)) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000430:	4b18      	ldr	r3, [pc, #96]	@ (8000494 <__7Seg1byteDisplay+0x84>)
 8000432:	6818      	ldr	r0, [r3, #0]
 8000434:	4b17      	ldr	r3, [pc, #92]	@ (8000494 <__7Seg1byteDisplay+0x84>)
 8000436:	8899      	ldrh	r1, [r3, #4]
 8000438:	79fa      	ldrb	r2, [r7, #7]
 800043a:	68fb      	ldr	r3, [r7, #12]
 800043c:	fa22 f303 	lsr.w	r3, r2, r3
 8000440:	b2db      	uxtb	r3, r3
 8000442:	f003 0301 	and.w	r3, r3, #1
 8000446:	b2db      	uxtb	r3, r3
 8000448:	461a      	mov	r2, r3
 800044a:	f002 f8cb 	bl	80025e4 <HAL_GPIO_WritePin>

        HAL_GPIO_WritePin(_7SegSetting.__7SegSck_GpioPort, _7SegSetting.__7SegSck_Pin, GPIO_PIN_SET);
 800044e:	4b11      	ldr	r3, [pc, #68]	@ (8000494 <__7Seg1byteDisplay+0x84>)
 8000450:	691b      	ldr	r3, [r3, #16]
 8000452:	4a10      	ldr	r2, [pc, #64]	@ (8000494 <__7Seg1byteDisplay+0x84>)
 8000454:	8a91      	ldrh	r1, [r2, #20]
 8000456:	2201      	movs	r2, #1
 8000458:	4618      	mov	r0, r3
 800045a:	f002 f8c3 	bl	80025e4 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(_7SegSetting.__7SegSck_GpioPort, _7SegSetting.__7SegSck_Pin, GPIO_PIN_RESET);
 800045e:	4b0d      	ldr	r3, [pc, #52]	@ (8000494 <__7Seg1byteDisplay+0x84>)
 8000460:	691b      	ldr	r3, [r3, #16]
 8000462:	4a0c      	ldr	r2, [pc, #48]	@ (8000494 <__7Seg1byteDisplay+0x84>)
 8000464:	8a91      	ldrh	r1, [r2, #20]
 8000466:	2200      	movs	r2, #0
 8000468:	4618      	mov	r0, r3
 800046a:	f002 f8bb 	bl	80025e4 <HAL_GPIO_WritePin>
    for (int i = 0; i < 8; i++){
 800046e:	68fb      	ldr	r3, [r7, #12]
 8000470:	3301      	adds	r3, #1
 8000472:	60fb      	str	r3, [r7, #12]
 8000474:	68fb      	ldr	r3, [r7, #12]
 8000476:	2b07      	cmp	r3, #7
 8000478:	ddda      	ble.n	8000430 <__7Seg1byteDisplay+0x20>
    }

    HAL_GPIO_WritePin(_7SegSetting.__7SegRck_GpioPort, _7SegSetting.__7SegRck_Pin, GPIO_PIN_SET);
 800047a:	4b06      	ldr	r3, [pc, #24]	@ (8000494 <__7Seg1byteDisplay+0x84>)
 800047c:	689b      	ldr	r3, [r3, #8]
 800047e:	4a05      	ldr	r2, [pc, #20]	@ (8000494 <__7Seg1byteDisplay+0x84>)
 8000480:	8991      	ldrh	r1, [r2, #12]
 8000482:	2201      	movs	r2, #1
 8000484:	4618      	mov	r0, r3
 8000486:	f002 f8ad 	bl	80025e4 <HAL_GPIO_WritePin>
}
 800048a:	bf00      	nop
 800048c:	3710      	adds	r7, #16
 800048e:	46bd      	mov	sp, r7
 8000490:	bd80      	pop	{r7, pc}
 8000492:	bf00      	nop
 8000494:	20000078 	.word	0x20000078

08000498 <_MotorInit>:

#include "D-M-005/Motor.h"

_MOTOR_SETTING _MotorSetting;

void _MotorInit(_MOTOR_SETTING *__MotorSetting){
 8000498:	b580      	push	{r7, lr}
 800049a:	b082      	sub	sp, #8
 800049c:	af00      	add	r7, sp, #0
 800049e:	6078      	str	r0, [r7, #4]
	_MotorSetting.__MotorN1_Tim = __MotorSetting->__MotorN1_Tim;
 80004a0:	687b      	ldr	r3, [r7, #4]
 80004a2:	681b      	ldr	r3, [r3, #0]
 80004a4:	4a5c      	ldr	r2, [pc, #368]	@ (8000618 <_MotorInit+0x180>)
 80004a6:	6013      	str	r3, [r2, #0]
	_MotorSetting.__MotorN1_TimChannel = __MotorSetting->__MotorN1_TimChannel;
 80004a8:	687b      	ldr	r3, [r7, #4]
 80004aa:	685b      	ldr	r3, [r3, #4]
 80004ac:	4a5a      	ldr	r2, [pc, #360]	@ (8000618 <_MotorInit+0x180>)
 80004ae:	6053      	str	r3, [r2, #4]
	_MotorSetting.__MotorN2_Tim = __MotorSetting->__MotorN2_Tim;
 80004b0:	687b      	ldr	r3, [r7, #4]
 80004b2:	689b      	ldr	r3, [r3, #8]
 80004b4:	4a58      	ldr	r2, [pc, #352]	@ (8000618 <_MotorInit+0x180>)
 80004b6:	6093      	str	r3, [r2, #8]
	_MotorSetting.__MotorN2_TimChannel = __MotorSetting->__MotorN2_TimChannel;
 80004b8:	687b      	ldr	r3, [r7, #4]
 80004ba:	68db      	ldr	r3, [r3, #12]
 80004bc:	4a56      	ldr	r2, [pc, #344]	@ (8000618 <_MotorInit+0x180>)
 80004be:	60d3      	str	r3, [r2, #12]

	_MotorSetting.__MotorP1_GpioPort = __MotorSetting->__MotorP1_GpioPort;
 80004c0:	687b      	ldr	r3, [r7, #4]
 80004c2:	691b      	ldr	r3, [r3, #16]
 80004c4:	4a54      	ldr	r2, [pc, #336]	@ (8000618 <_MotorInit+0x180>)
 80004c6:	6113      	str	r3, [r2, #16]
	_MotorSetting.__MotorP1_Pin = __MotorSetting->__MotorP1_Pin;
 80004c8:	687b      	ldr	r3, [r7, #4]
 80004ca:	8a9a      	ldrh	r2, [r3, #20]
 80004cc:	4b52      	ldr	r3, [pc, #328]	@ (8000618 <_MotorInit+0x180>)
 80004ce:	829a      	strh	r2, [r3, #20]
	_MotorSetting.__MotorP2_GpioPort = __MotorSetting->__MotorP2_GpioPort;
 80004d0:	687b      	ldr	r3, [r7, #4]
 80004d2:	699b      	ldr	r3, [r3, #24]
 80004d4:	4a50      	ldr	r2, [pc, #320]	@ (8000618 <_MotorInit+0x180>)
 80004d6:	6193      	str	r3, [r2, #24]
	_MotorSetting.__MotorP2_Pin = __MotorSetting->__MotorP2_Pin;
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	8b9a      	ldrh	r2, [r3, #28]
 80004dc:	4b4e      	ldr	r3, [pc, #312]	@ (8000618 <_MotorInit+0x180>)
 80004de:	839a      	strh	r2, [r3, #28]

	_MotorSetting.__DeadTime_TIM = __MotorSetting->__DeadTime_TIM;
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	6a1b      	ldr	r3, [r3, #32]
 80004e4:	4a4c      	ldr	r2, [pc, #304]	@ (8000618 <_MotorInit+0x180>)
 80004e6:	6213      	str	r3, [r2, #32]

	HAL_GPIO_WritePin(_MotorSetting.__MotorP1_GpioPort, _MotorSetting.__MotorP1_Pin, GPIO_PIN_RESET);
 80004e8:	4b4b      	ldr	r3, [pc, #300]	@ (8000618 <_MotorInit+0x180>)
 80004ea:	691b      	ldr	r3, [r3, #16]
 80004ec:	4a4a      	ldr	r2, [pc, #296]	@ (8000618 <_MotorInit+0x180>)
 80004ee:	8a91      	ldrh	r1, [r2, #20]
 80004f0:	2200      	movs	r2, #0
 80004f2:	4618      	mov	r0, r3
 80004f4:	f002 f876 	bl	80025e4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(_MotorSetting.__MotorP2_GpioPort, _MotorSetting.__MotorP2_Pin, GPIO_PIN_RESET);
 80004f8:	4b47      	ldr	r3, [pc, #284]	@ (8000618 <_MotorInit+0x180>)
 80004fa:	699b      	ldr	r3, [r3, #24]
 80004fc:	4a46      	ldr	r2, [pc, #280]	@ (8000618 <_MotorInit+0x180>)
 80004fe:	8b91      	ldrh	r1, [r2, #28]
 8000500:	2200      	movs	r2, #0
 8000502:	4618      	mov	r0, r3
 8000504:	f002 f86e 	bl	80025e4 <HAL_GPIO_WritePin>

	HAL_TIM_PWM_Start(_MotorSetting.__MotorN1_Tim, _MotorSetting.__MotorN1_TimChannel);
 8000508:	4b43      	ldr	r3, [pc, #268]	@ (8000618 <_MotorInit+0x180>)
 800050a:	681b      	ldr	r3, [r3, #0]
 800050c:	4a42      	ldr	r2, [pc, #264]	@ (8000618 <_MotorInit+0x180>)
 800050e:	6852      	ldr	r2, [r2, #4]
 8000510:	4611      	mov	r1, r2
 8000512:	4618      	mov	r0, r3
 8000514:	f003 fd70 	bl	8003ff8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(_MotorSetting.__MotorN2_Tim, _MotorSetting.__MotorN2_TimChannel);
 8000518:	4b3f      	ldr	r3, [pc, #252]	@ (8000618 <_MotorInit+0x180>)
 800051a:	689b      	ldr	r3, [r3, #8]
 800051c:	4a3e      	ldr	r2, [pc, #248]	@ (8000618 <_MotorInit+0x180>)
 800051e:	68d2      	ldr	r2, [r2, #12]
 8000520:	4611      	mov	r1, r2
 8000522:	4618      	mov	r0, r3
 8000524:	f003 fd68 	bl	8003ff8 <HAL_TIM_PWM_Start>

	HAL_TIM_Base_Start(_MotorSetting.__DeadTime_TIM);
 8000528:	4b3b      	ldr	r3, [pc, #236]	@ (8000618 <_MotorInit+0x180>)
 800052a:	6a1b      	ldr	r3, [r3, #32]
 800052c:	4618      	mov	r0, r3
 800052e:	f003 fc4d 	bl	8003dcc <HAL_TIM_Base_Start>

	__HAL_TIM_SET_COMPARE(_MotorSetting.__MotorN1_Tim, _MotorSetting.__MotorN1_TimChannel, 0);
 8000532:	4b39      	ldr	r3, [pc, #228]	@ (8000618 <_MotorInit+0x180>)
 8000534:	685b      	ldr	r3, [r3, #4]
 8000536:	2b00      	cmp	r3, #0
 8000538:	d105      	bne.n	8000546 <_MotorInit+0xae>
 800053a:	4b37      	ldr	r3, [pc, #220]	@ (8000618 <_MotorInit+0x180>)
 800053c:	681b      	ldr	r3, [r3, #0]
 800053e:	681b      	ldr	r3, [r3, #0]
 8000540:	2200      	movs	r2, #0
 8000542:	635a      	str	r2, [r3, #52]	@ 0x34
 8000544:	e02c      	b.n	80005a0 <_MotorInit+0x108>
 8000546:	4b34      	ldr	r3, [pc, #208]	@ (8000618 <_MotorInit+0x180>)
 8000548:	685b      	ldr	r3, [r3, #4]
 800054a:	2b04      	cmp	r3, #4
 800054c:	d105      	bne.n	800055a <_MotorInit+0xc2>
 800054e:	4b32      	ldr	r3, [pc, #200]	@ (8000618 <_MotorInit+0x180>)
 8000550:	681b      	ldr	r3, [r3, #0]
 8000552:	681a      	ldr	r2, [r3, #0]
 8000554:	2300      	movs	r3, #0
 8000556:	6393      	str	r3, [r2, #56]	@ 0x38
 8000558:	e022      	b.n	80005a0 <_MotorInit+0x108>
 800055a:	4b2f      	ldr	r3, [pc, #188]	@ (8000618 <_MotorInit+0x180>)
 800055c:	685b      	ldr	r3, [r3, #4]
 800055e:	2b08      	cmp	r3, #8
 8000560:	d105      	bne.n	800056e <_MotorInit+0xd6>
 8000562:	4b2d      	ldr	r3, [pc, #180]	@ (8000618 <_MotorInit+0x180>)
 8000564:	681b      	ldr	r3, [r3, #0]
 8000566:	681a      	ldr	r2, [r3, #0]
 8000568:	2300      	movs	r3, #0
 800056a:	63d3      	str	r3, [r2, #60]	@ 0x3c
 800056c:	e018      	b.n	80005a0 <_MotorInit+0x108>
 800056e:	4b2a      	ldr	r3, [pc, #168]	@ (8000618 <_MotorInit+0x180>)
 8000570:	685b      	ldr	r3, [r3, #4]
 8000572:	2b0c      	cmp	r3, #12
 8000574:	d105      	bne.n	8000582 <_MotorInit+0xea>
 8000576:	4b28      	ldr	r3, [pc, #160]	@ (8000618 <_MotorInit+0x180>)
 8000578:	681b      	ldr	r3, [r3, #0]
 800057a:	681a      	ldr	r2, [r3, #0]
 800057c:	2300      	movs	r3, #0
 800057e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000580:	e00e      	b.n	80005a0 <_MotorInit+0x108>
 8000582:	4b25      	ldr	r3, [pc, #148]	@ (8000618 <_MotorInit+0x180>)
 8000584:	685b      	ldr	r3, [r3, #4]
 8000586:	2b10      	cmp	r3, #16
 8000588:	d105      	bne.n	8000596 <_MotorInit+0xfe>
 800058a:	4b23      	ldr	r3, [pc, #140]	@ (8000618 <_MotorInit+0x180>)
 800058c:	681b      	ldr	r3, [r3, #0]
 800058e:	681a      	ldr	r2, [r3, #0]
 8000590:	2300      	movs	r3, #0
 8000592:	6593      	str	r3, [r2, #88]	@ 0x58
 8000594:	e004      	b.n	80005a0 <_MotorInit+0x108>
 8000596:	4b20      	ldr	r3, [pc, #128]	@ (8000618 <_MotorInit+0x180>)
 8000598:	681b      	ldr	r3, [r3, #0]
 800059a:	681a      	ldr	r2, [r3, #0]
 800059c:	2300      	movs	r3, #0
 800059e:	65d3      	str	r3, [r2, #92]	@ 0x5c
	__HAL_TIM_SET_COMPARE(_MotorSetting.__MotorN2_Tim, _MotorSetting.__MotorN2_TimChannel, 0);
 80005a0:	4b1d      	ldr	r3, [pc, #116]	@ (8000618 <_MotorInit+0x180>)
 80005a2:	68db      	ldr	r3, [r3, #12]
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	d105      	bne.n	80005b4 <_MotorInit+0x11c>
 80005a8:	4b1b      	ldr	r3, [pc, #108]	@ (8000618 <_MotorInit+0x180>)
 80005aa:	689b      	ldr	r3, [r3, #8]
 80005ac:	681b      	ldr	r3, [r3, #0]
 80005ae:	2200      	movs	r2, #0
 80005b0:	635a      	str	r2, [r3, #52]	@ 0x34
}
 80005b2:	e02c      	b.n	800060e <_MotorInit+0x176>
	__HAL_TIM_SET_COMPARE(_MotorSetting.__MotorN2_Tim, _MotorSetting.__MotorN2_TimChannel, 0);
 80005b4:	4b18      	ldr	r3, [pc, #96]	@ (8000618 <_MotorInit+0x180>)
 80005b6:	68db      	ldr	r3, [r3, #12]
 80005b8:	2b04      	cmp	r3, #4
 80005ba:	d105      	bne.n	80005c8 <_MotorInit+0x130>
 80005bc:	4b16      	ldr	r3, [pc, #88]	@ (8000618 <_MotorInit+0x180>)
 80005be:	689b      	ldr	r3, [r3, #8]
 80005c0:	681a      	ldr	r2, [r3, #0]
 80005c2:	2300      	movs	r3, #0
 80005c4:	6393      	str	r3, [r2, #56]	@ 0x38
}
 80005c6:	e022      	b.n	800060e <_MotorInit+0x176>
	__HAL_TIM_SET_COMPARE(_MotorSetting.__MotorN2_Tim, _MotorSetting.__MotorN2_TimChannel, 0);
 80005c8:	4b13      	ldr	r3, [pc, #76]	@ (8000618 <_MotorInit+0x180>)
 80005ca:	68db      	ldr	r3, [r3, #12]
 80005cc:	2b08      	cmp	r3, #8
 80005ce:	d105      	bne.n	80005dc <_MotorInit+0x144>
 80005d0:	4b11      	ldr	r3, [pc, #68]	@ (8000618 <_MotorInit+0x180>)
 80005d2:	689b      	ldr	r3, [r3, #8]
 80005d4:	681a      	ldr	r2, [r3, #0]
 80005d6:	2300      	movs	r3, #0
 80005d8:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 80005da:	e018      	b.n	800060e <_MotorInit+0x176>
	__HAL_TIM_SET_COMPARE(_MotorSetting.__MotorN2_Tim, _MotorSetting.__MotorN2_TimChannel, 0);
 80005dc:	4b0e      	ldr	r3, [pc, #56]	@ (8000618 <_MotorInit+0x180>)
 80005de:	68db      	ldr	r3, [r3, #12]
 80005e0:	2b0c      	cmp	r3, #12
 80005e2:	d105      	bne.n	80005f0 <_MotorInit+0x158>
 80005e4:	4b0c      	ldr	r3, [pc, #48]	@ (8000618 <_MotorInit+0x180>)
 80005e6:	689b      	ldr	r3, [r3, #8]
 80005e8:	681a      	ldr	r2, [r3, #0]
 80005ea:	2300      	movs	r3, #0
 80005ec:	6413      	str	r3, [r2, #64]	@ 0x40
}
 80005ee:	e00e      	b.n	800060e <_MotorInit+0x176>
	__HAL_TIM_SET_COMPARE(_MotorSetting.__MotorN2_Tim, _MotorSetting.__MotorN2_TimChannel, 0);
 80005f0:	4b09      	ldr	r3, [pc, #36]	@ (8000618 <_MotorInit+0x180>)
 80005f2:	68db      	ldr	r3, [r3, #12]
 80005f4:	2b10      	cmp	r3, #16
 80005f6:	d105      	bne.n	8000604 <_MotorInit+0x16c>
 80005f8:	4b07      	ldr	r3, [pc, #28]	@ (8000618 <_MotorInit+0x180>)
 80005fa:	689b      	ldr	r3, [r3, #8]
 80005fc:	681a      	ldr	r2, [r3, #0]
 80005fe:	2300      	movs	r3, #0
 8000600:	6593      	str	r3, [r2, #88]	@ 0x58
}
 8000602:	e004      	b.n	800060e <_MotorInit+0x176>
	__HAL_TIM_SET_COMPARE(_MotorSetting.__MotorN2_Tim, _MotorSetting.__MotorN2_TimChannel, 0);
 8000604:	4b04      	ldr	r3, [pc, #16]	@ (8000618 <_MotorInit+0x180>)
 8000606:	689b      	ldr	r3, [r3, #8]
 8000608:	681a      	ldr	r2, [r3, #0]
 800060a:	2300      	movs	r3, #0
 800060c:	65d3      	str	r3, [r2, #92]	@ 0x5c
}
 800060e:	bf00      	nop
 8000610:	3708      	adds	r7, #8
 8000612:	46bd      	mov	sp, r7
 8000614:	bd80      	pop	{r7, pc}
 8000616:	bf00      	nop
 8000618:	20000090 	.word	0x20000090

0800061c <_SwitchInit>:

#include "D-M-005/Switch.h"

_SWITCH_SETTING _SwitchSetting;

void _SwitchInit(_SWITCH_SETTING *__SwitchSetting){
 800061c:	b580      	push	{r7, lr}
 800061e:	b082      	sub	sp, #8
 8000620:	af00      	add	r7, sp, #0
 8000622:	6078      	str	r0, [r7, #4]
	_SwitchSetting.__ShiftRegisterClk_GpioPort = __SwitchSetting->__ShiftRegisterClk_GpioPort;
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	4a14      	ldr	r2, [pc, #80]	@ (800067c <_SwitchInit+0x60>)
 800062a:	6013      	str	r3, [r2, #0]
	_SwitchSetting.__ShiftRegisterClk_Pin = __SwitchSetting->__ShiftRegisterClk_Pin;
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	889a      	ldrh	r2, [r3, #4]
 8000630:	4b12      	ldr	r3, [pc, #72]	@ (800067c <_SwitchInit+0x60>)
 8000632:	809a      	strh	r2, [r3, #4]
	_SwitchSetting.__ShiftRegisterQh_GpioPort = __SwitchSetting->__ShiftRegisterQh_GpioPort;
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	691b      	ldr	r3, [r3, #16]
 8000638:	4a10      	ldr	r2, [pc, #64]	@ (800067c <_SwitchInit+0x60>)
 800063a:	6113      	str	r3, [r2, #16]
	_SwitchSetting.__ShiftRegisterQh_Pin = __SwitchSetting->__ShiftRegisterQh_Pin;
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	8a9a      	ldrh	r2, [r3, #20]
 8000640:	4b0e      	ldr	r3, [pc, #56]	@ (800067c <_SwitchInit+0x60>)
 8000642:	829a      	strh	r2, [r3, #20]
	_SwitchSetting.__ShiftRegisterShLd_GpioPort = __SwitchSetting->__ShiftRegisterShLd_GpioPort;
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	689b      	ldr	r3, [r3, #8]
 8000648:	4a0c      	ldr	r2, [pc, #48]	@ (800067c <_SwitchInit+0x60>)
 800064a:	6093      	str	r3, [r2, #8]
	_SwitchSetting.__ShiftRegisterShLd_Pin = __SwitchSetting->__ShiftRegisterShLd_Pin;
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	899a      	ldrh	r2, [r3, #12]
 8000650:	4b0a      	ldr	r3, [pc, #40]	@ (800067c <_SwitchInit+0x60>)
 8000652:	819a      	strh	r2, [r3, #12]

	HAL_GPIO_WritePin(_SwitchSetting.__ShiftRegisterClk_GpioPort, _SwitchSetting.__ShiftRegisterClk_Pin, GPIO_PIN_RESET);
 8000654:	4b09      	ldr	r3, [pc, #36]	@ (800067c <_SwitchInit+0x60>)
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	4a08      	ldr	r2, [pc, #32]	@ (800067c <_SwitchInit+0x60>)
 800065a:	8891      	ldrh	r1, [r2, #4]
 800065c:	2200      	movs	r2, #0
 800065e:	4618      	mov	r0, r3
 8000660:	f001 ffc0 	bl	80025e4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(_SwitchSetting.__ShiftRegisterShLd_GpioPort, _SwitchSetting.__ShiftRegisterShLd_Pin, GPIO_PIN_RESET);
 8000664:	4b05      	ldr	r3, [pc, #20]	@ (800067c <_SwitchInit+0x60>)
 8000666:	689b      	ldr	r3, [r3, #8]
 8000668:	4a04      	ldr	r2, [pc, #16]	@ (800067c <_SwitchInit+0x60>)
 800066a:	8991      	ldrh	r1, [r2, #12]
 800066c:	2200      	movs	r2, #0
 800066e:	4618      	mov	r0, r3
 8000670:	f001 ffb8 	bl	80025e4 <HAL_GPIO_WritePin>
}
 8000674:	bf00      	nop
 8000676:	3708      	adds	r7, #8
 8000678:	46bd      	mov	sp, r7
 800067a:	bd80      	pop	{r7, pc}
 800067c:	200000b4 	.word	0x200000b4

08000680 <_SwitchRead>:

void _SwitchRead(_SWITCH_READ_DATA *__SwitchReadData){
 8000680:	b580      	push	{r7, lr}
 8000682:	b084      	sub	sp, #16
 8000684:	af00      	add	r7, sp, #0
 8000686:	6078      	str	r0, [r7, #4]
	uint8_t _readSwData = 0;
 8000688:	2300      	movs	r3, #0
 800068a:	73fb      	strb	r3, [r7, #15]

	HAL_GPIO_WritePin(_SwitchSetting.__ShiftRegisterShLd_GpioPort, _SwitchSetting.__ShiftRegisterShLd_Pin, GPIO_PIN_RESET);
 800068c:	4b5a      	ldr	r3, [pc, #360]	@ (80007f8 <_SwitchRead+0x178>)
 800068e:	689b      	ldr	r3, [r3, #8]
 8000690:	4a59      	ldr	r2, [pc, #356]	@ (80007f8 <_SwitchRead+0x178>)
 8000692:	8991      	ldrh	r1, [r2, #12]
 8000694:	2200      	movs	r2, #0
 8000696:	4618      	mov	r0, r3
 8000698:	f001 ffa4 	bl	80025e4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(_SwitchSetting.__ShiftRegisterClk_GpioPort, _SwitchSetting.__ShiftRegisterClk_Pin, GPIO_PIN_SET);
 800069c:	4b56      	ldr	r3, [pc, #344]	@ (80007f8 <_SwitchRead+0x178>)
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	4a55      	ldr	r2, [pc, #340]	@ (80007f8 <_SwitchRead+0x178>)
 80006a2:	8891      	ldrh	r1, [r2, #4]
 80006a4:	2201      	movs	r2, #1
 80006a6:	4618      	mov	r0, r3
 80006a8:	f001 ff9c 	bl	80025e4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(_SwitchSetting.__ShiftRegisterClk_GpioPort, _SwitchSetting.__ShiftRegisterClk_Pin, GPIO_PIN_RESET);
 80006ac:	4b52      	ldr	r3, [pc, #328]	@ (80007f8 <_SwitchRead+0x178>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	4a51      	ldr	r2, [pc, #324]	@ (80007f8 <_SwitchRead+0x178>)
 80006b2:	8891      	ldrh	r1, [r2, #4]
 80006b4:	2200      	movs	r2, #0
 80006b6:	4618      	mov	r0, r3
 80006b8:	f001 ff94 	bl	80025e4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(_SwitchSetting.__ShiftRegisterShLd_GpioPort, _SwitchSetting.__ShiftRegisterShLd_Pin, GPIO_PIN_SET);
 80006bc:	4b4e      	ldr	r3, [pc, #312]	@ (80007f8 <_SwitchRead+0x178>)
 80006be:	689b      	ldr	r3, [r3, #8]
 80006c0:	4a4d      	ldr	r2, [pc, #308]	@ (80007f8 <_SwitchRead+0x178>)
 80006c2:	8991      	ldrh	r1, [r2, #12]
 80006c4:	2201      	movs	r2, #1
 80006c6:	4618      	mov	r0, r3
 80006c8:	f001 ff8c 	bl	80025e4 <HAL_GPIO_WritePin>

	_readSwData = _readSwData | (HAL_GPIO_ReadPin(_SwitchSetting.__ShiftRegisterQh_GpioPort, _SwitchSetting.__ShiftRegisterQh_Pin) << 7);
 80006cc:	4b4a      	ldr	r3, [pc, #296]	@ (80007f8 <_SwitchRead+0x178>)
 80006ce:	691b      	ldr	r3, [r3, #16]
 80006d0:	4a49      	ldr	r2, [pc, #292]	@ (80007f8 <_SwitchRead+0x178>)
 80006d2:	8a92      	ldrh	r2, [r2, #20]
 80006d4:	4611      	mov	r1, r2
 80006d6:	4618      	mov	r0, r3
 80006d8:	f001 ff6c 	bl	80025b4 <HAL_GPIO_ReadPin>
 80006dc:	4603      	mov	r3, r0
 80006de:	01db      	lsls	r3, r3, #7
 80006e0:	b25a      	sxtb	r2, r3
 80006e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80006e6:	4313      	orrs	r3, r2
 80006e8:	b25b      	sxtb	r3, r3
 80006ea:	73fb      	strb	r3, [r7, #15]
	for(int i = 6; i >= 0; i--){
 80006ec:	2306      	movs	r3, #6
 80006ee:	60bb      	str	r3, [r7, #8]
 80006f0:	e025      	b.n	800073e <_SwitchRead+0xbe>
		HAL_GPIO_WritePin(_SwitchSetting.__ShiftRegisterClk_GpioPort, _SwitchSetting.__ShiftRegisterClk_Pin, GPIO_PIN_SET);
 80006f2:	4b41      	ldr	r3, [pc, #260]	@ (80007f8 <_SwitchRead+0x178>)
 80006f4:	681b      	ldr	r3, [r3, #0]
 80006f6:	4a40      	ldr	r2, [pc, #256]	@ (80007f8 <_SwitchRead+0x178>)
 80006f8:	8891      	ldrh	r1, [r2, #4]
 80006fa:	2201      	movs	r2, #1
 80006fc:	4618      	mov	r0, r3
 80006fe:	f001 ff71 	bl	80025e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(_SwitchSetting.__ShiftRegisterClk_GpioPort, _SwitchSetting.__ShiftRegisterClk_Pin, GPIO_PIN_RESET);
 8000702:	4b3d      	ldr	r3, [pc, #244]	@ (80007f8 <_SwitchRead+0x178>)
 8000704:	681b      	ldr	r3, [r3, #0]
 8000706:	4a3c      	ldr	r2, [pc, #240]	@ (80007f8 <_SwitchRead+0x178>)
 8000708:	8891      	ldrh	r1, [r2, #4]
 800070a:	2200      	movs	r2, #0
 800070c:	4618      	mov	r0, r3
 800070e:	f001 ff69 	bl	80025e4 <HAL_GPIO_WritePin>

		_readSwData = _readSwData | (HAL_GPIO_ReadPin(_SwitchSetting.__ShiftRegisterQh_GpioPort, _SwitchSetting.__ShiftRegisterQh_Pin) << i);
 8000712:	4b39      	ldr	r3, [pc, #228]	@ (80007f8 <_SwitchRead+0x178>)
 8000714:	691b      	ldr	r3, [r3, #16]
 8000716:	4a38      	ldr	r2, [pc, #224]	@ (80007f8 <_SwitchRead+0x178>)
 8000718:	8a92      	ldrh	r2, [r2, #20]
 800071a:	4611      	mov	r1, r2
 800071c:	4618      	mov	r0, r3
 800071e:	f001 ff49 	bl	80025b4 <HAL_GPIO_ReadPin>
 8000722:	4603      	mov	r3, r0
 8000724:	461a      	mov	r2, r3
 8000726:	68bb      	ldr	r3, [r7, #8]
 8000728:	fa02 f303 	lsl.w	r3, r2, r3
 800072c:	b25a      	sxtb	r2, r3
 800072e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000732:	4313      	orrs	r3, r2
 8000734:	b25b      	sxtb	r3, r3
 8000736:	73fb      	strb	r3, [r7, #15]
	for(int i = 6; i >= 0; i--){
 8000738:	68bb      	ldr	r3, [r7, #8]
 800073a:	3b01      	subs	r3, #1
 800073c:	60bb      	str	r3, [r7, #8]
 800073e:	68bb      	ldr	r3, [r7, #8]
 8000740:	2b00      	cmp	r3, #0
 8000742:	dad6      	bge.n	80006f2 <_SwitchRead+0x72>
	}

	__SwitchReadData->_Address = 0;
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	2200      	movs	r2, #0
 8000748:	701a      	strb	r2, [r3, #0]
	__SwitchReadData->_Address |= (!!(_readSwData & (1U << __SWITCH_BIT_ADDRESS_4TH_DIGIT))) << 3;
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	781b      	ldrb	r3, [r3, #0]
 800074e:	b25a      	sxtb	r2, r3
 8000750:	7bfb      	ldrb	r3, [r7, #15]
 8000752:	00db      	lsls	r3, r3, #3
 8000754:	b25b      	sxtb	r3, r3
 8000756:	f003 0308 	and.w	r3, r3, #8
 800075a:	b25b      	sxtb	r3, r3
 800075c:	4313      	orrs	r3, r2
 800075e:	b25b      	sxtb	r3, r3
 8000760:	b2da      	uxtb	r2, r3
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	701a      	strb	r2, [r3, #0]
	__SwitchReadData->_Address |= (!!(_readSwData & (1U << __SWITCH_BIT_ADDRESS_3ND_DIGIT))) << 2;
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	781b      	ldrb	r3, [r3, #0]
 800076a:	b25a      	sxtb	r2, r3
 800076c:	7bfb      	ldrb	r3, [r7, #15]
 800076e:	005b      	lsls	r3, r3, #1
 8000770:	b25b      	sxtb	r3, r3
 8000772:	f003 0304 	and.w	r3, r3, #4
 8000776:	b25b      	sxtb	r3, r3
 8000778:	4313      	orrs	r3, r2
 800077a:	b25b      	sxtb	r3, r3
 800077c:	b2da      	uxtb	r2, r3
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	701a      	strb	r2, [r3, #0]
	__SwitchReadData->_Address |= (!!(_readSwData & (1U << __SWITCH_BIT_ADDRESS_2ND_DIGIT))) << 1;
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	781b      	ldrb	r3, [r3, #0]
 8000786:	b25a      	sxtb	r2, r3
 8000788:	7bfb      	ldrb	r3, [r7, #15]
 800078a:	085b      	lsrs	r3, r3, #1
 800078c:	b25b      	sxtb	r3, r3
 800078e:	f003 0302 	and.w	r3, r3, #2
 8000792:	b25b      	sxtb	r3, r3
 8000794:	4313      	orrs	r3, r2
 8000796:	b25b      	sxtb	r3, r3
 8000798:	b2da      	uxtb	r2, r3
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	701a      	strb	r2, [r3, #0]
	__SwitchReadData->_Address |= (!!(_readSwData & (1U << __SWITCH_BIT_ADDRESS_1ST_DIGIT))) << 0;
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	781b      	ldrb	r3, [r3, #0]
 80007a2:	b25a      	sxtb	r2, r3
 80007a4:	7bfb      	ldrb	r3, [r7, #15]
 80007a6:	f003 0308 	and.w	r3, r3, #8
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	bf14      	ite	ne
 80007ae:	2301      	movne	r3, #1
 80007b0:	2300      	moveq	r3, #0
 80007b2:	b2db      	uxtb	r3, r3
 80007b4:	b25b      	sxtb	r3, r3
 80007b6:	4313      	orrs	r3, r2
 80007b8:	b25b      	sxtb	r3, r3
 80007ba:	b2da      	uxtb	r2, r3
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	701a      	strb	r2, [r3, #0]

	if(!!!(_readSwData & (1U << __SWITCH_BIT_OPERATION_MODE)))
 80007c0:	7bfb      	ldrb	r3, [r7, #15]
 80007c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d103      	bne.n	80007d2 <_SwitchRead+0x152>
		__SwitchReadData->_OperatingMode = _SWITCH_OPERATION_MODE_NORMAL;
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	2200      	movs	r2, #0
 80007ce:	705a      	strb	r2, [r3, #1]
 80007d0:	e002      	b.n	80007d8 <_SwitchRead+0x158>
	else
		__SwitchReadData->_OperatingMode = _SWITCH_OPERATION_MODE_PC_CONSOLE;
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	2201      	movs	r2, #1
 80007d6:	705a      	strb	r2, [r3, #1]

	if(!!(_readSwData & (1U << __SWITCH_BIT_COMMUNICATION_MODE)))
 80007d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007dc:	2b00      	cmp	r3, #0
 80007de:	da03      	bge.n	80007e8 <_SwitchRead+0x168>
		__SwitchReadData->_CommunicationMode = _SWITCH_COMMUNICATION_MODE_CAN;
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	2200      	movs	r2, #0
 80007e4:	709a      	strb	r2, [r3, #2]
	else
		__SwitchReadData->_CommunicationMode = _SWITCH_COMMUNICATION_MODE_UART;
}
 80007e6:	e002      	b.n	80007ee <_SwitchRead+0x16e>
		__SwitchReadData->_CommunicationMode = _SWITCH_COMMUNICATION_MODE_UART;
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	2201      	movs	r2, #1
 80007ec:	709a      	strb	r2, [r3, #2]
}
 80007ee:	bf00      	nop
 80007f0:	3710      	adds	r7, #16
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bd80      	pop	{r7, pc}
 80007f6:	bf00      	nop
 80007f8:	200000b4 	.word	0x200000b4

080007fc <_AccurateDelay>:
 */


#include "D-M-005/Utility.h"

uint32_t _AccurateDelay(uint32_t _ms, uint32_t _lastGetTick){
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b084      	sub	sp, #16
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
 8000804:	6039      	str	r1, [r7, #0]
	uint32_t _nowTick = HAL_GetTick();
 8000806:	f001 facd 	bl	8001da4 <HAL_GetTick>
 800080a:	60f8      	str	r0, [r7, #12]

	while((_nowTick - _lastGetTick) <= _ms){
 800080c:	e002      	b.n	8000814 <_AccurateDelay+0x18>
		_nowTick = HAL_GetTick();
 800080e:	f001 fac9 	bl	8001da4 <HAL_GetTick>
 8000812:	60f8      	str	r0, [r7, #12]
	while((_nowTick - _lastGetTick) <= _ms){
 8000814:	68fa      	ldr	r2, [r7, #12]
 8000816:	683b      	ldr	r3, [r7, #0]
 8000818:	1ad3      	subs	r3, r2, r3
 800081a:	687a      	ldr	r2, [r7, #4]
 800081c:	429a      	cmp	r2, r3
 800081e:	d2f6      	bcs.n	800080e <_AccurateDelay+0x12>
	}

	return _nowTick;
 8000820:	68fb      	ldr	r3, [r7, #12]
}
 8000822:	4618      	mov	r0, r3
 8000824:	3710      	adds	r7, #16
 8000826:	46bd      	mov	sp, r7
 8000828:	bd80      	pop	{r7, pc}
	...

0800082c <_CommandInit>:
_CONSOLE_COMMAND _consoleCommand_pid;

char testCommandStr[_CONSOLE_COMMAND_AND_MODE_STRING_MAX_LENGTH];
char testModeStr[_CONSOLE_COMMAND_AND_MODE_STRING_MAX_LENGTH];

void _CommandInit(){
 800082c:	b480      	push	{r7}
 800082e:	af00      	add	r7, sp, #0
	_consoleCommand_motor._command = _CONSOLE_COMMAND_MOTOR;
 8000830:	4b1d      	ldr	r3, [pc, #116]	@ (80008a8 <_CommandInit+0x7c>)
 8000832:	2200      	movs	r2, #0
 8000834:	701a      	strb	r2, [r3, #0]
	strcpy(_consoleCommand_motor._commandString, "motor");
 8000836:	4b1d      	ldr	r3, [pc, #116]	@ (80008ac <_CommandInit+0x80>)
 8000838:	4a1d      	ldr	r2, [pc, #116]	@ (80008b0 <_CommandInit+0x84>)
 800083a:	6810      	ldr	r0, [r2, #0]
 800083c:	6018      	str	r0, [r3, #0]
 800083e:	8892      	ldrh	r2, [r2, #4]
 8000840:	809a      	strh	r2, [r3, #4]
	strcpy(_consoleCommand_motor._modeString[_CONSOLE_MOTOR_MODE_NEUTRAL], "neutral");
 8000842:	4a1c      	ldr	r2, [pc, #112]	@ (80008b4 <_CommandInit+0x88>)
 8000844:	4b1c      	ldr	r3, [pc, #112]	@ (80008b8 <_CommandInit+0x8c>)
 8000846:	cb03      	ldmia	r3!, {r0, r1}
 8000848:	6010      	str	r0, [r2, #0]
 800084a:	6051      	str	r1, [r2, #4]
	strcpy(_consoleCommand_motor._modeString[_CONSOLE_MOTOR_MODE_BRAKE], "brake");
 800084c:	4b1b      	ldr	r3, [pc, #108]	@ (80008bc <_CommandInit+0x90>)
 800084e:	4a1c      	ldr	r2, [pc, #112]	@ (80008c0 <_CommandInit+0x94>)
 8000850:	6810      	ldr	r0, [r2, #0]
 8000852:	6018      	str	r0, [r3, #0]
 8000854:	8892      	ldrh	r2, [r2, #4]
 8000856:	809a      	strh	r2, [r3, #4]
	strcpy(_consoleCommand_motor._modeString[_CONSOLE_MOTOR_MODE_FORWARD], "forward");
 8000858:	4a1a      	ldr	r2, [pc, #104]	@ (80008c4 <_CommandInit+0x98>)
 800085a:	4b1b      	ldr	r3, [pc, #108]	@ (80008c8 <_CommandInit+0x9c>)
 800085c:	cb03      	ldmia	r3!, {r0, r1}
 800085e:	6010      	str	r0, [r2, #0]
 8000860:	6051      	str	r1, [r2, #4]
	strcpy(_consoleCommand_motor._modeString[_CONSOLE_MOTOR_MODE_BACKWARD], "backward");
 8000862:	4a1a      	ldr	r2, [pc, #104]	@ (80008cc <_CommandInit+0xa0>)
 8000864:	4b1a      	ldr	r3, [pc, #104]	@ (80008d0 <_CommandInit+0xa4>)
 8000866:	cb03      	ldmia	r3!, {r0, r1}
 8000868:	6010      	str	r0, [r2, #0]
 800086a:	6051      	str	r1, [r2, #4]
 800086c:	781b      	ldrb	r3, [r3, #0]
 800086e:	7213      	strb	r3, [r2, #8]
	strcpy(_consoleCommand_motor._modeString[_CONSOLE_MOTOR_MODE_CHECK], "check");
 8000870:	4b18      	ldr	r3, [pc, #96]	@ (80008d4 <_CommandInit+0xa8>)
 8000872:	4a19      	ldr	r2, [pc, #100]	@ (80008d8 <_CommandInit+0xac>)
 8000874:	6810      	ldr	r0, [r2, #0]
 8000876:	6018      	str	r0, [r3, #0]
 8000878:	8892      	ldrh	r2, [r2, #4]
 800087a:	809a      	strh	r2, [r3, #4]

	_consoleCommand_motor._command = _CONSOLE_COMMAND_PID;
 800087c:	4b0a      	ldr	r3, [pc, #40]	@ (80008a8 <_CommandInit+0x7c>)
 800087e:	2201      	movs	r2, #1
 8000880:	701a      	strb	r2, [r3, #0]
	strcpy(_consoleCommand_pid._commandString, "pid");
 8000882:	4b16      	ldr	r3, [pc, #88]	@ (80008dc <_CommandInit+0xb0>)
 8000884:	4a16      	ldr	r2, [pc, #88]	@ (80008e0 <_CommandInit+0xb4>)
 8000886:	6810      	ldr	r0, [r2, #0]
 8000888:	6018      	str	r0, [r3, #0]
	strcpy(_consoleCommand_pid._modeString[_CONSOLE_PID_MODE_SET], "set");
 800088a:	4b16      	ldr	r3, [pc, #88]	@ (80008e4 <_CommandInit+0xb8>)
 800088c:	4a16      	ldr	r2, [pc, #88]	@ (80008e8 <_CommandInit+0xbc>)
 800088e:	6810      	ldr	r0, [r2, #0]
 8000890:	6018      	str	r0, [r3, #0]
	strcpy(_consoleCommand_pid._modeString[_CONSOLE_PID_MODE_CHECK], "check");
 8000892:	4b16      	ldr	r3, [pc, #88]	@ (80008ec <_CommandInit+0xc0>)
 8000894:	4a10      	ldr	r2, [pc, #64]	@ (80008d8 <_CommandInit+0xac>)
 8000896:	6810      	ldr	r0, [r2, #0]
 8000898:	6018      	str	r0, [r3, #0]
 800089a:	8892      	ldrh	r2, [r2, #4]
 800089c:	809a      	strh	r2, [r3, #4]
}
 800089e:	bf00      	nop
 80008a0:	46bd      	mov	sp, r7
 80008a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a6:	4770      	bx	lr
 80008a8:	200000cc 	.word	0x200000cc
 80008ac:	200000cd 	.word	0x200000cd
 80008b0:	08006964 	.word	0x08006964
 80008b4:	200000ed 	.word	0x200000ed
 80008b8:	0800696c 	.word	0x0800696c
 80008bc:	2000010d 	.word	0x2000010d
 80008c0:	08006974 	.word	0x08006974
 80008c4:	2000012d 	.word	0x2000012d
 80008c8:	0800697c 	.word	0x0800697c
 80008cc:	2000014d 	.word	0x2000014d
 80008d0:	08006984 	.word	0x08006984
 80008d4:	2000016d 	.word	0x2000016d
 80008d8:	08006990 	.word	0x08006990
 80008dc:	200004f1 	.word	0x200004f1
 80008e0:	08006998 	.word	0x08006998
 80008e4:	20000511 	.word	0x20000511
 80008e8:	0800699c 	.word	0x0800699c
 80008ec:	20000531 	.word	0x20000531

080008f0 <_CommandCollation>:

bool _CommandCollation(char _str[], _CONSOLE_COMMAND_RESULT *_commandResult){
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b094      	sub	sp, #80	@ 0x50
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	6078      	str	r0, [r7, #4]
 80008f8:	6039      	str	r1, [r7, #0]
	char _commandString[_CONSOLE_COMMAND_AND_MODE_STRING_MAX_LENGTH];
	char _modeString[_CONSOLE_COMMAND_AND_MODE_STRING_MAX_LENGTH];

	uint8_t _strCount = 0;
 80008fa:	2300      	movs	r3, #0
 80008fc:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

	while(1){
		if(_str[_strCount] == ' ' || _str[_strCount] == '\0'){
 8000900:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8000904:	687a      	ldr	r2, [r7, #4]
 8000906:	4413      	add	r3, r2
 8000908:	781b      	ldrb	r3, [r3, #0]
 800090a:	2b20      	cmp	r3, #32
 800090c:	d006      	beq.n	800091c <_CommandCollation+0x2c>
 800090e:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8000912:	687a      	ldr	r2, [r7, #4]
 8000914:	4413      	add	r3, r2
 8000916:	781b      	ldrb	r3, [r3, #0]
 8000918:	2b00      	cmp	r3, #0
 800091a:	d111      	bne.n	8000940 <_CommandCollation+0x50>
			_commandString[_strCount] = '\0';
 800091c:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8000920:	3350      	adds	r3, #80	@ 0x50
 8000922:	443b      	add	r3, r7
 8000924:	2200      	movs	r2, #0
 8000926:	f803 2c24 	strb.w	r2, [r3, #-36]
			break;
 800092a:	bf00      	nop

		_commandString[_strCount] = _str[_strCount];
		_strCount++;
	}

	if(strcmp(_commandString, _consoleCommand_motor._commandString) == 0)
 800092c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000930:	4966      	ldr	r1, [pc, #408]	@ (8000acc <_CommandCollation+0x1dc>)
 8000932:	4618      	mov	r0, r3
 8000934:	f7ff fc4c 	bl	80001d0 <strcmp>
 8000938:	4603      	mov	r3, r0
 800093a:	2b00      	cmp	r3, #0
 800093c:	d115      	bne.n	800096a <_CommandCollation+0x7a>
 800093e:	e010      	b.n	8000962 <_CommandCollation+0x72>
		_commandString[_strCount] = _str[_strCount];
 8000940:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8000944:	687a      	ldr	r2, [r7, #4]
 8000946:	441a      	add	r2, r3
 8000948:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800094c:	7812      	ldrb	r2, [r2, #0]
 800094e:	3350      	adds	r3, #80	@ 0x50
 8000950:	443b      	add	r3, r7
 8000952:	f803 2c24 	strb.w	r2, [r3, #-36]
		_strCount++;
 8000956:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800095a:	3301      	adds	r3, #1
 800095c:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
		if(_str[_strCount] == ' ' || _str[_strCount] == '\0'){
 8000960:	e7ce      	b.n	8000900 <_CommandCollation+0x10>
		_commandResult->_command = _CONSOLE_COMMAND_MOTOR;
 8000962:	683b      	ldr	r3, [r7, #0]
 8000964:	2200      	movs	r2, #0
 8000966:	701a      	strb	r2, [r3, #0]
 8000968:	e00e      	b.n	8000988 <_CommandCollation+0x98>
	else if(strcmp(_commandString, _consoleCommand_pid._commandString) == 0)
 800096a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800096e:	4958      	ldr	r1, [pc, #352]	@ (8000ad0 <_CommandCollation+0x1e0>)
 8000970:	4618      	mov	r0, r3
 8000972:	f7ff fc2d 	bl	80001d0 <strcmp>
 8000976:	4603      	mov	r3, r0
 8000978:	2b00      	cmp	r3, #0
 800097a:	d103      	bne.n	8000984 <_CommandCollation+0x94>
		_commandResult->_command = _CONSOLE_COMMAND_PID;
 800097c:	683b      	ldr	r3, [r7, #0]
 800097e:	2201      	movs	r2, #1
 8000980:	701a      	strb	r2, [r3, #0]
 8000982:	e001      	b.n	8000988 <_CommandCollation+0x98>
	else
		return false;
 8000984:	2300      	movs	r3, #0
 8000986:	e09d      	b.n	8000ac4 <_CommandCollation+0x1d4>

	uint8_t _modeStringCount = 0;
 8000988:	2300      	movs	r3, #0
 800098a:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
	if(_str[_strCount] != '\0'){
 800098e:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8000992:	687a      	ldr	r2, [r7, #4]
 8000994:	4413      	add	r3, r2
 8000996:	781b      	ldrb	r3, [r3, #0]
 8000998:	2b00      	cmp	r3, #0
 800099a:	f000 808c 	beq.w	8000ab6 <_CommandCollation+0x1c6>
		_strCount++;
 800099e:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80009a2:	3301      	adds	r3, #1
 80009a4:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

		while(1){
			if(_str[_strCount] == ' ' || _str[_strCount] == '\0'){
 80009a8:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80009ac:	687a      	ldr	r2, [r7, #4]
 80009ae:	4413      	add	r3, r2
 80009b0:	781b      	ldrb	r3, [r3, #0]
 80009b2:	2b20      	cmp	r3, #32
 80009b4:	d006      	beq.n	80009c4 <_CommandCollation+0xd4>
 80009b6:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80009ba:	687a      	ldr	r2, [r7, #4]
 80009bc:	4413      	add	r3, r2
 80009be:	781b      	ldrb	r3, [r3, #0]
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d10c      	bne.n	80009de <_CommandCollation+0xee>
				_modeString[_modeStringCount] = '\0';
 80009c4:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 80009c8:	3350      	adds	r3, #80	@ 0x50
 80009ca:	443b      	add	r3, r7
 80009cc:	2200      	movs	r2, #0
 80009ce:	f803 2c44 	strb.w	r2, [r3, #-68]
				break;
 80009d2:	bf00      	nop
			_modeString[_modeStringCount] = _str[_strCount];
			_modeStringCount++;
			_strCount++;
		}

		if(_commandResult->_command == _CONSOLE_COMMAND_MOTOR){
 80009d4:	683b      	ldr	r3, [r7, #0]
 80009d6:	781b      	ldrb	r3, [r3, #0]
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d13e      	bne.n	8000a5a <_CommandCollation+0x16a>
 80009dc:	e015      	b.n	8000a0a <_CommandCollation+0x11a>
			_modeString[_modeStringCount] = _str[_strCount];
 80009de:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80009e2:	687a      	ldr	r2, [r7, #4]
 80009e4:	441a      	add	r2, r3
 80009e6:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 80009ea:	7812      	ldrb	r2, [r2, #0]
 80009ec:	3350      	adds	r3, #80	@ 0x50
 80009ee:	443b      	add	r3, r7
 80009f0:	f803 2c44 	strb.w	r2, [r3, #-68]
			_modeStringCount++;
 80009f4:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 80009f8:	3301      	adds	r3, #1
 80009fa:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
			_strCount++;
 80009fe:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8000a02:	3301      	adds	r3, #1
 8000a04:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
			if(_str[_strCount] == ' ' || _str[_strCount] == '\0'){
 8000a08:	e7ce      	b.n	80009a8 <_CommandCollation+0xb8>
			__CONSOLE_MODE _consoleModeCount = _CONSOLE_MOTOR_MODE_CHECK;
 8000a0a:	2304      	movs	r3, #4
 8000a0c:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d

			while(1){
				if(strcmp(_modeString, _consoleCommand_motor._modeString[_consoleModeCount]) == 0)
 8000a10:	f997 304d 	ldrsb.w	r3, [r7, #77]	@ 0x4d
 8000a14:	3301      	adds	r3, #1
 8000a16:	015b      	lsls	r3, r3, #5
 8000a18:	4a2e      	ldr	r2, [pc, #184]	@ (8000ad4 <_CommandCollation+0x1e4>)
 8000a1a:	4413      	add	r3, r2
 8000a1c:	1c5a      	adds	r2, r3, #1
 8000a1e:	f107 030c 	add.w	r3, r7, #12
 8000a22:	4611      	mov	r1, r2
 8000a24:	4618      	mov	r0, r3
 8000a26:	f7ff fbd3 	bl	80001d0 <strcmp>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d00d      	beq.n	8000a4c <_CommandCollation+0x15c>
					break;

				if(_consoleModeCount <= _CONSOLE_MOTOR_MODE_NEUTRAL)
 8000a30:	f997 304d 	ldrsb.w	r3, [r7, #77]	@ 0x4d
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	dc01      	bgt.n	8000a3c <_CommandCollation+0x14c>
					return false;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	e043      	b.n	8000ac4 <_CommandCollation+0x1d4>
				_consoleModeCount--;
 8000a3c:	f997 304d 	ldrsb.w	r3, [r7, #77]	@ 0x4d
 8000a40:	b2db      	uxtb	r3, r3
 8000a42:	3b01      	subs	r3, #1
 8000a44:	b2db      	uxtb	r3, r3
 8000a46:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d
				if(strcmp(_modeString, _consoleCommand_motor._modeString[_consoleModeCount]) == 0)
 8000a4a:	e7e1      	b.n	8000a10 <_CommandCollation+0x120>
					break;
 8000a4c:	bf00      	nop
			}

			_commandResult->_mode = _consoleModeCount;
 8000a4e:	683b      	ldr	r3, [r7, #0]
 8000a50:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8000a54:	705a      	strb	r2, [r3, #1]

			return true;
 8000a56:	2301      	movs	r3, #1
 8000a58:	e034      	b.n	8000ac4 <_CommandCollation+0x1d4>
		}else if(_commandResult->_command == _CONSOLE_COMMAND_PID){
 8000a5a:	683b      	ldr	r3, [r7, #0]
 8000a5c:	781b      	ldrb	r3, [r3, #0]
 8000a5e:	2b01      	cmp	r3, #1
 8000a60:	d127      	bne.n	8000ab2 <_CommandCollation+0x1c2>
			__CONSOLE_MODE _consoleModeCount = _CONSOLE_PID_MODE_CHECK;
 8000a62:	2301      	movs	r3, #1
 8000a64:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c

			while(1){
				if(strcmp(_modeString, _consoleCommand_pid._modeString[_consoleModeCount]) == 0)
 8000a68:	f997 304c 	ldrsb.w	r3, [r7, #76]	@ 0x4c
 8000a6c:	3301      	adds	r3, #1
 8000a6e:	015b      	lsls	r3, r3, #5
 8000a70:	4a19      	ldr	r2, [pc, #100]	@ (8000ad8 <_CommandCollation+0x1e8>)
 8000a72:	4413      	add	r3, r2
 8000a74:	1c5a      	adds	r2, r3, #1
 8000a76:	f107 030c 	add.w	r3, r7, #12
 8000a7a:	4611      	mov	r1, r2
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	f7ff fba7 	bl	80001d0 <strcmp>
 8000a82:	4603      	mov	r3, r0
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d00d      	beq.n	8000aa4 <_CommandCollation+0x1b4>
					break;

				if(_consoleModeCount <= _CONSOLE_PID_MODE_SET)
 8000a88:	f997 304c 	ldrsb.w	r3, [r7, #76]	@ 0x4c
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	dc01      	bgt.n	8000a94 <_CommandCollation+0x1a4>
					return false;
 8000a90:	2300      	movs	r3, #0
 8000a92:	e017      	b.n	8000ac4 <_CommandCollation+0x1d4>
				_consoleModeCount--;
 8000a94:	f997 304c 	ldrsb.w	r3, [r7, #76]	@ 0x4c
 8000a98:	b2db      	uxtb	r3, r3
 8000a9a:	3b01      	subs	r3, #1
 8000a9c:	b2db      	uxtb	r3, r3
 8000a9e:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
				if(strcmp(_modeString, _consoleCommand_pid._modeString[_consoleModeCount]) == 0)
 8000aa2:	e7e1      	b.n	8000a68 <_CommandCollation+0x178>
					break;
 8000aa4:	bf00      	nop
			}

			_commandResult->_mode = _consoleModeCount;
 8000aa6:	683b      	ldr	r3, [r7, #0]
 8000aa8:	f897 204c 	ldrb.w	r2, [r7, #76]	@ 0x4c
 8000aac:	705a      	strb	r2, [r3, #1]

			return true;
 8000aae:	2301      	movs	r3, #1
 8000ab0:	e008      	b.n	8000ac4 <_CommandCollation+0x1d4>
		}else{
			return false;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	e006      	b.n	8000ac4 <_CommandCollation+0x1d4>
		}
	}else{
		if(_commandResult->_command == _CONSOLE_COMMAND_MOTOR)
 8000ab6:	683b      	ldr	r3, [r7, #0]
 8000ab8:	781b      	ldrb	r3, [r3, #0]
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d101      	bne.n	8000ac2 <_CommandCollation+0x1d2>
			return false;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	e000      	b.n	8000ac4 <_CommandCollation+0x1d4>
		else
			return true;
 8000ac2:	2301      	movs	r3, #1
	}
}
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	3750      	adds	r7, #80	@ 0x50
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	bd80      	pop	{r7, pc}
 8000acc:	200000cd 	.word	0x200000cd
 8000ad0:	200004f1 	.word	0x200004f1
 8000ad4:	200000cc 	.word	0x200000cc
 8000ad8:	200004f0 	.word	0x200004f0

08000adc <_ConsoleInit>:

_CONSOLE_COMMAND_RESULT _ConsoleCommandResult;

char _ConsoleReadString[__CONSOLE_STRING_LENGTH];

void _ConsoleInit(_CONSOLE_SETTING *__ConsoleSetting){
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b082      	sub	sp, #8
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
	_ConsoleSetting.__PcUart = __ConsoleSetting->__PcUart;
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	4a06      	ldr	r2, [pc, #24]	@ (8000b04 <_ConsoleInit+0x28>)
 8000aea:	6013      	str	r3, [r2, #0]

	DprintfInit(_ConsoleSetting.__PcUart);
 8000aec:	4b05      	ldr	r3, [pc, #20]	@ (8000b04 <_ConsoleInit+0x28>)
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	4618      	mov	r0, r3
 8000af2:	f000 f8fd 	bl	8000cf0 <DprintfInit>
	_CommandInit();
 8000af6:	f7ff fe99 	bl	800082c <_CommandInit>
}
 8000afa:	bf00      	nop
 8000afc:	3708      	adds	r7, #8
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bd80      	pop	{r7, pc}
 8000b02:	bf00      	nop
 8000b04:	20000914 	.word	0x20000914

08000b08 <_ConsoleStartLogo>:

void _ConsoleStartLogo(){
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	af00      	add	r7, sp, #0
	Dprintf("============================================================================================================\r\n");
 8000b0c:	482d      	ldr	r0, [pc, #180]	@ (8000bc4 <_ConsoleStartLogo+0xbc>)
 8000b0e:	f000 f8ff 	bl	8000d10 <Dprintf>
	Dprintf("============================================================================================================\r\n");
 8000b12:	482c      	ldr	r0, [pc, #176]	@ (8000bc4 <_ConsoleStartLogo+0xbc>)
 8000b14:	f000 f8fc 	bl	8000d10 <Dprintf>
	Dprintf("              _____                    _____                   _______                   _____          \r\n");
 8000b18:	482b      	ldr	r0, [pc, #172]	@ (8000bc8 <_ConsoleStartLogo+0xc0>)
 8000b1a:	f000 f8f9 	bl	8000d10 <Dprintf>
	Dprintf("             /\\    \\                  /\\    \\                 /::\\    \\                 /\\    \\         \r\n");
 8000b1e:	482b      	ldr	r0, [pc, #172]	@ (8000bcc <_ConsoleStartLogo+0xc4>)
 8000b20:	f000 f8f6 	bl	8000d10 <Dprintf>
	Dprintf("            /::\\    \\                /::\\____\\               /::::\\    \\               /::\\    \\        \r\n");
 8000b24:	482a      	ldr	r0, [pc, #168]	@ (8000bd0 <_ConsoleStartLogo+0xc8>)
 8000b26:	f000 f8f3 	bl	8000d10 <Dprintf>
	Dprintf("           /::::\\    \\              /::::|   |              /::::::\\    \\             /::::\\    \\       \r\n");
 8000b2a:	482a      	ldr	r0, [pc, #168]	@ (8000bd4 <_ConsoleStartLogo+0xcc>)
 8000b2c:	f000 f8f0 	bl	8000d10 <Dprintf>
	Dprintf("          /::::::\\    \\            /:::::|   |             /::::::::\\    \\           /::::::\\    \\      \r\n");
 8000b30:	4829      	ldr	r0, [pc, #164]	@ (8000bd8 <_ConsoleStartLogo+0xd0>)
 8000b32:	f000 f8ed 	bl	8000d10 <Dprintf>
	Dprintf("         /:::/\\:::\\    \\          /::::::|   |            /:::/~~\\:::\\    \\         /:::/\\:::\\    \\     \r\n");
 8000b36:	4829      	ldr	r0, [pc, #164]	@ (8000bdc <_ConsoleStartLogo+0xd4>)
 8000b38:	f000 f8ea 	bl	8000d10 <Dprintf>
	Dprintf("        /:::/  \\:::\\    \\        /:::/|::|   |           /:::/    \\:::\\    \\       /:::/__\\:::\\    \\    \r\n");
 8000b3c:	4828      	ldr	r0, [pc, #160]	@ (8000be0 <_ConsoleStartLogo+0xd8>)
 8000b3e:	f000 f8e7 	bl	8000d10 <Dprintf>
	Dprintf("       /:::/    \\:::\\    \\      /:::/ |::|   |          /:::/    / \\:::\\    \\      \\:::\\   \\:::\\    \\   \r\n");
 8000b42:	4828      	ldr	r0, [pc, #160]	@ (8000be4 <_ConsoleStartLogo+0xdc>)
 8000b44:	f000 f8e4 	bl	8000d10 <Dprintf>
	Dprintf("      /:::/    / \\:::\\    \\    /:::/  |::|___|______   /:::/____/   \\:::\\____\\   ___\\:::\\   \\:::\\    \\  \r\n");
 8000b48:	4827      	ldr	r0, [pc, #156]	@ (8000be8 <_ConsoleStartLogo+0xe0>)
 8000b4a:	f000 f8e1 	bl	8000d10 <Dprintf>
	Dprintf("     /:::/    /   \\:::\\ ___\\  /:::/   |::::::::\\    \\ |:::|    |     |:::|    | /\\   \\:::\\   \\:::\\    \\ \r\n");
 8000b4e:	4827      	ldr	r0, [pc, #156]	@ (8000bec <_ConsoleStartLogo+0xe4>)
 8000b50:	f000 f8de 	bl	8000d10 <Dprintf>
	Dprintf("    /:::/____/     \\:::|    |/:::/    |:::::::::\\____\\|:::|____|     |:::|    |/::\\   \\:::\\   \\:::\\____\\\r\n");
 8000b54:	4826      	ldr	r0, [pc, #152]	@ (8000bf0 <_ConsoleStartLogo+0xe8>)
 8000b56:	f000 f8db 	bl	8000d10 <Dprintf>
	Dprintf("    \\:::\\    \\     /:::|____|\\::/    / ~~~~~/:::/    / \\:::\\    \\   /:::/    / \\:::\\   \\:::\\   \\::/    /\r\n");
 8000b5a:	4826      	ldr	r0, [pc, #152]	@ (8000bf4 <_ConsoleStartLogo+0xec>)
 8000b5c:	f000 f8d8 	bl	8000d10 <Dprintf>
	Dprintf("     \\:::\\    \\   /:::/    /  \\/____/      /:::/    /   \\:::\\    \\ /:::/    /   \\:::\\   \\:::\\   \\/____/ \r\n");
 8000b60:	4825      	ldr	r0, [pc, #148]	@ (8000bf8 <_ConsoleStartLogo+0xf0>)
 8000b62:	f000 f8d5 	bl	8000d10 <Dprintf>
	Dprintf("      \\:::\\    \\ /:::/    /               /:::/    /     \\:::\\    /:::/    /     \\:::\\   \\:::\\    \\     \r\n");
 8000b66:	4825      	ldr	r0, [pc, #148]	@ (8000bfc <_ConsoleStartLogo+0xf4>)
 8000b68:	f000 f8d2 	bl	8000d10 <Dprintf>
	Dprintf("       \\:::\\    /:::/    /               /:::/    /       \\:::\\__/:::/    /       \\:::\\   \\:::\\____\\    \r\n");
 8000b6c:	4824      	ldr	r0, [pc, #144]	@ (8000c00 <_ConsoleStartLogo+0xf8>)
 8000b6e:	f000 f8cf 	bl	8000d10 <Dprintf>
	Dprintf("        \\:::\\  /:::/    /               /:::/    /         \\::::::::/    /         \\:::\\  /:::/    /    \r\n");
 8000b72:	4824      	ldr	r0, [pc, #144]	@ (8000c04 <_ConsoleStartLogo+0xfc>)
 8000b74:	f000 f8cc 	bl	8000d10 <Dprintf>
	Dprintf("         \\:::\\/:::/    /               /:::/    /           \\::::::/    /           \\:::\\/:::/    /     \r\n");
 8000b78:	4823      	ldr	r0, [pc, #140]	@ (8000c08 <_ConsoleStartLogo+0x100>)
 8000b7a:	f000 f8c9 	bl	8000d10 <Dprintf>
	Dprintf("          \\::::::/    /               /:::/    /             \\::::/    /             \\::::::/    /      \r\n");
 8000b7e:	4823      	ldr	r0, [pc, #140]	@ (8000c0c <_ConsoleStartLogo+0x104>)
 8000b80:	f000 f8c6 	bl	8000d10 <Dprintf>
	Dprintf("           \\::::/    /               /:::/    /               \\::/____/               \\::::/    /       \r\n");
 8000b84:	4822      	ldr	r0, [pc, #136]	@ (8000c10 <_ConsoleStartLogo+0x108>)
 8000b86:	f000 f8c3 	bl	8000d10 <Dprintf>
	Dprintf("            \\::/____/                \\::/    /                 ~~                      \\::/    /        \r\n");
 8000b8a:	4822      	ldr	r0, [pc, #136]	@ (8000c14 <_ConsoleStartLogo+0x10c>)
 8000b8c:	f000 f8c0 	bl	8000d10 <Dprintf>
	Dprintf("             ~~                       \\/____/                                           \\/____/         \r\n");
 8000b90:	4821      	ldr	r0, [pc, #132]	@ (8000c18 <_ConsoleStartLogo+0x110>)
 8000b92:	f000 f8bd 	bl	8000d10 <Dprintf>
	Dprintf("============================================================================================================\r\n");
 8000b96:	480b      	ldr	r0, [pc, #44]	@ (8000bc4 <_ConsoleStartLogo+0xbc>)
 8000b98:	f000 f8ba 	bl	8000d10 <Dprintf>

	Dprintf("Welcom to Ditel Motor-Driver Operating System\r\n");
 8000b9c:	481f      	ldr	r0, [pc, #124]	@ (8000c1c <_ConsoleStartLogo+0x114>)
 8000b9e:	f000 f8b7 	bl	8000d10 <Dprintf>
	Dprintf("Version: beta\r\n");
 8000ba2:	481f      	ldr	r0, [pc, #124]	@ (8000c20 <_ConsoleStartLogo+0x118>)
 8000ba4:	f000 f8b4 	bl	8000d10 <Dprintf>
	Dprintf("\r\n");
 8000ba8:	481e      	ldr	r0, [pc, #120]	@ (8000c24 <_ConsoleStartLogo+0x11c>)
 8000baa:	f000 f8b1 	bl	8000d10 <Dprintf>

	Dprintf("<Commands>\r\n");
 8000bae:	481e      	ldr	r0, [pc, #120]	@ (8000c28 <_ConsoleStartLogo+0x120>)
 8000bb0:	f000 f8ae 	bl	8000d10 <Dprintf>
	Dprintf(">motor [neutral] [brake] [forward <power(0~59999)>] [backward <power(0~59999)>] [check]\r\n");
 8000bb4:	481d      	ldr	r0, [pc, #116]	@ (8000c2c <_ConsoleStartLogo+0x124>)
 8000bb6:	f000 f8ab 	bl	8000d10 <Dprintf>


	Dprintf("============================================================================================================\r\n");
 8000bba:	4802      	ldr	r0, [pc, #8]	@ (8000bc4 <_ConsoleStartLogo+0xbc>)
 8000bbc:	f000 f8a8 	bl	8000d10 <Dprintf>
}
 8000bc0:	bf00      	nop
 8000bc2:	bd80      	pop	{r7, pc}
 8000bc4:	080069a0 	.word	0x080069a0
 8000bc8:	08006a10 	.word	0x08006a10
 8000bcc:	08006a7c 	.word	0x08006a7c
 8000bd0:	08006ae8 	.word	0x08006ae8
 8000bd4:	08006b54 	.word	0x08006b54
 8000bd8:	08006bc0 	.word	0x08006bc0
 8000bdc:	08006c2c 	.word	0x08006c2c
 8000be0:	08006c98 	.word	0x08006c98
 8000be4:	08006d04 	.word	0x08006d04
 8000be8:	08006d70 	.word	0x08006d70
 8000bec:	08006ddc 	.word	0x08006ddc
 8000bf0:	08006e48 	.word	0x08006e48
 8000bf4:	08006eb4 	.word	0x08006eb4
 8000bf8:	08006f20 	.word	0x08006f20
 8000bfc:	08006f8c 	.word	0x08006f8c
 8000c00:	08006ff8 	.word	0x08006ff8
 8000c04:	08007064 	.word	0x08007064
 8000c08:	080070d0 	.word	0x080070d0
 8000c0c:	0800713c 	.word	0x0800713c
 8000c10:	080071a8 	.word	0x080071a8
 8000c14:	08007214 	.word	0x08007214
 8000c18:	08007280 	.word	0x08007280
 8000c1c:	080072ec 	.word	0x080072ec
 8000c20:	0800731c 	.word	0x0800731c
 8000c24:	0800732c 	.word	0x0800732c
 8000c28:	08007330 	.word	0x08007330
 8000c2c:	08007340 	.word	0x08007340

08000c30 <_ConsoleCommandRead>:

void _ConsoleCommandRead(){
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b082      	sub	sp, #8
 8000c34:	af00      	add	r7, sp, #0
	uint8_t _reciveData, _consoleReadStringCount;

	while(1){
		_consoleReadStringCount = 0;
 8000c36:	2300      	movs	r3, #0
 8000c38:	71fb      	strb	r3, [r7, #7]

		Dprintf("D-M-005>");
 8000c3a:	4827      	ldr	r0, [pc, #156]	@ (8000cd8 <_ConsoleCommandRead+0xa8>)
 8000c3c:	f000 f868 	bl	8000d10 <Dprintf>
		while(1){
			while(HAL_UART_Receive(_ConsoleSetting.__PcUart, &_reciveData, 1, 300) != HAL_OK);
 8000c40:	bf00      	nop
 8000c42:	4b26      	ldr	r3, [pc, #152]	@ (8000cdc <_ConsoleCommandRead+0xac>)
 8000c44:	6818      	ldr	r0, [r3, #0]
 8000c46:	1db9      	adds	r1, r7, #6
 8000c48:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8000c4c:	2201      	movs	r2, #1
 8000c4e:	f004 fa62 	bl	8005116 <HAL_UART_Receive>
 8000c52:	4603      	mov	r3, r0
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d1f4      	bne.n	8000c42 <_ConsoleCommandRead+0x12>

			if(_reciveData == 13){
 8000c58:	79bb      	ldrb	r3, [r7, #6]
 8000c5a:	2b0d      	cmp	r3, #13
 8000c5c:	d021      	beq.n	8000ca2 <_ConsoleCommandRead+0x72>
				break;
			}else if(_reciveData == 8 && _consoleReadStringCount > 0){
 8000c5e:	79bb      	ldrb	r3, [r7, #6]
 8000c60:	2b08      	cmp	r3, #8
 8000c62:	d10e      	bne.n	8000c82 <_ConsoleCommandRead+0x52>
 8000c64:	79fb      	ldrb	r3, [r7, #7]
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d00b      	beq.n	8000c82 <_ConsoleCommandRead+0x52>
				HAL_UART_Transmit(_ConsoleSetting.__PcUart, (uint8_t *)"\b \b", 3, 300);
 8000c6a:	4b1c      	ldr	r3, [pc, #112]	@ (8000cdc <_ConsoleCommandRead+0xac>)
 8000c6c:	6818      	ldr	r0, [r3, #0]
 8000c6e:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8000c72:	2203      	movs	r2, #3
 8000c74:	491a      	ldr	r1, [pc, #104]	@ (8000ce0 <_ConsoleCommandRead+0xb0>)
 8000c76:	f004 f9c5 	bl	8005004 <HAL_UART_Transmit>
				_consoleReadStringCount--;
 8000c7a:	79fb      	ldrb	r3, [r7, #7]
 8000c7c:	3b01      	subs	r3, #1
 8000c7e:	71fb      	strb	r3, [r7, #7]
 8000c80:	e00e      	b.n	8000ca0 <_ConsoleCommandRead+0x70>
			}else{
				HAL_UART_Transmit(_ConsoleSetting.__PcUart, &_reciveData, 1, 300);
 8000c82:	4b16      	ldr	r3, [pc, #88]	@ (8000cdc <_ConsoleCommandRead+0xac>)
 8000c84:	6818      	ldr	r0, [r3, #0]
 8000c86:	1db9      	adds	r1, r7, #6
 8000c88:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8000c8c:	2201      	movs	r2, #1
 8000c8e:	f004 f9b9 	bl	8005004 <HAL_UART_Transmit>
				_ConsoleReadString[_consoleReadStringCount] = _reciveData;
 8000c92:	79fb      	ldrb	r3, [r7, #7]
 8000c94:	79b9      	ldrb	r1, [r7, #6]
 8000c96:	4a13      	ldr	r2, [pc, #76]	@ (8000ce4 <_ConsoleCommandRead+0xb4>)
 8000c98:	54d1      	strb	r1, [r2, r3]
				_consoleReadStringCount++;
 8000c9a:	79fb      	ldrb	r3, [r7, #7]
 8000c9c:	3301      	adds	r3, #1
 8000c9e:	71fb      	strb	r3, [r7, #7]
			while(HAL_UART_Receive(_ConsoleSetting.__PcUart, &_reciveData, 1, 300) != HAL_OK);
 8000ca0:	e7ce      	b.n	8000c40 <_ConsoleCommandRead+0x10>
				break;
 8000ca2:	bf00      	nop
			}
		}
		HAL_UART_Transmit(_ConsoleSetting.__PcUart, (uint8_t *)"\n\r", 2, 300);
 8000ca4:	4b0d      	ldr	r3, [pc, #52]	@ (8000cdc <_ConsoleCommandRead+0xac>)
 8000ca6:	6818      	ldr	r0, [r3, #0]
 8000ca8:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8000cac:	2202      	movs	r2, #2
 8000cae:	490e      	ldr	r1, [pc, #56]	@ (8000ce8 <_ConsoleCommandRead+0xb8>)
 8000cb0:	f004 f9a8 	bl	8005004 <HAL_UART_Transmit>
		_ConsoleReadString[_consoleReadStringCount] = '\0';
 8000cb4:	79fb      	ldrb	r3, [r7, #7]
 8000cb6:	4a0b      	ldr	r2, [pc, #44]	@ (8000ce4 <_ConsoleCommandRead+0xb4>)
 8000cb8:	2100      	movs	r1, #0
 8000cba:	54d1      	strb	r1, [r2, r3]

		if(_CommandCollation(_ConsoleReadString, &_ConsoleCommandResult))
 8000cbc:	490b      	ldr	r1, [pc, #44]	@ (8000cec <_ConsoleCommandRead+0xbc>)
 8000cbe:	4809      	ldr	r0, [pc, #36]	@ (8000ce4 <_ConsoleCommandRead+0xb4>)
 8000cc0:	f7ff fe16 	bl	80008f0 <_CommandCollation>
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d100      	bne.n	8000ccc <_ConsoleCommandRead+0x9c>
		_consoleReadStringCount = 0;
 8000cca:	e7b4      	b.n	8000c36 <_ConsoleCommandRead+0x6>
			break;
 8000ccc:	bf00      	nop
	}
}
 8000cce:	bf00      	nop
 8000cd0:	3708      	adds	r7, #8
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	bf00      	nop
 8000cd8:	0800739c 	.word	0x0800739c
 8000cdc:	20000914 	.word	0x20000914
 8000ce0:	080073a8 	.word	0x080073a8
 8000ce4:	2000091c 	.word	0x2000091c
 8000ce8:	080073ac 	.word	0x080073ac
 8000cec:	20000918 	.word	0x20000918

08000cf0 <DprintfInit>:

#include "D-M-005/Console/Ditel_Printf.h"

UART_HandleTypeDef *_DprintfUart;

void DprintfInit(UART_HandleTypeDef *hurat){
 8000cf0:	b480      	push	{r7}
 8000cf2:	b083      	sub	sp, #12
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
	_DprintfUart = hurat;
 8000cf8:	4a04      	ldr	r2, [pc, #16]	@ (8000d0c <DprintfInit+0x1c>)
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	6013      	str	r3, [r2, #0]
}
 8000cfe:	bf00      	nop
 8000d00:	370c      	adds	r7, #12
 8000d02:	46bd      	mov	sp, r7
 8000d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d08:	4770      	bx	lr
 8000d0a:	bf00      	nop
 8000d0c:	2000099c 	.word	0x2000099c

08000d10 <Dprintf>:

void Dprintf(char* str, ...)
{
 8000d10:	b40f      	push	{r0, r1, r2, r3}
 8000d12:	b590      	push	{r4, r7, lr}
 8000d14:	b0b5      	sub	sp, #212	@ 0xd4
 8000d16:	af00      	add	r7, sp, #0
    char resultString[128] = {0}, argString_In[32] = {0}, argString_Out[32] = {0};
 8000d18:	2300      	movs	r3, #0
 8000d1a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8000d1c:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000d20:	227c      	movs	r2, #124	@ 0x7c
 8000d22:	2100      	movs	r1, #0
 8000d24:	4618      	mov	r0, r3
 8000d26:	f005 f981 	bl	800602c <memset>
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000d2e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000d32:	2200      	movs	r2, #0
 8000d34:	601a      	str	r2, [r3, #0]
 8000d36:	605a      	str	r2, [r3, #4]
 8000d38:	609a      	str	r2, [r3, #8]
 8000d3a:	60da      	str	r2, [r3, #12]
 8000d3c:	611a      	str	r2, [r3, #16]
 8000d3e:	615a      	str	r2, [r3, #20]
 8000d40:	619a      	str	r2, [r3, #24]
 8000d42:	2300      	movs	r3, #0
 8000d44:	60bb      	str	r3, [r7, #8]
 8000d46:	f107 030c 	add.w	r3, r7, #12
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	601a      	str	r2, [r3, #0]
 8000d4e:	605a      	str	r2, [r3, #4]
 8000d50:	609a      	str	r2, [r3, #8]
 8000d52:	60da      	str	r2, [r3, #12]
 8000d54:	611a      	str	r2, [r3, #16]
 8000d56:	615a      	str	r2, [r3, #20]
 8000d58:	619a      	str	r2, [r3, #24]

    va_list ap;
    va_start(ap, str);
 8000d5a:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8000d5e:	607b      	str	r3, [r7, #4]

    unsigned short int count_In = 0, count_Out = 0, count_Arg = 0;
 8000d60:	2300      	movs	r3, #0
 8000d62:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
 8000d66:	2300      	movs	r3, #0
 8000d68:	f8a7 30cc 	strh.w	r3, [r7, #204]	@ 0xcc
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	f8a7 30ca 	strh.w	r3, [r7, #202]	@ 0xca

    while(str[count_In] != '\0'){
 8000d72:	e141      	b.n	8000ff8 <Dprintf+0x2e8>
        if(str[count_In] == '%'){
 8000d74:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8000d78:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8000d7c:	4413      	add	r3, r2
 8000d7e:	781b      	ldrb	r3, [r3, #0]
 8000d80:	2b25      	cmp	r3, #37	@ 0x25
 8000d82:	f040 8123 	bne.w	8000fcc <Dprintf+0x2bc>
            count_In++;
 8000d86:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8000d8a:	3301      	adds	r3, #1
 8000d8c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
            count_Arg = 0;
 8000d90:	2300      	movs	r3, #0
 8000d92:	f8a7 30ca 	strh.w	r3, [r7, #202]	@ 0xca

            argString_In[count_Arg] = '%';
 8000d96:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	@ 0xca
 8000d9a:	33d0      	adds	r3, #208	@ 0xd0
 8000d9c:	443b      	add	r3, r7
 8000d9e:	2225      	movs	r2, #37	@ 0x25
 8000da0:	f803 2ca8 	strb.w	r2, [r3, #-168]
            count_Arg++;
 8000da4:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	@ 0xca
 8000da8:	3301      	adds	r3, #1
 8000daa:	f8a7 30ca 	strh.w	r3, [r7, #202]	@ 0xca

            unsigned short int isArg = 1U;
 8000dae:	2301      	movs	r3, #1
 8000db0:	f8a7 30c8 	strh.w	r3, [r7, #200]	@ 0xc8

            while(1){
                if(str[count_In] == 'd'| str[count_In] == 's'| str[count_In] == 'u' | str[count_In] == 'f'){
 8000db4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8000db8:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8000dbc:	4413      	add	r3, r2
 8000dbe:	781b      	ldrb	r3, [r3, #0]
 8000dc0:	2b64      	cmp	r3, #100	@ 0x64
 8000dc2:	bf0c      	ite	eq
 8000dc4:	2301      	moveq	r3, #1
 8000dc6:	2300      	movne	r3, #0
 8000dc8:	b2da      	uxtb	r2, r3
 8000dca:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8000dce:	f8d7 10e0 	ldr.w	r1, [r7, #224]	@ 0xe0
 8000dd2:	440b      	add	r3, r1
 8000dd4:	781b      	ldrb	r3, [r3, #0]
 8000dd6:	2b73      	cmp	r3, #115	@ 0x73
 8000dd8:	bf0c      	ite	eq
 8000dda:	2301      	moveq	r3, #1
 8000ddc:	2300      	movne	r3, #0
 8000dde:	b2db      	uxtb	r3, r3
 8000de0:	4313      	orrs	r3, r2
 8000de2:	b2db      	uxtb	r3, r3
 8000de4:	4619      	mov	r1, r3
 8000de6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8000dea:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8000dee:	4413      	add	r3, r2
 8000df0:	781b      	ldrb	r3, [r3, #0]
 8000df2:	2b75      	cmp	r3, #117	@ 0x75
 8000df4:	bf0c      	ite	eq
 8000df6:	2301      	moveq	r3, #1
 8000df8:	2300      	movne	r3, #0
 8000dfa:	b2db      	uxtb	r3, r3
 8000dfc:	430b      	orrs	r3, r1
 8000dfe:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	@ 0xce
 8000e02:	f8d7 10e0 	ldr.w	r1, [r7, #224]	@ 0xe0
 8000e06:	440a      	add	r2, r1
 8000e08:	7812      	ldrb	r2, [r2, #0]
 8000e0a:	2a66      	cmp	r2, #102	@ 0x66
 8000e0c:	bf0c      	ite	eq
 8000e0e:	2201      	moveq	r2, #1
 8000e10:	2200      	movne	r2, #0
 8000e12:	b2d2      	uxtb	r2, r2
 8000e14:	4313      	orrs	r3, r2
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d00c      	beq.n	8000e34 <Dprintf+0x124>
                    argString_In[count_Arg] = str[count_In];
 8000e1a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8000e1e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8000e22:	441a      	add	r2, r3
 8000e24:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	@ 0xca
 8000e28:	7812      	ldrb	r2, [r2, #0]
 8000e2a:	33d0      	adds	r3, #208	@ 0xd0
 8000e2c:	443b      	add	r3, r7
 8000e2e:	f803 2ca8 	strb.w	r2, [r3, #-168]
                    break;
 8000e32:	e03c      	b.n	8000eae <Dprintf+0x19e>
                }else if(str[count_In] == '%'){
 8000e34:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8000e38:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8000e3c:	4413      	add	r3, r2
 8000e3e:	781b      	ldrb	r3, [r3, #0]
 8000e40:	2b25      	cmp	r3, #37	@ 0x25
 8000e42:	d114      	bne.n	8000e6e <Dprintf+0x15e>
                    resultString[count_Out] = '%';
 8000e44:	f8b7 30cc 	ldrh.w	r3, [r7, #204]	@ 0xcc
 8000e48:	33d0      	adds	r3, #208	@ 0xd0
 8000e4a:	443b      	add	r3, r7
 8000e4c:	2225      	movs	r2, #37	@ 0x25
 8000e4e:	f803 2c88 	strb.w	r2, [r3, #-136]
                    count_Out++;
 8000e52:	f8b7 30cc 	ldrh.w	r3, [r7, #204]	@ 0xcc
 8000e56:	3301      	adds	r3, #1
 8000e58:	f8a7 30cc 	strh.w	r3, [r7, #204]	@ 0xcc
                    count_In++;
 8000e5c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8000e60:	3301      	adds	r3, #1
 8000e62:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
                    isArg = 0U;
 8000e66:	2300      	movs	r3, #0
 8000e68:	f8a7 30c8 	strh.w	r3, [r7, #200]	@ 0xc8
                    break;
 8000e6c:	e01f      	b.n	8000eae <Dprintf+0x19e>
                }else if(str[count_In] == '\0'){
 8000e6e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8000e72:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8000e76:	4413      	add	r3, r2
 8000e78:	781b      	ldrb	r3, [r3, #0]
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	f000 80d6 	beq.w	800102c <Dprintf+0x31c>
                    return;
                }else{
                    argString_In[count_Arg] = str[count_In];
 8000e80:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8000e84:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8000e88:	441a      	add	r2, r3
 8000e8a:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	@ 0xca
 8000e8e:	7812      	ldrb	r2, [r2, #0]
 8000e90:	33d0      	adds	r3, #208	@ 0xd0
 8000e92:	443b      	add	r3, r7
 8000e94:	f803 2ca8 	strb.w	r2, [r3, #-168]
                    count_Arg++;
 8000e98:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	@ 0xca
 8000e9c:	3301      	adds	r3, #1
 8000e9e:	f8a7 30ca 	strh.w	r3, [r7, #202]	@ 0xca
                    count_In++;
 8000ea2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8000ea6:	3301      	adds	r3, #1
 8000ea8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
                if(str[count_In] == 'd'| str[count_In] == 's'| str[count_In] == 'u' | str[count_In] == 'f'){
 8000eac:	e782      	b.n	8000db4 <Dprintf+0xa4>
                }
            }

            if(isArg){
 8000eae:	f8b7 30c8 	ldrh.w	r3, [r7, #200]	@ 0xc8
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	f000 80a0 	beq.w	8000ff8 <Dprintf+0x2e8>
                count_Arg++;
 8000eb8:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	@ 0xca
 8000ebc:	3301      	adds	r3, #1
 8000ebe:	f8a7 30ca 	strh.w	r3, [r7, #202]	@ 0xca
                argString_In[count_Arg] = '\0';
 8000ec2:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	@ 0xca
 8000ec6:	33d0      	adds	r3, #208	@ 0xd0
 8000ec8:	443b      	add	r3, r7
 8000eca:	2200      	movs	r2, #0
 8000ecc:	f803 2ca8 	strb.w	r2, [r3, #-168]

                switch(str[count_In]){
 8000ed0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8000ed4:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8000ed8:	4413      	add	r3, r2
 8000eda:	781b      	ldrb	r3, [r3, #0]
 8000edc:	3b64      	subs	r3, #100	@ 0x64
 8000ede:	2b11      	cmp	r3, #17
 8000ee0:	d85a      	bhi.n	8000f98 <Dprintf+0x288>
 8000ee2:	a201      	add	r2, pc, #4	@ (adr r2, 8000ee8 <Dprintf+0x1d8>)
 8000ee4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ee8:	08000f31 	.word	0x08000f31
 8000eec:	08000f99 	.word	0x08000f99
 8000ef0:	08000f79 	.word	0x08000f79
 8000ef4:	08000f99 	.word	0x08000f99
 8000ef8:	08000f99 	.word	0x08000f99
 8000efc:	08000f99 	.word	0x08000f99
 8000f00:	08000f99 	.word	0x08000f99
 8000f04:	08000f99 	.word	0x08000f99
 8000f08:	08000f99 	.word	0x08000f99
 8000f0c:	08000f99 	.word	0x08000f99
 8000f10:	08000f99 	.word	0x08000f99
 8000f14:	08000f99 	.word	0x08000f99
 8000f18:	08000f99 	.word	0x08000f99
 8000f1c:	08000f99 	.word	0x08000f99
 8000f20:	08000f99 	.word	0x08000f99
 8000f24:	08000f49 	.word	0x08000f49
 8000f28:	08000f99 	.word	0x08000f99
 8000f2c:	08000f61 	.word	0x08000f61
                case 'd':
                    sprintf(argString_Out, argString_In, va_arg(ap, int));
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	1d1a      	adds	r2, r3, #4
 8000f34:	607a      	str	r2, [r7, #4]
 8000f36:	681a      	ldr	r2, [r3, #0]
 8000f38:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 8000f3c:	f107 0308 	add.w	r3, r7, #8
 8000f40:	4618      	mov	r0, r3
 8000f42:	f005 f853 	bl	8005fec <siprintf>
                    break;
 8000f46:	e027      	b.n	8000f98 <Dprintf+0x288>
                case 's':
                    sprintf(argString_Out, argString_In, va_arg(ap, char*));
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	1d1a      	adds	r2, r3, #4
 8000f4c:	607a      	str	r2, [r7, #4]
 8000f4e:	681a      	ldr	r2, [r3, #0]
 8000f50:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 8000f54:	f107 0308 	add.w	r3, r7, #8
 8000f58:	4618      	mov	r0, r3
 8000f5a:	f005 f847 	bl	8005fec <siprintf>
                    break;
 8000f5e:	e01b      	b.n	8000f98 <Dprintf+0x288>
                case 'u':
                    sprintf(argString_Out, argString_In, va_arg(ap, unsigned int));
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	1d1a      	adds	r2, r3, #4
 8000f64:	607a      	str	r2, [r7, #4]
 8000f66:	681a      	ldr	r2, [r3, #0]
 8000f68:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 8000f6c:	f107 0308 	add.w	r3, r7, #8
 8000f70:	4618      	mov	r0, r3
 8000f72:	f005 f83b 	bl	8005fec <siprintf>
                    break;
 8000f76:	e00f      	b.n	8000f98 <Dprintf+0x288>
                case 'f':
                    sprintf(argString_Out, argString_In, va_arg(ap, double));
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	3307      	adds	r3, #7
 8000f7c:	f023 0307 	bic.w	r3, r3, #7
 8000f80:	f103 0208 	add.w	r2, r3, #8
 8000f84:	607a      	str	r2, [r7, #4]
 8000f86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f8a:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 8000f8e:	f107 0008 	add.w	r0, r7, #8
 8000f92:	f005 f82b 	bl	8005fec <siprintf>
                    break;
 8000f96:	bf00      	nop
                }

                strcat(resultString, argString_Out);
 8000f98:	f107 0208 	add.w	r2, r7, #8
 8000f9c:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000fa0:	4611      	mov	r1, r2
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	f005 f84a 	bl	800603c <strcat>

                count_Out += strlen(argString_Out);
 8000fa8:	f107 0308 	add.w	r3, r7, #8
 8000fac:	4618      	mov	r0, r3
 8000fae:	f7ff f919 	bl	80001e4 <strlen>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	b29a      	uxth	r2, r3
 8000fb6:	f8b7 30cc 	ldrh.w	r3, [r7, #204]	@ 0xcc
 8000fba:	4413      	add	r3, r2
 8000fbc:	f8a7 30cc 	strh.w	r3, [r7, #204]	@ 0xcc
                count_In++;
 8000fc0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8000fc4:	3301      	adds	r3, #1
 8000fc6:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
 8000fca:	e015      	b.n	8000ff8 <Dprintf+0x2e8>
            }
        }else{
            resultString[count_Out] = str[count_In];
 8000fcc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8000fd0:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8000fd4:	441a      	add	r2, r3
 8000fd6:	f8b7 30cc 	ldrh.w	r3, [r7, #204]	@ 0xcc
 8000fda:	7812      	ldrb	r2, [r2, #0]
 8000fdc:	33d0      	adds	r3, #208	@ 0xd0
 8000fde:	443b      	add	r3, r7
 8000fe0:	f803 2c88 	strb.w	r2, [r3, #-136]

            count_In++;
 8000fe4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8000fe8:	3301      	adds	r3, #1
 8000fea:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
            count_Out++;
 8000fee:	f8b7 30cc 	ldrh.w	r3, [r7, #204]	@ 0xcc
 8000ff2:	3301      	adds	r3, #1
 8000ff4:	f8a7 30cc 	strh.w	r3, [r7, #204]	@ 0xcc
    while(str[count_In] != '\0'){
 8000ff8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8000ffc:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8001000:	4413      	add	r3, r2
 8001002:	781b      	ldrb	r3, [r3, #0]
 8001004:	2b00      	cmp	r3, #0
 8001006:	f47f aeb5 	bne.w	8000d74 <Dprintf+0x64>
        }
    }

    va_end(ap);

    HAL_UART_Transmit(_DprintfUart, (uint8_t *)resultString, strlen(resultString), 300);
 800100a:	4b0c      	ldr	r3, [pc, #48]	@ (800103c <Dprintf+0x32c>)
 800100c:	681c      	ldr	r4, [r3, #0]
 800100e:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001012:	4618      	mov	r0, r3
 8001014:	f7ff f8e6 	bl	80001e4 <strlen>
 8001018:	4603      	mov	r3, r0
 800101a:	b29a      	uxth	r2, r3
 800101c:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 8001020:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8001024:	4620      	mov	r0, r4
 8001026:	f003 ffed 	bl	8005004 <HAL_UART_Transmit>
 800102a:	e000      	b.n	800102e <Dprintf+0x31e>
                    return;
 800102c:	bf00      	nop
}
 800102e:	37d4      	adds	r7, #212	@ 0xd4
 8001030:	46bd      	mov	sp, r7
 8001032:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8001036:	b004      	add	sp, #16
 8001038:	4770      	bx	lr
 800103a:	bf00      	nop
 800103c:	2000099c 	.word	0x2000099c

08001040 <Init>:
static void MX_TIM2_Init(void);
static void MX_TIM3_Init(void);
static void MX_TIM1_Init(void);
static void MX_TIM15_Init(void);
/* USER CODE BEGIN PFP */
void Init(){
 8001040:	b580      	push	{r7, lr}
 8001042:	b082      	sub	sp, #8
 8001044:	af00      	add	r7, sp, #0
	uint32_t _lastReadTick;

	//Start Program
	_Init_7Seg();
 8001046:	f000 f85f 	bl	8001108 <_Init_7Seg>
	_7SegReset();
 800104a:	f7ff f963 	bl	8000314 <_7SegReset>

	_7SegSetUpAnimation(_SETUP_STEP_START_PROGRAM);
 800104e:	2001      	movs	r0, #1
 8001050:	f7ff f96c 	bl	800032c <_7SegSetUpAnimation>
	_lastReadTick = HAL_GetTick();
 8001054:	f000 fea6 	bl	8001da4 <HAL_GetTick>
 8001058:	6078      	str	r0, [r7, #4]

	//Init Motor
	_Init_Motor();
 800105a:	f000 f875 	bl	8001148 <_Init_Motor>

	_lastReadTick = _AccurateDelay(200, _lastReadTick);
 800105e:	6879      	ldr	r1, [r7, #4]
 8001060:	20c8      	movs	r0, #200	@ 0xc8
 8001062:	f7ff fbcb 	bl	80007fc <_AccurateDelay>
 8001066:	6078      	str	r0, [r7, #4]
	_7SegSetUpAnimation(_SETUP_STEP_SETUP_MOTOR);
 8001068:	2002      	movs	r0, #2
 800106a:	f7ff f95f 	bl	800032c <_7SegSetUpAnimation>

	//Init Switch And Read State
	_Init_Switch();
 800106e:	f000 f899 	bl	80011a4 <_Init_Switch>

	_lastReadTick = _AccurateDelay(200, _lastReadTick);
 8001072:	6879      	ldr	r1, [r7, #4]
 8001074:	20c8      	movs	r0, #200	@ 0xc8
 8001076:	f7ff fbc1 	bl	80007fc <_AccurateDelay>
 800107a:	6078      	str	r0, [r7, #4]
	_7SegSetUpAnimation(_SETUP_STEP_SETUP_AND_READ_SWICH);
 800107c:	2003      	movs	r0, #3
 800107e:	f7ff f955 	bl	800032c <_7SegSetUpAnimation>

	//Init Console
	_Init_Console();
 8001082:	f000 f8b3 	bl	80011ec <_Init_Console>

	_lastReadTick = _AccurateDelay(200, _lastReadTick);
 8001086:	6879      	ldr	r1, [r7, #4]
 8001088:	20c8      	movs	r0, #200	@ 0xc8
 800108a:	f7ff fbb7 	bl	80007fc <_AccurateDelay>
 800108e:	6078      	str	r0, [r7, #4]
	_7SegSetUpAnimation(_SETUP_STEP_SETUP_CONSOLE);
 8001090:	2004      	movs	r0, #4
 8001092:	f7ff f94b 	bl	800032c <_7SegSetUpAnimation>

	_lastReadTick = _AccurateDelay(200, _lastReadTick);
 8001096:	6879      	ldr	r1, [r7, #4]
 8001098:	20c8      	movs	r0, #200	@ 0xc8
 800109a:	f7ff fbaf 	bl	80007fc <_AccurateDelay>
 800109e:	6078      	str	r0, [r7, #4]
	_7SegSetUpAnimation(_SETUP_STEP_NULL3);
 80010a0:	2005      	movs	r0, #5
 80010a2:	f7ff f943 	bl	800032c <_7SegSetUpAnimation>

	_lastReadTick = _AccurateDelay(200, _lastReadTick);
 80010a6:	6879      	ldr	r1, [r7, #4]
 80010a8:	20c8      	movs	r0, #200	@ 0xc8
 80010aa:	f7ff fba7 	bl	80007fc <_AccurateDelay>
 80010ae:	6078      	str	r0, [r7, #4]
	_7SegSetUpAnimation(_SETUP_STEP_NULL4);
 80010b0:	2006      	movs	r0, #6
 80010b2:	f7ff f93b 	bl	800032c <_7SegSetUpAnimation>

	_lastReadTick = _AccurateDelay(200, _lastReadTick);
 80010b6:	6879      	ldr	r1, [r7, #4]
 80010b8:	20c8      	movs	r0, #200	@ 0xc8
 80010ba:	f7ff fb9f 	bl	80007fc <_AccurateDelay>
 80010be:	6078      	str	r0, [r7, #4]
	_7SegSetUpAnimation(_SETUP_STEP_NULL5);
 80010c0:	2007      	movs	r0, #7
 80010c2:	f7ff f933 	bl	800032c <_7SegSetUpAnimation>

	_lastReadTick = _AccurateDelay(200, _lastReadTick);
 80010c6:	6879      	ldr	r1, [r7, #4]
 80010c8:	20c8      	movs	r0, #200	@ 0xc8
 80010ca:	f7ff fb97 	bl	80007fc <_AccurateDelay>
 80010ce:	6078      	str	r0, [r7, #4]
	_7SegSetUpAnimation(_SETUP_STEP_NULL6);
 80010d0:	2008      	movs	r0, #8
 80010d2:	f7ff f92b 	bl	800032c <_7SegSetUpAnimation>

	_lastReadTick = _AccurateDelay(200, _lastReadTick);
 80010d6:	6879      	ldr	r1, [r7, #4]
 80010d8:	20c8      	movs	r0, #200	@ 0xc8
 80010da:	f7ff fb8f 	bl	80007fc <_AccurateDelay>
 80010de:	6078      	str	r0, [r7, #4]
	_7SegSetUpAnimation(_SETUP_STEP_FINISH);
 80010e0:	2009      	movs	r0, #9
 80010e2:	f7ff f923 	bl	800032c <_7SegSetUpAnimation>

	_lastReadTick = _AccurateDelay(200, _lastReadTick);
 80010e6:	6879      	ldr	r1, [r7, #4]
 80010e8:	20c8      	movs	r0, #200	@ 0xc8
 80010ea:	f7ff fb87 	bl	80007fc <_AccurateDelay>
 80010ee:	6078      	str	r0, [r7, #4]
	_7SegReset();
 80010f0:	f7ff f910 	bl	8000314 <_7SegReset>


	_lastReadTick = _AccurateDelay(200, _lastReadTick);
 80010f4:	6879      	ldr	r1, [r7, #4]
 80010f6:	20c8      	movs	r0, #200	@ 0xc8
 80010f8:	f7ff fb80 	bl	80007fc <_AccurateDelay>
 80010fc:	6078      	str	r0, [r7, #4]
}
 80010fe:	bf00      	nop
 8001100:	3708      	adds	r7, #8
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}
	...

08001108 <_Init_7Seg>:

void _Init_7Seg(){
 8001108:	b580      	push	{r7, lr}
 800110a:	af00      	add	r7, sp, #0
	Setting_7Seg.__7SegSi_GpioPort = _7SEG_SI_GPIO_Port;
 800110c:	4b0c      	ldr	r3, [pc, #48]	@ (8001140 <_Init_7Seg+0x38>)
 800110e:	4a0d      	ldr	r2, [pc, #52]	@ (8001144 <_Init_7Seg+0x3c>)
 8001110:	601a      	str	r2, [r3, #0]
	Setting_7Seg.__7SegSi_Pin = _7SEG_SI_Pin;
 8001112:	4b0b      	ldr	r3, [pc, #44]	@ (8001140 <_Init_7Seg+0x38>)
 8001114:	2240      	movs	r2, #64	@ 0x40
 8001116:	809a      	strh	r2, [r3, #4]
	Setting_7Seg.__7SegRck_GpioPort = _7SEG_RCK_GPIO_Port;
 8001118:	4b09      	ldr	r3, [pc, #36]	@ (8001140 <_Init_7Seg+0x38>)
 800111a:	4a0a      	ldr	r2, [pc, #40]	@ (8001144 <_Init_7Seg+0x3c>)
 800111c:	609a      	str	r2, [r3, #8]
	Setting_7Seg.__7SegRck_Pin = _7SEG_RCK_Pin;
 800111e:	4b08      	ldr	r3, [pc, #32]	@ (8001140 <_Init_7Seg+0x38>)
 8001120:	2220      	movs	r2, #32
 8001122:	819a      	strh	r2, [r3, #12]
	Setting_7Seg.__7SegSck_GpioPort = _7SEG_SCK_GPIO_Port;
 8001124:	4b06      	ldr	r3, [pc, #24]	@ (8001140 <_Init_7Seg+0x38>)
 8001126:	4a07      	ldr	r2, [pc, #28]	@ (8001144 <_Init_7Seg+0x3c>)
 8001128:	611a      	str	r2, [r3, #16]
	Setting_7Seg.__7SegSck_Pin = _7SEG_SCK_Pin;
 800112a:	4b05      	ldr	r3, [pc, #20]	@ (8001140 <_Init_7Seg+0x38>)
 800112c:	2210      	movs	r2, #16
 800112e:	829a      	strh	r2, [r3, #20]

	_7SegInit(&Setting_7Seg);
 8001130:	4803      	ldr	r0, [pc, #12]	@ (8001140 <_Init_7Seg+0x38>)
 8001132:	f7ff f8b5 	bl	80002a0 <_7SegInit>
	_7SegReset();
 8001136:	f7ff f8ed 	bl	8000314 <_7SegReset>
}
 800113a:	bf00      	nop
 800113c:	bd80      	pop	{r7, pc}
 800113e:	bf00      	nop
 8001140:	20000c08 	.word	0x20000c08
 8001144:	48000400 	.word	0x48000400

08001148 <_Init_Motor>:

void _Init_Motor(){
 8001148:	b580      	push	{r7, lr}
 800114a:	af00      	add	r7, sp, #0
	Setting_Motor.__MotorN1_Tim = &htim2;
 800114c:	4b10      	ldr	r3, [pc, #64]	@ (8001190 <_Init_Motor+0x48>)
 800114e:	4a11      	ldr	r2, [pc, #68]	@ (8001194 <_Init_Motor+0x4c>)
 8001150:	601a      	str	r2, [r3, #0]
	Setting_Motor.__MotorN1_TimChannel = TIM_CHANNEL_2;
 8001152:	4b0f      	ldr	r3, [pc, #60]	@ (8001190 <_Init_Motor+0x48>)
 8001154:	2204      	movs	r2, #4
 8001156:	605a      	str	r2, [r3, #4]
	Setting_Motor.__MotorN2_Tim = &htim3;
 8001158:	4b0d      	ldr	r3, [pc, #52]	@ (8001190 <_Init_Motor+0x48>)
 800115a:	4a0f      	ldr	r2, [pc, #60]	@ (8001198 <_Init_Motor+0x50>)
 800115c:	609a      	str	r2, [r3, #8]
	Setting_Motor.__MotorN2_TimChannel = TIM_CHANNEL_3;
 800115e:	4b0c      	ldr	r3, [pc, #48]	@ (8001190 <_Init_Motor+0x48>)
 8001160:	2208      	movs	r2, #8
 8001162:	60da      	str	r2, [r3, #12]

	Setting_Motor.__MotorP1_GpioPort = SIG_P1_GPIO_Port;
 8001164:	4b0a      	ldr	r3, [pc, #40]	@ (8001190 <_Init_Motor+0x48>)
 8001166:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 800116a:	611a      	str	r2, [r3, #16]
	Setting_Motor.__MotorP1_Pin = SIG_P1_Pin;
 800116c:	4b08      	ldr	r3, [pc, #32]	@ (8001190 <_Init_Motor+0x48>)
 800116e:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001172:	829a      	strh	r2, [r3, #20]
	Setting_Motor.__MotorP2_GpioPort = SIG_P2_GPIO_Port;
 8001174:	4b06      	ldr	r3, [pc, #24]	@ (8001190 <_Init_Motor+0x48>)
 8001176:	4a09      	ldr	r2, [pc, #36]	@ (800119c <_Init_Motor+0x54>)
 8001178:	619a      	str	r2, [r3, #24]
	Setting_Motor.__MotorP2_Pin = SIG_P2_Pin;
 800117a:	4b05      	ldr	r3, [pc, #20]	@ (8001190 <_Init_Motor+0x48>)
 800117c:	2202      	movs	r2, #2
 800117e:	839a      	strh	r2, [r3, #28]

	Setting_Motor.__DeadTime_TIM = &htim1;
 8001180:	4b03      	ldr	r3, [pc, #12]	@ (8001190 <_Init_Motor+0x48>)
 8001182:	4a07      	ldr	r2, [pc, #28]	@ (80011a0 <_Init_Motor+0x58>)
 8001184:	621a      	str	r2, [r3, #32]

	_MotorInit(&Setting_Motor);
 8001186:	4802      	ldr	r0, [pc, #8]	@ (8001190 <_Init_Motor+0x48>)
 8001188:	f7ff f986 	bl	8000498 <_MotorInit>
}
 800118c:	bf00      	nop
 800118e:	bd80      	pop	{r7, pc}
 8001190:	20000c20 	.word	0x20000c20
 8001194:	20000a14 	.word	0x20000a14
 8001198:	20000a60 	.word	0x20000a60
 800119c:	48000400 	.word	0x48000400
 80011a0:	200009c8 	.word	0x200009c8

080011a4 <_Init_Switch>:

void _Init_Switch(){
 80011a4:	b580      	push	{r7, lr}
 80011a6:	af00      	add	r7, sp, #0
	Setting_Swich.__ShiftRegisterClk_GpioPort = SW_CLK_GPIO_Port;
 80011a8:	4b0e      	ldr	r3, [pc, #56]	@ (80011e4 <_Init_Switch+0x40>)
 80011aa:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80011ae:	601a      	str	r2, [r3, #0]
	Setting_Swich.__ShiftRegisterClk_Pin = SW_CLK_Pin;
 80011b0:	4b0c      	ldr	r3, [pc, #48]	@ (80011e4 <_Init_Switch+0x40>)
 80011b2:	2210      	movs	r2, #16
 80011b4:	809a      	strh	r2, [r3, #4]
	Setting_Swich.__ShiftRegisterQh_GpioPort = SW_QH_GPIO_Port;
 80011b6:	4b0b      	ldr	r3, [pc, #44]	@ (80011e4 <_Init_Switch+0x40>)
 80011b8:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80011bc:	611a      	str	r2, [r3, #16]
	Setting_Swich.__ShiftRegisterQh_Pin = SW_QH_Pin;
 80011be:	4b09      	ldr	r3, [pc, #36]	@ (80011e4 <_Init_Switch+0x40>)
 80011c0:	2201      	movs	r2, #1
 80011c2:	829a      	strh	r2, [r3, #20]
	Setting_Swich.__ShiftRegisterShLd_GpioPort = SW_SH_LD_GPIO_Port;
 80011c4:	4b07      	ldr	r3, [pc, #28]	@ (80011e4 <_Init_Switch+0x40>)
 80011c6:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80011ca:	609a      	str	r2, [r3, #8]
	Setting_Swich.__ShiftRegisterShLd_Pin = SW_SH_LD_Pin;
 80011cc:	4b05      	ldr	r3, [pc, #20]	@ (80011e4 <_Init_Switch+0x40>)
 80011ce:	2202      	movs	r2, #2
 80011d0:	819a      	strh	r2, [r3, #12]

	_SwitchInit(&Setting_Swich);
 80011d2:	4804      	ldr	r0, [pc, #16]	@ (80011e4 <_Init_Switch+0x40>)
 80011d4:	f7ff fa22 	bl	800061c <_SwitchInit>
	_SwitchRead(&SwitchReadData);
 80011d8:	4803      	ldr	r0, [pc, #12]	@ (80011e8 <_Init_Switch+0x44>)
 80011da:	f7ff fa51 	bl	8000680 <_SwitchRead>
}
 80011de:	bf00      	nop
 80011e0:	bd80      	pop	{r7, pc}
 80011e2:	bf00      	nop
 80011e4:	20000c44 	.word	0x20000c44
 80011e8:	20000c60 	.word	0x20000c60

080011ec <_Init_Console>:

void _Init_Console(){
 80011ec:	b580      	push	{r7, lr}
 80011ee:	af00      	add	r7, sp, #0
	Setting_Console.__PcUart = &huart1;
 80011f0:	4b03      	ldr	r3, [pc, #12]	@ (8001200 <_Init_Console+0x14>)
 80011f2:	4a04      	ldr	r2, [pc, #16]	@ (8001204 <_Init_Console+0x18>)
 80011f4:	601a      	str	r2, [r3, #0]

	_ConsoleInit(&Setting_Console);
 80011f6:	4802      	ldr	r0, [pc, #8]	@ (8001200 <_Init_Console+0x14>)
 80011f8:	f7ff fc70 	bl	8000adc <_ConsoleInit>
}
 80011fc:	bf00      	nop
 80011fe:	bd80      	pop	{r7, pc}
 8001200:	20000c5c 	.word	0x20000c5c
 8001204:	20000af8 	.word	0x20000af8

08001208 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800120c:	f000 fd70 	bl	8001cf0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001210:	f000 f838 	bl	8001284 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001214:	f000 fac0 	bl	8001798 <MX_GPIO_Init>
  MX_CAN_Init();
 8001218:	f000 f890 	bl	800133c <MX_CAN_Init>
  MX_USART1_UART_Init();
 800121c:	f000 fa58 	bl	80016d0 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8001220:	f000 fa88 	bl	8001734 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8001224:	f000 f914 	bl	8001450 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001228:	f000 f988 	bl	800153c <MX_TIM3_Init>
  MX_TIM1_Init();
 800122c:	f000 f8bc 	bl	80013a8 <MX_TIM1_Init>
  MX_TIM15_Init();
 8001230:	f000 f9fc 	bl	800162c <MX_TIM15_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(LED_POWER_GPIO_Port, LED_POWER_Pin, GPIO_PIN_SET); //Power Led ON
 8001234:	2201      	movs	r2, #1
 8001236:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800123a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800123e:	f001 f9d1 	bl	80025e4 <HAL_GPIO_WritePin>

  Init(); //Init
 8001242:	f7ff fefd 	bl	8001040 <Init>

  Dprintf("Hello World!!\r\n");
 8001246:	480b      	ldr	r0, [pc, #44]	@ (8001274 <main+0x6c>)
 8001248:	f7ff fd62 	bl	8000d10 <Dprintf>
  _ConsoleStartLogo();
 800124c:	f7ff fc5c 	bl	8000b08 <_ConsoleStartLogo>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  _ConsoleCommandRead();
 8001250:	f7ff fcee 	bl	8000c30 <_ConsoleCommandRead>
	  Dprintf("Command : %d\r\n", _ConsoleCommandResult._command);
 8001254:	4b08      	ldr	r3, [pc, #32]	@ (8001278 <main+0x70>)
 8001256:	781b      	ldrb	r3, [r3, #0]
 8001258:	4619      	mov	r1, r3
 800125a:	4808      	ldr	r0, [pc, #32]	@ (800127c <main+0x74>)
 800125c:	f7ff fd58 	bl	8000d10 <Dprintf>
	  Dprintf("Mode    : %d\r\n", _ConsoleCommandResult._mode);
 8001260:	4b05      	ldr	r3, [pc, #20]	@ (8001278 <main+0x70>)
 8001262:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8001266:	4619      	mov	r1, r3
 8001268:	4805      	ldr	r0, [pc, #20]	@ (8001280 <main+0x78>)
 800126a:	f7ff fd51 	bl	8000d10 <Dprintf>
	  _ConsoleCommandRead();
 800126e:	bf00      	nop
 8001270:	e7ee      	b.n	8001250 <main+0x48>
 8001272:	bf00      	nop
 8001274:	080073b0 	.word	0x080073b0
 8001278:	20000918 	.word	0x20000918
 800127c:	080073c0 	.word	0x080073c0
 8001280:	080073d0 	.word	0x080073d0

08001284 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b096      	sub	sp, #88	@ 0x58
 8001288:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800128a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800128e:	2228      	movs	r2, #40	@ 0x28
 8001290:	2100      	movs	r1, #0
 8001292:	4618      	mov	r0, r3
 8001294:	f004 feca 	bl	800602c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001298:	f107 031c 	add.w	r3, r7, #28
 800129c:	2200      	movs	r2, #0
 800129e:	601a      	str	r2, [r3, #0]
 80012a0:	605a      	str	r2, [r3, #4]
 80012a2:	609a      	str	r2, [r3, #8]
 80012a4:	60da      	str	r2, [r3, #12]
 80012a6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80012a8:	1d3b      	adds	r3, r7, #4
 80012aa:	2200      	movs	r2, #0
 80012ac:	601a      	str	r2, [r3, #0]
 80012ae:	605a      	str	r2, [r3, #4]
 80012b0:	609a      	str	r2, [r3, #8]
 80012b2:	60da      	str	r2, [r3, #12]
 80012b4:	611a      	str	r2, [r3, #16]
 80012b6:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80012b8:	2302      	movs	r3, #2
 80012ba:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80012bc:	2301      	movs	r3, #1
 80012be:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80012c0:	2310      	movs	r3, #16
 80012c2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012c4:	2302      	movs	r3, #2
 80012c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80012c8:	2300      	movs	r3, #0
 80012ca:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL15;
 80012cc:	f44f 1350 	mov.w	r3, #3407872	@ 0x340000
 80012d0:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012d2:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80012d6:	4618      	mov	r0, r3
 80012d8:	f001 f99c 	bl	8002614 <HAL_RCC_OscConfig>
 80012dc:	4603      	mov	r3, r0
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d001      	beq.n	80012e6 <SystemClock_Config+0x62>
  {
    Error_Handler();
 80012e2:	f000 fabb 	bl	800185c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012e6:	230f      	movs	r3, #15
 80012e8:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012ea:	2302      	movs	r3, #2
 80012ec:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012ee:	2300      	movs	r3, #0
 80012f0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80012f2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80012f6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012f8:	2300      	movs	r3, #0
 80012fa:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80012fc:	f107 031c 	add.w	r3, r7, #28
 8001300:	2102      	movs	r1, #2
 8001302:	4618      	mov	r0, r3
 8001304:	f002 f9c4 	bl	8003690 <HAL_RCC_ClockConfig>
 8001308:	4603      	mov	r3, r0
 800130a:	2b00      	cmp	r3, #0
 800130c:	d001      	beq.n	8001312 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800130e:	f000 faa5 	bl	800185c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_TIM1;
 8001312:	f241 0301 	movw	r3, #4097	@ 0x1001
 8001316:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8001318:	2300      	movs	r3, #0
 800131a:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 800131c:	2300      	movs	r3, #0
 800131e:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001320:	1d3b      	adds	r3, r7, #4
 8001322:	4618      	mov	r0, r3
 8001324:	f002 fbd4 	bl	8003ad0 <HAL_RCCEx_PeriphCLKConfig>
 8001328:	4603      	mov	r3, r0
 800132a:	2b00      	cmp	r3, #0
 800132c:	d001      	beq.n	8001332 <SystemClock_Config+0xae>
  {
    Error_Handler();
 800132e:	f000 fa95 	bl	800185c <Error_Handler>
  }
}
 8001332:	bf00      	nop
 8001334:	3758      	adds	r7, #88	@ 0x58
 8001336:	46bd      	mov	sp, r7
 8001338:	bd80      	pop	{r7, pc}
	...

0800133c <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 8001340:	4b17      	ldr	r3, [pc, #92]	@ (80013a0 <MX_CAN_Init+0x64>)
 8001342:	4a18      	ldr	r2, [pc, #96]	@ (80013a4 <MX_CAN_Init+0x68>)
 8001344:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 3;
 8001346:	4b16      	ldr	r3, [pc, #88]	@ (80013a0 <MX_CAN_Init+0x64>)
 8001348:	2203      	movs	r2, #3
 800134a:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 800134c:	4b14      	ldr	r3, [pc, #80]	@ (80013a0 <MX_CAN_Init+0x64>)
 800134e:	2200      	movs	r2, #0
 8001350:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001352:	4b13      	ldr	r3, [pc, #76]	@ (80013a0 <MX_CAN_Init+0x64>)
 8001354:	2200      	movs	r2, #0
 8001356:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_7TQ;
 8001358:	4b11      	ldr	r3, [pc, #68]	@ (80013a0 <MX_CAN_Init+0x64>)
 800135a:	f44f 22c0 	mov.w	r2, #393216	@ 0x60000
 800135e:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 8001360:	4b0f      	ldr	r3, [pc, #60]	@ (80013a0 <MX_CAN_Init+0x64>)
 8001362:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8001366:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8001368:	4b0d      	ldr	r3, [pc, #52]	@ (80013a0 <MX_CAN_Init+0x64>)
 800136a:	2200      	movs	r2, #0
 800136c:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 800136e:	4b0c      	ldr	r3, [pc, #48]	@ (80013a0 <MX_CAN_Init+0x64>)
 8001370:	2200      	movs	r2, #0
 8001372:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8001374:	4b0a      	ldr	r3, [pc, #40]	@ (80013a0 <MX_CAN_Init+0x64>)
 8001376:	2200      	movs	r2, #0
 8001378:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 800137a:	4b09      	ldr	r3, [pc, #36]	@ (80013a0 <MX_CAN_Init+0x64>)
 800137c:	2200      	movs	r2, #0
 800137e:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8001380:	4b07      	ldr	r3, [pc, #28]	@ (80013a0 <MX_CAN_Init+0x64>)
 8001382:	2200      	movs	r2, #0
 8001384:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8001386:	4b06      	ldr	r3, [pc, #24]	@ (80013a0 <MX_CAN_Init+0x64>)
 8001388:	2200      	movs	r2, #0
 800138a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 800138c:	4804      	ldr	r0, [pc, #16]	@ (80013a0 <MX_CAN_Init+0x64>)
 800138e:	f000 fd15 	bl	8001dbc <HAL_CAN_Init>
 8001392:	4603      	mov	r3, r0
 8001394:	2b00      	cmp	r3, #0
 8001396:	d001      	beq.n	800139c <MX_CAN_Init+0x60>
  {
    Error_Handler();
 8001398:	f000 fa60 	bl	800185c <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 800139c:	bf00      	nop
 800139e:	bd80      	pop	{r7, pc}
 80013a0:	200009a0 	.word	0x200009a0
 80013a4:	40006400 	.word	0x40006400

080013a8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b088      	sub	sp, #32
 80013ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013ae:	f107 0310 	add.w	r3, r7, #16
 80013b2:	2200      	movs	r2, #0
 80013b4:	601a      	str	r2, [r3, #0]
 80013b6:	605a      	str	r2, [r3, #4]
 80013b8:	609a      	str	r2, [r3, #8]
 80013ba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013bc:	1d3b      	adds	r3, r7, #4
 80013be:	2200      	movs	r2, #0
 80013c0:	601a      	str	r2, [r3, #0]
 80013c2:	605a      	str	r2, [r3, #4]
 80013c4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80013c6:	4b20      	ldr	r3, [pc, #128]	@ (8001448 <MX_TIM1_Init+0xa0>)
 80013c8:	4a20      	ldr	r2, [pc, #128]	@ (800144c <MX_TIM1_Init+0xa4>)
 80013ca:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 6-1;
 80013cc:	4b1e      	ldr	r3, [pc, #120]	@ (8001448 <MX_TIM1_Init+0xa0>)
 80013ce:	2205      	movs	r2, #5
 80013d0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013d2:	4b1d      	ldr	r3, [pc, #116]	@ (8001448 <MX_TIM1_Init+0xa0>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xffff-1;
 80013d8:	4b1b      	ldr	r3, [pc, #108]	@ (8001448 <MX_TIM1_Init+0xa0>)
 80013da:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 80013de:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013e0:	4b19      	ldr	r3, [pc, #100]	@ (8001448 <MX_TIM1_Init+0xa0>)
 80013e2:	2200      	movs	r2, #0
 80013e4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80013e6:	4b18      	ldr	r3, [pc, #96]	@ (8001448 <MX_TIM1_Init+0xa0>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013ec:	4b16      	ldr	r3, [pc, #88]	@ (8001448 <MX_TIM1_Init+0xa0>)
 80013ee:	2200      	movs	r2, #0
 80013f0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80013f2:	4815      	ldr	r0, [pc, #84]	@ (8001448 <MX_TIM1_Init+0xa0>)
 80013f4:	f002 fc92 	bl	8003d1c <HAL_TIM_Base_Init>
 80013f8:	4603      	mov	r3, r0
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d001      	beq.n	8001402 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 80013fe:	f000 fa2d 	bl	800185c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001402:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001406:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001408:	f107 0310 	add.w	r3, r7, #16
 800140c:	4619      	mov	r1, r3
 800140e:	480e      	ldr	r0, [pc, #56]	@ (8001448 <MX_TIM1_Init+0xa0>)
 8001410:	f003 f86c 	bl	80044ec <HAL_TIM_ConfigClockSource>
 8001414:	4603      	mov	r3, r0
 8001416:	2b00      	cmp	r3, #0
 8001418:	d001      	beq.n	800141e <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 800141a:	f000 fa1f 	bl	800185c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800141e:	2300      	movs	r3, #0
 8001420:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001422:	2300      	movs	r3, #0
 8001424:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001426:	2300      	movs	r3, #0
 8001428:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800142a:	1d3b      	adds	r3, r7, #4
 800142c:	4619      	mov	r1, r3
 800142e:	4806      	ldr	r0, [pc, #24]	@ (8001448 <MX_TIM1_Init+0xa0>)
 8001430:	f003 fd10 	bl	8004e54 <HAL_TIMEx_MasterConfigSynchronization>
 8001434:	4603      	mov	r3, r0
 8001436:	2b00      	cmp	r3, #0
 8001438:	d001      	beq.n	800143e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800143a:	f000 fa0f 	bl	800185c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800143e:	bf00      	nop
 8001440:	3720      	adds	r7, #32
 8001442:	46bd      	mov	sp, r7
 8001444:	bd80      	pop	{r7, pc}
 8001446:	bf00      	nop
 8001448:	200009c8 	.word	0x200009c8
 800144c:	40012c00 	.word	0x40012c00

08001450 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b08e      	sub	sp, #56	@ 0x38
 8001454:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001456:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800145a:	2200      	movs	r2, #0
 800145c:	601a      	str	r2, [r3, #0]
 800145e:	605a      	str	r2, [r3, #4]
 8001460:	609a      	str	r2, [r3, #8]
 8001462:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001464:	f107 031c 	add.w	r3, r7, #28
 8001468:	2200      	movs	r2, #0
 800146a:	601a      	str	r2, [r3, #0]
 800146c:	605a      	str	r2, [r3, #4]
 800146e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001470:	463b      	mov	r3, r7
 8001472:	2200      	movs	r2, #0
 8001474:	601a      	str	r2, [r3, #0]
 8001476:	605a      	str	r2, [r3, #4]
 8001478:	609a      	str	r2, [r3, #8]
 800147a:	60da      	str	r2, [r3, #12]
 800147c:	611a      	str	r2, [r3, #16]
 800147e:	615a      	str	r2, [r3, #20]
 8001480:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001482:	4b2d      	ldr	r3, [pc, #180]	@ (8001538 <MX_TIM2_Init+0xe8>)
 8001484:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001488:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800148a:	4b2b      	ldr	r3, [pc, #172]	@ (8001538 <MX_TIM2_Init+0xe8>)
 800148c:	2200      	movs	r2, #0
 800148e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001490:	4b29      	ldr	r3, [pc, #164]	@ (8001538 <MX_TIM2_Init+0xe8>)
 8001492:	2200      	movs	r2, #0
 8001494:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 60000-1;
 8001496:	4b28      	ldr	r3, [pc, #160]	@ (8001538 <MX_TIM2_Init+0xe8>)
 8001498:	f64e 225f 	movw	r2, #59999	@ 0xea5f
 800149c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800149e:	4b26      	ldr	r3, [pc, #152]	@ (8001538 <MX_TIM2_Init+0xe8>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014a4:	4b24      	ldr	r3, [pc, #144]	@ (8001538 <MX_TIM2_Init+0xe8>)
 80014a6:	2200      	movs	r2, #0
 80014a8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80014aa:	4823      	ldr	r0, [pc, #140]	@ (8001538 <MX_TIM2_Init+0xe8>)
 80014ac:	f002 fc36 	bl	8003d1c <HAL_TIM_Base_Init>
 80014b0:	4603      	mov	r3, r0
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d001      	beq.n	80014ba <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 80014b6:	f000 f9d1 	bl	800185c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014ba:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80014be:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80014c0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80014c4:	4619      	mov	r1, r3
 80014c6:	481c      	ldr	r0, [pc, #112]	@ (8001538 <MX_TIM2_Init+0xe8>)
 80014c8:	f003 f810 	bl	80044ec <HAL_TIM_ConfigClockSource>
 80014cc:	4603      	mov	r3, r0
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d001      	beq.n	80014d6 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 80014d2:	f000 f9c3 	bl	800185c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80014d6:	4818      	ldr	r0, [pc, #96]	@ (8001538 <MX_TIM2_Init+0xe8>)
 80014d8:	f002 fd2d 	bl	8003f36 <HAL_TIM_PWM_Init>
 80014dc:	4603      	mov	r3, r0
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d001      	beq.n	80014e6 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 80014e2:	f000 f9bb 	bl	800185c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014e6:	2300      	movs	r3, #0
 80014e8:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014ea:	2300      	movs	r3, #0
 80014ec:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80014ee:	f107 031c 	add.w	r3, r7, #28
 80014f2:	4619      	mov	r1, r3
 80014f4:	4810      	ldr	r0, [pc, #64]	@ (8001538 <MX_TIM2_Init+0xe8>)
 80014f6:	f003 fcad 	bl	8004e54 <HAL_TIMEx_MasterConfigSynchronization>
 80014fa:	4603      	mov	r3, r0
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d001      	beq.n	8001504 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8001500:	f000 f9ac 	bl	800185c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001504:	2360      	movs	r3, #96	@ 0x60
 8001506:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001508:	2300      	movs	r3, #0
 800150a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800150c:	2300      	movs	r3, #0
 800150e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001510:	2300      	movs	r3, #0
 8001512:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001514:	463b      	mov	r3, r7
 8001516:	2204      	movs	r2, #4
 8001518:	4619      	mov	r1, r3
 800151a:	4807      	ldr	r0, [pc, #28]	@ (8001538 <MX_TIM2_Init+0xe8>)
 800151c:	f002 fed2 	bl	80042c4 <HAL_TIM_PWM_ConfigChannel>
 8001520:	4603      	mov	r3, r0
 8001522:	2b00      	cmp	r3, #0
 8001524:	d001      	beq.n	800152a <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8001526:	f000 f999 	bl	800185c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800152a:	4803      	ldr	r0, [pc, #12]	@ (8001538 <MX_TIM2_Init+0xe8>)
 800152c:	f000 fa5e 	bl	80019ec <HAL_TIM_MspPostInit>

}
 8001530:	bf00      	nop
 8001532:	3738      	adds	r7, #56	@ 0x38
 8001534:	46bd      	mov	sp, r7
 8001536:	bd80      	pop	{r7, pc}
 8001538:	20000a14 	.word	0x20000a14

0800153c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b08e      	sub	sp, #56	@ 0x38
 8001540:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001542:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001546:	2200      	movs	r2, #0
 8001548:	601a      	str	r2, [r3, #0]
 800154a:	605a      	str	r2, [r3, #4]
 800154c:	609a      	str	r2, [r3, #8]
 800154e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001550:	f107 031c 	add.w	r3, r7, #28
 8001554:	2200      	movs	r2, #0
 8001556:	601a      	str	r2, [r3, #0]
 8001558:	605a      	str	r2, [r3, #4]
 800155a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800155c:	463b      	mov	r3, r7
 800155e:	2200      	movs	r2, #0
 8001560:	601a      	str	r2, [r3, #0]
 8001562:	605a      	str	r2, [r3, #4]
 8001564:	609a      	str	r2, [r3, #8]
 8001566:	60da      	str	r2, [r3, #12]
 8001568:	611a      	str	r2, [r3, #16]
 800156a:	615a      	str	r2, [r3, #20]
 800156c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800156e:	4b2d      	ldr	r3, [pc, #180]	@ (8001624 <MX_TIM3_Init+0xe8>)
 8001570:	4a2d      	ldr	r2, [pc, #180]	@ (8001628 <MX_TIM3_Init+0xec>)
 8001572:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001574:	4b2b      	ldr	r3, [pc, #172]	@ (8001624 <MX_TIM3_Init+0xe8>)
 8001576:	2200      	movs	r2, #0
 8001578:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800157a:	4b2a      	ldr	r3, [pc, #168]	@ (8001624 <MX_TIM3_Init+0xe8>)
 800157c:	2200      	movs	r2, #0
 800157e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 60000-1;
 8001580:	4b28      	ldr	r3, [pc, #160]	@ (8001624 <MX_TIM3_Init+0xe8>)
 8001582:	f64e 225f 	movw	r2, #59999	@ 0xea5f
 8001586:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001588:	4b26      	ldr	r3, [pc, #152]	@ (8001624 <MX_TIM3_Init+0xe8>)
 800158a:	2200      	movs	r2, #0
 800158c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800158e:	4b25      	ldr	r3, [pc, #148]	@ (8001624 <MX_TIM3_Init+0xe8>)
 8001590:	2200      	movs	r2, #0
 8001592:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001594:	4823      	ldr	r0, [pc, #140]	@ (8001624 <MX_TIM3_Init+0xe8>)
 8001596:	f002 fbc1 	bl	8003d1c <HAL_TIM_Base_Init>
 800159a:	4603      	mov	r3, r0
 800159c:	2b00      	cmp	r3, #0
 800159e:	d001      	beq.n	80015a4 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 80015a0:	f000 f95c 	bl	800185c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015a4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80015a8:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80015aa:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80015ae:	4619      	mov	r1, r3
 80015b0:	481c      	ldr	r0, [pc, #112]	@ (8001624 <MX_TIM3_Init+0xe8>)
 80015b2:	f002 ff9b 	bl	80044ec <HAL_TIM_ConfigClockSource>
 80015b6:	4603      	mov	r3, r0
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d001      	beq.n	80015c0 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 80015bc:	f000 f94e 	bl	800185c <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 80015c0:	4818      	ldr	r0, [pc, #96]	@ (8001624 <MX_TIM3_Init+0xe8>)
 80015c2:	f002 fc57 	bl	8003e74 <HAL_TIM_OC_Init>
 80015c6:	4603      	mov	r3, r0
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d001      	beq.n	80015d0 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 80015cc:	f000 f946 	bl	800185c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015d0:	2300      	movs	r3, #0
 80015d2:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015d4:	2300      	movs	r3, #0
 80015d6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80015d8:	f107 031c 	add.w	r3, r7, #28
 80015dc:	4619      	mov	r1, r3
 80015de:	4811      	ldr	r0, [pc, #68]	@ (8001624 <MX_TIM3_Init+0xe8>)
 80015e0:	f003 fc38 	bl	8004e54 <HAL_TIMEx_MasterConfigSynchronization>
 80015e4:	4603      	mov	r3, r0
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d001      	beq.n	80015ee <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80015ea:	f000 f937 	bl	800185c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80015ee:	2300      	movs	r3, #0
 80015f0:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80015f2:	2300      	movs	r3, #0
 80015f4:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80015f6:	2300      	movs	r3, #0
 80015f8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80015fa:	2300      	movs	r3, #0
 80015fc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80015fe:	463b      	mov	r3, r7
 8001600:	2208      	movs	r2, #8
 8001602:	4619      	mov	r1, r3
 8001604:	4807      	ldr	r0, [pc, #28]	@ (8001624 <MX_TIM3_Init+0xe8>)
 8001606:	f002 fde3 	bl	80041d0 <HAL_TIM_OC_ConfigChannel>
 800160a:	4603      	mov	r3, r0
 800160c:	2b00      	cmp	r3, #0
 800160e:	d001      	beq.n	8001614 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8001610:	f000 f924 	bl	800185c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001614:	4803      	ldr	r0, [pc, #12]	@ (8001624 <MX_TIM3_Init+0xe8>)
 8001616:	f000 f9e9 	bl	80019ec <HAL_TIM_MspPostInit>

}
 800161a:	bf00      	nop
 800161c:	3738      	adds	r7, #56	@ 0x38
 800161e:	46bd      	mov	sp, r7
 8001620:	bd80      	pop	{r7, pc}
 8001622:	bf00      	nop
 8001624:	20000a60 	.word	0x20000a60
 8001628:	40000400 	.word	0x40000400

0800162c <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b088      	sub	sp, #32
 8001630:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001632:	f107 0310 	add.w	r3, r7, #16
 8001636:	2200      	movs	r2, #0
 8001638:	601a      	str	r2, [r3, #0]
 800163a:	605a      	str	r2, [r3, #4]
 800163c:	609a      	str	r2, [r3, #8]
 800163e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001640:	1d3b      	adds	r3, r7, #4
 8001642:	2200      	movs	r2, #0
 8001644:	601a      	str	r2, [r3, #0]
 8001646:	605a      	str	r2, [r3, #4]
 8001648:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 800164a:	4b1f      	ldr	r3, [pc, #124]	@ (80016c8 <MX_TIM15_Init+0x9c>)
 800164c:	4a1f      	ldr	r2, [pc, #124]	@ (80016cc <MX_TIM15_Init+0xa0>)
 800164e:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 8001650:	4b1d      	ldr	r3, [pc, #116]	@ (80016c8 <MX_TIM15_Init+0x9c>)
 8001652:	2200      	movs	r2, #0
 8001654:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001656:	4b1c      	ldr	r3, [pc, #112]	@ (80016c8 <MX_TIM15_Init+0x9c>)
 8001658:	2200      	movs	r2, #0
 800165a:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 800165c:	4b1a      	ldr	r3, [pc, #104]	@ (80016c8 <MX_TIM15_Init+0x9c>)
 800165e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001662:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001664:	4b18      	ldr	r3, [pc, #96]	@ (80016c8 <MX_TIM15_Init+0x9c>)
 8001666:	2200      	movs	r2, #0
 8001668:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 800166a:	4b17      	ldr	r3, [pc, #92]	@ (80016c8 <MX_TIM15_Init+0x9c>)
 800166c:	2200      	movs	r2, #0
 800166e:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001670:	4b15      	ldr	r3, [pc, #84]	@ (80016c8 <MX_TIM15_Init+0x9c>)
 8001672:	2200      	movs	r2, #0
 8001674:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8001676:	4814      	ldr	r0, [pc, #80]	@ (80016c8 <MX_TIM15_Init+0x9c>)
 8001678:	f002 fb50 	bl	8003d1c <HAL_TIM_Base_Init>
 800167c:	4603      	mov	r3, r0
 800167e:	2b00      	cmp	r3, #0
 8001680:	d001      	beq.n	8001686 <MX_TIM15_Init+0x5a>
  {
    Error_Handler();
 8001682:	f000 f8eb 	bl	800185c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001686:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800168a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 800168c:	f107 0310 	add.w	r3, r7, #16
 8001690:	4619      	mov	r1, r3
 8001692:	480d      	ldr	r0, [pc, #52]	@ (80016c8 <MX_TIM15_Init+0x9c>)
 8001694:	f002 ff2a 	bl	80044ec <HAL_TIM_ConfigClockSource>
 8001698:	4603      	mov	r3, r0
 800169a:	2b00      	cmp	r3, #0
 800169c:	d001      	beq.n	80016a2 <MX_TIM15_Init+0x76>
  {
    Error_Handler();
 800169e:	f000 f8dd 	bl	800185c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016a2:	2300      	movs	r3, #0
 80016a4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016a6:	2300      	movs	r3, #0
 80016a8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 80016aa:	1d3b      	adds	r3, r7, #4
 80016ac:	4619      	mov	r1, r3
 80016ae:	4806      	ldr	r0, [pc, #24]	@ (80016c8 <MX_TIM15_Init+0x9c>)
 80016b0:	f003 fbd0 	bl	8004e54 <HAL_TIMEx_MasterConfigSynchronization>
 80016b4:	4603      	mov	r3, r0
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d001      	beq.n	80016be <MX_TIM15_Init+0x92>
  {
    Error_Handler();
 80016ba:	f000 f8cf 	bl	800185c <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 80016be:	bf00      	nop
 80016c0:	3720      	adds	r7, #32
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}
 80016c6:	bf00      	nop
 80016c8:	20000aac 	.word	0x20000aac
 80016cc:	40014000 	.word	0x40014000

080016d0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80016d4:	4b15      	ldr	r3, [pc, #84]	@ (800172c <MX_USART1_UART_Init+0x5c>)
 80016d6:	4a16      	ldr	r2, [pc, #88]	@ (8001730 <MX_USART1_UART_Init+0x60>)
 80016d8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80016da:	4b14      	ldr	r3, [pc, #80]	@ (800172c <MX_USART1_UART_Init+0x5c>)
 80016dc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80016e0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80016e2:	4b12      	ldr	r3, [pc, #72]	@ (800172c <MX_USART1_UART_Init+0x5c>)
 80016e4:	2200      	movs	r2, #0
 80016e6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80016e8:	4b10      	ldr	r3, [pc, #64]	@ (800172c <MX_USART1_UART_Init+0x5c>)
 80016ea:	2200      	movs	r2, #0
 80016ec:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80016ee:	4b0f      	ldr	r3, [pc, #60]	@ (800172c <MX_USART1_UART_Init+0x5c>)
 80016f0:	2200      	movs	r2, #0
 80016f2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80016f4:	4b0d      	ldr	r3, [pc, #52]	@ (800172c <MX_USART1_UART_Init+0x5c>)
 80016f6:	220c      	movs	r2, #12
 80016f8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016fa:	4b0c      	ldr	r3, [pc, #48]	@ (800172c <MX_USART1_UART_Init+0x5c>)
 80016fc:	2200      	movs	r2, #0
 80016fe:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001700:	4b0a      	ldr	r3, [pc, #40]	@ (800172c <MX_USART1_UART_Init+0x5c>)
 8001702:	2200      	movs	r2, #0
 8001704:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001706:	4b09      	ldr	r3, [pc, #36]	@ (800172c <MX_USART1_UART_Init+0x5c>)
 8001708:	2200      	movs	r2, #0
 800170a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800170c:	4b07      	ldr	r3, [pc, #28]	@ (800172c <MX_USART1_UART_Init+0x5c>)
 800170e:	2200      	movs	r2, #0
 8001710:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_MultiProcessor_Init(&huart1, 0, UART_WAKEUPMETHOD_IDLELINE) != HAL_OK)
 8001712:	2200      	movs	r2, #0
 8001714:	2100      	movs	r1, #0
 8001716:	4805      	ldr	r0, [pc, #20]	@ (800172c <MX_USART1_UART_Init+0x5c>)
 8001718:	f003 fc0a 	bl	8004f30 <HAL_MultiProcessor_Init>
 800171c:	4603      	mov	r3, r0
 800171e:	2b00      	cmp	r3, #0
 8001720:	d001      	beq.n	8001726 <MX_USART1_UART_Init+0x56>
  {
    Error_Handler();
 8001722:	f000 f89b 	bl	800185c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001726:	bf00      	nop
 8001728:	bd80      	pop	{r7, pc}
 800172a:	bf00      	nop
 800172c:	20000af8 	.word	0x20000af8
 8001730:	40013800 	.word	0x40013800

08001734 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001738:	4b15      	ldr	r3, [pc, #84]	@ (8001790 <MX_USART2_UART_Init+0x5c>)
 800173a:	4a16      	ldr	r2, [pc, #88]	@ (8001794 <MX_USART2_UART_Init+0x60>)
 800173c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 800173e:	4b14      	ldr	r3, [pc, #80]	@ (8001790 <MX_USART2_UART_Init+0x5c>)
 8001740:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 8001744:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001746:	4b12      	ldr	r3, [pc, #72]	@ (8001790 <MX_USART2_UART_Init+0x5c>)
 8001748:	2200      	movs	r2, #0
 800174a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800174c:	4b10      	ldr	r3, [pc, #64]	@ (8001790 <MX_USART2_UART_Init+0x5c>)
 800174e:	2200      	movs	r2, #0
 8001750:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001752:	4b0f      	ldr	r3, [pc, #60]	@ (8001790 <MX_USART2_UART_Init+0x5c>)
 8001754:	2200      	movs	r2, #0
 8001756:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001758:	4b0d      	ldr	r3, [pc, #52]	@ (8001790 <MX_USART2_UART_Init+0x5c>)
 800175a:	220c      	movs	r2, #12
 800175c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800175e:	4b0c      	ldr	r3, [pc, #48]	@ (8001790 <MX_USART2_UART_Init+0x5c>)
 8001760:	2200      	movs	r2, #0
 8001762:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001764:	4b0a      	ldr	r3, [pc, #40]	@ (8001790 <MX_USART2_UART_Init+0x5c>)
 8001766:	2200      	movs	r2, #0
 8001768:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800176a:	4b09      	ldr	r3, [pc, #36]	@ (8001790 <MX_USART2_UART_Init+0x5c>)
 800176c:	2200      	movs	r2, #0
 800176e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001770:	4b07      	ldr	r3, [pc, #28]	@ (8001790 <MX_USART2_UART_Init+0x5c>)
 8001772:	2200      	movs	r2, #0
 8001774:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_MultiProcessor_Init(&huart2, 0, UART_WAKEUPMETHOD_IDLELINE) != HAL_OK)
 8001776:	2200      	movs	r2, #0
 8001778:	2100      	movs	r1, #0
 800177a:	4805      	ldr	r0, [pc, #20]	@ (8001790 <MX_USART2_UART_Init+0x5c>)
 800177c:	f003 fbd8 	bl	8004f30 <HAL_MultiProcessor_Init>
 8001780:	4603      	mov	r3, r0
 8001782:	2b00      	cmp	r3, #0
 8001784:	d001      	beq.n	800178a <MX_USART2_UART_Init+0x56>
  {
    Error_Handler();
 8001786:	f000 f869 	bl	800185c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800178a:	bf00      	nop
 800178c:	bd80      	pop	{r7, pc}
 800178e:	bf00      	nop
 8001790:	20000b80 	.word	0x20000b80
 8001794:	40004400 	.word	0x40004400

08001798 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b088      	sub	sp, #32
 800179c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800179e:	f107 030c 	add.w	r3, r7, #12
 80017a2:	2200      	movs	r2, #0
 80017a4:	601a      	str	r2, [r3, #0]
 80017a6:	605a      	str	r2, [r3, #4]
 80017a8:	609a      	str	r2, [r3, #8]
 80017aa:	60da      	str	r2, [r3, #12]
 80017ac:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017ae:	4b29      	ldr	r3, [pc, #164]	@ (8001854 <MX_GPIO_Init+0xbc>)
 80017b0:	695b      	ldr	r3, [r3, #20]
 80017b2:	4a28      	ldr	r2, [pc, #160]	@ (8001854 <MX_GPIO_Init+0xbc>)
 80017b4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80017b8:	6153      	str	r3, [r2, #20]
 80017ba:	4b26      	ldr	r3, [pc, #152]	@ (8001854 <MX_GPIO_Init+0xbc>)
 80017bc:	695b      	ldr	r3, [r3, #20]
 80017be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017c2:	60bb      	str	r3, [r7, #8]
 80017c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017c6:	4b23      	ldr	r3, [pc, #140]	@ (8001854 <MX_GPIO_Init+0xbc>)
 80017c8:	695b      	ldr	r3, [r3, #20]
 80017ca:	4a22      	ldr	r2, [pc, #136]	@ (8001854 <MX_GPIO_Init+0xbc>)
 80017cc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80017d0:	6153      	str	r3, [r2, #20]
 80017d2:	4b20      	ldr	r3, [pc, #128]	@ (8001854 <MX_GPIO_Init+0xbc>)
 80017d4:	695b      	ldr	r3, [r3, #20]
 80017d6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80017da:	607b      	str	r3, [r7, #4]
 80017dc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SW_SH_LD_Pin|SW_CLK_Pin|LED_POWER_Pin|SIG_P1_Pin, GPIO_PIN_RESET);
 80017de:	2200      	movs	r2, #0
 80017e0:	f248 1112 	movw	r1, #33042	@ 0x8112
 80017e4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80017e8:	f000 fefc 	bl	80025e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SIG_P2_Pin|_7SEG_SCK_Pin|_7SEG_RCK_Pin|_7SEG_SI_Pin
 80017ec:	2200      	movs	r2, #0
 80017ee:	21f2      	movs	r1, #242	@ 0xf2
 80017f0:	4819      	ldr	r0, [pc, #100]	@ (8001858 <MX_GPIO_Init+0xc0>)
 80017f2:	f000 fef7 	bl	80025e4 <HAL_GPIO_WritePin>
                          |LED_UART_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : SW_QH_Pin ROTARY_ENCODER_Z_Pin ROTARY_ENCODER_B_Pin ROTARY_ENCODER_A_Pin */
  GPIO_InitStruct.Pin = SW_QH_Pin|ROTARY_ENCODER_Z_Pin|ROTARY_ENCODER_B_Pin|ROTARY_ENCODER_A_Pin;
 80017f6:	23e1      	movs	r3, #225	@ 0xe1
 80017f8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017fa:	2300      	movs	r3, #0
 80017fc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017fe:	2300      	movs	r3, #0
 8001800:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001802:	f107 030c 	add.w	r3, r7, #12
 8001806:	4619      	mov	r1, r3
 8001808:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800180c:	f000 fd60 	bl	80022d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : SW_SH_LD_Pin SW_CLK_Pin LED_POWER_Pin SIG_P1_Pin */
  GPIO_InitStruct.Pin = SW_SH_LD_Pin|SW_CLK_Pin|LED_POWER_Pin|SIG_P1_Pin;
 8001810:	f248 1312 	movw	r3, #33042	@ 0x8112
 8001814:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001816:	2301      	movs	r3, #1
 8001818:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800181a:	2300      	movs	r3, #0
 800181c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800181e:	2300      	movs	r3, #0
 8001820:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001822:	f107 030c 	add.w	r3, r7, #12
 8001826:	4619      	mov	r1, r3
 8001828:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800182c:	f000 fd50 	bl	80022d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : SIG_P2_Pin _7SEG_SCK_Pin _7SEG_RCK_Pin _7SEG_SI_Pin
                           LED_UART_Pin */
  GPIO_InitStruct.Pin = SIG_P2_Pin|_7SEG_SCK_Pin|_7SEG_RCK_Pin|_7SEG_SI_Pin
 8001830:	23f2      	movs	r3, #242	@ 0xf2
 8001832:	60fb      	str	r3, [r7, #12]
                          |LED_UART_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001834:	2301      	movs	r3, #1
 8001836:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001838:	2300      	movs	r3, #0
 800183a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800183c:	2300      	movs	r3, #0
 800183e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001840:	f107 030c 	add.w	r3, r7, #12
 8001844:	4619      	mov	r1, r3
 8001846:	4804      	ldr	r0, [pc, #16]	@ (8001858 <MX_GPIO_Init+0xc0>)
 8001848:	f000 fd42 	bl	80022d0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800184c:	bf00      	nop
 800184e:	3720      	adds	r7, #32
 8001850:	46bd      	mov	sp, r7
 8001852:	bd80      	pop	{r7, pc}
 8001854:	40021000 	.word	0x40021000
 8001858:	48000400 	.word	0x48000400

0800185c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800185c:	b480      	push	{r7}
 800185e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001860:	b672      	cpsid	i
}
 8001862:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001864:	bf00      	nop
 8001866:	e7fd      	b.n	8001864 <Error_Handler+0x8>

08001868 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001868:	b480      	push	{r7}
 800186a:	b083      	sub	sp, #12
 800186c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800186e:	4b0f      	ldr	r3, [pc, #60]	@ (80018ac <HAL_MspInit+0x44>)
 8001870:	699b      	ldr	r3, [r3, #24]
 8001872:	4a0e      	ldr	r2, [pc, #56]	@ (80018ac <HAL_MspInit+0x44>)
 8001874:	f043 0301 	orr.w	r3, r3, #1
 8001878:	6193      	str	r3, [r2, #24]
 800187a:	4b0c      	ldr	r3, [pc, #48]	@ (80018ac <HAL_MspInit+0x44>)
 800187c:	699b      	ldr	r3, [r3, #24]
 800187e:	f003 0301 	and.w	r3, r3, #1
 8001882:	607b      	str	r3, [r7, #4]
 8001884:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001886:	4b09      	ldr	r3, [pc, #36]	@ (80018ac <HAL_MspInit+0x44>)
 8001888:	69db      	ldr	r3, [r3, #28]
 800188a:	4a08      	ldr	r2, [pc, #32]	@ (80018ac <HAL_MspInit+0x44>)
 800188c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001890:	61d3      	str	r3, [r2, #28]
 8001892:	4b06      	ldr	r3, [pc, #24]	@ (80018ac <HAL_MspInit+0x44>)
 8001894:	69db      	ldr	r3, [r3, #28]
 8001896:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800189a:	603b      	str	r3, [r7, #0]
 800189c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800189e:	bf00      	nop
 80018a0:	370c      	adds	r7, #12
 80018a2:	46bd      	mov	sp, r7
 80018a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a8:	4770      	bx	lr
 80018aa:	bf00      	nop
 80018ac:	40021000 	.word	0x40021000

080018b0 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b08a      	sub	sp, #40	@ 0x28
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018b8:	f107 0314 	add.w	r3, r7, #20
 80018bc:	2200      	movs	r2, #0
 80018be:	601a      	str	r2, [r3, #0]
 80018c0:	605a      	str	r2, [r3, #4]
 80018c2:	609a      	str	r2, [r3, #8]
 80018c4:	60da      	str	r2, [r3, #12]
 80018c6:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	4a18      	ldr	r2, [pc, #96]	@ (8001930 <HAL_CAN_MspInit+0x80>)
 80018ce:	4293      	cmp	r3, r2
 80018d0:	d129      	bne.n	8001926 <HAL_CAN_MspInit+0x76>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80018d2:	4b18      	ldr	r3, [pc, #96]	@ (8001934 <HAL_CAN_MspInit+0x84>)
 80018d4:	69db      	ldr	r3, [r3, #28]
 80018d6:	4a17      	ldr	r2, [pc, #92]	@ (8001934 <HAL_CAN_MspInit+0x84>)
 80018d8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80018dc:	61d3      	str	r3, [r2, #28]
 80018de:	4b15      	ldr	r3, [pc, #84]	@ (8001934 <HAL_CAN_MspInit+0x84>)
 80018e0:	69db      	ldr	r3, [r3, #28]
 80018e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80018e6:	613b      	str	r3, [r7, #16]
 80018e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018ea:	4b12      	ldr	r3, [pc, #72]	@ (8001934 <HAL_CAN_MspInit+0x84>)
 80018ec:	695b      	ldr	r3, [r3, #20]
 80018ee:	4a11      	ldr	r2, [pc, #68]	@ (8001934 <HAL_CAN_MspInit+0x84>)
 80018f0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80018f4:	6153      	str	r3, [r2, #20]
 80018f6:	4b0f      	ldr	r3, [pc, #60]	@ (8001934 <HAL_CAN_MspInit+0x84>)
 80018f8:	695b      	ldr	r3, [r3, #20]
 80018fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018fe:	60fb      	str	r3, [r7, #12]
 8001900:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = CAN_RXD_Pin|CAN_TXD_Pin;
 8001902:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8001906:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001908:	2302      	movs	r3, #2
 800190a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800190c:	2300      	movs	r3, #0
 800190e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001910:	2303      	movs	r3, #3
 8001912:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN;
 8001914:	2309      	movs	r3, #9
 8001916:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001918:	f107 0314 	add.w	r3, r7, #20
 800191c:	4619      	mov	r1, r3
 800191e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001922:	f000 fcd5 	bl	80022d0 <HAL_GPIO_Init>

  /* USER CODE END CAN_MspInit 1 */

  }

}
 8001926:	bf00      	nop
 8001928:	3728      	adds	r7, #40	@ 0x28
 800192a:	46bd      	mov	sp, r7
 800192c:	bd80      	pop	{r7, pc}
 800192e:	bf00      	nop
 8001930:	40006400 	.word	0x40006400
 8001934:	40021000 	.word	0x40021000

08001938 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001938:	b480      	push	{r7}
 800193a:	b087      	sub	sp, #28
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	4a25      	ldr	r2, [pc, #148]	@ (80019dc <HAL_TIM_Base_MspInit+0xa4>)
 8001946:	4293      	cmp	r3, r2
 8001948:	d10c      	bne.n	8001964 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800194a:	4b25      	ldr	r3, [pc, #148]	@ (80019e0 <HAL_TIM_Base_MspInit+0xa8>)
 800194c:	699b      	ldr	r3, [r3, #24]
 800194e:	4a24      	ldr	r2, [pc, #144]	@ (80019e0 <HAL_TIM_Base_MspInit+0xa8>)
 8001950:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001954:	6193      	str	r3, [r2, #24]
 8001956:	4b22      	ldr	r3, [pc, #136]	@ (80019e0 <HAL_TIM_Base_MspInit+0xa8>)
 8001958:	699b      	ldr	r3, [r3, #24]
 800195a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800195e:	617b      	str	r3, [r7, #20]
 8001960:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 8001962:	e034      	b.n	80019ce <HAL_TIM_Base_MspInit+0x96>
  else if(htim_base->Instance==TIM2)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800196c:	d10c      	bne.n	8001988 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800196e:	4b1c      	ldr	r3, [pc, #112]	@ (80019e0 <HAL_TIM_Base_MspInit+0xa8>)
 8001970:	69db      	ldr	r3, [r3, #28]
 8001972:	4a1b      	ldr	r2, [pc, #108]	@ (80019e0 <HAL_TIM_Base_MspInit+0xa8>)
 8001974:	f043 0301 	orr.w	r3, r3, #1
 8001978:	61d3      	str	r3, [r2, #28]
 800197a:	4b19      	ldr	r3, [pc, #100]	@ (80019e0 <HAL_TIM_Base_MspInit+0xa8>)
 800197c:	69db      	ldr	r3, [r3, #28]
 800197e:	f003 0301 	and.w	r3, r3, #1
 8001982:	613b      	str	r3, [r7, #16]
 8001984:	693b      	ldr	r3, [r7, #16]
}
 8001986:	e022      	b.n	80019ce <HAL_TIM_Base_MspInit+0x96>
  else if(htim_base->Instance==TIM3)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	4a15      	ldr	r2, [pc, #84]	@ (80019e4 <HAL_TIM_Base_MspInit+0xac>)
 800198e:	4293      	cmp	r3, r2
 8001990:	d10c      	bne.n	80019ac <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001992:	4b13      	ldr	r3, [pc, #76]	@ (80019e0 <HAL_TIM_Base_MspInit+0xa8>)
 8001994:	69db      	ldr	r3, [r3, #28]
 8001996:	4a12      	ldr	r2, [pc, #72]	@ (80019e0 <HAL_TIM_Base_MspInit+0xa8>)
 8001998:	f043 0302 	orr.w	r3, r3, #2
 800199c:	61d3      	str	r3, [r2, #28]
 800199e:	4b10      	ldr	r3, [pc, #64]	@ (80019e0 <HAL_TIM_Base_MspInit+0xa8>)
 80019a0:	69db      	ldr	r3, [r3, #28]
 80019a2:	f003 0302 	and.w	r3, r3, #2
 80019a6:	60fb      	str	r3, [r7, #12]
 80019a8:	68fb      	ldr	r3, [r7, #12]
}
 80019aa:	e010      	b.n	80019ce <HAL_TIM_Base_MspInit+0x96>
  else if(htim_base->Instance==TIM15)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	4a0d      	ldr	r2, [pc, #52]	@ (80019e8 <HAL_TIM_Base_MspInit+0xb0>)
 80019b2:	4293      	cmp	r3, r2
 80019b4:	d10b      	bne.n	80019ce <HAL_TIM_Base_MspInit+0x96>
    __HAL_RCC_TIM15_CLK_ENABLE();
 80019b6:	4b0a      	ldr	r3, [pc, #40]	@ (80019e0 <HAL_TIM_Base_MspInit+0xa8>)
 80019b8:	699b      	ldr	r3, [r3, #24]
 80019ba:	4a09      	ldr	r2, [pc, #36]	@ (80019e0 <HAL_TIM_Base_MspInit+0xa8>)
 80019bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80019c0:	6193      	str	r3, [r2, #24]
 80019c2:	4b07      	ldr	r3, [pc, #28]	@ (80019e0 <HAL_TIM_Base_MspInit+0xa8>)
 80019c4:	699b      	ldr	r3, [r3, #24]
 80019c6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80019ca:	60bb      	str	r3, [r7, #8]
 80019cc:	68bb      	ldr	r3, [r7, #8]
}
 80019ce:	bf00      	nop
 80019d0:	371c      	adds	r7, #28
 80019d2:	46bd      	mov	sp, r7
 80019d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d8:	4770      	bx	lr
 80019da:	bf00      	nop
 80019dc:	40012c00 	.word	0x40012c00
 80019e0:	40021000 	.word	0x40021000
 80019e4:	40000400 	.word	0x40000400
 80019e8:	40014000 	.word	0x40014000

080019ec <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b08a      	sub	sp, #40	@ 0x28
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019f4:	f107 0314 	add.w	r3, r7, #20
 80019f8:	2200      	movs	r2, #0
 80019fa:	601a      	str	r2, [r3, #0]
 80019fc:	605a      	str	r2, [r3, #4]
 80019fe:	609a      	str	r2, [r3, #8]
 8001a00:	60da      	str	r2, [r3, #12]
 8001a02:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001a0c:	d11c      	bne.n	8001a48 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a0e:	4b21      	ldr	r3, [pc, #132]	@ (8001a94 <HAL_TIM_MspPostInit+0xa8>)
 8001a10:	695b      	ldr	r3, [r3, #20]
 8001a12:	4a20      	ldr	r2, [pc, #128]	@ (8001a94 <HAL_TIM_MspPostInit+0xa8>)
 8001a14:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001a18:	6153      	str	r3, [r2, #20]
 8001a1a:	4b1e      	ldr	r3, [pc, #120]	@ (8001a94 <HAL_TIM_MspPostInit+0xa8>)
 8001a1c:	695b      	ldr	r3, [r3, #20]
 8001a1e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001a22:	613b      	str	r3, [r7, #16]
 8001a24:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = SIG_N1_Pin;
 8001a26:	2308      	movs	r3, #8
 8001a28:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a2a:	2302      	movs	r3, #2
 8001a2c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a32:	2300      	movs	r3, #0
 8001a34:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001a36:	2301      	movs	r3, #1
 8001a38:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(SIG_N1_GPIO_Port, &GPIO_InitStruct);
 8001a3a:	f107 0314 	add.w	r3, r7, #20
 8001a3e:	4619      	mov	r1, r3
 8001a40:	4815      	ldr	r0, [pc, #84]	@ (8001a98 <HAL_TIM_MspPostInit+0xac>)
 8001a42:	f000 fc45 	bl	80022d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001a46:	e020      	b.n	8001a8a <HAL_TIM_MspPostInit+0x9e>
  else if(htim->Instance==TIM3)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	4a13      	ldr	r2, [pc, #76]	@ (8001a9c <HAL_TIM_MspPostInit+0xb0>)
 8001a4e:	4293      	cmp	r3, r2
 8001a50:	d11b      	bne.n	8001a8a <HAL_TIM_MspPostInit+0x9e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a52:	4b10      	ldr	r3, [pc, #64]	@ (8001a94 <HAL_TIM_MspPostInit+0xa8>)
 8001a54:	695b      	ldr	r3, [r3, #20]
 8001a56:	4a0f      	ldr	r2, [pc, #60]	@ (8001a94 <HAL_TIM_MspPostInit+0xa8>)
 8001a58:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001a5c:	6153      	str	r3, [r2, #20]
 8001a5e:	4b0d      	ldr	r3, [pc, #52]	@ (8001a94 <HAL_TIM_MspPostInit+0xa8>)
 8001a60:	695b      	ldr	r3, [r3, #20]
 8001a62:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001a66:	60fb      	str	r3, [r7, #12]
 8001a68:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = SIG_N2_Pin;
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a6e:	2302      	movs	r3, #2
 8001a70:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a72:	2300      	movs	r3, #0
 8001a74:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a76:	2300      	movs	r3, #0
 8001a78:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001a7a:	2302      	movs	r3, #2
 8001a7c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(SIG_N2_GPIO_Port, &GPIO_InitStruct);
 8001a7e:	f107 0314 	add.w	r3, r7, #20
 8001a82:	4619      	mov	r1, r3
 8001a84:	4804      	ldr	r0, [pc, #16]	@ (8001a98 <HAL_TIM_MspPostInit+0xac>)
 8001a86:	f000 fc23 	bl	80022d0 <HAL_GPIO_Init>
}
 8001a8a:	bf00      	nop
 8001a8c:	3728      	adds	r7, #40	@ 0x28
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bd80      	pop	{r7, pc}
 8001a92:	bf00      	nop
 8001a94:	40021000 	.word	0x40021000
 8001a98:	48000400 	.word	0x48000400
 8001a9c:	40000400 	.word	0x40000400

08001aa0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b08c      	sub	sp, #48	@ 0x30
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001aa8:	f107 031c 	add.w	r3, r7, #28
 8001aac:	2200      	movs	r2, #0
 8001aae:	601a      	str	r2, [r3, #0]
 8001ab0:	605a      	str	r2, [r3, #4]
 8001ab2:	609a      	str	r2, [r3, #8]
 8001ab4:	60da      	str	r2, [r3, #12]
 8001ab6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	4a33      	ldr	r2, [pc, #204]	@ (8001b8c <HAL_UART_MspInit+0xec>)
 8001abe:	4293      	cmp	r3, r2
 8001ac0:	d132      	bne.n	8001b28 <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001ac2:	4b33      	ldr	r3, [pc, #204]	@ (8001b90 <HAL_UART_MspInit+0xf0>)
 8001ac4:	699b      	ldr	r3, [r3, #24]
 8001ac6:	4a32      	ldr	r2, [pc, #200]	@ (8001b90 <HAL_UART_MspInit+0xf0>)
 8001ac8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001acc:	6193      	str	r3, [r2, #24]
 8001ace:	4b30      	ldr	r3, [pc, #192]	@ (8001b90 <HAL_UART_MspInit+0xf0>)
 8001ad0:	699b      	ldr	r3, [r3, #24]
 8001ad2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001ad6:	61bb      	str	r3, [r7, #24]
 8001ad8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ada:	4b2d      	ldr	r3, [pc, #180]	@ (8001b90 <HAL_UART_MspInit+0xf0>)
 8001adc:	695b      	ldr	r3, [r3, #20]
 8001ade:	4a2c      	ldr	r2, [pc, #176]	@ (8001b90 <HAL_UART_MspInit+0xf0>)
 8001ae0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001ae4:	6153      	str	r3, [r2, #20]
 8001ae6:	4b2a      	ldr	r3, [pc, #168]	@ (8001b90 <HAL_UART_MspInit+0xf0>)
 8001ae8:	695b      	ldr	r3, [r3, #20]
 8001aea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001aee:	617b      	str	r3, [r7, #20]
 8001af0:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = PC_UART_TXD_Pin|PC_UART_RXD_Pin;
 8001af2:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001af6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001af8:	2312      	movs	r3, #18
 8001afa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001afc:	2300      	movs	r3, #0
 8001afe:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b00:	2303      	movs	r3, #3
 8001b02:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001b04:	2307      	movs	r3, #7
 8001b06:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b08:	f107 031c 	add.w	r3, r7, #28
 8001b0c:	4619      	mov	r1, r3
 8001b0e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001b12:	f000 fbdd 	bl	80022d0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001b16:	2200      	movs	r2, #0
 8001b18:	2100      	movs	r1, #0
 8001b1a:	2025      	movs	r0, #37	@ 0x25
 8001b1c:	f000 fb25 	bl	800216a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001b20:	2025      	movs	r0, #37	@ 0x25
 8001b22:	f000 fb3e 	bl	80021a2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001b26:	e02d      	b.n	8001b84 <HAL_UART_MspInit+0xe4>
  else if(huart->Instance==USART2)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	4a19      	ldr	r2, [pc, #100]	@ (8001b94 <HAL_UART_MspInit+0xf4>)
 8001b2e:	4293      	cmp	r3, r2
 8001b30:	d128      	bne.n	8001b84 <HAL_UART_MspInit+0xe4>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001b32:	4b17      	ldr	r3, [pc, #92]	@ (8001b90 <HAL_UART_MspInit+0xf0>)
 8001b34:	69db      	ldr	r3, [r3, #28]
 8001b36:	4a16      	ldr	r2, [pc, #88]	@ (8001b90 <HAL_UART_MspInit+0xf0>)
 8001b38:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001b3c:	61d3      	str	r3, [r2, #28]
 8001b3e:	4b14      	ldr	r3, [pc, #80]	@ (8001b90 <HAL_UART_MspInit+0xf0>)
 8001b40:	69db      	ldr	r3, [r3, #28]
 8001b42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b46:	613b      	str	r3, [r7, #16]
 8001b48:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b4a:	4b11      	ldr	r3, [pc, #68]	@ (8001b90 <HAL_UART_MspInit+0xf0>)
 8001b4c:	695b      	ldr	r3, [r3, #20]
 8001b4e:	4a10      	ldr	r2, [pc, #64]	@ (8001b90 <HAL_UART_MspInit+0xf0>)
 8001b50:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001b54:	6153      	str	r3, [r2, #20]
 8001b56:	4b0e      	ldr	r3, [pc, #56]	@ (8001b90 <HAL_UART_MspInit+0xf0>)
 8001b58:	695b      	ldr	r3, [r3, #20]
 8001b5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b5e:	60fb      	str	r3, [r7, #12]
 8001b60:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = N_C__Pin|UART_RX_Pin;
 8001b62:	230c      	movs	r3, #12
 8001b64:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b66:	2312      	movs	r3, #18
 8001b68:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b6e:	2303      	movs	r3, #3
 8001b70:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001b72:	2307      	movs	r3, #7
 8001b74:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b76:	f107 031c 	add.w	r3, r7, #28
 8001b7a:	4619      	mov	r1, r3
 8001b7c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001b80:	f000 fba6 	bl	80022d0 <HAL_GPIO_Init>
}
 8001b84:	bf00      	nop
 8001b86:	3730      	adds	r7, #48	@ 0x30
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	bd80      	pop	{r7, pc}
 8001b8c:	40013800 	.word	0x40013800
 8001b90:	40021000 	.word	0x40021000
 8001b94:	40004400 	.word	0x40004400

08001b98 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001b9c:	bf00      	nop
 8001b9e:	e7fd      	b.n	8001b9c <NMI_Handler+0x4>

08001ba0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ba4:	bf00      	nop
 8001ba6:	e7fd      	b.n	8001ba4 <HardFault_Handler+0x4>

08001ba8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001bac:	bf00      	nop
 8001bae:	e7fd      	b.n	8001bac <MemManage_Handler+0x4>

08001bb0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001bb4:	bf00      	nop
 8001bb6:	e7fd      	b.n	8001bb4 <BusFault_Handler+0x4>

08001bb8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001bbc:	bf00      	nop
 8001bbe:	e7fd      	b.n	8001bbc <UsageFault_Handler+0x4>

08001bc0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001bc4:	bf00      	nop
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bcc:	4770      	bx	lr

08001bce <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001bce:	b480      	push	{r7}
 8001bd0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001bd2:	bf00      	nop
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bda:	4770      	bx	lr

08001bdc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001be0:	bf00      	nop
 8001be2:	46bd      	mov	sp, r7
 8001be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be8:	4770      	bx	lr

08001bea <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001bea:	b580      	push	{r7, lr}
 8001bec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001bee:	f000 f8c5 	bl	8001d7c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001bf2:	bf00      	nop
 8001bf4:	bd80      	pop	{r7, pc}
	...

08001bf8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXT line 25.
  */
void USART1_IRQHandler(void)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001bfc:	4802      	ldr	r0, [pc, #8]	@ (8001c08 <USART1_IRQHandler+0x10>)
 8001bfe:	f003 fb53 	bl	80052a8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001c02:	bf00      	nop
 8001c04:	bd80      	pop	{r7, pc}
 8001c06:	bf00      	nop
 8001c08:	20000af8 	.word	0x20000af8

08001c0c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b086      	sub	sp, #24
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c14:	4a14      	ldr	r2, [pc, #80]	@ (8001c68 <_sbrk+0x5c>)
 8001c16:	4b15      	ldr	r3, [pc, #84]	@ (8001c6c <_sbrk+0x60>)
 8001c18:	1ad3      	subs	r3, r2, r3
 8001c1a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c1c:	697b      	ldr	r3, [r7, #20]
 8001c1e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c20:	4b13      	ldr	r3, [pc, #76]	@ (8001c70 <_sbrk+0x64>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d102      	bne.n	8001c2e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c28:	4b11      	ldr	r3, [pc, #68]	@ (8001c70 <_sbrk+0x64>)
 8001c2a:	4a12      	ldr	r2, [pc, #72]	@ (8001c74 <_sbrk+0x68>)
 8001c2c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c2e:	4b10      	ldr	r3, [pc, #64]	@ (8001c70 <_sbrk+0x64>)
 8001c30:	681a      	ldr	r2, [r3, #0]
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	4413      	add	r3, r2
 8001c36:	693a      	ldr	r2, [r7, #16]
 8001c38:	429a      	cmp	r2, r3
 8001c3a:	d207      	bcs.n	8001c4c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c3c:	f004 fa0e 	bl	800605c <__errno>
 8001c40:	4603      	mov	r3, r0
 8001c42:	220c      	movs	r2, #12
 8001c44:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c46:	f04f 33ff 	mov.w	r3, #4294967295
 8001c4a:	e009      	b.n	8001c60 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c4c:	4b08      	ldr	r3, [pc, #32]	@ (8001c70 <_sbrk+0x64>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c52:	4b07      	ldr	r3, [pc, #28]	@ (8001c70 <_sbrk+0x64>)
 8001c54:	681a      	ldr	r2, [r3, #0]
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	4413      	add	r3, r2
 8001c5a:	4a05      	ldr	r2, [pc, #20]	@ (8001c70 <_sbrk+0x64>)
 8001c5c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c5e:	68fb      	ldr	r3, [r7, #12]
}
 8001c60:	4618      	mov	r0, r3
 8001c62:	3718      	adds	r7, #24
 8001c64:	46bd      	mov	sp, r7
 8001c66:	bd80      	pop	{r7, pc}
 8001c68:	20003000 	.word	0x20003000
 8001c6c:	00000400 	.word	0x00000400
 8001c70:	20000c64 	.word	0x20000c64
 8001c74:	20000db8 	.word	0x20000db8

08001c78 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001c7c:	4b06      	ldr	r3, [pc, #24]	@ (8001c98 <SystemInit+0x20>)
 8001c7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001c82:	4a05      	ldr	r2, [pc, #20]	@ (8001c98 <SystemInit+0x20>)
 8001c84:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001c88:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c8c:	bf00      	nop
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c94:	4770      	bx	lr
 8001c96:	bf00      	nop
 8001c98:	e000ed00 	.word	0xe000ed00

08001c9c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001c9c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001cd4 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001ca0:	f7ff ffea 	bl	8001c78 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001ca4:	480c      	ldr	r0, [pc, #48]	@ (8001cd8 <LoopForever+0x6>)
  ldr r1, =_edata
 8001ca6:	490d      	ldr	r1, [pc, #52]	@ (8001cdc <LoopForever+0xa>)
  ldr r2, =_sidata
 8001ca8:	4a0d      	ldr	r2, [pc, #52]	@ (8001ce0 <LoopForever+0xe>)
  movs r3, #0
 8001caa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001cac:	e002      	b.n	8001cb4 <LoopCopyDataInit>

08001cae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001cae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001cb0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001cb2:	3304      	adds	r3, #4

08001cb4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001cb4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001cb6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001cb8:	d3f9      	bcc.n	8001cae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001cba:	4a0a      	ldr	r2, [pc, #40]	@ (8001ce4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001cbc:	4c0a      	ldr	r4, [pc, #40]	@ (8001ce8 <LoopForever+0x16>)
  movs r3, #0
 8001cbe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001cc0:	e001      	b.n	8001cc6 <LoopFillZerobss>

08001cc2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001cc2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001cc4:	3204      	adds	r2, #4

08001cc6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001cc6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001cc8:	d3fb      	bcc.n	8001cc2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001cca:	f004 f9cd 	bl	8006068 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001cce:	f7ff fa9b 	bl	8001208 <main>

08001cd2 <LoopForever>:

LoopForever:
    b LoopForever
 8001cd2:	e7fe      	b.n	8001cd2 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001cd4:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8001cd8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001cdc:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8001ce0:	0800745c 	.word	0x0800745c
  ldr r2, =_sbss
 8001ce4:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8001ce8:	20000db4 	.word	0x20000db4

08001cec <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001cec:	e7fe      	b.n	8001cec <ADC1_2_IRQHandler>
	...

08001cf0 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001cf4:	4b08      	ldr	r3, [pc, #32]	@ (8001d18 <HAL_Init+0x28>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	4a07      	ldr	r2, [pc, #28]	@ (8001d18 <HAL_Init+0x28>)
 8001cfa:	f043 0310 	orr.w	r3, r3, #16
 8001cfe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d00:	2003      	movs	r0, #3
 8001d02:	f000 fa27 	bl	8002154 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d06:	200f      	movs	r0, #15
 8001d08:	f000 f808 	bl	8001d1c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d0c:	f7ff fdac 	bl	8001868 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d10:	2300      	movs	r3, #0
}
 8001d12:	4618      	mov	r0, r3
 8001d14:	bd80      	pop	{r7, pc}
 8001d16:	bf00      	nop
 8001d18:	40022000 	.word	0x40022000

08001d1c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b082      	sub	sp, #8
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001d24:	4b12      	ldr	r3, [pc, #72]	@ (8001d70 <HAL_InitTick+0x54>)
 8001d26:	681a      	ldr	r2, [r3, #0]
 8001d28:	4b12      	ldr	r3, [pc, #72]	@ (8001d74 <HAL_InitTick+0x58>)
 8001d2a:	781b      	ldrb	r3, [r3, #0]
 8001d2c:	4619      	mov	r1, r3
 8001d2e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001d32:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d36:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	f000 fa3f 	bl	80021be <HAL_SYSTICK_Config>
 8001d40:	4603      	mov	r3, r0
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d001      	beq.n	8001d4a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001d46:	2301      	movs	r3, #1
 8001d48:	e00e      	b.n	8001d68 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	2b0f      	cmp	r3, #15
 8001d4e:	d80a      	bhi.n	8001d66 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d50:	2200      	movs	r2, #0
 8001d52:	6879      	ldr	r1, [r7, #4]
 8001d54:	f04f 30ff 	mov.w	r0, #4294967295
 8001d58:	f000 fa07 	bl	800216a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d5c:	4a06      	ldr	r2, [pc, #24]	@ (8001d78 <HAL_InitTick+0x5c>)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001d62:	2300      	movs	r3, #0
 8001d64:	e000      	b.n	8001d68 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001d66:	2301      	movs	r3, #1
}
 8001d68:	4618      	mov	r0, r3
 8001d6a:	3708      	adds	r7, #8
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	bd80      	pop	{r7, pc}
 8001d70:	20000000 	.word	0x20000000
 8001d74:	20000008 	.word	0x20000008
 8001d78:	20000004 	.word	0x20000004

08001d7c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d80:	4b06      	ldr	r3, [pc, #24]	@ (8001d9c <HAL_IncTick+0x20>)
 8001d82:	781b      	ldrb	r3, [r3, #0]
 8001d84:	461a      	mov	r2, r3
 8001d86:	4b06      	ldr	r3, [pc, #24]	@ (8001da0 <HAL_IncTick+0x24>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	4413      	add	r3, r2
 8001d8c:	4a04      	ldr	r2, [pc, #16]	@ (8001da0 <HAL_IncTick+0x24>)
 8001d8e:	6013      	str	r3, [r2, #0]
}
 8001d90:	bf00      	nop
 8001d92:	46bd      	mov	sp, r7
 8001d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d98:	4770      	bx	lr
 8001d9a:	bf00      	nop
 8001d9c:	20000008 	.word	0x20000008
 8001da0:	20000c68 	.word	0x20000c68

08001da4 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001da4:	b480      	push	{r7}
 8001da6:	af00      	add	r7, sp, #0
  return uwTick;  
 8001da8:	4b03      	ldr	r3, [pc, #12]	@ (8001db8 <HAL_GetTick+0x14>)
 8001daa:	681b      	ldr	r3, [r3, #0]
}
 8001dac:	4618      	mov	r0, r3
 8001dae:	46bd      	mov	sp, r7
 8001db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db4:	4770      	bx	lr
 8001db6:	bf00      	nop
 8001db8:	20000c68 	.word	0x20000c68

08001dbc <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b084      	sub	sp, #16
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d101      	bne.n	8001dce <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001dca:	2301      	movs	r3, #1
 8001dcc:	e0ed      	b.n	8001faa <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001dd4:	b2db      	uxtb	r3, r3
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d102      	bne.n	8001de0 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001dda:	6878      	ldr	r0, [r7, #4]
 8001ddc:	f7ff fd68 	bl	80018b0 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	681a      	ldr	r2, [r3, #0]
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f042 0201 	orr.w	r2, r2, #1
 8001dee:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001df0:	f7ff ffd8 	bl	8001da4 <HAL_GetTick>
 8001df4:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001df6:	e012      	b.n	8001e1e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001df8:	f7ff ffd4 	bl	8001da4 <HAL_GetTick>
 8001dfc:	4602      	mov	r2, r0
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	1ad3      	subs	r3, r2, r3
 8001e02:	2b0a      	cmp	r3, #10
 8001e04:	d90b      	bls.n	8001e1e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e0a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	2205      	movs	r2, #5
 8001e16:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	e0c5      	b.n	8001faa <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	685b      	ldr	r3, [r3, #4]
 8001e24:	f003 0301 	and.w	r3, r3, #1
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d0e5      	beq.n	8001df8 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	681a      	ldr	r2, [r3, #0]
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f022 0202 	bic.w	r2, r2, #2
 8001e3a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001e3c:	f7ff ffb2 	bl	8001da4 <HAL_GetTick>
 8001e40:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001e42:	e012      	b.n	8001e6a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001e44:	f7ff ffae 	bl	8001da4 <HAL_GetTick>
 8001e48:	4602      	mov	r2, r0
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	1ad3      	subs	r3, r2, r3
 8001e4e:	2b0a      	cmp	r3, #10
 8001e50:	d90b      	bls.n	8001e6a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e56:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	2205      	movs	r2, #5
 8001e62:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001e66:	2301      	movs	r3, #1
 8001e68:	e09f      	b.n	8001faa <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	685b      	ldr	r3, [r3, #4]
 8001e70:	f003 0302 	and.w	r3, r3, #2
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d1e5      	bne.n	8001e44 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	7e1b      	ldrb	r3, [r3, #24]
 8001e7c:	2b01      	cmp	r3, #1
 8001e7e:	d108      	bne.n	8001e92 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	681a      	ldr	r2, [r3, #0]
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001e8e:	601a      	str	r2, [r3, #0]
 8001e90:	e007      	b.n	8001ea2 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	681a      	ldr	r2, [r3, #0]
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001ea0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	7e5b      	ldrb	r3, [r3, #25]
 8001ea6:	2b01      	cmp	r3, #1
 8001ea8:	d108      	bne.n	8001ebc <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	681a      	ldr	r2, [r3, #0]
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001eb8:	601a      	str	r2, [r3, #0]
 8001eba:	e007      	b.n	8001ecc <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	681a      	ldr	r2, [r3, #0]
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001eca:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	7e9b      	ldrb	r3, [r3, #26]
 8001ed0:	2b01      	cmp	r3, #1
 8001ed2:	d108      	bne.n	8001ee6 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	681a      	ldr	r2, [r3, #0]
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f042 0220 	orr.w	r2, r2, #32
 8001ee2:	601a      	str	r2, [r3, #0]
 8001ee4:	e007      	b.n	8001ef6 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	681a      	ldr	r2, [r3, #0]
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f022 0220 	bic.w	r2, r2, #32
 8001ef4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	7edb      	ldrb	r3, [r3, #27]
 8001efa:	2b01      	cmp	r3, #1
 8001efc:	d108      	bne.n	8001f10 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	681a      	ldr	r2, [r3, #0]
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f022 0210 	bic.w	r2, r2, #16
 8001f0c:	601a      	str	r2, [r3, #0]
 8001f0e:	e007      	b.n	8001f20 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	681a      	ldr	r2, [r3, #0]
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f042 0210 	orr.w	r2, r2, #16
 8001f1e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	7f1b      	ldrb	r3, [r3, #28]
 8001f24:	2b01      	cmp	r3, #1
 8001f26:	d108      	bne.n	8001f3a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	681a      	ldr	r2, [r3, #0]
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f042 0208 	orr.w	r2, r2, #8
 8001f36:	601a      	str	r2, [r3, #0]
 8001f38:	e007      	b.n	8001f4a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	681a      	ldr	r2, [r3, #0]
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f022 0208 	bic.w	r2, r2, #8
 8001f48:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	7f5b      	ldrb	r3, [r3, #29]
 8001f4e:	2b01      	cmp	r3, #1
 8001f50:	d108      	bne.n	8001f64 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	681a      	ldr	r2, [r3, #0]
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f042 0204 	orr.w	r2, r2, #4
 8001f60:	601a      	str	r2, [r3, #0]
 8001f62:	e007      	b.n	8001f74 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	681a      	ldr	r2, [r3, #0]
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f022 0204 	bic.w	r2, r2, #4
 8001f72:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	689a      	ldr	r2, [r3, #8]
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	68db      	ldr	r3, [r3, #12]
 8001f7c:	431a      	orrs	r2, r3
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	691b      	ldr	r3, [r3, #16]
 8001f82:	431a      	orrs	r2, r3
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	695b      	ldr	r3, [r3, #20]
 8001f88:	ea42 0103 	orr.w	r1, r2, r3
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	685b      	ldr	r3, [r3, #4]
 8001f90:	1e5a      	subs	r2, r3, #1
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	430a      	orrs	r2, r1
 8001f98:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	2201      	movs	r2, #1
 8001fa4:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001fa8:	2300      	movs	r3, #0
}
 8001faa:	4618      	mov	r0, r3
 8001fac:	3710      	adds	r7, #16
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bd80      	pop	{r7, pc}
	...

08001fb4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	b085      	sub	sp, #20
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	f003 0307 	and.w	r3, r3, #7
 8001fc2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001fc4:	4b0c      	ldr	r3, [pc, #48]	@ (8001ff8 <__NVIC_SetPriorityGrouping+0x44>)
 8001fc6:	68db      	ldr	r3, [r3, #12]
 8001fc8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001fca:	68ba      	ldr	r2, [r7, #8]
 8001fcc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001fd0:	4013      	ands	r3, r2
 8001fd2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001fd8:	68bb      	ldr	r3, [r7, #8]
 8001fda:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001fdc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001fe0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001fe4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001fe6:	4a04      	ldr	r2, [pc, #16]	@ (8001ff8 <__NVIC_SetPriorityGrouping+0x44>)
 8001fe8:	68bb      	ldr	r3, [r7, #8]
 8001fea:	60d3      	str	r3, [r2, #12]
}
 8001fec:	bf00      	nop
 8001fee:	3714      	adds	r7, #20
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff6:	4770      	bx	lr
 8001ff8:	e000ed00 	.word	0xe000ed00

08001ffc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002000:	4b04      	ldr	r3, [pc, #16]	@ (8002014 <__NVIC_GetPriorityGrouping+0x18>)
 8002002:	68db      	ldr	r3, [r3, #12]
 8002004:	0a1b      	lsrs	r3, r3, #8
 8002006:	f003 0307 	and.w	r3, r3, #7
}
 800200a:	4618      	mov	r0, r3
 800200c:	46bd      	mov	sp, r7
 800200e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002012:	4770      	bx	lr
 8002014:	e000ed00 	.word	0xe000ed00

08002018 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002018:	b480      	push	{r7}
 800201a:	b083      	sub	sp, #12
 800201c:	af00      	add	r7, sp, #0
 800201e:	4603      	mov	r3, r0
 8002020:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002022:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002026:	2b00      	cmp	r3, #0
 8002028:	db0b      	blt.n	8002042 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800202a:	79fb      	ldrb	r3, [r7, #7]
 800202c:	f003 021f 	and.w	r2, r3, #31
 8002030:	4907      	ldr	r1, [pc, #28]	@ (8002050 <__NVIC_EnableIRQ+0x38>)
 8002032:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002036:	095b      	lsrs	r3, r3, #5
 8002038:	2001      	movs	r0, #1
 800203a:	fa00 f202 	lsl.w	r2, r0, r2
 800203e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002042:	bf00      	nop
 8002044:	370c      	adds	r7, #12
 8002046:	46bd      	mov	sp, r7
 8002048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204c:	4770      	bx	lr
 800204e:	bf00      	nop
 8002050:	e000e100 	.word	0xe000e100

08002054 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002054:	b480      	push	{r7}
 8002056:	b083      	sub	sp, #12
 8002058:	af00      	add	r7, sp, #0
 800205a:	4603      	mov	r3, r0
 800205c:	6039      	str	r1, [r7, #0]
 800205e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002060:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002064:	2b00      	cmp	r3, #0
 8002066:	db0a      	blt.n	800207e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	b2da      	uxtb	r2, r3
 800206c:	490c      	ldr	r1, [pc, #48]	@ (80020a0 <__NVIC_SetPriority+0x4c>)
 800206e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002072:	0112      	lsls	r2, r2, #4
 8002074:	b2d2      	uxtb	r2, r2
 8002076:	440b      	add	r3, r1
 8002078:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800207c:	e00a      	b.n	8002094 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	b2da      	uxtb	r2, r3
 8002082:	4908      	ldr	r1, [pc, #32]	@ (80020a4 <__NVIC_SetPriority+0x50>)
 8002084:	79fb      	ldrb	r3, [r7, #7]
 8002086:	f003 030f 	and.w	r3, r3, #15
 800208a:	3b04      	subs	r3, #4
 800208c:	0112      	lsls	r2, r2, #4
 800208e:	b2d2      	uxtb	r2, r2
 8002090:	440b      	add	r3, r1
 8002092:	761a      	strb	r2, [r3, #24]
}
 8002094:	bf00      	nop
 8002096:	370c      	adds	r7, #12
 8002098:	46bd      	mov	sp, r7
 800209a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209e:	4770      	bx	lr
 80020a0:	e000e100 	.word	0xe000e100
 80020a4:	e000ed00 	.word	0xe000ed00

080020a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020a8:	b480      	push	{r7}
 80020aa:	b089      	sub	sp, #36	@ 0x24
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	60f8      	str	r0, [r7, #12]
 80020b0:	60b9      	str	r1, [r7, #8]
 80020b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	f003 0307 	and.w	r3, r3, #7
 80020ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80020bc:	69fb      	ldr	r3, [r7, #28]
 80020be:	f1c3 0307 	rsb	r3, r3, #7
 80020c2:	2b04      	cmp	r3, #4
 80020c4:	bf28      	it	cs
 80020c6:	2304      	movcs	r3, #4
 80020c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80020ca:	69fb      	ldr	r3, [r7, #28]
 80020cc:	3304      	adds	r3, #4
 80020ce:	2b06      	cmp	r3, #6
 80020d0:	d902      	bls.n	80020d8 <NVIC_EncodePriority+0x30>
 80020d2:	69fb      	ldr	r3, [r7, #28]
 80020d4:	3b03      	subs	r3, #3
 80020d6:	e000      	b.n	80020da <NVIC_EncodePriority+0x32>
 80020d8:	2300      	movs	r3, #0
 80020da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020dc:	f04f 32ff 	mov.w	r2, #4294967295
 80020e0:	69bb      	ldr	r3, [r7, #24]
 80020e2:	fa02 f303 	lsl.w	r3, r2, r3
 80020e6:	43da      	mvns	r2, r3
 80020e8:	68bb      	ldr	r3, [r7, #8]
 80020ea:	401a      	ands	r2, r3
 80020ec:	697b      	ldr	r3, [r7, #20]
 80020ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80020f0:	f04f 31ff 	mov.w	r1, #4294967295
 80020f4:	697b      	ldr	r3, [r7, #20]
 80020f6:	fa01 f303 	lsl.w	r3, r1, r3
 80020fa:	43d9      	mvns	r1, r3
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002100:	4313      	orrs	r3, r2
         );
}
 8002102:	4618      	mov	r0, r3
 8002104:	3724      	adds	r7, #36	@ 0x24
 8002106:	46bd      	mov	sp, r7
 8002108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210c:	4770      	bx	lr
	...

08002110 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b082      	sub	sp, #8
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	3b01      	subs	r3, #1
 800211c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002120:	d301      	bcc.n	8002126 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002122:	2301      	movs	r3, #1
 8002124:	e00f      	b.n	8002146 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002126:	4a0a      	ldr	r2, [pc, #40]	@ (8002150 <SysTick_Config+0x40>)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	3b01      	subs	r3, #1
 800212c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800212e:	210f      	movs	r1, #15
 8002130:	f04f 30ff 	mov.w	r0, #4294967295
 8002134:	f7ff ff8e 	bl	8002054 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002138:	4b05      	ldr	r3, [pc, #20]	@ (8002150 <SysTick_Config+0x40>)
 800213a:	2200      	movs	r2, #0
 800213c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800213e:	4b04      	ldr	r3, [pc, #16]	@ (8002150 <SysTick_Config+0x40>)
 8002140:	2207      	movs	r2, #7
 8002142:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002144:	2300      	movs	r3, #0
}
 8002146:	4618      	mov	r0, r3
 8002148:	3708      	adds	r7, #8
 800214a:	46bd      	mov	sp, r7
 800214c:	bd80      	pop	{r7, pc}
 800214e:	bf00      	nop
 8002150:	e000e010 	.word	0xe000e010

08002154 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b082      	sub	sp, #8
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800215c:	6878      	ldr	r0, [r7, #4]
 800215e:	f7ff ff29 	bl	8001fb4 <__NVIC_SetPriorityGrouping>
}
 8002162:	bf00      	nop
 8002164:	3708      	adds	r7, #8
 8002166:	46bd      	mov	sp, r7
 8002168:	bd80      	pop	{r7, pc}

0800216a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800216a:	b580      	push	{r7, lr}
 800216c:	b086      	sub	sp, #24
 800216e:	af00      	add	r7, sp, #0
 8002170:	4603      	mov	r3, r0
 8002172:	60b9      	str	r1, [r7, #8]
 8002174:	607a      	str	r2, [r7, #4]
 8002176:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002178:	2300      	movs	r3, #0
 800217a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800217c:	f7ff ff3e 	bl	8001ffc <__NVIC_GetPriorityGrouping>
 8002180:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002182:	687a      	ldr	r2, [r7, #4]
 8002184:	68b9      	ldr	r1, [r7, #8]
 8002186:	6978      	ldr	r0, [r7, #20]
 8002188:	f7ff ff8e 	bl	80020a8 <NVIC_EncodePriority>
 800218c:	4602      	mov	r2, r0
 800218e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002192:	4611      	mov	r1, r2
 8002194:	4618      	mov	r0, r3
 8002196:	f7ff ff5d 	bl	8002054 <__NVIC_SetPriority>
}
 800219a:	bf00      	nop
 800219c:	3718      	adds	r7, #24
 800219e:	46bd      	mov	sp, r7
 80021a0:	bd80      	pop	{r7, pc}

080021a2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021a2:	b580      	push	{r7, lr}
 80021a4:	b082      	sub	sp, #8
 80021a6:	af00      	add	r7, sp, #0
 80021a8:	4603      	mov	r3, r0
 80021aa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80021ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021b0:	4618      	mov	r0, r3
 80021b2:	f7ff ff31 	bl	8002018 <__NVIC_EnableIRQ>
}
 80021b6:	bf00      	nop
 80021b8:	3708      	adds	r7, #8
 80021ba:	46bd      	mov	sp, r7
 80021bc:	bd80      	pop	{r7, pc}

080021be <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80021be:	b580      	push	{r7, lr}
 80021c0:	b082      	sub	sp, #8
 80021c2:	af00      	add	r7, sp, #0
 80021c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80021c6:	6878      	ldr	r0, [r7, #4]
 80021c8:	f7ff ffa2 	bl	8002110 <SysTick_Config>
 80021cc:	4603      	mov	r3, r0
}
 80021ce:	4618      	mov	r0, r3
 80021d0:	3708      	adds	r7, #8
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bd80      	pop	{r7, pc}

080021d6 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80021d6:	b480      	push	{r7}
 80021d8:	b083      	sub	sp, #12
 80021da:	af00      	add	r7, sp, #0
 80021dc:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d101      	bne.n	80021e8 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 80021e4:	2301      	movs	r3, #1
 80021e6:	e02e      	b.n	8002246 <HAL_DMA_Abort+0x70>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80021ee:	2b02      	cmp	r3, #2
 80021f0:	d008      	beq.n	8002204 <HAL_DMA_Abort+0x2e>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	2204      	movs	r2, #4
 80021f6:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	2200      	movs	r2, #0
 80021fc:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 8002200:	2301      	movs	r3, #1
 8002202:	e020      	b.n	8002246 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	681a      	ldr	r2, [r3, #0]
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f022 020e 	bic.w	r2, r2, #14
 8002212:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	681a      	ldr	r2, [r3, #0]
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f022 0201 	bic.w	r2, r2, #1
 8002222:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800222c:	2101      	movs	r1, #1
 800222e:	fa01 f202 	lsl.w	r2, r1, r2
 8002232:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	2201      	movs	r2, #1
 8002238:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	2200      	movs	r2, #0
 8002240:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002244:	2300      	movs	r3, #0
}
 8002246:	4618      	mov	r0, r3
 8002248:	370c      	adds	r7, #12
 800224a:	46bd      	mov	sp, r7
 800224c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002250:	4770      	bx	lr

08002252 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002252:	b580      	push	{r7, lr}
 8002254:	b084      	sub	sp, #16
 8002256:	af00      	add	r7, sp, #0
 8002258:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800225a:	2300      	movs	r3, #0
 800225c:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002264:	2b02      	cmp	r3, #2
 8002266:	d005      	beq.n	8002274 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	2204      	movs	r2, #4
 800226c:	639a      	str	r2, [r3, #56]	@ 0x38

    status = HAL_ERROR;
 800226e:	2301      	movs	r3, #1
 8002270:	73fb      	strb	r3, [r7, #15]
 8002272:	e027      	b.n	80022c4 <HAL_DMA_Abort_IT+0x72>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	681a      	ldr	r2, [r3, #0]
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f022 020e 	bic.w	r2, r2, #14
 8002282:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	681a      	ldr	r2, [r3, #0]
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f022 0201 	bic.w	r2, r2, #1
 8002292:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800229c:	2101      	movs	r1, #1
 800229e:	fa01 f202 	lsl.w	r2, r1, r2
 80022a2:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	2201      	movs	r2, #1
 80022a8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	2200      	movs	r2, #0
 80022b0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d003      	beq.n	80022c4 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80022c0:	6878      	ldr	r0, [r7, #4]
 80022c2:	4798      	blx	r3
    }
  }
  return status;
 80022c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80022c6:	4618      	mov	r0, r3
 80022c8:	3710      	adds	r7, #16
 80022ca:	46bd      	mov	sp, r7
 80022cc:	bd80      	pop	{r7, pc}
	...

080022d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80022d0:	b480      	push	{r7}
 80022d2:	b087      	sub	sp, #28
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
 80022d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80022da:	2300      	movs	r3, #0
 80022dc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80022de:	e14e      	b.n	800257e <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	681a      	ldr	r2, [r3, #0]
 80022e4:	2101      	movs	r1, #1
 80022e6:	697b      	ldr	r3, [r7, #20]
 80022e8:	fa01 f303 	lsl.w	r3, r1, r3
 80022ec:	4013      	ands	r3, r2
 80022ee:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	f000 8140 	beq.w	8002578 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	685b      	ldr	r3, [r3, #4]
 80022fc:	f003 0303 	and.w	r3, r3, #3
 8002300:	2b01      	cmp	r3, #1
 8002302:	d005      	beq.n	8002310 <HAL_GPIO_Init+0x40>
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	685b      	ldr	r3, [r3, #4]
 8002308:	f003 0303 	and.w	r3, r3, #3
 800230c:	2b02      	cmp	r3, #2
 800230e:	d130      	bne.n	8002372 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	689b      	ldr	r3, [r3, #8]
 8002314:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002316:	697b      	ldr	r3, [r7, #20]
 8002318:	005b      	lsls	r3, r3, #1
 800231a:	2203      	movs	r2, #3
 800231c:	fa02 f303 	lsl.w	r3, r2, r3
 8002320:	43db      	mvns	r3, r3
 8002322:	693a      	ldr	r2, [r7, #16]
 8002324:	4013      	ands	r3, r2
 8002326:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	68da      	ldr	r2, [r3, #12]
 800232c:	697b      	ldr	r3, [r7, #20]
 800232e:	005b      	lsls	r3, r3, #1
 8002330:	fa02 f303 	lsl.w	r3, r2, r3
 8002334:	693a      	ldr	r2, [r7, #16]
 8002336:	4313      	orrs	r3, r2
 8002338:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	693a      	ldr	r2, [r7, #16]
 800233e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	685b      	ldr	r3, [r3, #4]
 8002344:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002346:	2201      	movs	r2, #1
 8002348:	697b      	ldr	r3, [r7, #20]
 800234a:	fa02 f303 	lsl.w	r3, r2, r3
 800234e:	43db      	mvns	r3, r3
 8002350:	693a      	ldr	r2, [r7, #16]
 8002352:	4013      	ands	r3, r2
 8002354:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	685b      	ldr	r3, [r3, #4]
 800235a:	091b      	lsrs	r3, r3, #4
 800235c:	f003 0201 	and.w	r2, r3, #1
 8002360:	697b      	ldr	r3, [r7, #20]
 8002362:	fa02 f303 	lsl.w	r3, r2, r3
 8002366:	693a      	ldr	r2, [r7, #16]
 8002368:	4313      	orrs	r3, r2
 800236a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	693a      	ldr	r2, [r7, #16]
 8002370:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	685b      	ldr	r3, [r3, #4]
 8002376:	f003 0303 	and.w	r3, r3, #3
 800237a:	2b03      	cmp	r3, #3
 800237c:	d017      	beq.n	80023ae <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	68db      	ldr	r3, [r3, #12]
 8002382:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002384:	697b      	ldr	r3, [r7, #20]
 8002386:	005b      	lsls	r3, r3, #1
 8002388:	2203      	movs	r2, #3
 800238a:	fa02 f303 	lsl.w	r3, r2, r3
 800238e:	43db      	mvns	r3, r3
 8002390:	693a      	ldr	r2, [r7, #16]
 8002392:	4013      	ands	r3, r2
 8002394:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	689a      	ldr	r2, [r3, #8]
 800239a:	697b      	ldr	r3, [r7, #20]
 800239c:	005b      	lsls	r3, r3, #1
 800239e:	fa02 f303 	lsl.w	r3, r2, r3
 80023a2:	693a      	ldr	r2, [r7, #16]
 80023a4:	4313      	orrs	r3, r2
 80023a6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	693a      	ldr	r2, [r7, #16]
 80023ac:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	685b      	ldr	r3, [r3, #4]
 80023b2:	f003 0303 	and.w	r3, r3, #3
 80023b6:	2b02      	cmp	r3, #2
 80023b8:	d123      	bne.n	8002402 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80023ba:	697b      	ldr	r3, [r7, #20]
 80023bc:	08da      	lsrs	r2, r3, #3
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	3208      	adds	r2, #8
 80023c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023c6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80023c8:	697b      	ldr	r3, [r7, #20]
 80023ca:	f003 0307 	and.w	r3, r3, #7
 80023ce:	009b      	lsls	r3, r3, #2
 80023d0:	220f      	movs	r2, #15
 80023d2:	fa02 f303 	lsl.w	r3, r2, r3
 80023d6:	43db      	mvns	r3, r3
 80023d8:	693a      	ldr	r2, [r7, #16]
 80023da:	4013      	ands	r3, r2
 80023dc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	691a      	ldr	r2, [r3, #16]
 80023e2:	697b      	ldr	r3, [r7, #20]
 80023e4:	f003 0307 	and.w	r3, r3, #7
 80023e8:	009b      	lsls	r3, r3, #2
 80023ea:	fa02 f303 	lsl.w	r3, r2, r3
 80023ee:	693a      	ldr	r2, [r7, #16]
 80023f0:	4313      	orrs	r3, r2
 80023f2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80023f4:	697b      	ldr	r3, [r7, #20]
 80023f6:	08da      	lsrs	r2, r3, #3
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	3208      	adds	r2, #8
 80023fc:	6939      	ldr	r1, [r7, #16]
 80023fe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002408:	697b      	ldr	r3, [r7, #20]
 800240a:	005b      	lsls	r3, r3, #1
 800240c:	2203      	movs	r2, #3
 800240e:	fa02 f303 	lsl.w	r3, r2, r3
 8002412:	43db      	mvns	r3, r3
 8002414:	693a      	ldr	r2, [r7, #16]
 8002416:	4013      	ands	r3, r2
 8002418:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	685b      	ldr	r3, [r3, #4]
 800241e:	f003 0203 	and.w	r2, r3, #3
 8002422:	697b      	ldr	r3, [r7, #20]
 8002424:	005b      	lsls	r3, r3, #1
 8002426:	fa02 f303 	lsl.w	r3, r2, r3
 800242a:	693a      	ldr	r2, [r7, #16]
 800242c:	4313      	orrs	r3, r2
 800242e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	693a      	ldr	r2, [r7, #16]
 8002434:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002436:	683b      	ldr	r3, [r7, #0]
 8002438:	685b      	ldr	r3, [r3, #4]
 800243a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800243e:	2b00      	cmp	r3, #0
 8002440:	f000 809a 	beq.w	8002578 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002444:	4b55      	ldr	r3, [pc, #340]	@ (800259c <HAL_GPIO_Init+0x2cc>)
 8002446:	699b      	ldr	r3, [r3, #24]
 8002448:	4a54      	ldr	r2, [pc, #336]	@ (800259c <HAL_GPIO_Init+0x2cc>)
 800244a:	f043 0301 	orr.w	r3, r3, #1
 800244e:	6193      	str	r3, [r2, #24]
 8002450:	4b52      	ldr	r3, [pc, #328]	@ (800259c <HAL_GPIO_Init+0x2cc>)
 8002452:	699b      	ldr	r3, [r3, #24]
 8002454:	f003 0301 	and.w	r3, r3, #1
 8002458:	60bb      	str	r3, [r7, #8]
 800245a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800245c:	4a50      	ldr	r2, [pc, #320]	@ (80025a0 <HAL_GPIO_Init+0x2d0>)
 800245e:	697b      	ldr	r3, [r7, #20]
 8002460:	089b      	lsrs	r3, r3, #2
 8002462:	3302      	adds	r3, #2
 8002464:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002468:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800246a:	697b      	ldr	r3, [r7, #20]
 800246c:	f003 0303 	and.w	r3, r3, #3
 8002470:	009b      	lsls	r3, r3, #2
 8002472:	220f      	movs	r2, #15
 8002474:	fa02 f303 	lsl.w	r3, r2, r3
 8002478:	43db      	mvns	r3, r3
 800247a:	693a      	ldr	r2, [r7, #16]
 800247c:	4013      	ands	r3, r2
 800247e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002486:	d013      	beq.n	80024b0 <HAL_GPIO_Init+0x1e0>
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	4a46      	ldr	r2, [pc, #280]	@ (80025a4 <HAL_GPIO_Init+0x2d4>)
 800248c:	4293      	cmp	r3, r2
 800248e:	d00d      	beq.n	80024ac <HAL_GPIO_Init+0x1dc>
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	4a45      	ldr	r2, [pc, #276]	@ (80025a8 <HAL_GPIO_Init+0x2d8>)
 8002494:	4293      	cmp	r3, r2
 8002496:	d007      	beq.n	80024a8 <HAL_GPIO_Init+0x1d8>
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	4a44      	ldr	r2, [pc, #272]	@ (80025ac <HAL_GPIO_Init+0x2dc>)
 800249c:	4293      	cmp	r3, r2
 800249e:	d101      	bne.n	80024a4 <HAL_GPIO_Init+0x1d4>
 80024a0:	2303      	movs	r3, #3
 80024a2:	e006      	b.n	80024b2 <HAL_GPIO_Init+0x1e2>
 80024a4:	2305      	movs	r3, #5
 80024a6:	e004      	b.n	80024b2 <HAL_GPIO_Init+0x1e2>
 80024a8:	2302      	movs	r3, #2
 80024aa:	e002      	b.n	80024b2 <HAL_GPIO_Init+0x1e2>
 80024ac:	2301      	movs	r3, #1
 80024ae:	e000      	b.n	80024b2 <HAL_GPIO_Init+0x1e2>
 80024b0:	2300      	movs	r3, #0
 80024b2:	697a      	ldr	r2, [r7, #20]
 80024b4:	f002 0203 	and.w	r2, r2, #3
 80024b8:	0092      	lsls	r2, r2, #2
 80024ba:	4093      	lsls	r3, r2
 80024bc:	693a      	ldr	r2, [r7, #16]
 80024be:	4313      	orrs	r3, r2
 80024c0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80024c2:	4937      	ldr	r1, [pc, #220]	@ (80025a0 <HAL_GPIO_Init+0x2d0>)
 80024c4:	697b      	ldr	r3, [r7, #20]
 80024c6:	089b      	lsrs	r3, r3, #2
 80024c8:	3302      	adds	r3, #2
 80024ca:	693a      	ldr	r2, [r7, #16]
 80024cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80024d0:	4b37      	ldr	r3, [pc, #220]	@ (80025b0 <HAL_GPIO_Init+0x2e0>)
 80024d2:	689b      	ldr	r3, [r3, #8]
 80024d4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	43db      	mvns	r3, r3
 80024da:	693a      	ldr	r2, [r7, #16]
 80024dc:	4013      	ands	r3, r2
 80024de:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	685b      	ldr	r3, [r3, #4]
 80024e4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d003      	beq.n	80024f4 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 80024ec:	693a      	ldr	r2, [r7, #16]
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	4313      	orrs	r3, r2
 80024f2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80024f4:	4a2e      	ldr	r2, [pc, #184]	@ (80025b0 <HAL_GPIO_Init+0x2e0>)
 80024f6:	693b      	ldr	r3, [r7, #16]
 80024f8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80024fa:	4b2d      	ldr	r3, [pc, #180]	@ (80025b0 <HAL_GPIO_Init+0x2e0>)
 80024fc:	68db      	ldr	r3, [r3, #12]
 80024fe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	43db      	mvns	r3, r3
 8002504:	693a      	ldr	r2, [r7, #16]
 8002506:	4013      	ands	r3, r2
 8002508:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	685b      	ldr	r3, [r3, #4]
 800250e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002512:	2b00      	cmp	r3, #0
 8002514:	d003      	beq.n	800251e <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8002516:	693a      	ldr	r2, [r7, #16]
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	4313      	orrs	r3, r2
 800251c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800251e:	4a24      	ldr	r2, [pc, #144]	@ (80025b0 <HAL_GPIO_Init+0x2e0>)
 8002520:	693b      	ldr	r3, [r7, #16]
 8002522:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002524:	4b22      	ldr	r3, [pc, #136]	@ (80025b0 <HAL_GPIO_Init+0x2e0>)
 8002526:	685b      	ldr	r3, [r3, #4]
 8002528:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	43db      	mvns	r3, r3
 800252e:	693a      	ldr	r2, [r7, #16]
 8002530:	4013      	ands	r3, r2
 8002532:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	685b      	ldr	r3, [r3, #4]
 8002538:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800253c:	2b00      	cmp	r3, #0
 800253e:	d003      	beq.n	8002548 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8002540:	693a      	ldr	r2, [r7, #16]
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	4313      	orrs	r3, r2
 8002546:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002548:	4a19      	ldr	r2, [pc, #100]	@ (80025b0 <HAL_GPIO_Init+0x2e0>)
 800254a:	693b      	ldr	r3, [r7, #16]
 800254c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800254e:	4b18      	ldr	r3, [pc, #96]	@ (80025b0 <HAL_GPIO_Init+0x2e0>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	43db      	mvns	r3, r3
 8002558:	693a      	ldr	r2, [r7, #16]
 800255a:	4013      	ands	r3, r2
 800255c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	685b      	ldr	r3, [r3, #4]
 8002562:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002566:	2b00      	cmp	r3, #0
 8002568:	d003      	beq.n	8002572 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 800256a:	693a      	ldr	r2, [r7, #16]
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	4313      	orrs	r3, r2
 8002570:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002572:	4a0f      	ldr	r2, [pc, #60]	@ (80025b0 <HAL_GPIO_Init+0x2e0>)
 8002574:	693b      	ldr	r3, [r7, #16]
 8002576:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002578:	697b      	ldr	r3, [r7, #20]
 800257a:	3301      	adds	r3, #1
 800257c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	681a      	ldr	r2, [r3, #0]
 8002582:	697b      	ldr	r3, [r7, #20]
 8002584:	fa22 f303 	lsr.w	r3, r2, r3
 8002588:	2b00      	cmp	r3, #0
 800258a:	f47f aea9 	bne.w	80022e0 <HAL_GPIO_Init+0x10>
  }
}
 800258e:	bf00      	nop
 8002590:	bf00      	nop
 8002592:	371c      	adds	r7, #28
 8002594:	46bd      	mov	sp, r7
 8002596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259a:	4770      	bx	lr
 800259c:	40021000 	.word	0x40021000
 80025a0:	40010000 	.word	0x40010000
 80025a4:	48000400 	.word	0x48000400
 80025a8:	48000800 	.word	0x48000800
 80025ac:	48000c00 	.word	0x48000c00
 80025b0:	40010400 	.word	0x40010400

080025b4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80025b4:	b480      	push	{r7}
 80025b6:	b085      	sub	sp, #20
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
 80025bc:	460b      	mov	r3, r1
 80025be:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	691a      	ldr	r2, [r3, #16]
 80025c4:	887b      	ldrh	r3, [r7, #2]
 80025c6:	4013      	ands	r3, r2
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d002      	beq.n	80025d2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80025cc:	2301      	movs	r3, #1
 80025ce:	73fb      	strb	r3, [r7, #15]
 80025d0:	e001      	b.n	80025d6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80025d2:	2300      	movs	r3, #0
 80025d4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80025d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80025d8:	4618      	mov	r0, r3
 80025da:	3714      	adds	r7, #20
 80025dc:	46bd      	mov	sp, r7
 80025de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e2:	4770      	bx	lr

080025e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80025e4:	b480      	push	{r7}
 80025e6:	b083      	sub	sp, #12
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
 80025ec:	460b      	mov	r3, r1
 80025ee:	807b      	strh	r3, [r7, #2]
 80025f0:	4613      	mov	r3, r2
 80025f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80025f4:	787b      	ldrb	r3, [r7, #1]
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d003      	beq.n	8002602 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80025fa:	887a      	ldrh	r2, [r7, #2]
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002600:	e002      	b.n	8002608 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002602:	887a      	ldrh	r2, [r7, #2]
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002608:	bf00      	nop
 800260a:	370c      	adds	r7, #12
 800260c:	46bd      	mov	sp, r7
 800260e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002612:	4770      	bx	lr

08002614 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 800261a:	af00      	add	r7, sp, #0
 800261c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002620:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002624:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002626:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800262a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	2b00      	cmp	r3, #0
 8002632:	d102      	bne.n	800263a <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8002634:	2301      	movs	r3, #1
 8002636:	f001 b823 	b.w	8003680 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800263a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800263e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f003 0301 	and.w	r3, r3, #1
 800264a:	2b00      	cmp	r3, #0
 800264c:	f000 817d 	beq.w	800294a <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002650:	4bbc      	ldr	r3, [pc, #752]	@ (8002944 <HAL_RCC_OscConfig+0x330>)
 8002652:	685b      	ldr	r3, [r3, #4]
 8002654:	f003 030c 	and.w	r3, r3, #12
 8002658:	2b04      	cmp	r3, #4
 800265a:	d00c      	beq.n	8002676 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800265c:	4bb9      	ldr	r3, [pc, #740]	@ (8002944 <HAL_RCC_OscConfig+0x330>)
 800265e:	685b      	ldr	r3, [r3, #4]
 8002660:	f003 030c 	and.w	r3, r3, #12
 8002664:	2b08      	cmp	r3, #8
 8002666:	d15c      	bne.n	8002722 <HAL_RCC_OscConfig+0x10e>
 8002668:	4bb6      	ldr	r3, [pc, #728]	@ (8002944 <HAL_RCC_OscConfig+0x330>)
 800266a:	685b      	ldr	r3, [r3, #4]
 800266c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002670:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002674:	d155      	bne.n	8002722 <HAL_RCC_OscConfig+0x10e>
 8002676:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800267a:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800267e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 8002682:	fa93 f3a3 	rbit	r3, r3
 8002686:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800268a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800268e:	fab3 f383 	clz	r3, r3
 8002692:	b2db      	uxtb	r3, r3
 8002694:	095b      	lsrs	r3, r3, #5
 8002696:	b2db      	uxtb	r3, r3
 8002698:	f043 0301 	orr.w	r3, r3, #1
 800269c:	b2db      	uxtb	r3, r3
 800269e:	2b01      	cmp	r3, #1
 80026a0:	d102      	bne.n	80026a8 <HAL_RCC_OscConfig+0x94>
 80026a2:	4ba8      	ldr	r3, [pc, #672]	@ (8002944 <HAL_RCC_OscConfig+0x330>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	e015      	b.n	80026d4 <HAL_RCC_OscConfig+0xc0>
 80026a8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80026ac:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026b0:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 80026b4:	fa93 f3a3 	rbit	r3, r3
 80026b8:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 80026bc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80026c0:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 80026c4:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 80026c8:	fa93 f3a3 	rbit	r3, r3
 80026cc:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 80026d0:	4b9c      	ldr	r3, [pc, #624]	@ (8002944 <HAL_RCC_OscConfig+0x330>)
 80026d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026d4:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80026d8:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 80026dc:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 80026e0:	fa92 f2a2 	rbit	r2, r2
 80026e4:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 80026e8:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 80026ec:	fab2 f282 	clz	r2, r2
 80026f0:	b2d2      	uxtb	r2, r2
 80026f2:	f042 0220 	orr.w	r2, r2, #32
 80026f6:	b2d2      	uxtb	r2, r2
 80026f8:	f002 021f 	and.w	r2, r2, #31
 80026fc:	2101      	movs	r1, #1
 80026fe:	fa01 f202 	lsl.w	r2, r1, r2
 8002702:	4013      	ands	r3, r2
 8002704:	2b00      	cmp	r3, #0
 8002706:	f000 811f 	beq.w	8002948 <HAL_RCC_OscConfig+0x334>
 800270a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800270e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	685b      	ldr	r3, [r3, #4]
 8002716:	2b00      	cmp	r3, #0
 8002718:	f040 8116 	bne.w	8002948 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 800271c:	2301      	movs	r3, #1
 800271e:	f000 bfaf 	b.w	8003680 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002722:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002726:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	685b      	ldr	r3, [r3, #4]
 800272e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002732:	d106      	bne.n	8002742 <HAL_RCC_OscConfig+0x12e>
 8002734:	4b83      	ldr	r3, [pc, #524]	@ (8002944 <HAL_RCC_OscConfig+0x330>)
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	4a82      	ldr	r2, [pc, #520]	@ (8002944 <HAL_RCC_OscConfig+0x330>)
 800273a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800273e:	6013      	str	r3, [r2, #0]
 8002740:	e036      	b.n	80027b0 <HAL_RCC_OscConfig+0x19c>
 8002742:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002746:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	685b      	ldr	r3, [r3, #4]
 800274e:	2b00      	cmp	r3, #0
 8002750:	d10c      	bne.n	800276c <HAL_RCC_OscConfig+0x158>
 8002752:	4b7c      	ldr	r3, [pc, #496]	@ (8002944 <HAL_RCC_OscConfig+0x330>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	4a7b      	ldr	r2, [pc, #492]	@ (8002944 <HAL_RCC_OscConfig+0x330>)
 8002758:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800275c:	6013      	str	r3, [r2, #0]
 800275e:	4b79      	ldr	r3, [pc, #484]	@ (8002944 <HAL_RCC_OscConfig+0x330>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	4a78      	ldr	r2, [pc, #480]	@ (8002944 <HAL_RCC_OscConfig+0x330>)
 8002764:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002768:	6013      	str	r3, [r2, #0]
 800276a:	e021      	b.n	80027b0 <HAL_RCC_OscConfig+0x19c>
 800276c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002770:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	685b      	ldr	r3, [r3, #4]
 8002778:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800277c:	d10c      	bne.n	8002798 <HAL_RCC_OscConfig+0x184>
 800277e:	4b71      	ldr	r3, [pc, #452]	@ (8002944 <HAL_RCC_OscConfig+0x330>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	4a70      	ldr	r2, [pc, #448]	@ (8002944 <HAL_RCC_OscConfig+0x330>)
 8002784:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002788:	6013      	str	r3, [r2, #0]
 800278a:	4b6e      	ldr	r3, [pc, #440]	@ (8002944 <HAL_RCC_OscConfig+0x330>)
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	4a6d      	ldr	r2, [pc, #436]	@ (8002944 <HAL_RCC_OscConfig+0x330>)
 8002790:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002794:	6013      	str	r3, [r2, #0]
 8002796:	e00b      	b.n	80027b0 <HAL_RCC_OscConfig+0x19c>
 8002798:	4b6a      	ldr	r3, [pc, #424]	@ (8002944 <HAL_RCC_OscConfig+0x330>)
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	4a69      	ldr	r2, [pc, #420]	@ (8002944 <HAL_RCC_OscConfig+0x330>)
 800279e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80027a2:	6013      	str	r3, [r2, #0]
 80027a4:	4b67      	ldr	r3, [pc, #412]	@ (8002944 <HAL_RCC_OscConfig+0x330>)
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	4a66      	ldr	r2, [pc, #408]	@ (8002944 <HAL_RCC_OscConfig+0x330>)
 80027aa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80027ae:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80027b0:	4b64      	ldr	r3, [pc, #400]	@ (8002944 <HAL_RCC_OscConfig+0x330>)
 80027b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027b4:	f023 020f 	bic.w	r2, r3, #15
 80027b8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027bc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	689b      	ldr	r3, [r3, #8]
 80027c4:	495f      	ldr	r1, [pc, #380]	@ (8002944 <HAL_RCC_OscConfig+0x330>)
 80027c6:	4313      	orrs	r3, r2
 80027c8:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80027ca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027ce:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	685b      	ldr	r3, [r3, #4]
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d059      	beq.n	800288e <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027da:	f7ff fae3 	bl	8001da4 <HAL_GetTick>
 80027de:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027e2:	e00a      	b.n	80027fa <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80027e4:	f7ff fade 	bl	8001da4 <HAL_GetTick>
 80027e8:	4602      	mov	r2, r0
 80027ea:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80027ee:	1ad3      	subs	r3, r2, r3
 80027f0:	2b64      	cmp	r3, #100	@ 0x64
 80027f2:	d902      	bls.n	80027fa <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 80027f4:	2303      	movs	r3, #3
 80027f6:	f000 bf43 	b.w	8003680 <HAL_RCC_OscConfig+0x106c>
 80027fa:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80027fe:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002802:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8002806:	fa93 f3a3 	rbit	r3, r3
 800280a:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 800280e:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002812:	fab3 f383 	clz	r3, r3
 8002816:	b2db      	uxtb	r3, r3
 8002818:	095b      	lsrs	r3, r3, #5
 800281a:	b2db      	uxtb	r3, r3
 800281c:	f043 0301 	orr.w	r3, r3, #1
 8002820:	b2db      	uxtb	r3, r3
 8002822:	2b01      	cmp	r3, #1
 8002824:	d102      	bne.n	800282c <HAL_RCC_OscConfig+0x218>
 8002826:	4b47      	ldr	r3, [pc, #284]	@ (8002944 <HAL_RCC_OscConfig+0x330>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	e015      	b.n	8002858 <HAL_RCC_OscConfig+0x244>
 800282c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002830:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002834:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8002838:	fa93 f3a3 	rbit	r3, r3
 800283c:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8002840:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002844:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8002848:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 800284c:	fa93 f3a3 	rbit	r3, r3
 8002850:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8002854:	4b3b      	ldr	r3, [pc, #236]	@ (8002944 <HAL_RCC_OscConfig+0x330>)
 8002856:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002858:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800285c:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 8002860:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8002864:	fa92 f2a2 	rbit	r2, r2
 8002868:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 800286c:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8002870:	fab2 f282 	clz	r2, r2
 8002874:	b2d2      	uxtb	r2, r2
 8002876:	f042 0220 	orr.w	r2, r2, #32
 800287a:	b2d2      	uxtb	r2, r2
 800287c:	f002 021f 	and.w	r2, r2, #31
 8002880:	2101      	movs	r1, #1
 8002882:	fa01 f202 	lsl.w	r2, r1, r2
 8002886:	4013      	ands	r3, r2
 8002888:	2b00      	cmp	r3, #0
 800288a:	d0ab      	beq.n	80027e4 <HAL_RCC_OscConfig+0x1d0>
 800288c:	e05d      	b.n	800294a <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800288e:	f7ff fa89 	bl	8001da4 <HAL_GetTick>
 8002892:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002896:	e00a      	b.n	80028ae <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002898:	f7ff fa84 	bl	8001da4 <HAL_GetTick>
 800289c:	4602      	mov	r2, r0
 800289e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80028a2:	1ad3      	subs	r3, r2, r3
 80028a4:	2b64      	cmp	r3, #100	@ 0x64
 80028a6:	d902      	bls.n	80028ae <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 80028a8:	2303      	movs	r3, #3
 80028aa:	f000 bee9 	b.w	8003680 <HAL_RCC_OscConfig+0x106c>
 80028ae:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80028b2:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028b6:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 80028ba:	fa93 f3a3 	rbit	r3, r3
 80028be:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 80028c2:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028c6:	fab3 f383 	clz	r3, r3
 80028ca:	b2db      	uxtb	r3, r3
 80028cc:	095b      	lsrs	r3, r3, #5
 80028ce:	b2db      	uxtb	r3, r3
 80028d0:	f043 0301 	orr.w	r3, r3, #1
 80028d4:	b2db      	uxtb	r3, r3
 80028d6:	2b01      	cmp	r3, #1
 80028d8:	d102      	bne.n	80028e0 <HAL_RCC_OscConfig+0x2cc>
 80028da:	4b1a      	ldr	r3, [pc, #104]	@ (8002944 <HAL_RCC_OscConfig+0x330>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	e015      	b.n	800290c <HAL_RCC_OscConfig+0x2f8>
 80028e0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80028e4:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028e8:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 80028ec:	fa93 f3a3 	rbit	r3, r3
 80028f0:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 80028f4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80028f8:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 80028fc:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8002900:	fa93 f3a3 	rbit	r3, r3
 8002904:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 8002908:	4b0e      	ldr	r3, [pc, #56]	@ (8002944 <HAL_RCC_OscConfig+0x330>)
 800290a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800290c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002910:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 8002914:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8002918:	fa92 f2a2 	rbit	r2, r2
 800291c:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 8002920:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8002924:	fab2 f282 	clz	r2, r2
 8002928:	b2d2      	uxtb	r2, r2
 800292a:	f042 0220 	orr.w	r2, r2, #32
 800292e:	b2d2      	uxtb	r2, r2
 8002930:	f002 021f 	and.w	r2, r2, #31
 8002934:	2101      	movs	r1, #1
 8002936:	fa01 f202 	lsl.w	r2, r1, r2
 800293a:	4013      	ands	r3, r2
 800293c:	2b00      	cmp	r3, #0
 800293e:	d1ab      	bne.n	8002898 <HAL_RCC_OscConfig+0x284>
 8002940:	e003      	b.n	800294a <HAL_RCC_OscConfig+0x336>
 8002942:	bf00      	nop
 8002944:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002948:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800294a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800294e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f003 0302 	and.w	r3, r3, #2
 800295a:	2b00      	cmp	r3, #0
 800295c:	f000 817d 	beq.w	8002c5a <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002960:	4ba6      	ldr	r3, [pc, #664]	@ (8002bfc <HAL_RCC_OscConfig+0x5e8>)
 8002962:	685b      	ldr	r3, [r3, #4]
 8002964:	f003 030c 	and.w	r3, r3, #12
 8002968:	2b00      	cmp	r3, #0
 800296a:	d00b      	beq.n	8002984 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800296c:	4ba3      	ldr	r3, [pc, #652]	@ (8002bfc <HAL_RCC_OscConfig+0x5e8>)
 800296e:	685b      	ldr	r3, [r3, #4]
 8002970:	f003 030c 	and.w	r3, r3, #12
 8002974:	2b08      	cmp	r3, #8
 8002976:	d172      	bne.n	8002a5e <HAL_RCC_OscConfig+0x44a>
 8002978:	4ba0      	ldr	r3, [pc, #640]	@ (8002bfc <HAL_RCC_OscConfig+0x5e8>)
 800297a:	685b      	ldr	r3, [r3, #4]
 800297c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002980:	2b00      	cmp	r3, #0
 8002982:	d16c      	bne.n	8002a5e <HAL_RCC_OscConfig+0x44a>
 8002984:	2302      	movs	r3, #2
 8002986:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800298a:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 800298e:	fa93 f3a3 	rbit	r3, r3
 8002992:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 8002996:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800299a:	fab3 f383 	clz	r3, r3
 800299e:	b2db      	uxtb	r3, r3
 80029a0:	095b      	lsrs	r3, r3, #5
 80029a2:	b2db      	uxtb	r3, r3
 80029a4:	f043 0301 	orr.w	r3, r3, #1
 80029a8:	b2db      	uxtb	r3, r3
 80029aa:	2b01      	cmp	r3, #1
 80029ac:	d102      	bne.n	80029b4 <HAL_RCC_OscConfig+0x3a0>
 80029ae:	4b93      	ldr	r3, [pc, #588]	@ (8002bfc <HAL_RCC_OscConfig+0x5e8>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	e013      	b.n	80029dc <HAL_RCC_OscConfig+0x3c8>
 80029b4:	2302      	movs	r3, #2
 80029b6:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029ba:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 80029be:	fa93 f3a3 	rbit	r3, r3
 80029c2:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 80029c6:	2302      	movs	r3, #2
 80029c8:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 80029cc:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 80029d0:	fa93 f3a3 	rbit	r3, r3
 80029d4:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 80029d8:	4b88      	ldr	r3, [pc, #544]	@ (8002bfc <HAL_RCC_OscConfig+0x5e8>)
 80029da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029dc:	2202      	movs	r2, #2
 80029de:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 80029e2:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 80029e6:	fa92 f2a2 	rbit	r2, r2
 80029ea:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 80029ee:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 80029f2:	fab2 f282 	clz	r2, r2
 80029f6:	b2d2      	uxtb	r2, r2
 80029f8:	f042 0220 	orr.w	r2, r2, #32
 80029fc:	b2d2      	uxtb	r2, r2
 80029fe:	f002 021f 	and.w	r2, r2, #31
 8002a02:	2101      	movs	r1, #1
 8002a04:	fa01 f202 	lsl.w	r2, r1, r2
 8002a08:	4013      	ands	r3, r2
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d00a      	beq.n	8002a24 <HAL_RCC_OscConfig+0x410>
 8002a0e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a12:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	691b      	ldr	r3, [r3, #16]
 8002a1a:	2b01      	cmp	r3, #1
 8002a1c:	d002      	beq.n	8002a24 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8002a1e:	2301      	movs	r3, #1
 8002a20:	f000 be2e 	b.w	8003680 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a24:	4b75      	ldr	r3, [pc, #468]	@ (8002bfc <HAL_RCC_OscConfig+0x5e8>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002a2c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a30:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	695b      	ldr	r3, [r3, #20]
 8002a38:	21f8      	movs	r1, #248	@ 0xf8
 8002a3a:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a3e:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8002a42:	fa91 f1a1 	rbit	r1, r1
 8002a46:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 8002a4a:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 8002a4e:	fab1 f181 	clz	r1, r1
 8002a52:	b2c9      	uxtb	r1, r1
 8002a54:	408b      	lsls	r3, r1
 8002a56:	4969      	ldr	r1, [pc, #420]	@ (8002bfc <HAL_RCC_OscConfig+0x5e8>)
 8002a58:	4313      	orrs	r3, r2
 8002a5a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a5c:	e0fd      	b.n	8002c5a <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002a5e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a62:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	691b      	ldr	r3, [r3, #16]
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	f000 8088 	beq.w	8002b80 <HAL_RCC_OscConfig+0x56c>
 8002a70:	2301      	movs	r3, #1
 8002a72:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a76:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8002a7a:	fa93 f3a3 	rbit	r3, r3
 8002a7e:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 8002a82:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a86:	fab3 f383 	clz	r3, r3
 8002a8a:	b2db      	uxtb	r3, r3
 8002a8c:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002a90:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002a94:	009b      	lsls	r3, r3, #2
 8002a96:	461a      	mov	r2, r3
 8002a98:	2301      	movs	r3, #1
 8002a9a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a9c:	f7ff f982 	bl	8001da4 <HAL_GetTick>
 8002aa0:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002aa4:	e00a      	b.n	8002abc <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002aa6:	f7ff f97d 	bl	8001da4 <HAL_GetTick>
 8002aaa:	4602      	mov	r2, r0
 8002aac:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002ab0:	1ad3      	subs	r3, r2, r3
 8002ab2:	2b02      	cmp	r3, #2
 8002ab4:	d902      	bls.n	8002abc <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8002ab6:	2303      	movs	r3, #3
 8002ab8:	f000 bde2 	b.w	8003680 <HAL_RCC_OscConfig+0x106c>
 8002abc:	2302      	movs	r3, #2
 8002abe:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ac2:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8002ac6:	fa93 f3a3 	rbit	r3, r3
 8002aca:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 8002ace:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ad2:	fab3 f383 	clz	r3, r3
 8002ad6:	b2db      	uxtb	r3, r3
 8002ad8:	095b      	lsrs	r3, r3, #5
 8002ada:	b2db      	uxtb	r3, r3
 8002adc:	f043 0301 	orr.w	r3, r3, #1
 8002ae0:	b2db      	uxtb	r3, r3
 8002ae2:	2b01      	cmp	r3, #1
 8002ae4:	d102      	bne.n	8002aec <HAL_RCC_OscConfig+0x4d8>
 8002ae6:	4b45      	ldr	r3, [pc, #276]	@ (8002bfc <HAL_RCC_OscConfig+0x5e8>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	e013      	b.n	8002b14 <HAL_RCC_OscConfig+0x500>
 8002aec:	2302      	movs	r3, #2
 8002aee:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002af2:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8002af6:	fa93 f3a3 	rbit	r3, r3
 8002afa:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8002afe:	2302      	movs	r3, #2
 8002b00:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8002b04:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8002b08:	fa93 f3a3 	rbit	r3, r3
 8002b0c:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 8002b10:	4b3a      	ldr	r3, [pc, #232]	@ (8002bfc <HAL_RCC_OscConfig+0x5e8>)
 8002b12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b14:	2202      	movs	r2, #2
 8002b16:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 8002b1a:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8002b1e:	fa92 f2a2 	rbit	r2, r2
 8002b22:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 8002b26:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 8002b2a:	fab2 f282 	clz	r2, r2
 8002b2e:	b2d2      	uxtb	r2, r2
 8002b30:	f042 0220 	orr.w	r2, r2, #32
 8002b34:	b2d2      	uxtb	r2, r2
 8002b36:	f002 021f 	and.w	r2, r2, #31
 8002b3a:	2101      	movs	r1, #1
 8002b3c:	fa01 f202 	lsl.w	r2, r1, r2
 8002b40:	4013      	ands	r3, r2
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d0af      	beq.n	8002aa6 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b46:	4b2d      	ldr	r3, [pc, #180]	@ (8002bfc <HAL_RCC_OscConfig+0x5e8>)
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002b4e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b52:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	695b      	ldr	r3, [r3, #20]
 8002b5a:	21f8      	movs	r1, #248	@ 0xf8
 8002b5c:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b60:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8002b64:	fa91 f1a1 	rbit	r1, r1
 8002b68:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 8002b6c:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 8002b70:	fab1 f181 	clz	r1, r1
 8002b74:	b2c9      	uxtb	r1, r1
 8002b76:	408b      	lsls	r3, r1
 8002b78:	4920      	ldr	r1, [pc, #128]	@ (8002bfc <HAL_RCC_OscConfig+0x5e8>)
 8002b7a:	4313      	orrs	r3, r2
 8002b7c:	600b      	str	r3, [r1, #0]
 8002b7e:	e06c      	b.n	8002c5a <HAL_RCC_OscConfig+0x646>
 8002b80:	2301      	movs	r3, #1
 8002b82:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b86:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8002b8a:	fa93 f3a3 	rbit	r3, r3
 8002b8e:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 8002b92:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b96:	fab3 f383 	clz	r3, r3
 8002b9a:	b2db      	uxtb	r3, r3
 8002b9c:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002ba0:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002ba4:	009b      	lsls	r3, r3, #2
 8002ba6:	461a      	mov	r2, r3
 8002ba8:	2300      	movs	r3, #0
 8002baa:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bac:	f7ff f8fa 	bl	8001da4 <HAL_GetTick>
 8002bb0:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002bb4:	e00a      	b.n	8002bcc <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002bb6:	f7ff f8f5 	bl	8001da4 <HAL_GetTick>
 8002bba:	4602      	mov	r2, r0
 8002bbc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002bc0:	1ad3      	subs	r3, r2, r3
 8002bc2:	2b02      	cmp	r3, #2
 8002bc4:	d902      	bls.n	8002bcc <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8002bc6:	2303      	movs	r3, #3
 8002bc8:	f000 bd5a 	b.w	8003680 <HAL_RCC_OscConfig+0x106c>
 8002bcc:	2302      	movs	r3, #2
 8002bce:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bd2:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8002bd6:	fa93 f3a3 	rbit	r3, r3
 8002bda:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 8002bde:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002be2:	fab3 f383 	clz	r3, r3
 8002be6:	b2db      	uxtb	r3, r3
 8002be8:	095b      	lsrs	r3, r3, #5
 8002bea:	b2db      	uxtb	r3, r3
 8002bec:	f043 0301 	orr.w	r3, r3, #1
 8002bf0:	b2db      	uxtb	r3, r3
 8002bf2:	2b01      	cmp	r3, #1
 8002bf4:	d104      	bne.n	8002c00 <HAL_RCC_OscConfig+0x5ec>
 8002bf6:	4b01      	ldr	r3, [pc, #4]	@ (8002bfc <HAL_RCC_OscConfig+0x5e8>)
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	e015      	b.n	8002c28 <HAL_RCC_OscConfig+0x614>
 8002bfc:	40021000 	.word	0x40021000
 8002c00:	2302      	movs	r3, #2
 8002c02:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c06:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8002c0a:	fa93 f3a3 	rbit	r3, r3
 8002c0e:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8002c12:	2302      	movs	r3, #2
 8002c14:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8002c18:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8002c1c:	fa93 f3a3 	rbit	r3, r3
 8002c20:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8002c24:	4bc8      	ldr	r3, [pc, #800]	@ (8002f48 <HAL_RCC_OscConfig+0x934>)
 8002c26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c28:	2202      	movs	r2, #2
 8002c2a:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 8002c2e:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8002c32:	fa92 f2a2 	rbit	r2, r2
 8002c36:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 8002c3a:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8002c3e:	fab2 f282 	clz	r2, r2
 8002c42:	b2d2      	uxtb	r2, r2
 8002c44:	f042 0220 	orr.w	r2, r2, #32
 8002c48:	b2d2      	uxtb	r2, r2
 8002c4a:	f002 021f 	and.w	r2, r2, #31
 8002c4e:	2101      	movs	r1, #1
 8002c50:	fa01 f202 	lsl.w	r2, r1, r2
 8002c54:	4013      	ands	r3, r2
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d1ad      	bne.n	8002bb6 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c5a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c5e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f003 0308 	and.w	r3, r3, #8
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	f000 8110 	beq.w	8002e90 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002c70:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c74:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	699b      	ldr	r3, [r3, #24]
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d079      	beq.n	8002d74 <HAL_RCC_OscConfig+0x760>
 8002c80:	2301      	movs	r3, #1
 8002c82:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c86:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8002c8a:	fa93 f3a3 	rbit	r3, r3
 8002c8e:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 8002c92:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c96:	fab3 f383 	clz	r3, r3
 8002c9a:	b2db      	uxtb	r3, r3
 8002c9c:	461a      	mov	r2, r3
 8002c9e:	4bab      	ldr	r3, [pc, #684]	@ (8002f4c <HAL_RCC_OscConfig+0x938>)
 8002ca0:	4413      	add	r3, r2
 8002ca2:	009b      	lsls	r3, r3, #2
 8002ca4:	461a      	mov	r2, r3
 8002ca6:	2301      	movs	r3, #1
 8002ca8:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002caa:	f7ff f87b 	bl	8001da4 <HAL_GetTick>
 8002cae:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002cb2:	e00a      	b.n	8002cca <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002cb4:	f7ff f876 	bl	8001da4 <HAL_GetTick>
 8002cb8:	4602      	mov	r2, r0
 8002cba:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002cbe:	1ad3      	subs	r3, r2, r3
 8002cc0:	2b02      	cmp	r3, #2
 8002cc2:	d902      	bls.n	8002cca <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8002cc4:	2303      	movs	r3, #3
 8002cc6:	f000 bcdb 	b.w	8003680 <HAL_RCC_OscConfig+0x106c>
 8002cca:	2302      	movs	r3, #2
 8002ccc:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cd0:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8002cd4:	fa93 f3a3 	rbit	r3, r3
 8002cd8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8002cdc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ce0:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002ce4:	2202      	movs	r2, #2
 8002ce6:	601a      	str	r2, [r3, #0]
 8002ce8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002cec:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	fa93 f2a3 	rbit	r2, r3
 8002cf6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002cfa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002cfe:	601a      	str	r2, [r3, #0]
 8002d00:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d04:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002d08:	2202      	movs	r2, #2
 8002d0a:	601a      	str	r2, [r3, #0]
 8002d0c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d10:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	fa93 f2a3 	rbit	r2, r3
 8002d1a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d1e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002d22:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d24:	4b88      	ldr	r3, [pc, #544]	@ (8002f48 <HAL_RCC_OscConfig+0x934>)
 8002d26:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002d28:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d2c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002d30:	2102      	movs	r1, #2
 8002d32:	6019      	str	r1, [r3, #0]
 8002d34:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d38:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	fa93 f1a3 	rbit	r1, r3
 8002d42:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d46:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002d4a:	6019      	str	r1, [r3, #0]
  return result;
 8002d4c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d50:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	fab3 f383 	clz	r3, r3
 8002d5a:	b2db      	uxtb	r3, r3
 8002d5c:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8002d60:	b2db      	uxtb	r3, r3
 8002d62:	f003 031f 	and.w	r3, r3, #31
 8002d66:	2101      	movs	r1, #1
 8002d68:	fa01 f303 	lsl.w	r3, r1, r3
 8002d6c:	4013      	ands	r3, r2
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d0a0      	beq.n	8002cb4 <HAL_RCC_OscConfig+0x6a0>
 8002d72:	e08d      	b.n	8002e90 <HAL_RCC_OscConfig+0x87c>
 8002d74:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d78:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002d7c:	2201      	movs	r2, #1
 8002d7e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d80:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d84:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	fa93 f2a3 	rbit	r2, r3
 8002d8e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d92:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002d96:	601a      	str	r2, [r3, #0]
  return result;
 8002d98:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d9c:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002da0:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002da2:	fab3 f383 	clz	r3, r3
 8002da6:	b2db      	uxtb	r3, r3
 8002da8:	461a      	mov	r2, r3
 8002daa:	4b68      	ldr	r3, [pc, #416]	@ (8002f4c <HAL_RCC_OscConfig+0x938>)
 8002dac:	4413      	add	r3, r2
 8002dae:	009b      	lsls	r3, r3, #2
 8002db0:	461a      	mov	r2, r3
 8002db2:	2300      	movs	r3, #0
 8002db4:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002db6:	f7fe fff5 	bl	8001da4 <HAL_GetTick>
 8002dba:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002dbe:	e00a      	b.n	8002dd6 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002dc0:	f7fe fff0 	bl	8001da4 <HAL_GetTick>
 8002dc4:	4602      	mov	r2, r0
 8002dc6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002dca:	1ad3      	subs	r3, r2, r3
 8002dcc:	2b02      	cmp	r3, #2
 8002dce:	d902      	bls.n	8002dd6 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8002dd0:	2303      	movs	r3, #3
 8002dd2:	f000 bc55 	b.w	8003680 <HAL_RCC_OscConfig+0x106c>
 8002dd6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002dda:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8002dde:	2202      	movs	r2, #2
 8002de0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002de2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002de6:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	fa93 f2a3 	rbit	r2, r3
 8002df0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002df4:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8002df8:	601a      	str	r2, [r3, #0]
 8002dfa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002dfe:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8002e02:	2202      	movs	r2, #2
 8002e04:	601a      	str	r2, [r3, #0]
 8002e06:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e0a:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	fa93 f2a3 	rbit	r2, r3
 8002e14:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e18:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8002e1c:	601a      	str	r2, [r3, #0]
 8002e1e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e22:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8002e26:	2202      	movs	r2, #2
 8002e28:	601a      	str	r2, [r3, #0]
 8002e2a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e2e:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	fa93 f2a3 	rbit	r2, r3
 8002e38:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e3c:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8002e40:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e42:	4b41      	ldr	r3, [pc, #260]	@ (8002f48 <HAL_RCC_OscConfig+0x934>)
 8002e44:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002e46:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e4a:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8002e4e:	2102      	movs	r1, #2
 8002e50:	6019      	str	r1, [r3, #0]
 8002e52:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e56:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	fa93 f1a3 	rbit	r1, r3
 8002e60:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e64:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002e68:	6019      	str	r1, [r3, #0]
  return result;
 8002e6a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e6e:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	fab3 f383 	clz	r3, r3
 8002e78:	b2db      	uxtb	r3, r3
 8002e7a:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8002e7e:	b2db      	uxtb	r3, r3
 8002e80:	f003 031f 	and.w	r3, r3, #31
 8002e84:	2101      	movs	r1, #1
 8002e86:	fa01 f303 	lsl.w	r3, r1, r3
 8002e8a:	4013      	ands	r3, r2
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d197      	bne.n	8002dc0 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e90:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e94:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f003 0304 	and.w	r3, r3, #4
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	f000 81a1 	beq.w	80031e8 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002eac:	4b26      	ldr	r3, [pc, #152]	@ (8002f48 <HAL_RCC_OscConfig+0x934>)
 8002eae:	69db      	ldr	r3, [r3, #28]
 8002eb0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d116      	bne.n	8002ee6 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002eb8:	4b23      	ldr	r3, [pc, #140]	@ (8002f48 <HAL_RCC_OscConfig+0x934>)
 8002eba:	69db      	ldr	r3, [r3, #28]
 8002ebc:	4a22      	ldr	r2, [pc, #136]	@ (8002f48 <HAL_RCC_OscConfig+0x934>)
 8002ebe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002ec2:	61d3      	str	r3, [r2, #28]
 8002ec4:	4b20      	ldr	r3, [pc, #128]	@ (8002f48 <HAL_RCC_OscConfig+0x934>)
 8002ec6:	69db      	ldr	r3, [r3, #28]
 8002ec8:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8002ecc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ed0:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8002ed4:	601a      	str	r2, [r3, #0]
 8002ed6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002eda:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8002ede:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002ee0:	2301      	movs	r3, #1
 8002ee2:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ee6:	4b1a      	ldr	r3, [pc, #104]	@ (8002f50 <HAL_RCC_OscConfig+0x93c>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d11a      	bne.n	8002f28 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002ef2:	4b17      	ldr	r3, [pc, #92]	@ (8002f50 <HAL_RCC_OscConfig+0x93c>)
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	4a16      	ldr	r2, [pc, #88]	@ (8002f50 <HAL_RCC_OscConfig+0x93c>)
 8002ef8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002efc:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002efe:	f7fe ff51 	bl	8001da4 <HAL_GetTick>
 8002f02:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f06:	e009      	b.n	8002f1c <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f08:	f7fe ff4c 	bl	8001da4 <HAL_GetTick>
 8002f0c:	4602      	mov	r2, r0
 8002f0e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002f12:	1ad3      	subs	r3, r2, r3
 8002f14:	2b64      	cmp	r3, #100	@ 0x64
 8002f16:	d901      	bls.n	8002f1c <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8002f18:	2303      	movs	r3, #3
 8002f1a:	e3b1      	b.n	8003680 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f1c:	4b0c      	ldr	r3, [pc, #48]	@ (8002f50 <HAL_RCC_OscConfig+0x93c>)
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d0ef      	beq.n	8002f08 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f28:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f2c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	68db      	ldr	r3, [r3, #12]
 8002f34:	2b01      	cmp	r3, #1
 8002f36:	d10d      	bne.n	8002f54 <HAL_RCC_OscConfig+0x940>
 8002f38:	4b03      	ldr	r3, [pc, #12]	@ (8002f48 <HAL_RCC_OscConfig+0x934>)
 8002f3a:	6a1b      	ldr	r3, [r3, #32]
 8002f3c:	4a02      	ldr	r2, [pc, #8]	@ (8002f48 <HAL_RCC_OscConfig+0x934>)
 8002f3e:	f043 0301 	orr.w	r3, r3, #1
 8002f42:	6213      	str	r3, [r2, #32]
 8002f44:	e03c      	b.n	8002fc0 <HAL_RCC_OscConfig+0x9ac>
 8002f46:	bf00      	nop
 8002f48:	40021000 	.word	0x40021000
 8002f4c:	10908120 	.word	0x10908120
 8002f50:	40007000 	.word	0x40007000
 8002f54:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f58:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	68db      	ldr	r3, [r3, #12]
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d10c      	bne.n	8002f7e <HAL_RCC_OscConfig+0x96a>
 8002f64:	4bc1      	ldr	r3, [pc, #772]	@ (800326c <HAL_RCC_OscConfig+0xc58>)
 8002f66:	6a1b      	ldr	r3, [r3, #32]
 8002f68:	4ac0      	ldr	r2, [pc, #768]	@ (800326c <HAL_RCC_OscConfig+0xc58>)
 8002f6a:	f023 0301 	bic.w	r3, r3, #1
 8002f6e:	6213      	str	r3, [r2, #32]
 8002f70:	4bbe      	ldr	r3, [pc, #760]	@ (800326c <HAL_RCC_OscConfig+0xc58>)
 8002f72:	6a1b      	ldr	r3, [r3, #32]
 8002f74:	4abd      	ldr	r2, [pc, #756]	@ (800326c <HAL_RCC_OscConfig+0xc58>)
 8002f76:	f023 0304 	bic.w	r3, r3, #4
 8002f7a:	6213      	str	r3, [r2, #32]
 8002f7c:	e020      	b.n	8002fc0 <HAL_RCC_OscConfig+0x9ac>
 8002f7e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f82:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	68db      	ldr	r3, [r3, #12]
 8002f8a:	2b05      	cmp	r3, #5
 8002f8c:	d10c      	bne.n	8002fa8 <HAL_RCC_OscConfig+0x994>
 8002f8e:	4bb7      	ldr	r3, [pc, #732]	@ (800326c <HAL_RCC_OscConfig+0xc58>)
 8002f90:	6a1b      	ldr	r3, [r3, #32]
 8002f92:	4ab6      	ldr	r2, [pc, #728]	@ (800326c <HAL_RCC_OscConfig+0xc58>)
 8002f94:	f043 0304 	orr.w	r3, r3, #4
 8002f98:	6213      	str	r3, [r2, #32]
 8002f9a:	4bb4      	ldr	r3, [pc, #720]	@ (800326c <HAL_RCC_OscConfig+0xc58>)
 8002f9c:	6a1b      	ldr	r3, [r3, #32]
 8002f9e:	4ab3      	ldr	r2, [pc, #716]	@ (800326c <HAL_RCC_OscConfig+0xc58>)
 8002fa0:	f043 0301 	orr.w	r3, r3, #1
 8002fa4:	6213      	str	r3, [r2, #32]
 8002fa6:	e00b      	b.n	8002fc0 <HAL_RCC_OscConfig+0x9ac>
 8002fa8:	4bb0      	ldr	r3, [pc, #704]	@ (800326c <HAL_RCC_OscConfig+0xc58>)
 8002faa:	6a1b      	ldr	r3, [r3, #32]
 8002fac:	4aaf      	ldr	r2, [pc, #700]	@ (800326c <HAL_RCC_OscConfig+0xc58>)
 8002fae:	f023 0301 	bic.w	r3, r3, #1
 8002fb2:	6213      	str	r3, [r2, #32]
 8002fb4:	4bad      	ldr	r3, [pc, #692]	@ (800326c <HAL_RCC_OscConfig+0xc58>)
 8002fb6:	6a1b      	ldr	r3, [r3, #32]
 8002fb8:	4aac      	ldr	r2, [pc, #688]	@ (800326c <HAL_RCC_OscConfig+0xc58>)
 8002fba:	f023 0304 	bic.w	r3, r3, #4
 8002fbe:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002fc0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002fc4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	68db      	ldr	r3, [r3, #12]
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	f000 8081 	beq.w	80030d4 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fd2:	f7fe fee7 	bl	8001da4 <HAL_GetTick>
 8002fd6:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fda:	e00b      	b.n	8002ff4 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002fdc:	f7fe fee2 	bl	8001da4 <HAL_GetTick>
 8002fe0:	4602      	mov	r2, r0
 8002fe2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002fe6:	1ad3      	subs	r3, r2, r3
 8002fe8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002fec:	4293      	cmp	r3, r2
 8002fee:	d901      	bls.n	8002ff4 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8002ff0:	2303      	movs	r3, #3
 8002ff2:	e345      	b.n	8003680 <HAL_RCC_OscConfig+0x106c>
 8002ff4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ff8:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002ffc:	2202      	movs	r2, #2
 8002ffe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003000:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003004:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	fa93 f2a3 	rbit	r2, r3
 800300e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003012:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8003016:	601a      	str	r2, [r3, #0]
 8003018:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800301c:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8003020:	2202      	movs	r2, #2
 8003022:	601a      	str	r2, [r3, #0]
 8003024:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003028:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	fa93 f2a3 	rbit	r2, r3
 8003032:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003036:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800303a:	601a      	str	r2, [r3, #0]
  return result;
 800303c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003040:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8003044:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003046:	fab3 f383 	clz	r3, r3
 800304a:	b2db      	uxtb	r3, r3
 800304c:	095b      	lsrs	r3, r3, #5
 800304e:	b2db      	uxtb	r3, r3
 8003050:	f043 0302 	orr.w	r3, r3, #2
 8003054:	b2db      	uxtb	r3, r3
 8003056:	2b02      	cmp	r3, #2
 8003058:	d102      	bne.n	8003060 <HAL_RCC_OscConfig+0xa4c>
 800305a:	4b84      	ldr	r3, [pc, #528]	@ (800326c <HAL_RCC_OscConfig+0xc58>)
 800305c:	6a1b      	ldr	r3, [r3, #32]
 800305e:	e013      	b.n	8003088 <HAL_RCC_OscConfig+0xa74>
 8003060:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003064:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8003068:	2202      	movs	r2, #2
 800306a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800306c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003070:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	fa93 f2a3 	rbit	r2, r3
 800307a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800307e:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8003082:	601a      	str	r2, [r3, #0]
 8003084:	4b79      	ldr	r3, [pc, #484]	@ (800326c <HAL_RCC_OscConfig+0xc58>)
 8003086:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003088:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800308c:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8003090:	2102      	movs	r1, #2
 8003092:	6011      	str	r1, [r2, #0]
 8003094:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003098:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 800309c:	6812      	ldr	r2, [r2, #0]
 800309e:	fa92 f1a2 	rbit	r1, r2
 80030a2:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80030a6:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 80030aa:	6011      	str	r1, [r2, #0]
  return result;
 80030ac:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80030b0:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 80030b4:	6812      	ldr	r2, [r2, #0]
 80030b6:	fab2 f282 	clz	r2, r2
 80030ba:	b2d2      	uxtb	r2, r2
 80030bc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80030c0:	b2d2      	uxtb	r2, r2
 80030c2:	f002 021f 	and.w	r2, r2, #31
 80030c6:	2101      	movs	r1, #1
 80030c8:	fa01 f202 	lsl.w	r2, r1, r2
 80030cc:	4013      	ands	r3, r2
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d084      	beq.n	8002fdc <HAL_RCC_OscConfig+0x9c8>
 80030d2:	e07f      	b.n	80031d4 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030d4:	f7fe fe66 	bl	8001da4 <HAL_GetTick>
 80030d8:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030dc:	e00b      	b.n	80030f6 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80030de:	f7fe fe61 	bl	8001da4 <HAL_GetTick>
 80030e2:	4602      	mov	r2, r0
 80030e4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80030e8:	1ad3      	subs	r3, r2, r3
 80030ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80030ee:	4293      	cmp	r3, r2
 80030f0:	d901      	bls.n	80030f6 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 80030f2:	2303      	movs	r3, #3
 80030f4:	e2c4      	b.n	8003680 <HAL_RCC_OscConfig+0x106c>
 80030f6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030fa:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 80030fe:	2202      	movs	r2, #2
 8003100:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003102:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003106:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	fa93 f2a3 	rbit	r2, r3
 8003110:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003114:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8003118:	601a      	str	r2, [r3, #0]
 800311a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800311e:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8003122:	2202      	movs	r2, #2
 8003124:	601a      	str	r2, [r3, #0]
 8003126:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800312a:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	fa93 f2a3 	rbit	r2, r3
 8003134:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003138:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 800313c:	601a      	str	r2, [r3, #0]
  return result;
 800313e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003142:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8003146:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003148:	fab3 f383 	clz	r3, r3
 800314c:	b2db      	uxtb	r3, r3
 800314e:	095b      	lsrs	r3, r3, #5
 8003150:	b2db      	uxtb	r3, r3
 8003152:	f043 0302 	orr.w	r3, r3, #2
 8003156:	b2db      	uxtb	r3, r3
 8003158:	2b02      	cmp	r3, #2
 800315a:	d102      	bne.n	8003162 <HAL_RCC_OscConfig+0xb4e>
 800315c:	4b43      	ldr	r3, [pc, #268]	@ (800326c <HAL_RCC_OscConfig+0xc58>)
 800315e:	6a1b      	ldr	r3, [r3, #32]
 8003160:	e013      	b.n	800318a <HAL_RCC_OscConfig+0xb76>
 8003162:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003166:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 800316a:	2202      	movs	r2, #2
 800316c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800316e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003172:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	fa93 f2a3 	rbit	r2, r3
 800317c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003180:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8003184:	601a      	str	r2, [r3, #0]
 8003186:	4b39      	ldr	r3, [pc, #228]	@ (800326c <HAL_RCC_OscConfig+0xc58>)
 8003188:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800318a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800318e:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8003192:	2102      	movs	r1, #2
 8003194:	6011      	str	r1, [r2, #0]
 8003196:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800319a:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 800319e:	6812      	ldr	r2, [r2, #0]
 80031a0:	fa92 f1a2 	rbit	r1, r2
 80031a4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80031a8:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 80031ac:	6011      	str	r1, [r2, #0]
  return result;
 80031ae:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80031b2:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 80031b6:	6812      	ldr	r2, [r2, #0]
 80031b8:	fab2 f282 	clz	r2, r2
 80031bc:	b2d2      	uxtb	r2, r2
 80031be:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80031c2:	b2d2      	uxtb	r2, r2
 80031c4:	f002 021f 	and.w	r2, r2, #31
 80031c8:	2101      	movs	r1, #1
 80031ca:	fa01 f202 	lsl.w	r2, r1, r2
 80031ce:	4013      	ands	r3, r2
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d184      	bne.n	80030de <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80031d4:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 80031d8:	2b01      	cmp	r3, #1
 80031da:	d105      	bne.n	80031e8 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80031dc:	4b23      	ldr	r3, [pc, #140]	@ (800326c <HAL_RCC_OscConfig+0xc58>)
 80031de:	69db      	ldr	r3, [r3, #28]
 80031e0:	4a22      	ldr	r2, [pc, #136]	@ (800326c <HAL_RCC_OscConfig+0xc58>)
 80031e2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80031e6:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80031e8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031ec:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	69db      	ldr	r3, [r3, #28]
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	f000 8242 	beq.w	800367e <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80031fa:	4b1c      	ldr	r3, [pc, #112]	@ (800326c <HAL_RCC_OscConfig+0xc58>)
 80031fc:	685b      	ldr	r3, [r3, #4]
 80031fe:	f003 030c 	and.w	r3, r3, #12
 8003202:	2b08      	cmp	r3, #8
 8003204:	f000 8213 	beq.w	800362e <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003208:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800320c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	69db      	ldr	r3, [r3, #28]
 8003214:	2b02      	cmp	r3, #2
 8003216:	f040 8162 	bne.w	80034de <HAL_RCC_OscConfig+0xeca>
 800321a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800321e:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8003222:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003226:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003228:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800322c:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	fa93 f2a3 	rbit	r2, r3
 8003236:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800323a:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 800323e:	601a      	str	r2, [r3, #0]
  return result;
 8003240:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003244:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8003248:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800324a:	fab3 f383 	clz	r3, r3
 800324e:	b2db      	uxtb	r3, r3
 8003250:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003254:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003258:	009b      	lsls	r3, r3, #2
 800325a:	461a      	mov	r2, r3
 800325c:	2300      	movs	r3, #0
 800325e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003260:	f7fe fda0 	bl	8001da4 <HAL_GetTick>
 8003264:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003268:	e00c      	b.n	8003284 <HAL_RCC_OscConfig+0xc70>
 800326a:	bf00      	nop
 800326c:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003270:	f7fe fd98 	bl	8001da4 <HAL_GetTick>
 8003274:	4602      	mov	r2, r0
 8003276:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800327a:	1ad3      	subs	r3, r2, r3
 800327c:	2b02      	cmp	r3, #2
 800327e:	d901      	bls.n	8003284 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8003280:	2303      	movs	r3, #3
 8003282:	e1fd      	b.n	8003680 <HAL_RCC_OscConfig+0x106c>
 8003284:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003288:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 800328c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003290:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003292:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003296:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	fa93 f2a3 	rbit	r2, r3
 80032a0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80032a4:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80032a8:	601a      	str	r2, [r3, #0]
  return result;
 80032aa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80032ae:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80032b2:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80032b4:	fab3 f383 	clz	r3, r3
 80032b8:	b2db      	uxtb	r3, r3
 80032ba:	095b      	lsrs	r3, r3, #5
 80032bc:	b2db      	uxtb	r3, r3
 80032be:	f043 0301 	orr.w	r3, r3, #1
 80032c2:	b2db      	uxtb	r3, r3
 80032c4:	2b01      	cmp	r3, #1
 80032c6:	d102      	bne.n	80032ce <HAL_RCC_OscConfig+0xcba>
 80032c8:	4bb0      	ldr	r3, [pc, #704]	@ (800358c <HAL_RCC_OscConfig+0xf78>)
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	e027      	b.n	800331e <HAL_RCC_OscConfig+0xd0a>
 80032ce:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80032d2:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80032d6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80032da:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032dc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80032e0:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	fa93 f2a3 	rbit	r2, r3
 80032ea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80032ee:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 80032f2:	601a      	str	r2, [r3, #0]
 80032f4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80032f8:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 80032fc:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003300:	601a      	str	r2, [r3, #0]
 8003302:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003306:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	fa93 f2a3 	rbit	r2, r3
 8003310:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003314:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8003318:	601a      	str	r2, [r3, #0]
 800331a:	4b9c      	ldr	r3, [pc, #624]	@ (800358c <HAL_RCC_OscConfig+0xf78>)
 800331c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800331e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003322:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8003326:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 800332a:	6011      	str	r1, [r2, #0]
 800332c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003330:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8003334:	6812      	ldr	r2, [r2, #0]
 8003336:	fa92 f1a2 	rbit	r1, r2
 800333a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800333e:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8003342:	6011      	str	r1, [r2, #0]
  return result;
 8003344:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003348:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 800334c:	6812      	ldr	r2, [r2, #0]
 800334e:	fab2 f282 	clz	r2, r2
 8003352:	b2d2      	uxtb	r2, r2
 8003354:	f042 0220 	orr.w	r2, r2, #32
 8003358:	b2d2      	uxtb	r2, r2
 800335a:	f002 021f 	and.w	r2, r2, #31
 800335e:	2101      	movs	r1, #1
 8003360:	fa01 f202 	lsl.w	r2, r1, r2
 8003364:	4013      	ands	r3, r2
 8003366:	2b00      	cmp	r3, #0
 8003368:	d182      	bne.n	8003270 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800336a:	4b88      	ldr	r3, [pc, #544]	@ (800358c <HAL_RCC_OscConfig+0xf78>)
 800336c:	685b      	ldr	r3, [r3, #4]
 800336e:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003372:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003376:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800337e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003382:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	6a1b      	ldr	r3, [r3, #32]
 800338a:	430b      	orrs	r3, r1
 800338c:	497f      	ldr	r1, [pc, #508]	@ (800358c <HAL_RCC_OscConfig+0xf78>)
 800338e:	4313      	orrs	r3, r2
 8003390:	604b      	str	r3, [r1, #4]
 8003392:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003396:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 800339a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800339e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033a0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80033a4:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	fa93 f2a3 	rbit	r2, r3
 80033ae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80033b2:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 80033b6:	601a      	str	r2, [r3, #0]
  return result;
 80033b8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80033bc:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 80033c0:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80033c2:	fab3 f383 	clz	r3, r3
 80033c6:	b2db      	uxtb	r3, r3
 80033c8:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80033cc:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80033d0:	009b      	lsls	r3, r3, #2
 80033d2:	461a      	mov	r2, r3
 80033d4:	2301      	movs	r3, #1
 80033d6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033d8:	f7fe fce4 	bl	8001da4 <HAL_GetTick>
 80033dc:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80033e0:	e009      	b.n	80033f6 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80033e2:	f7fe fcdf 	bl	8001da4 <HAL_GetTick>
 80033e6:	4602      	mov	r2, r0
 80033e8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80033ec:	1ad3      	subs	r3, r2, r3
 80033ee:	2b02      	cmp	r3, #2
 80033f0:	d901      	bls.n	80033f6 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 80033f2:	2303      	movs	r3, #3
 80033f4:	e144      	b.n	8003680 <HAL_RCC_OscConfig+0x106c>
 80033f6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80033fa:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80033fe:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003402:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003404:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003408:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	fa93 f2a3 	rbit	r2, r3
 8003412:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003416:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 800341a:	601a      	str	r2, [r3, #0]
  return result;
 800341c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003420:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8003424:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003426:	fab3 f383 	clz	r3, r3
 800342a:	b2db      	uxtb	r3, r3
 800342c:	095b      	lsrs	r3, r3, #5
 800342e:	b2db      	uxtb	r3, r3
 8003430:	f043 0301 	orr.w	r3, r3, #1
 8003434:	b2db      	uxtb	r3, r3
 8003436:	2b01      	cmp	r3, #1
 8003438:	d102      	bne.n	8003440 <HAL_RCC_OscConfig+0xe2c>
 800343a:	4b54      	ldr	r3, [pc, #336]	@ (800358c <HAL_RCC_OscConfig+0xf78>)
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	e027      	b.n	8003490 <HAL_RCC_OscConfig+0xe7c>
 8003440:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003444:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8003448:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800344c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800344e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003452:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	fa93 f2a3 	rbit	r2, r3
 800345c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003460:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8003464:	601a      	str	r2, [r3, #0]
 8003466:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800346a:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 800346e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003472:	601a      	str	r2, [r3, #0]
 8003474:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003478:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	fa93 f2a3 	rbit	r2, r3
 8003482:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003486:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 800348a:	601a      	str	r2, [r3, #0]
 800348c:	4b3f      	ldr	r3, [pc, #252]	@ (800358c <HAL_RCC_OscConfig+0xf78>)
 800348e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003490:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003494:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8003498:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 800349c:	6011      	str	r1, [r2, #0]
 800349e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80034a2:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 80034a6:	6812      	ldr	r2, [r2, #0]
 80034a8:	fa92 f1a2 	rbit	r1, r2
 80034ac:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80034b0:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 80034b4:	6011      	str	r1, [r2, #0]
  return result;
 80034b6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80034ba:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 80034be:	6812      	ldr	r2, [r2, #0]
 80034c0:	fab2 f282 	clz	r2, r2
 80034c4:	b2d2      	uxtb	r2, r2
 80034c6:	f042 0220 	orr.w	r2, r2, #32
 80034ca:	b2d2      	uxtb	r2, r2
 80034cc:	f002 021f 	and.w	r2, r2, #31
 80034d0:	2101      	movs	r1, #1
 80034d2:	fa01 f202 	lsl.w	r2, r1, r2
 80034d6:	4013      	ands	r3, r2
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d082      	beq.n	80033e2 <HAL_RCC_OscConfig+0xdce>
 80034dc:	e0cf      	b.n	800367e <HAL_RCC_OscConfig+0x106a>
 80034de:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80034e2:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 80034e6:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80034ea:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034ec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80034f0:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	fa93 f2a3 	rbit	r2, r3
 80034fa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80034fe:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8003502:	601a      	str	r2, [r3, #0]
  return result;
 8003504:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003508:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 800350c:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800350e:	fab3 f383 	clz	r3, r3
 8003512:	b2db      	uxtb	r3, r3
 8003514:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003518:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800351c:	009b      	lsls	r3, r3, #2
 800351e:	461a      	mov	r2, r3
 8003520:	2300      	movs	r3, #0
 8003522:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003524:	f7fe fc3e 	bl	8001da4 <HAL_GetTick>
 8003528:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800352c:	e009      	b.n	8003542 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800352e:	f7fe fc39 	bl	8001da4 <HAL_GetTick>
 8003532:	4602      	mov	r2, r0
 8003534:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003538:	1ad3      	subs	r3, r2, r3
 800353a:	2b02      	cmp	r3, #2
 800353c:	d901      	bls.n	8003542 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 800353e:	2303      	movs	r3, #3
 8003540:	e09e      	b.n	8003680 <HAL_RCC_OscConfig+0x106c>
 8003542:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003546:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 800354a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800354e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003550:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003554:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	fa93 f2a3 	rbit	r2, r3
 800355e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003562:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8003566:	601a      	str	r2, [r3, #0]
  return result;
 8003568:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800356c:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8003570:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003572:	fab3 f383 	clz	r3, r3
 8003576:	b2db      	uxtb	r3, r3
 8003578:	095b      	lsrs	r3, r3, #5
 800357a:	b2db      	uxtb	r3, r3
 800357c:	f043 0301 	orr.w	r3, r3, #1
 8003580:	b2db      	uxtb	r3, r3
 8003582:	2b01      	cmp	r3, #1
 8003584:	d104      	bne.n	8003590 <HAL_RCC_OscConfig+0xf7c>
 8003586:	4b01      	ldr	r3, [pc, #4]	@ (800358c <HAL_RCC_OscConfig+0xf78>)
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	e029      	b.n	80035e0 <HAL_RCC_OscConfig+0xfcc>
 800358c:	40021000 	.word	0x40021000
 8003590:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003594:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8003598:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800359c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800359e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80035a2:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	fa93 f2a3 	rbit	r2, r3
 80035ac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80035b0:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 80035b4:	601a      	str	r2, [r3, #0]
 80035b6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80035ba:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 80035be:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80035c2:	601a      	str	r2, [r3, #0]
 80035c4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80035c8:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	fa93 f2a3 	rbit	r2, r3
 80035d2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80035d6:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 80035da:	601a      	str	r2, [r3, #0]
 80035dc:	4b2b      	ldr	r3, [pc, #172]	@ (800368c <HAL_RCC_OscConfig+0x1078>)
 80035de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035e0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80035e4:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 80035e8:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80035ec:	6011      	str	r1, [r2, #0]
 80035ee:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80035f2:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 80035f6:	6812      	ldr	r2, [r2, #0]
 80035f8:	fa92 f1a2 	rbit	r1, r2
 80035fc:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003600:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8003604:	6011      	str	r1, [r2, #0]
  return result;
 8003606:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800360a:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 800360e:	6812      	ldr	r2, [r2, #0]
 8003610:	fab2 f282 	clz	r2, r2
 8003614:	b2d2      	uxtb	r2, r2
 8003616:	f042 0220 	orr.w	r2, r2, #32
 800361a:	b2d2      	uxtb	r2, r2
 800361c:	f002 021f 	and.w	r2, r2, #31
 8003620:	2101      	movs	r1, #1
 8003622:	fa01 f202 	lsl.w	r2, r1, r2
 8003626:	4013      	ands	r3, r2
 8003628:	2b00      	cmp	r3, #0
 800362a:	d180      	bne.n	800352e <HAL_RCC_OscConfig+0xf1a>
 800362c:	e027      	b.n	800367e <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800362e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003632:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	69db      	ldr	r3, [r3, #28]
 800363a:	2b01      	cmp	r3, #1
 800363c:	d101      	bne.n	8003642 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 800363e:	2301      	movs	r3, #1
 8003640:	e01e      	b.n	8003680 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003642:	4b12      	ldr	r3, [pc, #72]	@ (800368c <HAL_RCC_OscConfig+0x1078>)
 8003644:	685b      	ldr	r3, [r3, #4]
 8003646:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800364a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 800364e:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003652:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003656:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	6a1b      	ldr	r3, [r3, #32]
 800365e:	429a      	cmp	r2, r3
 8003660:	d10b      	bne.n	800367a <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8003662:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8003666:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800366a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800366e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003676:	429a      	cmp	r2, r3
 8003678:	d001      	beq.n	800367e <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 800367a:	2301      	movs	r3, #1
 800367c:	e000      	b.n	8003680 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 800367e:	2300      	movs	r3, #0
}
 8003680:	4618      	mov	r0, r3
 8003682:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 8003686:	46bd      	mov	sp, r7
 8003688:	bd80      	pop	{r7, pc}
 800368a:	bf00      	nop
 800368c:	40021000 	.word	0x40021000

08003690 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003690:	b580      	push	{r7, lr}
 8003692:	b09e      	sub	sp, #120	@ 0x78
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
 8003698:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800369a:	2300      	movs	r3, #0
 800369c:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d101      	bne.n	80036a8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80036a4:	2301      	movs	r3, #1
 80036a6:	e162      	b.n	800396e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80036a8:	4b90      	ldr	r3, [pc, #576]	@ (80038ec <HAL_RCC_ClockConfig+0x25c>)
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f003 0307 	and.w	r3, r3, #7
 80036b0:	683a      	ldr	r2, [r7, #0]
 80036b2:	429a      	cmp	r2, r3
 80036b4:	d910      	bls.n	80036d8 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036b6:	4b8d      	ldr	r3, [pc, #564]	@ (80038ec <HAL_RCC_ClockConfig+0x25c>)
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f023 0207 	bic.w	r2, r3, #7
 80036be:	498b      	ldr	r1, [pc, #556]	@ (80038ec <HAL_RCC_ClockConfig+0x25c>)
 80036c0:	683b      	ldr	r3, [r7, #0]
 80036c2:	4313      	orrs	r3, r2
 80036c4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80036c6:	4b89      	ldr	r3, [pc, #548]	@ (80038ec <HAL_RCC_ClockConfig+0x25c>)
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f003 0307 	and.w	r3, r3, #7
 80036ce:	683a      	ldr	r2, [r7, #0]
 80036d0:	429a      	cmp	r2, r3
 80036d2:	d001      	beq.n	80036d8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80036d4:	2301      	movs	r3, #1
 80036d6:	e14a      	b.n	800396e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f003 0302 	and.w	r3, r3, #2
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d008      	beq.n	80036f6 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80036e4:	4b82      	ldr	r3, [pc, #520]	@ (80038f0 <HAL_RCC_ClockConfig+0x260>)
 80036e6:	685b      	ldr	r3, [r3, #4]
 80036e8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	689b      	ldr	r3, [r3, #8]
 80036f0:	497f      	ldr	r1, [pc, #508]	@ (80038f0 <HAL_RCC_ClockConfig+0x260>)
 80036f2:	4313      	orrs	r3, r2
 80036f4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f003 0301 	and.w	r3, r3, #1
 80036fe:	2b00      	cmp	r3, #0
 8003700:	f000 80dc 	beq.w	80038bc <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	685b      	ldr	r3, [r3, #4]
 8003708:	2b01      	cmp	r3, #1
 800370a:	d13c      	bne.n	8003786 <HAL_RCC_ClockConfig+0xf6>
 800370c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003710:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003712:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003714:	fa93 f3a3 	rbit	r3, r3
 8003718:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 800371a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800371c:	fab3 f383 	clz	r3, r3
 8003720:	b2db      	uxtb	r3, r3
 8003722:	095b      	lsrs	r3, r3, #5
 8003724:	b2db      	uxtb	r3, r3
 8003726:	f043 0301 	orr.w	r3, r3, #1
 800372a:	b2db      	uxtb	r3, r3
 800372c:	2b01      	cmp	r3, #1
 800372e:	d102      	bne.n	8003736 <HAL_RCC_ClockConfig+0xa6>
 8003730:	4b6f      	ldr	r3, [pc, #444]	@ (80038f0 <HAL_RCC_ClockConfig+0x260>)
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	e00f      	b.n	8003756 <HAL_RCC_ClockConfig+0xc6>
 8003736:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800373a:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800373c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800373e:	fa93 f3a3 	rbit	r3, r3
 8003742:	667b      	str	r3, [r7, #100]	@ 0x64
 8003744:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003748:	663b      	str	r3, [r7, #96]	@ 0x60
 800374a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800374c:	fa93 f3a3 	rbit	r3, r3
 8003750:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003752:	4b67      	ldr	r3, [pc, #412]	@ (80038f0 <HAL_RCC_ClockConfig+0x260>)
 8003754:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003756:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800375a:	65ba      	str	r2, [r7, #88]	@ 0x58
 800375c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800375e:	fa92 f2a2 	rbit	r2, r2
 8003762:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8003764:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8003766:	fab2 f282 	clz	r2, r2
 800376a:	b2d2      	uxtb	r2, r2
 800376c:	f042 0220 	orr.w	r2, r2, #32
 8003770:	b2d2      	uxtb	r2, r2
 8003772:	f002 021f 	and.w	r2, r2, #31
 8003776:	2101      	movs	r1, #1
 8003778:	fa01 f202 	lsl.w	r2, r1, r2
 800377c:	4013      	ands	r3, r2
 800377e:	2b00      	cmp	r3, #0
 8003780:	d17b      	bne.n	800387a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003782:	2301      	movs	r3, #1
 8003784:	e0f3      	b.n	800396e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	685b      	ldr	r3, [r3, #4]
 800378a:	2b02      	cmp	r3, #2
 800378c:	d13c      	bne.n	8003808 <HAL_RCC_ClockConfig+0x178>
 800378e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003792:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003794:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003796:	fa93 f3a3 	rbit	r3, r3
 800379a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 800379c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800379e:	fab3 f383 	clz	r3, r3
 80037a2:	b2db      	uxtb	r3, r3
 80037a4:	095b      	lsrs	r3, r3, #5
 80037a6:	b2db      	uxtb	r3, r3
 80037a8:	f043 0301 	orr.w	r3, r3, #1
 80037ac:	b2db      	uxtb	r3, r3
 80037ae:	2b01      	cmp	r3, #1
 80037b0:	d102      	bne.n	80037b8 <HAL_RCC_ClockConfig+0x128>
 80037b2:	4b4f      	ldr	r3, [pc, #316]	@ (80038f0 <HAL_RCC_ClockConfig+0x260>)
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	e00f      	b.n	80037d8 <HAL_RCC_ClockConfig+0x148>
 80037b8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80037bc:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037be:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80037c0:	fa93 f3a3 	rbit	r3, r3
 80037c4:	647b      	str	r3, [r7, #68]	@ 0x44
 80037c6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80037ca:	643b      	str	r3, [r7, #64]	@ 0x40
 80037cc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80037ce:	fa93 f3a3 	rbit	r3, r3
 80037d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80037d4:	4b46      	ldr	r3, [pc, #280]	@ (80038f0 <HAL_RCC_ClockConfig+0x260>)
 80037d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037d8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80037dc:	63ba      	str	r2, [r7, #56]	@ 0x38
 80037de:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80037e0:	fa92 f2a2 	rbit	r2, r2
 80037e4:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 80037e6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80037e8:	fab2 f282 	clz	r2, r2
 80037ec:	b2d2      	uxtb	r2, r2
 80037ee:	f042 0220 	orr.w	r2, r2, #32
 80037f2:	b2d2      	uxtb	r2, r2
 80037f4:	f002 021f 	and.w	r2, r2, #31
 80037f8:	2101      	movs	r1, #1
 80037fa:	fa01 f202 	lsl.w	r2, r1, r2
 80037fe:	4013      	ands	r3, r2
 8003800:	2b00      	cmp	r3, #0
 8003802:	d13a      	bne.n	800387a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003804:	2301      	movs	r3, #1
 8003806:	e0b2      	b.n	800396e <HAL_RCC_ClockConfig+0x2de>
 8003808:	2302      	movs	r3, #2
 800380a:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800380c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800380e:	fa93 f3a3 	rbit	r3, r3
 8003812:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8003814:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003816:	fab3 f383 	clz	r3, r3
 800381a:	b2db      	uxtb	r3, r3
 800381c:	095b      	lsrs	r3, r3, #5
 800381e:	b2db      	uxtb	r3, r3
 8003820:	f043 0301 	orr.w	r3, r3, #1
 8003824:	b2db      	uxtb	r3, r3
 8003826:	2b01      	cmp	r3, #1
 8003828:	d102      	bne.n	8003830 <HAL_RCC_ClockConfig+0x1a0>
 800382a:	4b31      	ldr	r3, [pc, #196]	@ (80038f0 <HAL_RCC_ClockConfig+0x260>)
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	e00d      	b.n	800384c <HAL_RCC_ClockConfig+0x1bc>
 8003830:	2302      	movs	r3, #2
 8003832:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003834:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003836:	fa93 f3a3 	rbit	r3, r3
 800383a:	627b      	str	r3, [r7, #36]	@ 0x24
 800383c:	2302      	movs	r3, #2
 800383e:	623b      	str	r3, [r7, #32]
 8003840:	6a3b      	ldr	r3, [r7, #32]
 8003842:	fa93 f3a3 	rbit	r3, r3
 8003846:	61fb      	str	r3, [r7, #28]
 8003848:	4b29      	ldr	r3, [pc, #164]	@ (80038f0 <HAL_RCC_ClockConfig+0x260>)
 800384a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800384c:	2202      	movs	r2, #2
 800384e:	61ba      	str	r2, [r7, #24]
 8003850:	69ba      	ldr	r2, [r7, #24]
 8003852:	fa92 f2a2 	rbit	r2, r2
 8003856:	617a      	str	r2, [r7, #20]
  return result;
 8003858:	697a      	ldr	r2, [r7, #20]
 800385a:	fab2 f282 	clz	r2, r2
 800385e:	b2d2      	uxtb	r2, r2
 8003860:	f042 0220 	orr.w	r2, r2, #32
 8003864:	b2d2      	uxtb	r2, r2
 8003866:	f002 021f 	and.w	r2, r2, #31
 800386a:	2101      	movs	r1, #1
 800386c:	fa01 f202 	lsl.w	r2, r1, r2
 8003870:	4013      	ands	r3, r2
 8003872:	2b00      	cmp	r3, #0
 8003874:	d101      	bne.n	800387a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003876:	2301      	movs	r3, #1
 8003878:	e079      	b.n	800396e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800387a:	4b1d      	ldr	r3, [pc, #116]	@ (80038f0 <HAL_RCC_ClockConfig+0x260>)
 800387c:	685b      	ldr	r3, [r3, #4]
 800387e:	f023 0203 	bic.w	r2, r3, #3
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	685b      	ldr	r3, [r3, #4]
 8003886:	491a      	ldr	r1, [pc, #104]	@ (80038f0 <HAL_RCC_ClockConfig+0x260>)
 8003888:	4313      	orrs	r3, r2
 800388a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800388c:	f7fe fa8a 	bl	8001da4 <HAL_GetTick>
 8003890:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003892:	e00a      	b.n	80038aa <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003894:	f7fe fa86 	bl	8001da4 <HAL_GetTick>
 8003898:	4602      	mov	r2, r0
 800389a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800389c:	1ad3      	subs	r3, r2, r3
 800389e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80038a2:	4293      	cmp	r3, r2
 80038a4:	d901      	bls.n	80038aa <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80038a6:	2303      	movs	r3, #3
 80038a8:	e061      	b.n	800396e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038aa:	4b11      	ldr	r3, [pc, #68]	@ (80038f0 <HAL_RCC_ClockConfig+0x260>)
 80038ac:	685b      	ldr	r3, [r3, #4]
 80038ae:	f003 020c 	and.w	r2, r3, #12
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	685b      	ldr	r3, [r3, #4]
 80038b6:	009b      	lsls	r3, r3, #2
 80038b8:	429a      	cmp	r2, r3
 80038ba:	d1eb      	bne.n	8003894 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80038bc:	4b0b      	ldr	r3, [pc, #44]	@ (80038ec <HAL_RCC_ClockConfig+0x25c>)
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f003 0307 	and.w	r3, r3, #7
 80038c4:	683a      	ldr	r2, [r7, #0]
 80038c6:	429a      	cmp	r2, r3
 80038c8:	d214      	bcs.n	80038f4 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038ca:	4b08      	ldr	r3, [pc, #32]	@ (80038ec <HAL_RCC_ClockConfig+0x25c>)
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f023 0207 	bic.w	r2, r3, #7
 80038d2:	4906      	ldr	r1, [pc, #24]	@ (80038ec <HAL_RCC_ClockConfig+0x25c>)
 80038d4:	683b      	ldr	r3, [r7, #0]
 80038d6:	4313      	orrs	r3, r2
 80038d8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80038da:	4b04      	ldr	r3, [pc, #16]	@ (80038ec <HAL_RCC_ClockConfig+0x25c>)
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f003 0307 	and.w	r3, r3, #7
 80038e2:	683a      	ldr	r2, [r7, #0]
 80038e4:	429a      	cmp	r2, r3
 80038e6:	d005      	beq.n	80038f4 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80038e8:	2301      	movs	r3, #1
 80038ea:	e040      	b.n	800396e <HAL_RCC_ClockConfig+0x2de>
 80038ec:	40022000 	.word	0x40022000
 80038f0:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f003 0304 	and.w	r3, r3, #4
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d008      	beq.n	8003912 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003900:	4b1d      	ldr	r3, [pc, #116]	@ (8003978 <HAL_RCC_ClockConfig+0x2e8>)
 8003902:	685b      	ldr	r3, [r3, #4]
 8003904:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	68db      	ldr	r3, [r3, #12]
 800390c:	491a      	ldr	r1, [pc, #104]	@ (8003978 <HAL_RCC_ClockConfig+0x2e8>)
 800390e:	4313      	orrs	r3, r2
 8003910:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f003 0308 	and.w	r3, r3, #8
 800391a:	2b00      	cmp	r3, #0
 800391c:	d009      	beq.n	8003932 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800391e:	4b16      	ldr	r3, [pc, #88]	@ (8003978 <HAL_RCC_ClockConfig+0x2e8>)
 8003920:	685b      	ldr	r3, [r3, #4]
 8003922:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	691b      	ldr	r3, [r3, #16]
 800392a:	00db      	lsls	r3, r3, #3
 800392c:	4912      	ldr	r1, [pc, #72]	@ (8003978 <HAL_RCC_ClockConfig+0x2e8>)
 800392e:	4313      	orrs	r3, r2
 8003930:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003932:	f000 f829 	bl	8003988 <HAL_RCC_GetSysClockFreq>
 8003936:	4601      	mov	r1, r0
 8003938:	4b0f      	ldr	r3, [pc, #60]	@ (8003978 <HAL_RCC_ClockConfig+0x2e8>)
 800393a:	685b      	ldr	r3, [r3, #4]
 800393c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003940:	22f0      	movs	r2, #240	@ 0xf0
 8003942:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003944:	693a      	ldr	r2, [r7, #16]
 8003946:	fa92 f2a2 	rbit	r2, r2
 800394a:	60fa      	str	r2, [r7, #12]
  return result;
 800394c:	68fa      	ldr	r2, [r7, #12]
 800394e:	fab2 f282 	clz	r2, r2
 8003952:	b2d2      	uxtb	r2, r2
 8003954:	40d3      	lsrs	r3, r2
 8003956:	4a09      	ldr	r2, [pc, #36]	@ (800397c <HAL_RCC_ClockConfig+0x2ec>)
 8003958:	5cd3      	ldrb	r3, [r2, r3]
 800395a:	fa21 f303 	lsr.w	r3, r1, r3
 800395e:	4a08      	ldr	r2, [pc, #32]	@ (8003980 <HAL_RCC_ClockConfig+0x2f0>)
 8003960:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003962:	4b08      	ldr	r3, [pc, #32]	@ (8003984 <HAL_RCC_ClockConfig+0x2f4>)
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	4618      	mov	r0, r3
 8003968:	f7fe f9d8 	bl	8001d1c <HAL_InitTick>
  
  return HAL_OK;
 800396c:	2300      	movs	r3, #0
}
 800396e:	4618      	mov	r0, r3
 8003970:	3778      	adds	r7, #120	@ 0x78
 8003972:	46bd      	mov	sp, r7
 8003974:	bd80      	pop	{r7, pc}
 8003976:	bf00      	nop
 8003978:	40021000 	.word	0x40021000
 800397c:	080073e0 	.word	0x080073e0
 8003980:	20000000 	.word	0x20000000
 8003984:	20000004 	.word	0x20000004

08003988 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003988:	b480      	push	{r7}
 800398a:	b087      	sub	sp, #28
 800398c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800398e:	2300      	movs	r3, #0
 8003990:	60fb      	str	r3, [r7, #12]
 8003992:	2300      	movs	r3, #0
 8003994:	60bb      	str	r3, [r7, #8]
 8003996:	2300      	movs	r3, #0
 8003998:	617b      	str	r3, [r7, #20]
 800399a:	2300      	movs	r3, #0
 800399c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800399e:	2300      	movs	r3, #0
 80039a0:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 80039a2:	4b1e      	ldr	r3, [pc, #120]	@ (8003a1c <HAL_RCC_GetSysClockFreq+0x94>)
 80039a4:	685b      	ldr	r3, [r3, #4]
 80039a6:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	f003 030c 	and.w	r3, r3, #12
 80039ae:	2b04      	cmp	r3, #4
 80039b0:	d002      	beq.n	80039b8 <HAL_RCC_GetSysClockFreq+0x30>
 80039b2:	2b08      	cmp	r3, #8
 80039b4:	d003      	beq.n	80039be <HAL_RCC_GetSysClockFreq+0x36>
 80039b6:	e026      	b.n	8003a06 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80039b8:	4b19      	ldr	r3, [pc, #100]	@ (8003a20 <HAL_RCC_GetSysClockFreq+0x98>)
 80039ba:	613b      	str	r3, [r7, #16]
      break;
 80039bc:	e026      	b.n	8003a0c <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	0c9b      	lsrs	r3, r3, #18
 80039c2:	f003 030f 	and.w	r3, r3, #15
 80039c6:	4a17      	ldr	r2, [pc, #92]	@ (8003a24 <HAL_RCC_GetSysClockFreq+0x9c>)
 80039c8:	5cd3      	ldrb	r3, [r2, r3]
 80039ca:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 80039cc:	4b13      	ldr	r3, [pc, #76]	@ (8003a1c <HAL_RCC_GetSysClockFreq+0x94>)
 80039ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039d0:	f003 030f 	and.w	r3, r3, #15
 80039d4:	4a14      	ldr	r2, [pc, #80]	@ (8003a28 <HAL_RCC_GetSysClockFreq+0xa0>)
 80039d6:	5cd3      	ldrb	r3, [r2, r3]
 80039d8:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d008      	beq.n	80039f6 <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80039e4:	4a0e      	ldr	r2, [pc, #56]	@ (8003a20 <HAL_RCC_GetSysClockFreq+0x98>)
 80039e6:	68bb      	ldr	r3, [r7, #8]
 80039e8:	fbb2 f2f3 	udiv	r2, r2, r3
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	fb02 f303 	mul.w	r3, r2, r3
 80039f2:	617b      	str	r3, [r7, #20]
 80039f4:	e004      	b.n	8003a00 <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	4a0c      	ldr	r2, [pc, #48]	@ (8003a2c <HAL_RCC_GetSysClockFreq+0xa4>)
 80039fa:	fb02 f303 	mul.w	r3, r2, r3
 80039fe:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003a00:	697b      	ldr	r3, [r7, #20]
 8003a02:	613b      	str	r3, [r7, #16]
      break;
 8003a04:	e002      	b.n	8003a0c <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003a06:	4b06      	ldr	r3, [pc, #24]	@ (8003a20 <HAL_RCC_GetSysClockFreq+0x98>)
 8003a08:	613b      	str	r3, [r7, #16]
      break;
 8003a0a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003a0c:	693b      	ldr	r3, [r7, #16]
}
 8003a0e:	4618      	mov	r0, r3
 8003a10:	371c      	adds	r7, #28
 8003a12:	46bd      	mov	sp, r7
 8003a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a18:	4770      	bx	lr
 8003a1a:	bf00      	nop
 8003a1c:	40021000 	.word	0x40021000
 8003a20:	007a1200 	.word	0x007a1200
 8003a24:	080073f8 	.word	0x080073f8
 8003a28:	08007408 	.word	0x08007408
 8003a2c:	003d0900 	.word	0x003d0900

08003a30 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a30:	b480      	push	{r7}
 8003a32:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003a34:	4b03      	ldr	r3, [pc, #12]	@ (8003a44 <HAL_RCC_GetHCLKFreq+0x14>)
 8003a36:	681b      	ldr	r3, [r3, #0]
}
 8003a38:	4618      	mov	r0, r3
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a40:	4770      	bx	lr
 8003a42:	bf00      	nop
 8003a44:	20000000 	.word	0x20000000

08003a48 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	b082      	sub	sp, #8
 8003a4c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8003a4e:	f7ff ffef 	bl	8003a30 <HAL_RCC_GetHCLKFreq>
 8003a52:	4601      	mov	r1, r0
 8003a54:	4b0b      	ldr	r3, [pc, #44]	@ (8003a84 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8003a56:	685b      	ldr	r3, [r3, #4]
 8003a58:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003a5c:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8003a60:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a62:	687a      	ldr	r2, [r7, #4]
 8003a64:	fa92 f2a2 	rbit	r2, r2
 8003a68:	603a      	str	r2, [r7, #0]
  return result;
 8003a6a:	683a      	ldr	r2, [r7, #0]
 8003a6c:	fab2 f282 	clz	r2, r2
 8003a70:	b2d2      	uxtb	r2, r2
 8003a72:	40d3      	lsrs	r3, r2
 8003a74:	4a04      	ldr	r2, [pc, #16]	@ (8003a88 <HAL_RCC_GetPCLK1Freq+0x40>)
 8003a76:	5cd3      	ldrb	r3, [r2, r3]
 8003a78:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	3708      	adds	r7, #8
 8003a80:	46bd      	mov	sp, r7
 8003a82:	bd80      	pop	{r7, pc}
 8003a84:	40021000 	.word	0x40021000
 8003a88:	080073f0 	.word	0x080073f0

08003a8c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	b082      	sub	sp, #8
 8003a90:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8003a92:	f7ff ffcd 	bl	8003a30 <HAL_RCC_GetHCLKFreq>
 8003a96:	4601      	mov	r1, r0
 8003a98:	4b0b      	ldr	r3, [pc, #44]	@ (8003ac8 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8003a9a:	685b      	ldr	r3, [r3, #4]
 8003a9c:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 8003aa0:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 8003aa4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003aa6:	687a      	ldr	r2, [r7, #4]
 8003aa8:	fa92 f2a2 	rbit	r2, r2
 8003aac:	603a      	str	r2, [r7, #0]
  return result;
 8003aae:	683a      	ldr	r2, [r7, #0]
 8003ab0:	fab2 f282 	clz	r2, r2
 8003ab4:	b2d2      	uxtb	r2, r2
 8003ab6:	40d3      	lsrs	r3, r2
 8003ab8:	4a04      	ldr	r2, [pc, #16]	@ (8003acc <HAL_RCC_GetPCLK2Freq+0x40>)
 8003aba:	5cd3      	ldrb	r3, [r2, r3]
 8003abc:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	3708      	adds	r7, #8
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	bd80      	pop	{r7, pc}
 8003ac8:	40021000 	.word	0x40021000
 8003acc:	080073f0 	.word	0x080073f0

08003ad0 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	b092      	sub	sp, #72	@ 0x48
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003ad8:	2300      	movs	r3, #0
 8003ada:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 8003adc:	2300      	movs	r3, #0
 8003ade:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	f000 80cd 	beq.w	8003c8e <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003af4:	4b86      	ldr	r3, [pc, #536]	@ (8003d10 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003af6:	69db      	ldr	r3, [r3, #28]
 8003af8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d10e      	bne.n	8003b1e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b00:	4b83      	ldr	r3, [pc, #524]	@ (8003d10 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003b02:	69db      	ldr	r3, [r3, #28]
 8003b04:	4a82      	ldr	r2, [pc, #520]	@ (8003d10 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003b06:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003b0a:	61d3      	str	r3, [r2, #28]
 8003b0c:	4b80      	ldr	r3, [pc, #512]	@ (8003d10 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003b0e:	69db      	ldr	r3, [r3, #28]
 8003b10:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b14:	60bb      	str	r3, [r7, #8]
 8003b16:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b18:	2301      	movs	r3, #1
 8003b1a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b1e:	4b7d      	ldr	r3, [pc, #500]	@ (8003d14 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d118      	bne.n	8003b5c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003b2a:	4b7a      	ldr	r3, [pc, #488]	@ (8003d14 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	4a79      	ldr	r2, [pc, #484]	@ (8003d14 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003b30:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003b34:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b36:	f7fe f935 	bl	8001da4 <HAL_GetTick>
 8003b3a:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b3c:	e008      	b.n	8003b50 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b3e:	f7fe f931 	bl	8001da4 <HAL_GetTick>
 8003b42:	4602      	mov	r2, r0
 8003b44:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003b46:	1ad3      	subs	r3, r2, r3
 8003b48:	2b64      	cmp	r3, #100	@ 0x64
 8003b4a:	d901      	bls.n	8003b50 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003b4c:	2303      	movs	r3, #3
 8003b4e:	e0db      	b.n	8003d08 <HAL_RCCEx_PeriphCLKConfig+0x238>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b50:	4b70      	ldr	r3, [pc, #448]	@ (8003d14 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d0f0      	beq.n	8003b3e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003b5c:	4b6c      	ldr	r3, [pc, #432]	@ (8003d10 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003b5e:	6a1b      	ldr	r3, [r3, #32]
 8003b60:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003b64:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003b66:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d07d      	beq.n	8003c68 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	685b      	ldr	r3, [r3, #4]
 8003b70:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003b74:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003b76:	429a      	cmp	r2, r3
 8003b78:	d076      	beq.n	8003c68 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003b7a:	4b65      	ldr	r3, [pc, #404]	@ (8003d10 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003b7c:	6a1b      	ldr	r3, [r3, #32]
 8003b7e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003b82:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003b84:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003b88:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b8c:	fa93 f3a3 	rbit	r3, r3
 8003b90:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8003b92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003b94:	fab3 f383 	clz	r3, r3
 8003b98:	b2db      	uxtb	r3, r3
 8003b9a:	461a      	mov	r2, r3
 8003b9c:	4b5e      	ldr	r3, [pc, #376]	@ (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003b9e:	4413      	add	r3, r2
 8003ba0:	009b      	lsls	r3, r3, #2
 8003ba2:	461a      	mov	r2, r3
 8003ba4:	2301      	movs	r3, #1
 8003ba6:	6013      	str	r3, [r2, #0]
 8003ba8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003bac:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003bb0:	fa93 f3a3 	rbit	r3, r3
 8003bb4:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8003bb6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003bb8:	fab3 f383 	clz	r3, r3
 8003bbc:	b2db      	uxtb	r3, r3
 8003bbe:	461a      	mov	r2, r3
 8003bc0:	4b55      	ldr	r3, [pc, #340]	@ (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003bc2:	4413      	add	r3, r2
 8003bc4:	009b      	lsls	r3, r3, #2
 8003bc6:	461a      	mov	r2, r3
 8003bc8:	2300      	movs	r3, #0
 8003bca:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003bcc:	4a50      	ldr	r2, [pc, #320]	@ (8003d10 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003bce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003bd0:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003bd2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003bd4:	f003 0301 	and.w	r3, r3, #1
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d045      	beq.n	8003c68 <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bdc:	f7fe f8e2 	bl	8001da4 <HAL_GetTick>
 8003be0:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003be2:	e00a      	b.n	8003bfa <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003be4:	f7fe f8de 	bl	8001da4 <HAL_GetTick>
 8003be8:	4602      	mov	r2, r0
 8003bea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003bec:	1ad3      	subs	r3, r2, r3
 8003bee:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003bf2:	4293      	cmp	r3, r2
 8003bf4:	d901      	bls.n	8003bfa <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8003bf6:	2303      	movs	r3, #3
 8003bf8:	e086      	b.n	8003d08 <HAL_RCCEx_PeriphCLKConfig+0x238>
 8003bfa:	2302      	movs	r3, #2
 8003bfc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bfe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c00:	fa93 f3a3 	rbit	r3, r3
 8003c04:	627b      	str	r3, [r7, #36]	@ 0x24
 8003c06:	2302      	movs	r3, #2
 8003c08:	623b      	str	r3, [r7, #32]
 8003c0a:	6a3b      	ldr	r3, [r7, #32]
 8003c0c:	fa93 f3a3 	rbit	r3, r3
 8003c10:	61fb      	str	r3, [r7, #28]
  return result;
 8003c12:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c14:	fab3 f383 	clz	r3, r3
 8003c18:	b2db      	uxtb	r3, r3
 8003c1a:	095b      	lsrs	r3, r3, #5
 8003c1c:	b2db      	uxtb	r3, r3
 8003c1e:	f043 0302 	orr.w	r3, r3, #2
 8003c22:	b2db      	uxtb	r3, r3
 8003c24:	2b02      	cmp	r3, #2
 8003c26:	d102      	bne.n	8003c2e <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8003c28:	4b39      	ldr	r3, [pc, #228]	@ (8003d10 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003c2a:	6a1b      	ldr	r3, [r3, #32]
 8003c2c:	e007      	b.n	8003c3e <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8003c2e:	2302      	movs	r3, #2
 8003c30:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c32:	69bb      	ldr	r3, [r7, #24]
 8003c34:	fa93 f3a3 	rbit	r3, r3
 8003c38:	617b      	str	r3, [r7, #20]
 8003c3a:	4b35      	ldr	r3, [pc, #212]	@ (8003d10 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003c3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c3e:	2202      	movs	r2, #2
 8003c40:	613a      	str	r2, [r7, #16]
 8003c42:	693a      	ldr	r2, [r7, #16]
 8003c44:	fa92 f2a2 	rbit	r2, r2
 8003c48:	60fa      	str	r2, [r7, #12]
  return result;
 8003c4a:	68fa      	ldr	r2, [r7, #12]
 8003c4c:	fab2 f282 	clz	r2, r2
 8003c50:	b2d2      	uxtb	r2, r2
 8003c52:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003c56:	b2d2      	uxtb	r2, r2
 8003c58:	f002 021f 	and.w	r2, r2, #31
 8003c5c:	2101      	movs	r1, #1
 8003c5e:	fa01 f202 	lsl.w	r2, r1, r2
 8003c62:	4013      	ands	r3, r2
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d0bd      	beq.n	8003be4 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003c68:	4b29      	ldr	r3, [pc, #164]	@ (8003d10 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003c6a:	6a1b      	ldr	r3, [r3, #32]
 8003c6c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	685b      	ldr	r3, [r3, #4]
 8003c74:	4926      	ldr	r1, [pc, #152]	@ (8003d10 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003c76:	4313      	orrs	r3, r2
 8003c78:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003c7a:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8003c7e:	2b01      	cmp	r3, #1
 8003c80:	d105      	bne.n	8003c8e <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c82:	4b23      	ldr	r3, [pc, #140]	@ (8003d10 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003c84:	69db      	ldr	r3, [r3, #28]
 8003c86:	4a22      	ldr	r2, [pc, #136]	@ (8003d10 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003c88:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003c8c:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f003 0301 	and.w	r3, r3, #1
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d008      	beq.n	8003cac <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003c9a:	4b1d      	ldr	r3, [pc, #116]	@ (8003d10 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003c9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c9e:	f023 0203 	bic.w	r2, r3, #3
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	689b      	ldr	r3, [r3, #8]
 8003ca6:	491a      	ldr	r1, [pc, #104]	@ (8003d10 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003ca8:	4313      	orrs	r3, r2
 8003caa:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f003 0320 	and.w	r3, r3, #32
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d008      	beq.n	8003cca <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003cb8:	4b15      	ldr	r3, [pc, #84]	@ (8003d10 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003cba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cbc:	f023 0210 	bic.w	r2, r3, #16
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	68db      	ldr	r3, [r3, #12]
 8003cc4:	4912      	ldr	r1, [pc, #72]	@ (8003d10 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003cc6:	4313      	orrs	r3, r2
 8003cc8:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d008      	beq.n	8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003cd6:	4b0e      	ldr	r3, [pc, #56]	@ (8003d10 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003cd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cda:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	691b      	ldr	r3, [r3, #16]
 8003ce2:	490b      	ldr	r1, [pc, #44]	@ (8003d10 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003ce4:	4313      	orrs	r3, r2
 8003ce6:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d008      	beq.n	8003d06 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003cf4:	4b06      	ldr	r3, [pc, #24]	@ (8003d10 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003cf6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cf8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	695b      	ldr	r3, [r3, #20]
 8003d00:	4903      	ldr	r1, [pc, #12]	@ (8003d10 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003d02:	4313      	orrs	r3, r2
 8003d04:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003d06:	2300      	movs	r3, #0
}
 8003d08:	4618      	mov	r0, r3
 8003d0a:	3748      	adds	r7, #72	@ 0x48
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	bd80      	pop	{r7, pc}
 8003d10:	40021000 	.word	0x40021000
 8003d14:	40007000 	.word	0x40007000
 8003d18:	10908100 	.word	0x10908100

08003d1c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	b082      	sub	sp, #8
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d101      	bne.n	8003d2e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003d2a:	2301      	movs	r3, #1
 8003d2c:	e049      	b.n	8003dc2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003d34:	b2db      	uxtb	r3, r3
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d106      	bne.n	8003d48 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003d42:	6878      	ldr	r0, [r7, #4]
 8003d44:	f7fd fdf8 	bl	8001938 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2202      	movs	r2, #2
 8003d4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681a      	ldr	r2, [r3, #0]
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	3304      	adds	r3, #4
 8003d58:	4619      	mov	r1, r3
 8003d5a:	4610      	mov	r0, r2
 8003d5c:	f000 fc90 	bl	8004680 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2201      	movs	r2, #1
 8003d64:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2201      	movs	r2, #1
 8003d6c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2201      	movs	r2, #1
 8003d74:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2201      	movs	r2, #1
 8003d7c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2201      	movs	r2, #1
 8003d84:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2201      	movs	r2, #1
 8003d8c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2201      	movs	r2, #1
 8003d94:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2201      	movs	r2, #1
 8003d9c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2201      	movs	r2, #1
 8003da4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2201      	movs	r2, #1
 8003dac:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2201      	movs	r2, #1
 8003db4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2201      	movs	r2, #1
 8003dbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003dc0:	2300      	movs	r3, #0
}
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	3708      	adds	r7, #8
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	bd80      	pop	{r7, pc}
	...

08003dcc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003dcc:	b480      	push	{r7}
 8003dce:	b085      	sub	sp, #20
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003dda:	b2db      	uxtb	r3, r3
 8003ddc:	2b01      	cmp	r3, #1
 8003dde:	d001      	beq.n	8003de4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003de0:	2301      	movs	r3, #1
 8003de2:	e038      	b.n	8003e56 <HAL_TIM_Base_Start+0x8a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2202      	movs	r2, #2
 8003de8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	4a1c      	ldr	r2, [pc, #112]	@ (8003e64 <HAL_TIM_Base_Start+0x98>)
 8003df2:	4293      	cmp	r3, r2
 8003df4:	d00e      	beq.n	8003e14 <HAL_TIM_Base_Start+0x48>
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003dfe:	d009      	beq.n	8003e14 <HAL_TIM_Base_Start+0x48>
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	4a18      	ldr	r2, [pc, #96]	@ (8003e68 <HAL_TIM_Base_Start+0x9c>)
 8003e06:	4293      	cmp	r3, r2
 8003e08:	d004      	beq.n	8003e14 <HAL_TIM_Base_Start+0x48>
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	4a17      	ldr	r2, [pc, #92]	@ (8003e6c <HAL_TIM_Base_Start+0xa0>)
 8003e10:	4293      	cmp	r3, r2
 8003e12:	d115      	bne.n	8003e40 <HAL_TIM_Base_Start+0x74>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	689a      	ldr	r2, [r3, #8]
 8003e1a:	4b15      	ldr	r3, [pc, #84]	@ (8003e70 <HAL_TIM_Base_Start+0xa4>)
 8003e1c:	4013      	ands	r3, r2
 8003e1e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	2b06      	cmp	r3, #6
 8003e24:	d015      	beq.n	8003e52 <HAL_TIM_Base_Start+0x86>
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003e2c:	d011      	beq.n	8003e52 <HAL_TIM_Base_Start+0x86>
    {
      __HAL_TIM_ENABLE(htim);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	681a      	ldr	r2, [r3, #0]
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f042 0201 	orr.w	r2, r2, #1
 8003e3c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e3e:	e008      	b.n	8003e52 <HAL_TIM_Base_Start+0x86>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	681a      	ldr	r2, [r3, #0]
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f042 0201 	orr.w	r2, r2, #1
 8003e4e:	601a      	str	r2, [r3, #0]
 8003e50:	e000      	b.n	8003e54 <HAL_TIM_Base_Start+0x88>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e52:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003e54:	2300      	movs	r3, #0
}
 8003e56:	4618      	mov	r0, r3
 8003e58:	3714      	adds	r7, #20
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e60:	4770      	bx	lr
 8003e62:	bf00      	nop
 8003e64:	40012c00 	.word	0x40012c00
 8003e68:	40000400 	.word	0x40000400
 8003e6c:	40014000 	.word	0x40014000
 8003e70:	00010007 	.word	0x00010007

08003e74 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8003e74:	b580      	push	{r7, lr}
 8003e76:	b082      	sub	sp, #8
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d101      	bne.n	8003e86 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8003e82:	2301      	movs	r3, #1
 8003e84:	e049      	b.n	8003f1a <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003e8c:	b2db      	uxtb	r3, r3
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d106      	bne.n	8003ea0 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	2200      	movs	r2, #0
 8003e96:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8003e9a:	6878      	ldr	r0, [r7, #4]
 8003e9c:	f000 f841 	bl	8003f22 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2202      	movs	r2, #2
 8003ea4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681a      	ldr	r2, [r3, #0]
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	3304      	adds	r3, #4
 8003eb0:	4619      	mov	r1, r3
 8003eb2:	4610      	mov	r0, r2
 8003eb4:	f000 fbe4 	bl	8004680 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2201      	movs	r2, #1
 8003ebc:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2201      	movs	r2, #1
 8003ec4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2201      	movs	r2, #1
 8003ecc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2201      	movs	r2, #1
 8003ed4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2201      	movs	r2, #1
 8003edc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2201      	movs	r2, #1
 8003ee4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	2201      	movs	r2, #1
 8003eec:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2201      	movs	r2, #1
 8003ef4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2201      	movs	r2, #1
 8003efc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2201      	movs	r2, #1
 8003f04:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2201      	movs	r2, #1
 8003f0c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2201      	movs	r2, #1
 8003f14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003f18:	2300      	movs	r3, #0
}
 8003f1a:	4618      	mov	r0, r3
 8003f1c:	3708      	adds	r7, #8
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	bd80      	pop	{r7, pc}

08003f22 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8003f22:	b480      	push	{r7}
 8003f24:	b083      	sub	sp, #12
 8003f26:	af00      	add	r7, sp, #0
 8003f28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8003f2a:	bf00      	nop
 8003f2c:	370c      	adds	r7, #12
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f34:	4770      	bx	lr

08003f36 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003f36:	b580      	push	{r7, lr}
 8003f38:	b082      	sub	sp, #8
 8003f3a:	af00      	add	r7, sp, #0
 8003f3c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d101      	bne.n	8003f48 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003f44:	2301      	movs	r3, #1
 8003f46:	e049      	b.n	8003fdc <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003f4e:	b2db      	uxtb	r3, r3
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d106      	bne.n	8003f62 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2200      	movs	r2, #0
 8003f58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003f5c:	6878      	ldr	r0, [r7, #4]
 8003f5e:	f000 f841 	bl	8003fe4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	2202      	movs	r2, #2
 8003f66:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681a      	ldr	r2, [r3, #0]
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	3304      	adds	r3, #4
 8003f72:	4619      	mov	r1, r3
 8003f74:	4610      	mov	r0, r2
 8003f76:	f000 fb83 	bl	8004680 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	2201      	movs	r2, #1
 8003f7e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	2201      	movs	r2, #1
 8003f86:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	2201      	movs	r2, #1
 8003f8e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	2201      	movs	r2, #1
 8003f96:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	2201      	movs	r2, #1
 8003f9e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	2201      	movs	r2, #1
 8003fa6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	2201      	movs	r2, #1
 8003fae:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	2201      	movs	r2, #1
 8003fb6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	2201      	movs	r2, #1
 8003fbe:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	2201      	movs	r2, #1
 8003fc6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	2201      	movs	r2, #1
 8003fce:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	2201      	movs	r2, #1
 8003fd6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003fda:	2300      	movs	r3, #0
}
 8003fdc:	4618      	mov	r0, r3
 8003fde:	3708      	adds	r7, #8
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	bd80      	pop	{r7, pc}

08003fe4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003fe4:	b480      	push	{r7}
 8003fe6:	b083      	sub	sp, #12
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003fec:	bf00      	nop
 8003fee:	370c      	adds	r7, #12
 8003ff0:	46bd      	mov	sp, r7
 8003ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff6:	4770      	bx	lr

08003ff8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	b084      	sub	sp, #16
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
 8004000:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004002:	683b      	ldr	r3, [r7, #0]
 8004004:	2b00      	cmp	r3, #0
 8004006:	d109      	bne.n	800401c <HAL_TIM_PWM_Start+0x24>
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800400e:	b2db      	uxtb	r3, r3
 8004010:	2b01      	cmp	r3, #1
 8004012:	bf14      	ite	ne
 8004014:	2301      	movne	r3, #1
 8004016:	2300      	moveq	r3, #0
 8004018:	b2db      	uxtb	r3, r3
 800401a:	e03c      	b.n	8004096 <HAL_TIM_PWM_Start+0x9e>
 800401c:	683b      	ldr	r3, [r7, #0]
 800401e:	2b04      	cmp	r3, #4
 8004020:	d109      	bne.n	8004036 <HAL_TIM_PWM_Start+0x3e>
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004028:	b2db      	uxtb	r3, r3
 800402a:	2b01      	cmp	r3, #1
 800402c:	bf14      	ite	ne
 800402e:	2301      	movne	r3, #1
 8004030:	2300      	moveq	r3, #0
 8004032:	b2db      	uxtb	r3, r3
 8004034:	e02f      	b.n	8004096 <HAL_TIM_PWM_Start+0x9e>
 8004036:	683b      	ldr	r3, [r7, #0]
 8004038:	2b08      	cmp	r3, #8
 800403a:	d109      	bne.n	8004050 <HAL_TIM_PWM_Start+0x58>
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004042:	b2db      	uxtb	r3, r3
 8004044:	2b01      	cmp	r3, #1
 8004046:	bf14      	ite	ne
 8004048:	2301      	movne	r3, #1
 800404a:	2300      	moveq	r3, #0
 800404c:	b2db      	uxtb	r3, r3
 800404e:	e022      	b.n	8004096 <HAL_TIM_PWM_Start+0x9e>
 8004050:	683b      	ldr	r3, [r7, #0]
 8004052:	2b0c      	cmp	r3, #12
 8004054:	d109      	bne.n	800406a <HAL_TIM_PWM_Start+0x72>
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800405c:	b2db      	uxtb	r3, r3
 800405e:	2b01      	cmp	r3, #1
 8004060:	bf14      	ite	ne
 8004062:	2301      	movne	r3, #1
 8004064:	2300      	moveq	r3, #0
 8004066:	b2db      	uxtb	r3, r3
 8004068:	e015      	b.n	8004096 <HAL_TIM_PWM_Start+0x9e>
 800406a:	683b      	ldr	r3, [r7, #0]
 800406c:	2b10      	cmp	r3, #16
 800406e:	d109      	bne.n	8004084 <HAL_TIM_PWM_Start+0x8c>
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004076:	b2db      	uxtb	r3, r3
 8004078:	2b01      	cmp	r3, #1
 800407a:	bf14      	ite	ne
 800407c:	2301      	movne	r3, #1
 800407e:	2300      	moveq	r3, #0
 8004080:	b2db      	uxtb	r3, r3
 8004082:	e008      	b.n	8004096 <HAL_TIM_PWM_Start+0x9e>
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800408a:	b2db      	uxtb	r3, r3
 800408c:	2b01      	cmp	r3, #1
 800408e:	bf14      	ite	ne
 8004090:	2301      	movne	r3, #1
 8004092:	2300      	moveq	r3, #0
 8004094:	b2db      	uxtb	r3, r3
 8004096:	2b00      	cmp	r3, #0
 8004098:	d001      	beq.n	800409e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800409a:	2301      	movs	r3, #1
 800409c:	e088      	b.n	80041b0 <HAL_TIM_PWM_Start+0x1b8>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800409e:	683b      	ldr	r3, [r7, #0]
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d104      	bne.n	80040ae <HAL_TIM_PWM_Start+0xb6>
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2202      	movs	r2, #2
 80040a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80040ac:	e023      	b.n	80040f6 <HAL_TIM_PWM_Start+0xfe>
 80040ae:	683b      	ldr	r3, [r7, #0]
 80040b0:	2b04      	cmp	r3, #4
 80040b2:	d104      	bne.n	80040be <HAL_TIM_PWM_Start+0xc6>
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2202      	movs	r2, #2
 80040b8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80040bc:	e01b      	b.n	80040f6 <HAL_TIM_PWM_Start+0xfe>
 80040be:	683b      	ldr	r3, [r7, #0]
 80040c0:	2b08      	cmp	r3, #8
 80040c2:	d104      	bne.n	80040ce <HAL_TIM_PWM_Start+0xd6>
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2202      	movs	r2, #2
 80040c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80040cc:	e013      	b.n	80040f6 <HAL_TIM_PWM_Start+0xfe>
 80040ce:	683b      	ldr	r3, [r7, #0]
 80040d0:	2b0c      	cmp	r3, #12
 80040d2:	d104      	bne.n	80040de <HAL_TIM_PWM_Start+0xe6>
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2202      	movs	r2, #2
 80040d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80040dc:	e00b      	b.n	80040f6 <HAL_TIM_PWM_Start+0xfe>
 80040de:	683b      	ldr	r3, [r7, #0]
 80040e0:	2b10      	cmp	r3, #16
 80040e2:	d104      	bne.n	80040ee <HAL_TIM_PWM_Start+0xf6>
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2202      	movs	r2, #2
 80040e8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80040ec:	e003      	b.n	80040f6 <HAL_TIM_PWM_Start+0xfe>
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	2202      	movs	r2, #2
 80040f2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	2201      	movs	r2, #1
 80040fc:	6839      	ldr	r1, [r7, #0]
 80040fe:	4618      	mov	r0, r3
 8004100:	f000 fe82 	bl	8004e08 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	4a2b      	ldr	r2, [pc, #172]	@ (80041b8 <HAL_TIM_PWM_Start+0x1c0>)
 800410a:	4293      	cmp	r3, r2
 800410c:	d00e      	beq.n	800412c <HAL_TIM_PWM_Start+0x134>
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	4a2a      	ldr	r2, [pc, #168]	@ (80041bc <HAL_TIM_PWM_Start+0x1c4>)
 8004114:	4293      	cmp	r3, r2
 8004116:	d009      	beq.n	800412c <HAL_TIM_PWM_Start+0x134>
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	4a28      	ldr	r2, [pc, #160]	@ (80041c0 <HAL_TIM_PWM_Start+0x1c8>)
 800411e:	4293      	cmp	r3, r2
 8004120:	d004      	beq.n	800412c <HAL_TIM_PWM_Start+0x134>
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	4a27      	ldr	r2, [pc, #156]	@ (80041c4 <HAL_TIM_PWM_Start+0x1cc>)
 8004128:	4293      	cmp	r3, r2
 800412a:	d101      	bne.n	8004130 <HAL_TIM_PWM_Start+0x138>
 800412c:	2301      	movs	r3, #1
 800412e:	e000      	b.n	8004132 <HAL_TIM_PWM_Start+0x13a>
 8004130:	2300      	movs	r3, #0
 8004132:	2b00      	cmp	r3, #0
 8004134:	d007      	beq.n	8004146 <HAL_TIM_PWM_Start+0x14e>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004144:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	4a1b      	ldr	r2, [pc, #108]	@ (80041b8 <HAL_TIM_PWM_Start+0x1c0>)
 800414c:	4293      	cmp	r3, r2
 800414e:	d00e      	beq.n	800416e <HAL_TIM_PWM_Start+0x176>
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004158:	d009      	beq.n	800416e <HAL_TIM_PWM_Start+0x176>
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	4a1a      	ldr	r2, [pc, #104]	@ (80041c8 <HAL_TIM_PWM_Start+0x1d0>)
 8004160:	4293      	cmp	r3, r2
 8004162:	d004      	beq.n	800416e <HAL_TIM_PWM_Start+0x176>
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	4a14      	ldr	r2, [pc, #80]	@ (80041bc <HAL_TIM_PWM_Start+0x1c4>)
 800416a:	4293      	cmp	r3, r2
 800416c:	d115      	bne.n	800419a <HAL_TIM_PWM_Start+0x1a2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	689a      	ldr	r2, [r3, #8]
 8004174:	4b15      	ldr	r3, [pc, #84]	@ (80041cc <HAL_TIM_PWM_Start+0x1d4>)
 8004176:	4013      	ands	r3, r2
 8004178:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	2b06      	cmp	r3, #6
 800417e:	d015      	beq.n	80041ac <HAL_TIM_PWM_Start+0x1b4>
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004186:	d011      	beq.n	80041ac <HAL_TIM_PWM_Start+0x1b4>
    {
      __HAL_TIM_ENABLE(htim);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	681a      	ldr	r2, [r3, #0]
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f042 0201 	orr.w	r2, r2, #1
 8004196:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004198:	e008      	b.n	80041ac <HAL_TIM_PWM_Start+0x1b4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	681a      	ldr	r2, [r3, #0]
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f042 0201 	orr.w	r2, r2, #1
 80041a8:	601a      	str	r2, [r3, #0]
 80041aa:	e000      	b.n	80041ae <HAL_TIM_PWM_Start+0x1b6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80041ac:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80041ae:	2300      	movs	r3, #0
}
 80041b0:	4618      	mov	r0, r3
 80041b2:	3710      	adds	r7, #16
 80041b4:	46bd      	mov	sp, r7
 80041b6:	bd80      	pop	{r7, pc}
 80041b8:	40012c00 	.word	0x40012c00
 80041bc:	40014000 	.word	0x40014000
 80041c0:	40014400 	.word	0x40014400
 80041c4:	40014800 	.word	0x40014800
 80041c8:	40000400 	.word	0x40000400
 80041cc:	00010007 	.word	0x00010007

080041d0 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80041d0:	b580      	push	{r7, lr}
 80041d2:	b086      	sub	sp, #24
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	60f8      	str	r0, [r7, #12]
 80041d8:	60b9      	str	r1, [r7, #8]
 80041da:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80041dc:	2300      	movs	r3, #0
 80041de:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80041e6:	2b01      	cmp	r3, #1
 80041e8:	d101      	bne.n	80041ee <HAL_TIM_OC_ConfigChannel+0x1e>
 80041ea:	2302      	movs	r3, #2
 80041ec:	e066      	b.n	80042bc <HAL_TIM_OC_ConfigChannel+0xec>
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	2201      	movs	r2, #1
 80041f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	2b14      	cmp	r3, #20
 80041fa:	d857      	bhi.n	80042ac <HAL_TIM_OC_ConfigChannel+0xdc>
 80041fc:	a201      	add	r2, pc, #4	@ (adr r2, 8004204 <HAL_TIM_OC_ConfigChannel+0x34>)
 80041fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004202:	bf00      	nop
 8004204:	08004259 	.word	0x08004259
 8004208:	080042ad 	.word	0x080042ad
 800420c:	080042ad 	.word	0x080042ad
 8004210:	080042ad 	.word	0x080042ad
 8004214:	08004267 	.word	0x08004267
 8004218:	080042ad 	.word	0x080042ad
 800421c:	080042ad 	.word	0x080042ad
 8004220:	080042ad 	.word	0x080042ad
 8004224:	08004275 	.word	0x08004275
 8004228:	080042ad 	.word	0x080042ad
 800422c:	080042ad 	.word	0x080042ad
 8004230:	080042ad 	.word	0x080042ad
 8004234:	08004283 	.word	0x08004283
 8004238:	080042ad 	.word	0x080042ad
 800423c:	080042ad 	.word	0x080042ad
 8004240:	080042ad 	.word	0x080042ad
 8004244:	08004291 	.word	0x08004291
 8004248:	080042ad 	.word	0x080042ad
 800424c:	080042ad 	.word	0x080042ad
 8004250:	080042ad 	.word	0x080042ad
 8004254:	0800429f 	.word	0x0800429f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	68b9      	ldr	r1, [r7, #8]
 800425e:	4618      	mov	r0, r3
 8004260:	f000 fa92 	bl	8004788 <TIM_OC1_SetConfig>
      break;
 8004264:	e025      	b.n	80042b2 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	68b9      	ldr	r1, [r7, #8]
 800426c:	4618      	mov	r0, r3
 800426e:	f000 fb11 	bl	8004894 <TIM_OC2_SetConfig>
      break;
 8004272:	e01e      	b.n	80042b2 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	68b9      	ldr	r1, [r7, #8]
 800427a:	4618      	mov	r0, r3
 800427c:	f000 fb8a 	bl	8004994 <TIM_OC3_SetConfig>
      break;
 8004280:	e017      	b.n	80042b2 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	68b9      	ldr	r1, [r7, #8]
 8004288:	4618      	mov	r0, r3
 800428a:	f000 fc01 	bl	8004a90 <TIM_OC4_SetConfig>
      break;
 800428e:	e010      	b.n	80042b2 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	68b9      	ldr	r1, [r7, #8]
 8004296:	4618      	mov	r0, r3
 8004298:	f000 fc5e 	bl	8004b58 <TIM_OC5_SetConfig>
      break;
 800429c:	e009      	b.n	80042b2 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	68b9      	ldr	r1, [r7, #8]
 80042a4:	4618      	mov	r0, r3
 80042a6:	f000 fcb5 	bl	8004c14 <TIM_OC6_SetConfig>
      break;
 80042aa:	e002      	b.n	80042b2 <HAL_TIM_OC_ConfigChannel+0xe2>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 80042ac:	2301      	movs	r3, #1
 80042ae:	75fb      	strb	r3, [r7, #23]
      break;
 80042b0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	2200      	movs	r2, #0
 80042b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80042ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80042bc:	4618      	mov	r0, r3
 80042be:	3718      	adds	r7, #24
 80042c0:	46bd      	mov	sp, r7
 80042c2:	bd80      	pop	{r7, pc}

080042c4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80042c4:	b580      	push	{r7, lr}
 80042c6:	b086      	sub	sp, #24
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	60f8      	str	r0, [r7, #12]
 80042cc:	60b9      	str	r1, [r7, #8]
 80042ce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80042d0:	2300      	movs	r3, #0
 80042d2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80042da:	2b01      	cmp	r3, #1
 80042dc:	d101      	bne.n	80042e2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80042de:	2302      	movs	r3, #2
 80042e0:	e0ff      	b.n	80044e2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	2201      	movs	r2, #1
 80042e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	2b14      	cmp	r3, #20
 80042ee:	f200 80f0 	bhi.w	80044d2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80042f2:	a201      	add	r2, pc, #4	@ (adr r2, 80042f8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80042f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042f8:	0800434d 	.word	0x0800434d
 80042fc:	080044d3 	.word	0x080044d3
 8004300:	080044d3 	.word	0x080044d3
 8004304:	080044d3 	.word	0x080044d3
 8004308:	0800438d 	.word	0x0800438d
 800430c:	080044d3 	.word	0x080044d3
 8004310:	080044d3 	.word	0x080044d3
 8004314:	080044d3 	.word	0x080044d3
 8004318:	080043cf 	.word	0x080043cf
 800431c:	080044d3 	.word	0x080044d3
 8004320:	080044d3 	.word	0x080044d3
 8004324:	080044d3 	.word	0x080044d3
 8004328:	0800440f 	.word	0x0800440f
 800432c:	080044d3 	.word	0x080044d3
 8004330:	080044d3 	.word	0x080044d3
 8004334:	080044d3 	.word	0x080044d3
 8004338:	08004451 	.word	0x08004451
 800433c:	080044d3 	.word	0x080044d3
 8004340:	080044d3 	.word	0x080044d3
 8004344:	080044d3 	.word	0x080044d3
 8004348:	08004491 	.word	0x08004491
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	68b9      	ldr	r1, [r7, #8]
 8004352:	4618      	mov	r0, r3
 8004354:	f000 fa18 	bl	8004788 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	699a      	ldr	r2, [r3, #24]
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f042 0208 	orr.w	r2, r2, #8
 8004366:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	699a      	ldr	r2, [r3, #24]
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f022 0204 	bic.w	r2, r2, #4
 8004376:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	6999      	ldr	r1, [r3, #24]
 800437e:	68bb      	ldr	r3, [r7, #8]
 8004380:	691a      	ldr	r2, [r3, #16]
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	430a      	orrs	r2, r1
 8004388:	619a      	str	r2, [r3, #24]
      break;
 800438a:	e0a5      	b.n	80044d8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	68b9      	ldr	r1, [r7, #8]
 8004392:	4618      	mov	r0, r3
 8004394:	f000 fa7e 	bl	8004894 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	699a      	ldr	r2, [r3, #24]
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80043a6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	699a      	ldr	r2, [r3, #24]
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80043b6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	6999      	ldr	r1, [r3, #24]
 80043be:	68bb      	ldr	r3, [r7, #8]
 80043c0:	691b      	ldr	r3, [r3, #16]
 80043c2:	021a      	lsls	r2, r3, #8
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	430a      	orrs	r2, r1
 80043ca:	619a      	str	r2, [r3, #24]
      break;
 80043cc:	e084      	b.n	80044d8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	68b9      	ldr	r1, [r7, #8]
 80043d4:	4618      	mov	r0, r3
 80043d6:	f000 fadd 	bl	8004994 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	69da      	ldr	r2, [r3, #28]
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f042 0208 	orr.w	r2, r2, #8
 80043e8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	69da      	ldr	r2, [r3, #28]
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f022 0204 	bic.w	r2, r2, #4
 80043f8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	69d9      	ldr	r1, [r3, #28]
 8004400:	68bb      	ldr	r3, [r7, #8]
 8004402:	691a      	ldr	r2, [r3, #16]
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	430a      	orrs	r2, r1
 800440a:	61da      	str	r2, [r3, #28]
      break;
 800440c:	e064      	b.n	80044d8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	68b9      	ldr	r1, [r7, #8]
 8004414:	4618      	mov	r0, r3
 8004416:	f000 fb3b 	bl	8004a90 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	69da      	ldr	r2, [r3, #28]
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004428:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	69da      	ldr	r2, [r3, #28]
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004438:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	69d9      	ldr	r1, [r3, #28]
 8004440:	68bb      	ldr	r3, [r7, #8]
 8004442:	691b      	ldr	r3, [r3, #16]
 8004444:	021a      	lsls	r2, r3, #8
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	430a      	orrs	r2, r1
 800444c:	61da      	str	r2, [r3, #28]
      break;
 800444e:	e043      	b.n	80044d8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	68b9      	ldr	r1, [r7, #8]
 8004456:	4618      	mov	r0, r3
 8004458:	f000 fb7e 	bl	8004b58 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f042 0208 	orr.w	r2, r2, #8
 800446a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f022 0204 	bic.w	r2, r2, #4
 800447a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8004482:	68bb      	ldr	r3, [r7, #8]
 8004484:	691a      	ldr	r2, [r3, #16]
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	430a      	orrs	r2, r1
 800448c:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800448e:	e023      	b.n	80044d8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	68b9      	ldr	r1, [r7, #8]
 8004496:	4618      	mov	r0, r3
 8004498:	f000 fbbc 	bl	8004c14 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80044aa:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80044ba:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80044c2:	68bb      	ldr	r3, [r7, #8]
 80044c4:	691b      	ldr	r3, [r3, #16]
 80044c6:	021a      	lsls	r2, r3, #8
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	430a      	orrs	r2, r1
 80044ce:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80044d0:	e002      	b.n	80044d8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 80044d2:	2301      	movs	r3, #1
 80044d4:	75fb      	strb	r3, [r7, #23]
      break;
 80044d6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	2200      	movs	r2, #0
 80044dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80044e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80044e2:	4618      	mov	r0, r3
 80044e4:	3718      	adds	r7, #24
 80044e6:	46bd      	mov	sp, r7
 80044e8:	bd80      	pop	{r7, pc}
 80044ea:	bf00      	nop

080044ec <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80044ec:	b580      	push	{r7, lr}
 80044ee:	b084      	sub	sp, #16
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
 80044f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80044f6:	2300      	movs	r3, #0
 80044f8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004500:	2b01      	cmp	r3, #1
 8004502:	d101      	bne.n	8004508 <HAL_TIM_ConfigClockSource+0x1c>
 8004504:	2302      	movs	r3, #2
 8004506:	e0b6      	b.n	8004676 <HAL_TIM_ConfigClockSource+0x18a>
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2201      	movs	r2, #1
 800450c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2202      	movs	r2, #2
 8004514:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	689b      	ldr	r3, [r3, #8]
 800451e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004520:	68bb      	ldr	r3, [r7, #8]
 8004522:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004526:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800452a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800452c:	68bb      	ldr	r3, [r7, #8]
 800452e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004532:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	68ba      	ldr	r2, [r7, #8]
 800453a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800453c:	683b      	ldr	r3, [r7, #0]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004544:	d03e      	beq.n	80045c4 <HAL_TIM_ConfigClockSource+0xd8>
 8004546:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800454a:	f200 8087 	bhi.w	800465c <HAL_TIM_ConfigClockSource+0x170>
 800454e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004552:	f000 8086 	beq.w	8004662 <HAL_TIM_ConfigClockSource+0x176>
 8004556:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800455a:	d87f      	bhi.n	800465c <HAL_TIM_ConfigClockSource+0x170>
 800455c:	2b70      	cmp	r3, #112	@ 0x70
 800455e:	d01a      	beq.n	8004596 <HAL_TIM_ConfigClockSource+0xaa>
 8004560:	2b70      	cmp	r3, #112	@ 0x70
 8004562:	d87b      	bhi.n	800465c <HAL_TIM_ConfigClockSource+0x170>
 8004564:	2b60      	cmp	r3, #96	@ 0x60
 8004566:	d050      	beq.n	800460a <HAL_TIM_ConfigClockSource+0x11e>
 8004568:	2b60      	cmp	r3, #96	@ 0x60
 800456a:	d877      	bhi.n	800465c <HAL_TIM_ConfigClockSource+0x170>
 800456c:	2b50      	cmp	r3, #80	@ 0x50
 800456e:	d03c      	beq.n	80045ea <HAL_TIM_ConfigClockSource+0xfe>
 8004570:	2b50      	cmp	r3, #80	@ 0x50
 8004572:	d873      	bhi.n	800465c <HAL_TIM_ConfigClockSource+0x170>
 8004574:	2b40      	cmp	r3, #64	@ 0x40
 8004576:	d058      	beq.n	800462a <HAL_TIM_ConfigClockSource+0x13e>
 8004578:	2b40      	cmp	r3, #64	@ 0x40
 800457a:	d86f      	bhi.n	800465c <HAL_TIM_ConfigClockSource+0x170>
 800457c:	2b30      	cmp	r3, #48	@ 0x30
 800457e:	d064      	beq.n	800464a <HAL_TIM_ConfigClockSource+0x15e>
 8004580:	2b30      	cmp	r3, #48	@ 0x30
 8004582:	d86b      	bhi.n	800465c <HAL_TIM_ConfigClockSource+0x170>
 8004584:	2b20      	cmp	r3, #32
 8004586:	d060      	beq.n	800464a <HAL_TIM_ConfigClockSource+0x15e>
 8004588:	2b20      	cmp	r3, #32
 800458a:	d867      	bhi.n	800465c <HAL_TIM_ConfigClockSource+0x170>
 800458c:	2b00      	cmp	r3, #0
 800458e:	d05c      	beq.n	800464a <HAL_TIM_ConfigClockSource+0x15e>
 8004590:	2b10      	cmp	r3, #16
 8004592:	d05a      	beq.n	800464a <HAL_TIM_ConfigClockSource+0x15e>
 8004594:	e062      	b.n	800465c <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800459a:	683b      	ldr	r3, [r7, #0]
 800459c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800459e:	683b      	ldr	r3, [r7, #0]
 80045a0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80045a2:	683b      	ldr	r3, [r7, #0]
 80045a4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80045a6:	f000 fc0f 	bl	8004dc8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	689b      	ldr	r3, [r3, #8]
 80045b0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80045b2:	68bb      	ldr	r3, [r7, #8]
 80045b4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80045b8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	68ba      	ldr	r2, [r7, #8]
 80045c0:	609a      	str	r2, [r3, #8]
      break;
 80045c2:	e04f      	b.n	8004664 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80045c8:	683b      	ldr	r3, [r7, #0]
 80045ca:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80045cc:	683b      	ldr	r3, [r7, #0]
 80045ce:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80045d0:	683b      	ldr	r3, [r7, #0]
 80045d2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80045d4:	f000 fbf8 	bl	8004dc8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	689a      	ldr	r2, [r3, #8]
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80045e6:	609a      	str	r2, [r3, #8]
      break;
 80045e8:	e03c      	b.n	8004664 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80045ee:	683b      	ldr	r3, [r7, #0]
 80045f0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80045f2:	683b      	ldr	r3, [r7, #0]
 80045f4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80045f6:	461a      	mov	r2, r3
 80045f8:	f000 fb6c 	bl	8004cd4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	2150      	movs	r1, #80	@ 0x50
 8004602:	4618      	mov	r0, r3
 8004604:	f000 fbc5 	bl	8004d92 <TIM_ITRx_SetConfig>
      break;
 8004608:	e02c      	b.n	8004664 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800460e:	683b      	ldr	r3, [r7, #0]
 8004610:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004612:	683b      	ldr	r3, [r7, #0]
 8004614:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004616:	461a      	mov	r2, r3
 8004618:	f000 fb8b 	bl	8004d32 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	2160      	movs	r1, #96	@ 0x60
 8004622:	4618      	mov	r0, r3
 8004624:	f000 fbb5 	bl	8004d92 <TIM_ITRx_SetConfig>
      break;
 8004628:	e01c      	b.n	8004664 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800462e:	683b      	ldr	r3, [r7, #0]
 8004630:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004632:	683b      	ldr	r3, [r7, #0]
 8004634:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004636:	461a      	mov	r2, r3
 8004638:	f000 fb4c 	bl	8004cd4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	2140      	movs	r1, #64	@ 0x40
 8004642:	4618      	mov	r0, r3
 8004644:	f000 fba5 	bl	8004d92 <TIM_ITRx_SetConfig>
      break;
 8004648:	e00c      	b.n	8004664 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681a      	ldr	r2, [r3, #0]
 800464e:	683b      	ldr	r3, [r7, #0]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	4619      	mov	r1, r3
 8004654:	4610      	mov	r0, r2
 8004656:	f000 fb9c 	bl	8004d92 <TIM_ITRx_SetConfig>
      break;
 800465a:	e003      	b.n	8004664 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800465c:	2301      	movs	r3, #1
 800465e:	73fb      	strb	r3, [r7, #15]
      break;
 8004660:	e000      	b.n	8004664 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8004662:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2201      	movs	r2, #1
 8004668:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2200      	movs	r2, #0
 8004670:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004674:	7bfb      	ldrb	r3, [r7, #15]
}
 8004676:	4618      	mov	r0, r3
 8004678:	3710      	adds	r7, #16
 800467a:	46bd      	mov	sp, r7
 800467c:	bd80      	pop	{r7, pc}
	...

08004680 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004680:	b480      	push	{r7}
 8004682:	b085      	sub	sp, #20
 8004684:	af00      	add	r7, sp, #0
 8004686:	6078      	str	r0, [r7, #4]
 8004688:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	4a38      	ldr	r2, [pc, #224]	@ (8004774 <TIM_Base_SetConfig+0xf4>)
 8004694:	4293      	cmp	r3, r2
 8004696:	d007      	beq.n	80046a8 <TIM_Base_SetConfig+0x28>
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800469e:	d003      	beq.n	80046a8 <TIM_Base_SetConfig+0x28>
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	4a35      	ldr	r2, [pc, #212]	@ (8004778 <TIM_Base_SetConfig+0xf8>)
 80046a4:	4293      	cmp	r3, r2
 80046a6:	d108      	bne.n	80046ba <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80046ae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80046b0:	683b      	ldr	r3, [r7, #0]
 80046b2:	685b      	ldr	r3, [r3, #4]
 80046b4:	68fa      	ldr	r2, [r7, #12]
 80046b6:	4313      	orrs	r3, r2
 80046b8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	4a2d      	ldr	r2, [pc, #180]	@ (8004774 <TIM_Base_SetConfig+0xf4>)
 80046be:	4293      	cmp	r3, r2
 80046c0:	d013      	beq.n	80046ea <TIM_Base_SetConfig+0x6a>
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80046c8:	d00f      	beq.n	80046ea <TIM_Base_SetConfig+0x6a>
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	4a2a      	ldr	r2, [pc, #168]	@ (8004778 <TIM_Base_SetConfig+0xf8>)
 80046ce:	4293      	cmp	r3, r2
 80046d0:	d00b      	beq.n	80046ea <TIM_Base_SetConfig+0x6a>
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	4a29      	ldr	r2, [pc, #164]	@ (800477c <TIM_Base_SetConfig+0xfc>)
 80046d6:	4293      	cmp	r3, r2
 80046d8:	d007      	beq.n	80046ea <TIM_Base_SetConfig+0x6a>
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	4a28      	ldr	r2, [pc, #160]	@ (8004780 <TIM_Base_SetConfig+0x100>)
 80046de:	4293      	cmp	r3, r2
 80046e0:	d003      	beq.n	80046ea <TIM_Base_SetConfig+0x6a>
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	4a27      	ldr	r2, [pc, #156]	@ (8004784 <TIM_Base_SetConfig+0x104>)
 80046e6:	4293      	cmp	r3, r2
 80046e8:	d108      	bne.n	80046fc <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80046f0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80046f2:	683b      	ldr	r3, [r7, #0]
 80046f4:	68db      	ldr	r3, [r3, #12]
 80046f6:	68fa      	ldr	r2, [r7, #12]
 80046f8:	4313      	orrs	r3, r2
 80046fa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004702:	683b      	ldr	r3, [r7, #0]
 8004704:	695b      	ldr	r3, [r3, #20]
 8004706:	4313      	orrs	r3, r2
 8004708:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	68fa      	ldr	r2, [r7, #12]
 800470e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004710:	683b      	ldr	r3, [r7, #0]
 8004712:	689a      	ldr	r2, [r3, #8]
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004718:	683b      	ldr	r3, [r7, #0]
 800471a:	681a      	ldr	r2, [r3, #0]
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	4a14      	ldr	r2, [pc, #80]	@ (8004774 <TIM_Base_SetConfig+0xf4>)
 8004724:	4293      	cmp	r3, r2
 8004726:	d00b      	beq.n	8004740 <TIM_Base_SetConfig+0xc0>
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	4a14      	ldr	r2, [pc, #80]	@ (800477c <TIM_Base_SetConfig+0xfc>)
 800472c:	4293      	cmp	r3, r2
 800472e:	d007      	beq.n	8004740 <TIM_Base_SetConfig+0xc0>
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	4a13      	ldr	r2, [pc, #76]	@ (8004780 <TIM_Base_SetConfig+0x100>)
 8004734:	4293      	cmp	r3, r2
 8004736:	d003      	beq.n	8004740 <TIM_Base_SetConfig+0xc0>
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	4a12      	ldr	r2, [pc, #72]	@ (8004784 <TIM_Base_SetConfig+0x104>)
 800473c:	4293      	cmp	r3, r2
 800473e:	d103      	bne.n	8004748 <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004740:	683b      	ldr	r3, [r7, #0]
 8004742:	691a      	ldr	r2, [r3, #16]
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2201      	movs	r2, #1
 800474c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	691b      	ldr	r3, [r3, #16]
 8004752:	f003 0301 	and.w	r3, r3, #1
 8004756:	2b01      	cmp	r3, #1
 8004758:	d105      	bne.n	8004766 <TIM_Base_SetConfig+0xe6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	691b      	ldr	r3, [r3, #16]
 800475e:	f023 0201 	bic.w	r2, r3, #1
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	611a      	str	r2, [r3, #16]
  }
}
 8004766:	bf00      	nop
 8004768:	3714      	adds	r7, #20
 800476a:	46bd      	mov	sp, r7
 800476c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004770:	4770      	bx	lr
 8004772:	bf00      	nop
 8004774:	40012c00 	.word	0x40012c00
 8004778:	40000400 	.word	0x40000400
 800477c:	40014000 	.word	0x40014000
 8004780:	40014400 	.word	0x40014400
 8004784:	40014800 	.word	0x40014800

08004788 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004788:	b480      	push	{r7}
 800478a:	b087      	sub	sp, #28
 800478c:	af00      	add	r7, sp, #0
 800478e:	6078      	str	r0, [r7, #4]
 8004790:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	6a1b      	ldr	r3, [r3, #32]
 8004796:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	6a1b      	ldr	r3, [r3, #32]
 800479c:	f023 0201 	bic.w	r2, r3, #1
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	685b      	ldr	r3, [r3, #4]
 80047a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	699b      	ldr	r3, [r3, #24]
 80047ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80047b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80047ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	f023 0303 	bic.w	r3, r3, #3
 80047c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80047c4:	683b      	ldr	r3, [r7, #0]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	68fa      	ldr	r2, [r7, #12]
 80047ca:	4313      	orrs	r3, r2
 80047cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80047ce:	697b      	ldr	r3, [r7, #20]
 80047d0:	f023 0302 	bic.w	r3, r3, #2
 80047d4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80047d6:	683b      	ldr	r3, [r7, #0]
 80047d8:	689b      	ldr	r3, [r3, #8]
 80047da:	697a      	ldr	r2, [r7, #20]
 80047dc:	4313      	orrs	r3, r2
 80047de:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	4a28      	ldr	r2, [pc, #160]	@ (8004884 <TIM_OC1_SetConfig+0xfc>)
 80047e4:	4293      	cmp	r3, r2
 80047e6:	d00b      	beq.n	8004800 <TIM_OC1_SetConfig+0x78>
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	4a27      	ldr	r2, [pc, #156]	@ (8004888 <TIM_OC1_SetConfig+0x100>)
 80047ec:	4293      	cmp	r3, r2
 80047ee:	d007      	beq.n	8004800 <TIM_OC1_SetConfig+0x78>
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	4a26      	ldr	r2, [pc, #152]	@ (800488c <TIM_OC1_SetConfig+0x104>)
 80047f4:	4293      	cmp	r3, r2
 80047f6:	d003      	beq.n	8004800 <TIM_OC1_SetConfig+0x78>
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	4a25      	ldr	r2, [pc, #148]	@ (8004890 <TIM_OC1_SetConfig+0x108>)
 80047fc:	4293      	cmp	r3, r2
 80047fe:	d10c      	bne.n	800481a <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004800:	697b      	ldr	r3, [r7, #20]
 8004802:	f023 0308 	bic.w	r3, r3, #8
 8004806:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004808:	683b      	ldr	r3, [r7, #0]
 800480a:	68db      	ldr	r3, [r3, #12]
 800480c:	697a      	ldr	r2, [r7, #20]
 800480e:	4313      	orrs	r3, r2
 8004810:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004812:	697b      	ldr	r3, [r7, #20]
 8004814:	f023 0304 	bic.w	r3, r3, #4
 8004818:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	4a19      	ldr	r2, [pc, #100]	@ (8004884 <TIM_OC1_SetConfig+0xfc>)
 800481e:	4293      	cmp	r3, r2
 8004820:	d00b      	beq.n	800483a <TIM_OC1_SetConfig+0xb2>
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	4a18      	ldr	r2, [pc, #96]	@ (8004888 <TIM_OC1_SetConfig+0x100>)
 8004826:	4293      	cmp	r3, r2
 8004828:	d007      	beq.n	800483a <TIM_OC1_SetConfig+0xb2>
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	4a17      	ldr	r2, [pc, #92]	@ (800488c <TIM_OC1_SetConfig+0x104>)
 800482e:	4293      	cmp	r3, r2
 8004830:	d003      	beq.n	800483a <TIM_OC1_SetConfig+0xb2>
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	4a16      	ldr	r2, [pc, #88]	@ (8004890 <TIM_OC1_SetConfig+0x108>)
 8004836:	4293      	cmp	r3, r2
 8004838:	d111      	bne.n	800485e <TIM_OC1_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800483a:	693b      	ldr	r3, [r7, #16]
 800483c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004840:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004842:	693b      	ldr	r3, [r7, #16]
 8004844:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004848:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800484a:	683b      	ldr	r3, [r7, #0]
 800484c:	695b      	ldr	r3, [r3, #20]
 800484e:	693a      	ldr	r2, [r7, #16]
 8004850:	4313      	orrs	r3, r2
 8004852:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004854:	683b      	ldr	r3, [r7, #0]
 8004856:	699b      	ldr	r3, [r3, #24]
 8004858:	693a      	ldr	r2, [r7, #16]
 800485a:	4313      	orrs	r3, r2
 800485c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	693a      	ldr	r2, [r7, #16]
 8004862:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	68fa      	ldr	r2, [r7, #12]
 8004868:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800486a:	683b      	ldr	r3, [r7, #0]
 800486c:	685a      	ldr	r2, [r3, #4]
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	697a      	ldr	r2, [r7, #20]
 8004876:	621a      	str	r2, [r3, #32]
}
 8004878:	bf00      	nop
 800487a:	371c      	adds	r7, #28
 800487c:	46bd      	mov	sp, r7
 800487e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004882:	4770      	bx	lr
 8004884:	40012c00 	.word	0x40012c00
 8004888:	40014000 	.word	0x40014000
 800488c:	40014400 	.word	0x40014400
 8004890:	40014800 	.word	0x40014800

08004894 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004894:	b480      	push	{r7}
 8004896:	b087      	sub	sp, #28
 8004898:	af00      	add	r7, sp, #0
 800489a:	6078      	str	r0, [r7, #4]
 800489c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	6a1b      	ldr	r3, [r3, #32]
 80048a2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	6a1b      	ldr	r3, [r3, #32]
 80048a8:	f023 0210 	bic.w	r2, r3, #16
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	685b      	ldr	r3, [r3, #4]
 80048b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	699b      	ldr	r3, [r3, #24]
 80048ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80048c2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80048c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80048ce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80048d0:	683b      	ldr	r3, [r7, #0]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	021b      	lsls	r3, r3, #8
 80048d6:	68fa      	ldr	r2, [r7, #12]
 80048d8:	4313      	orrs	r3, r2
 80048da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80048dc:	697b      	ldr	r3, [r7, #20]
 80048de:	f023 0320 	bic.w	r3, r3, #32
 80048e2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80048e4:	683b      	ldr	r3, [r7, #0]
 80048e6:	689b      	ldr	r3, [r3, #8]
 80048e8:	011b      	lsls	r3, r3, #4
 80048ea:	697a      	ldr	r2, [r7, #20]
 80048ec:	4313      	orrs	r3, r2
 80048ee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	4a24      	ldr	r2, [pc, #144]	@ (8004984 <TIM_OC2_SetConfig+0xf0>)
 80048f4:	4293      	cmp	r3, r2
 80048f6:	d10d      	bne.n	8004914 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80048f8:	697b      	ldr	r3, [r7, #20]
 80048fa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80048fe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004900:	683b      	ldr	r3, [r7, #0]
 8004902:	68db      	ldr	r3, [r3, #12]
 8004904:	011b      	lsls	r3, r3, #4
 8004906:	697a      	ldr	r2, [r7, #20]
 8004908:	4313      	orrs	r3, r2
 800490a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800490c:	697b      	ldr	r3, [r7, #20]
 800490e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004912:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	4a1b      	ldr	r2, [pc, #108]	@ (8004984 <TIM_OC2_SetConfig+0xf0>)
 8004918:	4293      	cmp	r3, r2
 800491a:	d00b      	beq.n	8004934 <TIM_OC2_SetConfig+0xa0>
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	4a1a      	ldr	r2, [pc, #104]	@ (8004988 <TIM_OC2_SetConfig+0xf4>)
 8004920:	4293      	cmp	r3, r2
 8004922:	d007      	beq.n	8004934 <TIM_OC2_SetConfig+0xa0>
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	4a19      	ldr	r2, [pc, #100]	@ (800498c <TIM_OC2_SetConfig+0xf8>)
 8004928:	4293      	cmp	r3, r2
 800492a:	d003      	beq.n	8004934 <TIM_OC2_SetConfig+0xa0>
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	4a18      	ldr	r2, [pc, #96]	@ (8004990 <TIM_OC2_SetConfig+0xfc>)
 8004930:	4293      	cmp	r3, r2
 8004932:	d113      	bne.n	800495c <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004934:	693b      	ldr	r3, [r7, #16]
 8004936:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800493a:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800493c:	693b      	ldr	r3, [r7, #16]
 800493e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004942:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004944:	683b      	ldr	r3, [r7, #0]
 8004946:	695b      	ldr	r3, [r3, #20]
 8004948:	009b      	lsls	r3, r3, #2
 800494a:	693a      	ldr	r2, [r7, #16]
 800494c:	4313      	orrs	r3, r2
 800494e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004950:	683b      	ldr	r3, [r7, #0]
 8004952:	699b      	ldr	r3, [r3, #24]
 8004954:	009b      	lsls	r3, r3, #2
 8004956:	693a      	ldr	r2, [r7, #16]
 8004958:	4313      	orrs	r3, r2
 800495a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	693a      	ldr	r2, [r7, #16]
 8004960:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	68fa      	ldr	r2, [r7, #12]
 8004966:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004968:	683b      	ldr	r3, [r7, #0]
 800496a:	685a      	ldr	r2, [r3, #4]
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	697a      	ldr	r2, [r7, #20]
 8004974:	621a      	str	r2, [r3, #32]
}
 8004976:	bf00      	nop
 8004978:	371c      	adds	r7, #28
 800497a:	46bd      	mov	sp, r7
 800497c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004980:	4770      	bx	lr
 8004982:	bf00      	nop
 8004984:	40012c00 	.word	0x40012c00
 8004988:	40014000 	.word	0x40014000
 800498c:	40014400 	.word	0x40014400
 8004990:	40014800 	.word	0x40014800

08004994 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004994:	b480      	push	{r7}
 8004996:	b087      	sub	sp, #28
 8004998:	af00      	add	r7, sp, #0
 800499a:	6078      	str	r0, [r7, #4]
 800499c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	6a1b      	ldr	r3, [r3, #32]
 80049a2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	6a1b      	ldr	r3, [r3, #32]
 80049a8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	685b      	ldr	r3, [r3, #4]
 80049b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	69db      	ldr	r3, [r3, #28]
 80049ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80049c2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80049c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	f023 0303 	bic.w	r3, r3, #3
 80049ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80049d0:	683b      	ldr	r3, [r7, #0]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	68fa      	ldr	r2, [r7, #12]
 80049d6:	4313      	orrs	r3, r2
 80049d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80049da:	697b      	ldr	r3, [r7, #20]
 80049dc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80049e0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80049e2:	683b      	ldr	r3, [r7, #0]
 80049e4:	689b      	ldr	r3, [r3, #8]
 80049e6:	021b      	lsls	r3, r3, #8
 80049e8:	697a      	ldr	r2, [r7, #20]
 80049ea:	4313      	orrs	r3, r2
 80049ec:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	4a23      	ldr	r2, [pc, #140]	@ (8004a80 <TIM_OC3_SetConfig+0xec>)
 80049f2:	4293      	cmp	r3, r2
 80049f4:	d10d      	bne.n	8004a12 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80049f6:	697b      	ldr	r3, [r7, #20]
 80049f8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80049fc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80049fe:	683b      	ldr	r3, [r7, #0]
 8004a00:	68db      	ldr	r3, [r3, #12]
 8004a02:	021b      	lsls	r3, r3, #8
 8004a04:	697a      	ldr	r2, [r7, #20]
 8004a06:	4313      	orrs	r3, r2
 8004a08:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004a0a:	697b      	ldr	r3, [r7, #20]
 8004a0c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004a10:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	4a1a      	ldr	r2, [pc, #104]	@ (8004a80 <TIM_OC3_SetConfig+0xec>)
 8004a16:	4293      	cmp	r3, r2
 8004a18:	d00b      	beq.n	8004a32 <TIM_OC3_SetConfig+0x9e>
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	4a19      	ldr	r2, [pc, #100]	@ (8004a84 <TIM_OC3_SetConfig+0xf0>)
 8004a1e:	4293      	cmp	r3, r2
 8004a20:	d007      	beq.n	8004a32 <TIM_OC3_SetConfig+0x9e>
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	4a18      	ldr	r2, [pc, #96]	@ (8004a88 <TIM_OC3_SetConfig+0xf4>)
 8004a26:	4293      	cmp	r3, r2
 8004a28:	d003      	beq.n	8004a32 <TIM_OC3_SetConfig+0x9e>
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	4a17      	ldr	r2, [pc, #92]	@ (8004a8c <TIM_OC3_SetConfig+0xf8>)
 8004a2e:	4293      	cmp	r3, r2
 8004a30:	d113      	bne.n	8004a5a <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004a32:	693b      	ldr	r3, [r7, #16]
 8004a34:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004a38:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004a3a:	693b      	ldr	r3, [r7, #16]
 8004a3c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004a40:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004a42:	683b      	ldr	r3, [r7, #0]
 8004a44:	695b      	ldr	r3, [r3, #20]
 8004a46:	011b      	lsls	r3, r3, #4
 8004a48:	693a      	ldr	r2, [r7, #16]
 8004a4a:	4313      	orrs	r3, r2
 8004a4c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004a4e:	683b      	ldr	r3, [r7, #0]
 8004a50:	699b      	ldr	r3, [r3, #24]
 8004a52:	011b      	lsls	r3, r3, #4
 8004a54:	693a      	ldr	r2, [r7, #16]
 8004a56:	4313      	orrs	r3, r2
 8004a58:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	693a      	ldr	r2, [r7, #16]
 8004a5e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	68fa      	ldr	r2, [r7, #12]
 8004a64:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004a66:	683b      	ldr	r3, [r7, #0]
 8004a68:	685a      	ldr	r2, [r3, #4]
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	697a      	ldr	r2, [r7, #20]
 8004a72:	621a      	str	r2, [r3, #32]
}
 8004a74:	bf00      	nop
 8004a76:	371c      	adds	r7, #28
 8004a78:	46bd      	mov	sp, r7
 8004a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7e:	4770      	bx	lr
 8004a80:	40012c00 	.word	0x40012c00
 8004a84:	40014000 	.word	0x40014000
 8004a88:	40014400 	.word	0x40014400
 8004a8c:	40014800 	.word	0x40014800

08004a90 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004a90:	b480      	push	{r7}
 8004a92:	b087      	sub	sp, #28
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	6078      	str	r0, [r7, #4]
 8004a98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	6a1b      	ldr	r3, [r3, #32]
 8004a9e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	6a1b      	ldr	r3, [r3, #32]
 8004aa4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	685b      	ldr	r3, [r3, #4]
 8004ab0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	69db      	ldr	r3, [r3, #28]
 8004ab6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004abe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004ac2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004aca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004acc:	683b      	ldr	r3, [r7, #0]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	021b      	lsls	r3, r3, #8
 8004ad2:	68fa      	ldr	r2, [r7, #12]
 8004ad4:	4313      	orrs	r3, r2
 8004ad6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004ad8:	693b      	ldr	r3, [r7, #16]
 8004ada:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004ade:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004ae0:	683b      	ldr	r3, [r7, #0]
 8004ae2:	689b      	ldr	r3, [r3, #8]
 8004ae4:	031b      	lsls	r3, r3, #12
 8004ae6:	693a      	ldr	r2, [r7, #16]
 8004ae8:	4313      	orrs	r3, r2
 8004aea:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	4a16      	ldr	r2, [pc, #88]	@ (8004b48 <TIM_OC4_SetConfig+0xb8>)
 8004af0:	4293      	cmp	r3, r2
 8004af2:	d00b      	beq.n	8004b0c <TIM_OC4_SetConfig+0x7c>
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	4a15      	ldr	r2, [pc, #84]	@ (8004b4c <TIM_OC4_SetConfig+0xbc>)
 8004af8:	4293      	cmp	r3, r2
 8004afa:	d007      	beq.n	8004b0c <TIM_OC4_SetConfig+0x7c>
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	4a14      	ldr	r2, [pc, #80]	@ (8004b50 <TIM_OC4_SetConfig+0xc0>)
 8004b00:	4293      	cmp	r3, r2
 8004b02:	d003      	beq.n	8004b0c <TIM_OC4_SetConfig+0x7c>
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	4a13      	ldr	r2, [pc, #76]	@ (8004b54 <TIM_OC4_SetConfig+0xc4>)
 8004b08:	4293      	cmp	r3, r2
 8004b0a:	d109      	bne.n	8004b20 <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004b0c:	697b      	ldr	r3, [r7, #20]
 8004b0e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004b12:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004b14:	683b      	ldr	r3, [r7, #0]
 8004b16:	695b      	ldr	r3, [r3, #20]
 8004b18:	019b      	lsls	r3, r3, #6
 8004b1a:	697a      	ldr	r2, [r7, #20]
 8004b1c:	4313      	orrs	r3, r2
 8004b1e:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	697a      	ldr	r2, [r7, #20]
 8004b24:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	68fa      	ldr	r2, [r7, #12]
 8004b2a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004b2c:	683b      	ldr	r3, [r7, #0]
 8004b2e:	685a      	ldr	r2, [r3, #4]
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	693a      	ldr	r2, [r7, #16]
 8004b38:	621a      	str	r2, [r3, #32]
}
 8004b3a:	bf00      	nop
 8004b3c:	371c      	adds	r7, #28
 8004b3e:	46bd      	mov	sp, r7
 8004b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b44:	4770      	bx	lr
 8004b46:	bf00      	nop
 8004b48:	40012c00 	.word	0x40012c00
 8004b4c:	40014000 	.word	0x40014000
 8004b50:	40014400 	.word	0x40014400
 8004b54:	40014800 	.word	0x40014800

08004b58 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004b58:	b480      	push	{r7}
 8004b5a:	b087      	sub	sp, #28
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	6078      	str	r0, [r7, #4]
 8004b60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	6a1b      	ldr	r3, [r3, #32]
 8004b66:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	6a1b      	ldr	r3, [r3, #32]
 8004b6c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	685b      	ldr	r3, [r3, #4]
 8004b78:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004b86:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004b8a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004b8c:	683b      	ldr	r3, [r7, #0]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	68fa      	ldr	r2, [r7, #12]
 8004b92:	4313      	orrs	r3, r2
 8004b94:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004b96:	693b      	ldr	r3, [r7, #16]
 8004b98:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8004b9c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004b9e:	683b      	ldr	r3, [r7, #0]
 8004ba0:	689b      	ldr	r3, [r3, #8]
 8004ba2:	041b      	lsls	r3, r3, #16
 8004ba4:	693a      	ldr	r2, [r7, #16]
 8004ba6:	4313      	orrs	r3, r2
 8004ba8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	4a15      	ldr	r2, [pc, #84]	@ (8004c04 <TIM_OC5_SetConfig+0xac>)
 8004bae:	4293      	cmp	r3, r2
 8004bb0:	d00b      	beq.n	8004bca <TIM_OC5_SetConfig+0x72>
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	4a14      	ldr	r2, [pc, #80]	@ (8004c08 <TIM_OC5_SetConfig+0xb0>)
 8004bb6:	4293      	cmp	r3, r2
 8004bb8:	d007      	beq.n	8004bca <TIM_OC5_SetConfig+0x72>
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	4a13      	ldr	r2, [pc, #76]	@ (8004c0c <TIM_OC5_SetConfig+0xb4>)
 8004bbe:	4293      	cmp	r3, r2
 8004bc0:	d003      	beq.n	8004bca <TIM_OC5_SetConfig+0x72>
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	4a12      	ldr	r2, [pc, #72]	@ (8004c10 <TIM_OC5_SetConfig+0xb8>)
 8004bc6:	4293      	cmp	r3, r2
 8004bc8:	d109      	bne.n	8004bde <TIM_OC5_SetConfig+0x86>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004bca:	697b      	ldr	r3, [r7, #20]
 8004bcc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004bd0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004bd2:	683b      	ldr	r3, [r7, #0]
 8004bd4:	695b      	ldr	r3, [r3, #20]
 8004bd6:	021b      	lsls	r3, r3, #8
 8004bd8:	697a      	ldr	r2, [r7, #20]
 8004bda:	4313      	orrs	r3, r2
 8004bdc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	697a      	ldr	r2, [r7, #20]
 8004be2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	68fa      	ldr	r2, [r7, #12]
 8004be8:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004bea:	683b      	ldr	r3, [r7, #0]
 8004bec:	685a      	ldr	r2, [r3, #4]
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	693a      	ldr	r2, [r7, #16]
 8004bf6:	621a      	str	r2, [r3, #32]
}
 8004bf8:	bf00      	nop
 8004bfa:	371c      	adds	r7, #28
 8004bfc:	46bd      	mov	sp, r7
 8004bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c02:	4770      	bx	lr
 8004c04:	40012c00 	.word	0x40012c00
 8004c08:	40014000 	.word	0x40014000
 8004c0c:	40014400 	.word	0x40014400
 8004c10:	40014800 	.word	0x40014800

08004c14 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004c14:	b480      	push	{r7}
 8004c16:	b087      	sub	sp, #28
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	6078      	str	r0, [r7, #4]
 8004c1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	6a1b      	ldr	r3, [r3, #32]
 8004c22:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	6a1b      	ldr	r3, [r3, #32]
 8004c28:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	685b      	ldr	r3, [r3, #4]
 8004c34:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004c42:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004c46:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004c48:	683b      	ldr	r3, [r7, #0]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	021b      	lsls	r3, r3, #8
 8004c4e:	68fa      	ldr	r2, [r7, #12]
 8004c50:	4313      	orrs	r3, r2
 8004c52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004c54:	693b      	ldr	r3, [r7, #16]
 8004c56:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004c5a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004c5c:	683b      	ldr	r3, [r7, #0]
 8004c5e:	689b      	ldr	r3, [r3, #8]
 8004c60:	051b      	lsls	r3, r3, #20
 8004c62:	693a      	ldr	r2, [r7, #16]
 8004c64:	4313      	orrs	r3, r2
 8004c66:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	4a16      	ldr	r2, [pc, #88]	@ (8004cc4 <TIM_OC6_SetConfig+0xb0>)
 8004c6c:	4293      	cmp	r3, r2
 8004c6e:	d00b      	beq.n	8004c88 <TIM_OC6_SetConfig+0x74>
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	4a15      	ldr	r2, [pc, #84]	@ (8004cc8 <TIM_OC6_SetConfig+0xb4>)
 8004c74:	4293      	cmp	r3, r2
 8004c76:	d007      	beq.n	8004c88 <TIM_OC6_SetConfig+0x74>
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	4a14      	ldr	r2, [pc, #80]	@ (8004ccc <TIM_OC6_SetConfig+0xb8>)
 8004c7c:	4293      	cmp	r3, r2
 8004c7e:	d003      	beq.n	8004c88 <TIM_OC6_SetConfig+0x74>
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	4a13      	ldr	r2, [pc, #76]	@ (8004cd0 <TIM_OC6_SetConfig+0xbc>)
 8004c84:	4293      	cmp	r3, r2
 8004c86:	d109      	bne.n	8004c9c <TIM_OC6_SetConfig+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004c88:	697b      	ldr	r3, [r7, #20]
 8004c8a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004c8e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004c90:	683b      	ldr	r3, [r7, #0]
 8004c92:	695b      	ldr	r3, [r3, #20]
 8004c94:	029b      	lsls	r3, r3, #10
 8004c96:	697a      	ldr	r2, [r7, #20]
 8004c98:	4313      	orrs	r3, r2
 8004c9a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	697a      	ldr	r2, [r7, #20]
 8004ca0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	68fa      	ldr	r2, [r7, #12]
 8004ca6:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004ca8:	683b      	ldr	r3, [r7, #0]
 8004caa:	685a      	ldr	r2, [r3, #4]
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	693a      	ldr	r2, [r7, #16]
 8004cb4:	621a      	str	r2, [r3, #32]
}
 8004cb6:	bf00      	nop
 8004cb8:	371c      	adds	r7, #28
 8004cba:	46bd      	mov	sp, r7
 8004cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc0:	4770      	bx	lr
 8004cc2:	bf00      	nop
 8004cc4:	40012c00 	.word	0x40012c00
 8004cc8:	40014000 	.word	0x40014000
 8004ccc:	40014400 	.word	0x40014400
 8004cd0:	40014800 	.word	0x40014800

08004cd4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004cd4:	b480      	push	{r7}
 8004cd6:	b087      	sub	sp, #28
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	60f8      	str	r0, [r7, #12]
 8004cdc:	60b9      	str	r1, [r7, #8]
 8004cde:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	6a1b      	ldr	r3, [r3, #32]
 8004ce4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	6a1b      	ldr	r3, [r3, #32]
 8004cea:	f023 0201 	bic.w	r2, r3, #1
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	699b      	ldr	r3, [r3, #24]
 8004cf6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004cf8:	693b      	ldr	r3, [r7, #16]
 8004cfa:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004cfe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	011b      	lsls	r3, r3, #4
 8004d04:	693a      	ldr	r2, [r7, #16]
 8004d06:	4313      	orrs	r3, r2
 8004d08:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004d0a:	697b      	ldr	r3, [r7, #20]
 8004d0c:	f023 030a 	bic.w	r3, r3, #10
 8004d10:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004d12:	697a      	ldr	r2, [r7, #20]
 8004d14:	68bb      	ldr	r3, [r7, #8]
 8004d16:	4313      	orrs	r3, r2
 8004d18:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	693a      	ldr	r2, [r7, #16]
 8004d1e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	697a      	ldr	r2, [r7, #20]
 8004d24:	621a      	str	r2, [r3, #32]
}
 8004d26:	bf00      	nop
 8004d28:	371c      	adds	r7, #28
 8004d2a:	46bd      	mov	sp, r7
 8004d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d30:	4770      	bx	lr

08004d32 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004d32:	b480      	push	{r7}
 8004d34:	b087      	sub	sp, #28
 8004d36:	af00      	add	r7, sp, #0
 8004d38:	60f8      	str	r0, [r7, #12]
 8004d3a:	60b9      	str	r1, [r7, #8]
 8004d3c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	6a1b      	ldr	r3, [r3, #32]
 8004d42:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	6a1b      	ldr	r3, [r3, #32]
 8004d48:	f023 0210 	bic.w	r2, r3, #16
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	699b      	ldr	r3, [r3, #24]
 8004d54:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004d56:	693b      	ldr	r3, [r7, #16]
 8004d58:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004d5c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	031b      	lsls	r3, r3, #12
 8004d62:	693a      	ldr	r2, [r7, #16]
 8004d64:	4313      	orrs	r3, r2
 8004d66:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004d68:	697b      	ldr	r3, [r7, #20]
 8004d6a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004d6e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004d70:	68bb      	ldr	r3, [r7, #8]
 8004d72:	011b      	lsls	r3, r3, #4
 8004d74:	697a      	ldr	r2, [r7, #20]
 8004d76:	4313      	orrs	r3, r2
 8004d78:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	693a      	ldr	r2, [r7, #16]
 8004d7e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	697a      	ldr	r2, [r7, #20]
 8004d84:	621a      	str	r2, [r3, #32]
}
 8004d86:	bf00      	nop
 8004d88:	371c      	adds	r7, #28
 8004d8a:	46bd      	mov	sp, r7
 8004d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d90:	4770      	bx	lr

08004d92 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004d92:	b480      	push	{r7}
 8004d94:	b085      	sub	sp, #20
 8004d96:	af00      	add	r7, sp, #0
 8004d98:	6078      	str	r0, [r7, #4]
 8004d9a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	689b      	ldr	r3, [r3, #8]
 8004da0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004da8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004daa:	683a      	ldr	r2, [r7, #0]
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	4313      	orrs	r3, r2
 8004db0:	f043 0307 	orr.w	r3, r3, #7
 8004db4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	68fa      	ldr	r2, [r7, #12]
 8004dba:	609a      	str	r2, [r3, #8]
}
 8004dbc:	bf00      	nop
 8004dbe:	3714      	adds	r7, #20
 8004dc0:	46bd      	mov	sp, r7
 8004dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc6:	4770      	bx	lr

08004dc8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004dc8:	b480      	push	{r7}
 8004dca:	b087      	sub	sp, #28
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	60f8      	str	r0, [r7, #12]
 8004dd0:	60b9      	str	r1, [r7, #8]
 8004dd2:	607a      	str	r2, [r7, #4]
 8004dd4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	689b      	ldr	r3, [r3, #8]
 8004dda:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004ddc:	697b      	ldr	r3, [r7, #20]
 8004dde:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004de2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004de4:	683b      	ldr	r3, [r7, #0]
 8004de6:	021a      	lsls	r2, r3, #8
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	431a      	orrs	r2, r3
 8004dec:	68bb      	ldr	r3, [r7, #8]
 8004dee:	4313      	orrs	r3, r2
 8004df0:	697a      	ldr	r2, [r7, #20]
 8004df2:	4313      	orrs	r3, r2
 8004df4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	697a      	ldr	r2, [r7, #20]
 8004dfa:	609a      	str	r2, [r3, #8]
}
 8004dfc:	bf00      	nop
 8004dfe:	371c      	adds	r7, #28
 8004e00:	46bd      	mov	sp, r7
 8004e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e06:	4770      	bx	lr

08004e08 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004e08:	b480      	push	{r7}
 8004e0a:	b087      	sub	sp, #28
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	60f8      	str	r0, [r7, #12]
 8004e10:	60b9      	str	r1, [r7, #8]
 8004e12:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004e14:	68bb      	ldr	r3, [r7, #8]
 8004e16:	f003 031f 	and.w	r3, r3, #31
 8004e1a:	2201      	movs	r2, #1
 8004e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8004e20:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	6a1a      	ldr	r2, [r3, #32]
 8004e26:	697b      	ldr	r3, [r7, #20]
 8004e28:	43db      	mvns	r3, r3
 8004e2a:	401a      	ands	r2, r3
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	6a1a      	ldr	r2, [r3, #32]
 8004e34:	68bb      	ldr	r3, [r7, #8]
 8004e36:	f003 031f 	and.w	r3, r3, #31
 8004e3a:	6879      	ldr	r1, [r7, #4]
 8004e3c:	fa01 f303 	lsl.w	r3, r1, r3
 8004e40:	431a      	orrs	r2, r3
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	621a      	str	r2, [r3, #32]
}
 8004e46:	bf00      	nop
 8004e48:	371c      	adds	r7, #28
 8004e4a:	46bd      	mov	sp, r7
 8004e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e50:	4770      	bx	lr
	...

08004e54 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004e54:	b480      	push	{r7}
 8004e56:	b085      	sub	sp, #20
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	6078      	str	r0, [r7, #4]
 8004e5c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004e64:	2b01      	cmp	r3, #1
 8004e66:	d101      	bne.n	8004e6c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004e68:	2302      	movs	r3, #2
 8004e6a:	e054      	b.n	8004f16 <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	2201      	movs	r2, #1
 8004e70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2202      	movs	r2, #2
 8004e78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	685b      	ldr	r3, [r3, #4]
 8004e82:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	689b      	ldr	r3, [r3, #8]
 8004e8a:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	4a24      	ldr	r2, [pc, #144]	@ (8004f24 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004e92:	4293      	cmp	r3, r2
 8004e94:	d108      	bne.n	8004ea8 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8004e9c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004e9e:	683b      	ldr	r3, [r7, #0]
 8004ea0:	685b      	ldr	r3, [r3, #4]
 8004ea2:	68fa      	ldr	r2, [r7, #12]
 8004ea4:	4313      	orrs	r3, r2
 8004ea6:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004eae:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004eb0:	683b      	ldr	r3, [r7, #0]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	68fa      	ldr	r2, [r7, #12]
 8004eb6:	4313      	orrs	r3, r2
 8004eb8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	68fa      	ldr	r2, [r7, #12]
 8004ec0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	4a17      	ldr	r2, [pc, #92]	@ (8004f24 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004ec8:	4293      	cmp	r3, r2
 8004eca:	d00e      	beq.n	8004eea <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004ed4:	d009      	beq.n	8004eea <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	4a13      	ldr	r2, [pc, #76]	@ (8004f28 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004edc:	4293      	cmp	r3, r2
 8004ede:	d004      	beq.n	8004eea <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	4a11      	ldr	r2, [pc, #68]	@ (8004f2c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004ee6:	4293      	cmp	r3, r2
 8004ee8:	d10c      	bne.n	8004f04 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004eea:	68bb      	ldr	r3, [r7, #8]
 8004eec:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004ef0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004ef2:	683b      	ldr	r3, [r7, #0]
 8004ef4:	689b      	ldr	r3, [r3, #8]
 8004ef6:	68ba      	ldr	r2, [r7, #8]
 8004ef8:	4313      	orrs	r3, r2
 8004efa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	68ba      	ldr	r2, [r7, #8]
 8004f02:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	2201      	movs	r2, #1
 8004f08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	2200      	movs	r2, #0
 8004f10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004f14:	2300      	movs	r3, #0
}
 8004f16:	4618      	mov	r0, r3
 8004f18:	3714      	adds	r7, #20
 8004f1a:	46bd      	mov	sp, r7
 8004f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f20:	4770      	bx	lr
 8004f22:	bf00      	nop
 8004f24:	40012c00 	.word	0x40012c00
 8004f28:	40000400 	.word	0x40000400
 8004f2c:	40014000 	.word	0x40014000

08004f30 <HAL_MultiProcessor_Init>:
  *        HAL_MultiProcessorEx_AddressLength_Set() must be called after
  *        HAL_MultiProcessor_Init().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MultiProcessor_Init(UART_HandleTypeDef *huart, uint8_t Address, uint32_t WakeUpMethod)
{
 8004f30:	b580      	push	{r7, lr}
 8004f32:	b084      	sub	sp, #16
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	60f8      	str	r0, [r7, #12]
 8004f38:	460b      	mov	r3, r1
 8004f3a:	607a      	str	r2, [r7, #4]
 8004f3c:	72fb      	strb	r3, [r7, #11]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d101      	bne.n	8004f48 <HAL_MultiProcessor_Init+0x18>
  {
    return HAL_ERROR;
 8004f44:	2301      	movs	r3, #1
 8004f46:	e059      	b.n	8004ffc <HAL_MultiProcessor_Init+0xcc>
  }

  /* Check the wake up method parameter */
  assert_param(IS_UART_WAKEUPMETHOD(WakeUpMethod));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d106      	bne.n	8004f5e <HAL_MultiProcessor_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	2200      	movs	r2, #0
 8004f54:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004f58:	68f8      	ldr	r0, [r7, #12]
 8004f5a:	f7fc fda1 	bl	8001aa0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	2224      	movs	r2, #36	@ 0x24
 8004f62:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	681a      	ldr	r2, [r3, #0]
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	f022 0201 	bic.w	r2, r2, #1
 8004f72:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d002      	beq.n	8004f82 <HAL_MultiProcessor_Init+0x52>
  {
    UART_AdvFeatureConfig(huart);
 8004f7c:	68f8      	ldr	r0, [r7, #12]
 8004f7e:	f000 fdcf 	bl	8005b20 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004f82:	68f8      	ldr	r0, [r7, #12]
 8004f84:	f000 fc96 	bl	80058b4 <UART_SetConfig>
 8004f88:	4603      	mov	r3, r0
 8004f8a:	2b01      	cmp	r3, #1
 8004f8c:	d101      	bne.n	8004f92 <HAL_MultiProcessor_Init+0x62>
  {
    return HAL_ERROR;
 8004f8e:	2301      	movs	r3, #1
 8004f90:	e034      	b.n	8004ffc <HAL_MultiProcessor_Init+0xcc>
  }

  /* In multiprocessor mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register. */
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	685a      	ldr	r2, [r3, #4]
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004fa0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	689a      	ldr	r2, [r3, #8]
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004fb0:	609a      	str	r2, [r3, #8]

  if (WakeUpMethod == UART_WAKEUPMETHOD_ADDRESSMARK)
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004fb8:	d10a      	bne.n	8004fd0 <HAL_MultiProcessor_Init+0xa0>
  {
    /* If address mark wake up method is chosen, set the USART address node */
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ADD, ((uint32_t)Address << UART_CR2_ADDRESS_LSB_POS));
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	685b      	ldr	r3, [r3, #4]
 8004fc0:	f023 417f 	bic.w	r1, r3, #4278190080	@ 0xff000000
 8004fc4:	7afb      	ldrb	r3, [r7, #11]
 8004fc6:	061a      	lsls	r2, r3, #24
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	430a      	orrs	r2, r1
 8004fce:	605a      	str	r2, [r3, #4]
  }

  /* Set the wake up method by setting the WAKE bit in the CR1 register */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_WAKE, WakeUpMethod);
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	f423 6100 	bic.w	r1, r3, #2048	@ 0x800
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	687a      	ldr	r2, [r7, #4]
 8004fe0:	430a      	orrs	r2, r1
 8004fe2:	601a      	str	r2, [r3, #0]

  __HAL_UART_ENABLE(huart);
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	681a      	ldr	r2, [r3, #0]
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	f042 0201 	orr.w	r2, r2, #1
 8004ff2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004ff4:	68f8      	ldr	r0, [r7, #12]
 8004ff6:	f000 fe35 	bl	8005c64 <UART_CheckIdleState>
 8004ffa:	4603      	mov	r3, r0
}
 8004ffc:	4618      	mov	r0, r3
 8004ffe:	3710      	adds	r7, #16
 8005000:	46bd      	mov	sp, r7
 8005002:	bd80      	pop	{r7, pc}

08005004 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005004:	b580      	push	{r7, lr}
 8005006:	b08a      	sub	sp, #40	@ 0x28
 8005008:	af02      	add	r7, sp, #8
 800500a:	60f8      	str	r0, [r7, #12]
 800500c:	60b9      	str	r1, [r7, #8]
 800500e:	603b      	str	r3, [r7, #0]
 8005010:	4613      	mov	r3, r2
 8005012:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005018:	2b20      	cmp	r3, #32
 800501a:	d177      	bne.n	800510c <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 800501c:	68bb      	ldr	r3, [r7, #8]
 800501e:	2b00      	cmp	r3, #0
 8005020:	d002      	beq.n	8005028 <HAL_UART_Transmit+0x24>
 8005022:	88fb      	ldrh	r3, [r7, #6]
 8005024:	2b00      	cmp	r3, #0
 8005026:	d101      	bne.n	800502c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8005028:	2301      	movs	r3, #1
 800502a:	e070      	b.n	800510e <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	2200      	movs	r2, #0
 8005030:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	2221      	movs	r2, #33	@ 0x21
 8005038:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800503a:	f7fc feb3 	bl	8001da4 <HAL_GetTick>
 800503e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	88fa      	ldrh	r2, [r7, #6]
 8005044:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	88fa      	ldrh	r2, [r7, #6]
 800504c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	689b      	ldr	r3, [r3, #8]
 8005054:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005058:	d108      	bne.n	800506c <HAL_UART_Transmit+0x68>
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	691b      	ldr	r3, [r3, #16]
 800505e:	2b00      	cmp	r3, #0
 8005060:	d104      	bne.n	800506c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8005062:	2300      	movs	r3, #0
 8005064:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005066:	68bb      	ldr	r3, [r7, #8]
 8005068:	61bb      	str	r3, [r7, #24]
 800506a:	e003      	b.n	8005074 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800506c:	68bb      	ldr	r3, [r7, #8]
 800506e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005070:	2300      	movs	r3, #0
 8005072:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005074:	e02f      	b.n	80050d6 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005076:	683b      	ldr	r3, [r7, #0]
 8005078:	9300      	str	r3, [sp, #0]
 800507a:	697b      	ldr	r3, [r7, #20]
 800507c:	2200      	movs	r2, #0
 800507e:	2180      	movs	r1, #128	@ 0x80
 8005080:	68f8      	ldr	r0, [r7, #12]
 8005082:	f000 fe97 	bl	8005db4 <UART_WaitOnFlagUntilTimeout>
 8005086:	4603      	mov	r3, r0
 8005088:	2b00      	cmp	r3, #0
 800508a:	d004      	beq.n	8005096 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	2220      	movs	r2, #32
 8005090:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8005092:	2303      	movs	r3, #3
 8005094:	e03b      	b.n	800510e <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8005096:	69fb      	ldr	r3, [r7, #28]
 8005098:	2b00      	cmp	r3, #0
 800509a:	d10b      	bne.n	80050b4 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800509c:	69bb      	ldr	r3, [r7, #24]
 800509e:	881a      	ldrh	r2, [r3, #0]
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80050a8:	b292      	uxth	r2, r2
 80050aa:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80050ac:	69bb      	ldr	r3, [r7, #24]
 80050ae:	3302      	adds	r3, #2
 80050b0:	61bb      	str	r3, [r7, #24]
 80050b2:	e007      	b.n	80050c4 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80050b4:	69fb      	ldr	r3, [r7, #28]
 80050b6:	781a      	ldrb	r2, [r3, #0]
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80050be:	69fb      	ldr	r3, [r7, #28]
 80050c0:	3301      	adds	r3, #1
 80050c2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80050ca:	b29b      	uxth	r3, r3
 80050cc:	3b01      	subs	r3, #1
 80050ce:	b29a      	uxth	r2, r3
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80050dc:	b29b      	uxth	r3, r3
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d1c9      	bne.n	8005076 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80050e2:	683b      	ldr	r3, [r7, #0]
 80050e4:	9300      	str	r3, [sp, #0]
 80050e6:	697b      	ldr	r3, [r7, #20]
 80050e8:	2200      	movs	r2, #0
 80050ea:	2140      	movs	r1, #64	@ 0x40
 80050ec:	68f8      	ldr	r0, [r7, #12]
 80050ee:	f000 fe61 	bl	8005db4 <UART_WaitOnFlagUntilTimeout>
 80050f2:	4603      	mov	r3, r0
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d004      	beq.n	8005102 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	2220      	movs	r2, #32
 80050fc:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80050fe:	2303      	movs	r3, #3
 8005100:	e005      	b.n	800510e <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	2220      	movs	r2, #32
 8005106:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8005108:	2300      	movs	r3, #0
 800510a:	e000      	b.n	800510e <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 800510c:	2302      	movs	r3, #2
  }
}
 800510e:	4618      	mov	r0, r3
 8005110:	3720      	adds	r7, #32
 8005112:	46bd      	mov	sp, r7
 8005114:	bd80      	pop	{r7, pc}

08005116 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005116:	b580      	push	{r7, lr}
 8005118:	b08a      	sub	sp, #40	@ 0x28
 800511a:	af02      	add	r7, sp, #8
 800511c:	60f8      	str	r0, [r7, #12]
 800511e:	60b9      	str	r1, [r7, #8]
 8005120:	603b      	str	r3, [r7, #0]
 8005122:	4613      	mov	r3, r2
 8005124:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800512c:	2b20      	cmp	r3, #32
 800512e:	f040 80b6 	bne.w	800529e <HAL_UART_Receive+0x188>
  {
    if ((pData == NULL) || (Size == 0U))
 8005132:	68bb      	ldr	r3, [r7, #8]
 8005134:	2b00      	cmp	r3, #0
 8005136:	d002      	beq.n	800513e <HAL_UART_Receive+0x28>
 8005138:	88fb      	ldrh	r3, [r7, #6]
 800513a:	2b00      	cmp	r3, #0
 800513c:	d101      	bne.n	8005142 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800513e:	2301      	movs	r3, #1
 8005140:	e0ae      	b.n	80052a0 <HAL_UART_Receive+0x18a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	2200      	movs	r2, #0
 8005146:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	2222      	movs	r2, #34	@ 0x22
 800514e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	2200      	movs	r2, #0
 8005156:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005158:	f7fc fe24 	bl	8001da4 <HAL_GetTick>
 800515c:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	88fa      	ldrh	r2, [r7, #6]
 8005162:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
    huart->RxXferCount = Size;
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	88fa      	ldrh	r2, [r7, #6]
 800516a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	689b      	ldr	r3, [r3, #8]
 8005172:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005176:	d10e      	bne.n	8005196 <HAL_UART_Receive+0x80>
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	691b      	ldr	r3, [r3, #16]
 800517c:	2b00      	cmp	r3, #0
 800517e:	d105      	bne.n	800518c <HAL_UART_Receive+0x76>
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8005186:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800518a:	e02d      	b.n	80051e8 <HAL_UART_Receive+0xd2>
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	22ff      	movs	r2, #255	@ 0xff
 8005190:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005194:	e028      	b.n	80051e8 <HAL_UART_Receive+0xd2>
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	689b      	ldr	r3, [r3, #8]
 800519a:	2b00      	cmp	r3, #0
 800519c:	d10d      	bne.n	80051ba <HAL_UART_Receive+0xa4>
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	691b      	ldr	r3, [r3, #16]
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d104      	bne.n	80051b0 <HAL_UART_Receive+0x9a>
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	22ff      	movs	r2, #255	@ 0xff
 80051aa:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80051ae:	e01b      	b.n	80051e8 <HAL_UART_Receive+0xd2>
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	227f      	movs	r2, #127	@ 0x7f
 80051b4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80051b8:	e016      	b.n	80051e8 <HAL_UART_Receive+0xd2>
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	689b      	ldr	r3, [r3, #8]
 80051be:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80051c2:	d10d      	bne.n	80051e0 <HAL_UART_Receive+0xca>
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	691b      	ldr	r3, [r3, #16]
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d104      	bne.n	80051d6 <HAL_UART_Receive+0xc0>
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	227f      	movs	r2, #127	@ 0x7f
 80051d0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80051d4:	e008      	b.n	80051e8 <HAL_UART_Receive+0xd2>
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	223f      	movs	r2, #63	@ 0x3f
 80051da:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80051de:	e003      	b.n	80051e8 <HAL_UART_Receive+0xd2>
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	2200      	movs	r2, #0
 80051e4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    uhMask = huart->Mask;
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80051ee:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	689b      	ldr	r3, [r3, #8]
 80051f4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80051f8:	d108      	bne.n	800520c <HAL_UART_Receive+0xf6>
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	691b      	ldr	r3, [r3, #16]
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d104      	bne.n	800520c <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8005202:	2300      	movs	r3, #0
 8005204:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005206:	68bb      	ldr	r3, [r7, #8]
 8005208:	61bb      	str	r3, [r7, #24]
 800520a:	e003      	b.n	8005214 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 800520c:	68bb      	ldr	r3, [r7, #8]
 800520e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005210:	2300      	movs	r3, #0
 8005212:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8005214:	e037      	b.n	8005286 <HAL_UART_Receive+0x170>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8005216:	683b      	ldr	r3, [r7, #0]
 8005218:	9300      	str	r3, [sp, #0]
 800521a:	697b      	ldr	r3, [r7, #20]
 800521c:	2200      	movs	r2, #0
 800521e:	2120      	movs	r1, #32
 8005220:	68f8      	ldr	r0, [r7, #12]
 8005222:	f000 fdc7 	bl	8005db4 <UART_WaitOnFlagUntilTimeout>
 8005226:	4603      	mov	r3, r0
 8005228:	2b00      	cmp	r3, #0
 800522a:	d005      	beq.n	8005238 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	2220      	movs	r2, #32
 8005230:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        return HAL_TIMEOUT;
 8005234:	2303      	movs	r3, #3
 8005236:	e033      	b.n	80052a0 <HAL_UART_Receive+0x18a>
      }
      if (pdata8bits == NULL)
 8005238:	69fb      	ldr	r3, [r7, #28]
 800523a:	2b00      	cmp	r3, #0
 800523c:	d10c      	bne.n	8005258 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8005244:	b29a      	uxth	r2, r3
 8005246:	8a7b      	ldrh	r3, [r7, #18]
 8005248:	4013      	ands	r3, r2
 800524a:	b29a      	uxth	r2, r3
 800524c:	69bb      	ldr	r3, [r7, #24]
 800524e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8005250:	69bb      	ldr	r3, [r7, #24]
 8005252:	3302      	adds	r3, #2
 8005254:	61bb      	str	r3, [r7, #24]
 8005256:	e00d      	b.n	8005274 <HAL_UART_Receive+0x15e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800525e:	b29b      	uxth	r3, r3
 8005260:	b2da      	uxtb	r2, r3
 8005262:	8a7b      	ldrh	r3, [r7, #18]
 8005264:	b2db      	uxtb	r3, r3
 8005266:	4013      	ands	r3, r2
 8005268:	b2da      	uxtb	r2, r3
 800526a:	69fb      	ldr	r3, [r7, #28]
 800526c:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800526e:	69fb      	ldr	r3, [r7, #28]
 8005270:	3301      	adds	r3, #1
 8005272:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800527a:	b29b      	uxth	r3, r3
 800527c:	3b01      	subs	r3, #1
 800527e:	b29a      	uxth	r2, r3
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    while (huart->RxXferCount > 0U)
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800528c:	b29b      	uxth	r3, r3
 800528e:	2b00      	cmp	r3, #0
 8005290:	d1c1      	bne.n	8005216 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	2220      	movs	r2, #32
 8005296:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    return HAL_OK;
 800529a:	2300      	movs	r3, #0
 800529c:	e000      	b.n	80052a0 <HAL_UART_Receive+0x18a>
  }
  else
  {
    return HAL_BUSY;
 800529e:	2302      	movs	r3, #2
  }
}
 80052a0:	4618      	mov	r0, r3
 80052a2:	3720      	adds	r7, #32
 80052a4:	46bd      	mov	sp, r7
 80052a6:	bd80      	pop	{r7, pc}

080052a8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80052a8:	b580      	push	{r7, lr}
 80052aa:	b0ba      	sub	sp, #232	@ 0xe8
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	69db      	ldr	r3, [r3, #28]
 80052b6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	689b      	ldr	r3, [r3, #8]
 80052ca:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80052ce:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80052d2:	f640 030f 	movw	r3, #2063	@ 0x80f
 80052d6:	4013      	ands	r3, r2
 80052d8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80052dc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d115      	bne.n	8005310 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80052e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80052e8:	f003 0320 	and.w	r3, r3, #32
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d00f      	beq.n	8005310 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80052f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80052f4:	f003 0320 	and.w	r3, r3, #32
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d009      	beq.n	8005310 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005300:	2b00      	cmp	r3, #0
 8005302:	f000 82ab 	beq.w	800585c <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800530a:	6878      	ldr	r0, [r7, #4]
 800530c:	4798      	blx	r3
      }
      return;
 800530e:	e2a5      	b.n	800585c <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005310:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005314:	2b00      	cmp	r3, #0
 8005316:	f000 8117 	beq.w	8005548 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800531a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800531e:	f003 0301 	and.w	r3, r3, #1
 8005322:	2b00      	cmp	r3, #0
 8005324:	d106      	bne.n	8005334 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8005326:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800532a:	4b85      	ldr	r3, [pc, #532]	@ (8005540 <HAL_UART_IRQHandler+0x298>)
 800532c:	4013      	ands	r3, r2
 800532e:	2b00      	cmp	r3, #0
 8005330:	f000 810a 	beq.w	8005548 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005334:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005338:	f003 0301 	and.w	r3, r3, #1
 800533c:	2b00      	cmp	r3, #0
 800533e:	d011      	beq.n	8005364 <HAL_UART_IRQHandler+0xbc>
 8005340:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005344:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005348:	2b00      	cmp	r3, #0
 800534a:	d00b      	beq.n	8005364 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	2201      	movs	r2, #1
 8005352:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800535a:	f043 0201 	orr.w	r2, r3, #1
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005364:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005368:	f003 0302 	and.w	r3, r3, #2
 800536c:	2b00      	cmp	r3, #0
 800536e:	d011      	beq.n	8005394 <HAL_UART_IRQHandler+0xec>
 8005370:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005374:	f003 0301 	and.w	r3, r3, #1
 8005378:	2b00      	cmp	r3, #0
 800537a:	d00b      	beq.n	8005394 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	2202      	movs	r2, #2
 8005382:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800538a:	f043 0204 	orr.w	r2, r3, #4
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005394:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005398:	f003 0304 	and.w	r3, r3, #4
 800539c:	2b00      	cmp	r3, #0
 800539e:	d011      	beq.n	80053c4 <HAL_UART_IRQHandler+0x11c>
 80053a0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80053a4:	f003 0301 	and.w	r3, r3, #1
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d00b      	beq.n	80053c4 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	2204      	movs	r2, #4
 80053b2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80053ba:	f043 0202 	orr.w	r2, r3, #2
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80053c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80053c8:	f003 0308 	and.w	r3, r3, #8
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d017      	beq.n	8005400 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80053d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80053d4:	f003 0320 	and.w	r3, r3, #32
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d105      	bne.n	80053e8 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80053dc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80053e0:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d00b      	beq.n	8005400 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	2208      	movs	r2, #8
 80053ee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80053f6:	f043 0208 	orr.w	r2, r3, #8
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005400:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005404:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005408:	2b00      	cmp	r3, #0
 800540a:	d012      	beq.n	8005432 <HAL_UART_IRQHandler+0x18a>
 800540c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005410:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005414:	2b00      	cmp	r3, #0
 8005416:	d00c      	beq.n	8005432 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005420:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005428:	f043 0220 	orr.w	r2, r3, #32
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005438:	2b00      	cmp	r3, #0
 800543a:	f000 8211 	beq.w	8005860 <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800543e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005442:	f003 0320 	and.w	r3, r3, #32
 8005446:	2b00      	cmp	r3, #0
 8005448:	d00d      	beq.n	8005466 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800544a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800544e:	f003 0320 	and.w	r3, r3, #32
 8005452:	2b00      	cmp	r3, #0
 8005454:	d007      	beq.n	8005466 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800545a:	2b00      	cmp	r3, #0
 800545c:	d003      	beq.n	8005466 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005462:	6878      	ldr	r0, [r7, #4]
 8005464:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800546c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	689b      	ldr	r3, [r3, #8]
 8005476:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800547a:	2b40      	cmp	r3, #64	@ 0x40
 800547c:	d005      	beq.n	800548a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800547e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005482:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005486:	2b00      	cmp	r3, #0
 8005488:	d04f      	beq.n	800552a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800548a:	6878      	ldr	r0, [r7, #4]
 800548c:	f000 fcff 	bl	8005e8e <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	689b      	ldr	r3, [r3, #8]
 8005496:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800549a:	2b40      	cmp	r3, #64	@ 0x40
 800549c:	d141      	bne.n	8005522 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	3308      	adds	r3, #8
 80054a4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054a8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80054ac:	e853 3f00 	ldrex	r3, [r3]
 80054b0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80054b4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80054b8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80054bc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	3308      	adds	r3, #8
 80054c6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80054ca:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80054ce:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054d2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80054d6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80054da:	e841 2300 	strex	r3, r2, [r1]
 80054de:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80054e2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d1d9      	bne.n	800549e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d013      	beq.n	800551a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80054f6:	4a13      	ldr	r2, [pc, #76]	@ (8005544 <HAL_UART_IRQHandler+0x29c>)
 80054f8:	635a      	str	r2, [r3, #52]	@ 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80054fe:	4618      	mov	r0, r3
 8005500:	f7fc fea7 	bl	8002252 <HAL_DMA_Abort_IT>
 8005504:	4603      	mov	r3, r0
 8005506:	2b00      	cmp	r3, #0
 8005508:	d017      	beq.n	800553a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800550e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005510:	687a      	ldr	r2, [r7, #4]
 8005512:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8005514:	4610      	mov	r0, r2
 8005516:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005518:	e00f      	b.n	800553a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800551a:	6878      	ldr	r0, [r7, #4]
 800551c:	f000 f9b4 	bl	8005888 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005520:	e00b      	b.n	800553a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005522:	6878      	ldr	r0, [r7, #4]
 8005524:	f000 f9b0 	bl	8005888 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005528:	e007      	b.n	800553a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800552a:	6878      	ldr	r0, [r7, #4]
 800552c:	f000 f9ac 	bl	8005888 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	2200      	movs	r2, #0
 8005534:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8005538:	e192      	b.n	8005860 <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800553a:	bf00      	nop
    return;
 800553c:	e190      	b.n	8005860 <HAL_UART_IRQHandler+0x5b8>
 800553e:	bf00      	nop
 8005540:	04000120 	.word	0x04000120
 8005544:	08005f57 	.word	0x08005f57

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800554c:	2b01      	cmp	r3, #1
 800554e:	f040 814b 	bne.w	80057e8 <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005552:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005556:	f003 0310 	and.w	r3, r3, #16
 800555a:	2b00      	cmp	r3, #0
 800555c:	f000 8144 	beq.w	80057e8 <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005560:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005564:	f003 0310 	and.w	r3, r3, #16
 8005568:	2b00      	cmp	r3, #0
 800556a:	f000 813d 	beq.w	80057e8 <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	2210      	movs	r2, #16
 8005574:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	689b      	ldr	r3, [r3, #8]
 800557c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005580:	2b40      	cmp	r3, #64	@ 0x40
 8005582:	f040 80b5 	bne.w	80056f0 <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	685b      	ldr	r3, [r3, #4]
 800558e:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005592:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005596:	2b00      	cmp	r3, #0
 8005598:	f000 8164 	beq.w	8005864 <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80055a2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80055a6:	429a      	cmp	r2, r3
 80055a8:	f080 815c 	bcs.w	8005864 <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80055b2:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80055ba:	699b      	ldr	r3, [r3, #24]
 80055bc:	2b20      	cmp	r3, #32
 80055be:	f000 8086 	beq.w	80056ce <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055ca:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80055ce:	e853 3f00 	ldrex	r3, [r3]
 80055d2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80055d6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80055da:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80055de:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	461a      	mov	r2, r3
 80055e8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80055ec:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80055f0:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055f4:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80055f8:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80055fc:	e841 2300 	strex	r3, r2, [r1]
 8005600:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005604:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005608:	2b00      	cmp	r3, #0
 800560a:	d1da      	bne.n	80055c2 <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	3308      	adds	r3, #8
 8005612:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005614:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005616:	e853 3f00 	ldrex	r3, [r3]
 800561a:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800561c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800561e:	f023 0301 	bic.w	r3, r3, #1
 8005622:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	3308      	adds	r3, #8
 800562c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005630:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005634:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005636:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005638:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800563c:	e841 2300 	strex	r3, r2, [r1]
 8005640:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005642:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005644:	2b00      	cmp	r3, #0
 8005646:	d1e1      	bne.n	800560c <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	3308      	adds	r3, #8
 800564e:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005650:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005652:	e853 3f00 	ldrex	r3, [r3]
 8005656:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005658:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800565a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800565e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	3308      	adds	r3, #8
 8005668:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800566c:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800566e:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005670:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005672:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005674:	e841 2300 	strex	r3, r2, [r1]
 8005678:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800567a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800567c:	2b00      	cmp	r3, #0
 800567e:	d1e3      	bne.n	8005648 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	2220      	movs	r2, #32
 8005684:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	2200      	movs	r2, #0
 800568c:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005694:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005696:	e853 3f00 	ldrex	r3, [r3]
 800569a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800569c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800569e:	f023 0310 	bic.w	r3, r3, #16
 80056a2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	461a      	mov	r2, r3
 80056ac:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80056b0:	65bb      	str	r3, [r7, #88]	@ 0x58
 80056b2:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056b4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80056b6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80056b8:	e841 2300 	strex	r3, r2, [r1]
 80056bc:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80056be:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d1e4      	bne.n	800568e <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80056c8:	4618      	mov	r0, r3
 80056ca:	f7fc fd84 	bl	80021d6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	2202      	movs	r2, #2
 80056d2:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80056e0:	b29b      	uxth	r3, r3
 80056e2:	1ad3      	subs	r3, r2, r3
 80056e4:	b29b      	uxth	r3, r3
 80056e6:	4619      	mov	r1, r3
 80056e8:	6878      	ldr	r0, [r7, #4]
 80056ea:	f000 f8d7 	bl	800589c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80056ee:	e0b9      	b.n	8005864 <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80056fc:	b29b      	uxth	r3, r3
 80056fe:	1ad3      	subs	r3, r2, r3
 8005700:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800570a:	b29b      	uxth	r3, r3
 800570c:	2b00      	cmp	r3, #0
 800570e:	f000 80ab 	beq.w	8005868 <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 8005712:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005716:	2b00      	cmp	r3, #0
 8005718:	f000 80a6 	beq.w	8005868 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005722:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005724:	e853 3f00 	ldrex	r3, [r3]
 8005728:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800572a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800572c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005730:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	461a      	mov	r2, r3
 800573a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800573e:	647b      	str	r3, [r7, #68]	@ 0x44
 8005740:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005742:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005744:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005746:	e841 2300 	strex	r3, r2, [r1]
 800574a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800574c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800574e:	2b00      	cmp	r3, #0
 8005750:	d1e4      	bne.n	800571c <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	3308      	adds	r3, #8
 8005758:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800575a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800575c:	e853 3f00 	ldrex	r3, [r3]
 8005760:	623b      	str	r3, [r7, #32]
   return(result);
 8005762:	6a3b      	ldr	r3, [r7, #32]
 8005764:	f023 0301 	bic.w	r3, r3, #1
 8005768:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	3308      	adds	r3, #8
 8005772:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005776:	633a      	str	r2, [r7, #48]	@ 0x30
 8005778:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800577a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800577c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800577e:	e841 2300 	strex	r3, r2, [r1]
 8005782:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005784:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005786:	2b00      	cmp	r3, #0
 8005788:	d1e3      	bne.n	8005752 <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	2220      	movs	r2, #32
 800578e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	2200      	movs	r2, #0
 8005796:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	2200      	movs	r2, #0
 800579c:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057a4:	693b      	ldr	r3, [r7, #16]
 80057a6:	e853 3f00 	ldrex	r3, [r3]
 80057aa:	60fb      	str	r3, [r7, #12]
   return(result);
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	f023 0310 	bic.w	r3, r3, #16
 80057b2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	461a      	mov	r2, r3
 80057bc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80057c0:	61fb      	str	r3, [r7, #28]
 80057c2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057c4:	69b9      	ldr	r1, [r7, #24]
 80057c6:	69fa      	ldr	r2, [r7, #28]
 80057c8:	e841 2300 	strex	r3, r2, [r1]
 80057cc:	617b      	str	r3, [r7, #20]
   return(result);
 80057ce:	697b      	ldr	r3, [r7, #20]
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d1e4      	bne.n	800579e <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	2202      	movs	r2, #2
 80057d8:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80057da:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80057de:	4619      	mov	r1, r3
 80057e0:	6878      	ldr	r0, [r7, #4]
 80057e2:	f000 f85b 	bl	800589c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80057e6:	e03f      	b.n	8005868 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80057e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80057ec:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d00e      	beq.n	8005812 <HAL_UART_IRQHandler+0x56a>
 80057f4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80057f8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d008      	beq.n	8005812 <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8005808:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800580a:	6878      	ldr	r0, [r7, #4]
 800580c:	f000 fbe3 	bl	8005fd6 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005810:	e02d      	b.n	800586e <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005812:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005816:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800581a:	2b00      	cmp	r3, #0
 800581c:	d00e      	beq.n	800583c <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800581e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005822:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005826:	2b00      	cmp	r3, #0
 8005828:	d008      	beq.n	800583c <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800582e:	2b00      	cmp	r3, #0
 8005830:	d01c      	beq.n	800586c <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005836:	6878      	ldr	r0, [r7, #4]
 8005838:	4798      	blx	r3
    }
    return;
 800583a:	e017      	b.n	800586c <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800583c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005840:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005844:	2b00      	cmp	r3, #0
 8005846:	d012      	beq.n	800586e <HAL_UART_IRQHandler+0x5c6>
 8005848:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800584c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005850:	2b00      	cmp	r3, #0
 8005852:	d00c      	beq.n	800586e <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 8005854:	6878      	ldr	r0, [r7, #4]
 8005856:	f000 fb94 	bl	8005f82 <UART_EndTransmit_IT>
    return;
 800585a:	e008      	b.n	800586e <HAL_UART_IRQHandler+0x5c6>
      return;
 800585c:	bf00      	nop
 800585e:	e006      	b.n	800586e <HAL_UART_IRQHandler+0x5c6>
    return;
 8005860:	bf00      	nop
 8005862:	e004      	b.n	800586e <HAL_UART_IRQHandler+0x5c6>
      return;
 8005864:	bf00      	nop
 8005866:	e002      	b.n	800586e <HAL_UART_IRQHandler+0x5c6>
      return;
 8005868:	bf00      	nop
 800586a:	e000      	b.n	800586e <HAL_UART_IRQHandler+0x5c6>
    return;
 800586c:	bf00      	nop
  }

}
 800586e:	37e8      	adds	r7, #232	@ 0xe8
 8005870:	46bd      	mov	sp, r7
 8005872:	bd80      	pop	{r7, pc}

08005874 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005874:	b480      	push	{r7}
 8005876:	b083      	sub	sp, #12
 8005878:	af00      	add	r7, sp, #0
 800587a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800587c:	bf00      	nop
 800587e:	370c      	adds	r7, #12
 8005880:	46bd      	mov	sp, r7
 8005882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005886:	4770      	bx	lr

08005888 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005888:	b480      	push	{r7}
 800588a:	b083      	sub	sp, #12
 800588c:	af00      	add	r7, sp, #0
 800588e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005890:	bf00      	nop
 8005892:	370c      	adds	r7, #12
 8005894:	46bd      	mov	sp, r7
 8005896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800589a:	4770      	bx	lr

0800589c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800589c:	b480      	push	{r7}
 800589e:	b083      	sub	sp, #12
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	6078      	str	r0, [r7, #4]
 80058a4:	460b      	mov	r3, r1
 80058a6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80058a8:	bf00      	nop
 80058aa:	370c      	adds	r7, #12
 80058ac:	46bd      	mov	sp, r7
 80058ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b2:	4770      	bx	lr

080058b4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80058b4:	b580      	push	{r7, lr}
 80058b6:	b088      	sub	sp, #32
 80058b8:	af00      	add	r7, sp, #0
 80058ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80058bc:	2300      	movs	r3, #0
 80058be:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	689a      	ldr	r2, [r3, #8]
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	691b      	ldr	r3, [r3, #16]
 80058c8:	431a      	orrs	r2, r3
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	695b      	ldr	r3, [r3, #20]
 80058ce:	431a      	orrs	r2, r3
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	69db      	ldr	r3, [r3, #28]
 80058d4:	4313      	orrs	r3, r2
 80058d6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	681a      	ldr	r2, [r3, #0]
 80058de:	4b8a      	ldr	r3, [pc, #552]	@ (8005b08 <UART_SetConfig+0x254>)
 80058e0:	4013      	ands	r3, r2
 80058e2:	687a      	ldr	r2, [r7, #4]
 80058e4:	6812      	ldr	r2, [r2, #0]
 80058e6:	6979      	ldr	r1, [r7, #20]
 80058e8:	430b      	orrs	r3, r1
 80058ea:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	685b      	ldr	r3, [r3, #4]
 80058f2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	68da      	ldr	r2, [r3, #12]
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	430a      	orrs	r2, r1
 8005900:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	699b      	ldr	r3, [r3, #24]
 8005906:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	6a1b      	ldr	r3, [r3, #32]
 800590c:	697a      	ldr	r2, [r7, #20]
 800590e:	4313      	orrs	r3, r2
 8005910:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	689b      	ldr	r3, [r3, #8]
 8005918:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	697a      	ldr	r2, [r7, #20]
 8005922:	430a      	orrs	r2, r1
 8005924:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	4a78      	ldr	r2, [pc, #480]	@ (8005b0c <UART_SetConfig+0x258>)
 800592c:	4293      	cmp	r3, r2
 800592e:	d120      	bne.n	8005972 <UART_SetConfig+0xbe>
 8005930:	4b77      	ldr	r3, [pc, #476]	@ (8005b10 <UART_SetConfig+0x25c>)
 8005932:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005934:	f003 0303 	and.w	r3, r3, #3
 8005938:	2b03      	cmp	r3, #3
 800593a:	d817      	bhi.n	800596c <UART_SetConfig+0xb8>
 800593c:	a201      	add	r2, pc, #4	@ (adr r2, 8005944 <UART_SetConfig+0x90>)
 800593e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005942:	bf00      	nop
 8005944:	08005955 	.word	0x08005955
 8005948:	08005961 	.word	0x08005961
 800594c:	08005967 	.word	0x08005967
 8005950:	0800595b 	.word	0x0800595b
 8005954:	2300      	movs	r3, #0
 8005956:	77fb      	strb	r3, [r7, #31]
 8005958:	e01d      	b.n	8005996 <UART_SetConfig+0xe2>
 800595a:	2302      	movs	r3, #2
 800595c:	77fb      	strb	r3, [r7, #31]
 800595e:	e01a      	b.n	8005996 <UART_SetConfig+0xe2>
 8005960:	2304      	movs	r3, #4
 8005962:	77fb      	strb	r3, [r7, #31]
 8005964:	e017      	b.n	8005996 <UART_SetConfig+0xe2>
 8005966:	2308      	movs	r3, #8
 8005968:	77fb      	strb	r3, [r7, #31]
 800596a:	e014      	b.n	8005996 <UART_SetConfig+0xe2>
 800596c:	2310      	movs	r3, #16
 800596e:	77fb      	strb	r3, [r7, #31]
 8005970:	e011      	b.n	8005996 <UART_SetConfig+0xe2>
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	4a67      	ldr	r2, [pc, #412]	@ (8005b14 <UART_SetConfig+0x260>)
 8005978:	4293      	cmp	r3, r2
 800597a:	d102      	bne.n	8005982 <UART_SetConfig+0xce>
 800597c:	2300      	movs	r3, #0
 800597e:	77fb      	strb	r3, [r7, #31]
 8005980:	e009      	b.n	8005996 <UART_SetConfig+0xe2>
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	4a64      	ldr	r2, [pc, #400]	@ (8005b18 <UART_SetConfig+0x264>)
 8005988:	4293      	cmp	r3, r2
 800598a:	d102      	bne.n	8005992 <UART_SetConfig+0xde>
 800598c:	2300      	movs	r3, #0
 800598e:	77fb      	strb	r3, [r7, #31]
 8005990:	e001      	b.n	8005996 <UART_SetConfig+0xe2>
 8005992:	2310      	movs	r3, #16
 8005994:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	69db      	ldr	r3, [r3, #28]
 800599a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800599e:	d15a      	bne.n	8005a56 <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 80059a0:	7ffb      	ldrb	r3, [r7, #31]
 80059a2:	2b08      	cmp	r3, #8
 80059a4:	d827      	bhi.n	80059f6 <UART_SetConfig+0x142>
 80059a6:	a201      	add	r2, pc, #4	@ (adr r2, 80059ac <UART_SetConfig+0xf8>)
 80059a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059ac:	080059d1 	.word	0x080059d1
 80059b0:	080059d9 	.word	0x080059d9
 80059b4:	080059e1 	.word	0x080059e1
 80059b8:	080059f7 	.word	0x080059f7
 80059bc:	080059e7 	.word	0x080059e7
 80059c0:	080059f7 	.word	0x080059f7
 80059c4:	080059f7 	.word	0x080059f7
 80059c8:	080059f7 	.word	0x080059f7
 80059cc:	080059ef 	.word	0x080059ef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80059d0:	f7fe f83a 	bl	8003a48 <HAL_RCC_GetPCLK1Freq>
 80059d4:	61b8      	str	r0, [r7, #24]
        break;
 80059d6:	e013      	b.n	8005a00 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80059d8:	f7fe f858 	bl	8003a8c <HAL_RCC_GetPCLK2Freq>
 80059dc:	61b8      	str	r0, [r7, #24]
        break;
 80059de:	e00f      	b.n	8005a00 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80059e0:	4b4e      	ldr	r3, [pc, #312]	@ (8005b1c <UART_SetConfig+0x268>)
 80059e2:	61bb      	str	r3, [r7, #24]
        break;
 80059e4:	e00c      	b.n	8005a00 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80059e6:	f7fd ffcf 	bl	8003988 <HAL_RCC_GetSysClockFreq>
 80059ea:	61b8      	str	r0, [r7, #24]
        break;
 80059ec:	e008      	b.n	8005a00 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80059ee:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80059f2:	61bb      	str	r3, [r7, #24]
        break;
 80059f4:	e004      	b.n	8005a00 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 80059f6:	2300      	movs	r3, #0
 80059f8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80059fa:	2301      	movs	r3, #1
 80059fc:	77bb      	strb	r3, [r7, #30]
        break;
 80059fe:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005a00:	69bb      	ldr	r3, [r7, #24]
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d074      	beq.n	8005af0 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005a06:	69bb      	ldr	r3, [r7, #24]
 8005a08:	005a      	lsls	r2, r3, #1
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	685b      	ldr	r3, [r3, #4]
 8005a0e:	085b      	lsrs	r3, r3, #1
 8005a10:	441a      	add	r2, r3
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	685b      	ldr	r3, [r3, #4]
 8005a16:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a1a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005a1c:	693b      	ldr	r3, [r7, #16]
 8005a1e:	2b0f      	cmp	r3, #15
 8005a20:	d916      	bls.n	8005a50 <UART_SetConfig+0x19c>
 8005a22:	693b      	ldr	r3, [r7, #16]
 8005a24:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005a28:	d212      	bcs.n	8005a50 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005a2a:	693b      	ldr	r3, [r7, #16]
 8005a2c:	b29b      	uxth	r3, r3
 8005a2e:	f023 030f 	bic.w	r3, r3, #15
 8005a32:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005a34:	693b      	ldr	r3, [r7, #16]
 8005a36:	085b      	lsrs	r3, r3, #1
 8005a38:	b29b      	uxth	r3, r3
 8005a3a:	f003 0307 	and.w	r3, r3, #7
 8005a3e:	b29a      	uxth	r2, r3
 8005a40:	89fb      	ldrh	r3, [r7, #14]
 8005a42:	4313      	orrs	r3, r2
 8005a44:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	89fa      	ldrh	r2, [r7, #14]
 8005a4c:	60da      	str	r2, [r3, #12]
 8005a4e:	e04f      	b.n	8005af0 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8005a50:	2301      	movs	r3, #1
 8005a52:	77bb      	strb	r3, [r7, #30]
 8005a54:	e04c      	b.n	8005af0 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005a56:	7ffb      	ldrb	r3, [r7, #31]
 8005a58:	2b08      	cmp	r3, #8
 8005a5a:	d828      	bhi.n	8005aae <UART_SetConfig+0x1fa>
 8005a5c:	a201      	add	r2, pc, #4	@ (adr r2, 8005a64 <UART_SetConfig+0x1b0>)
 8005a5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a62:	bf00      	nop
 8005a64:	08005a89 	.word	0x08005a89
 8005a68:	08005a91 	.word	0x08005a91
 8005a6c:	08005a99 	.word	0x08005a99
 8005a70:	08005aaf 	.word	0x08005aaf
 8005a74:	08005a9f 	.word	0x08005a9f
 8005a78:	08005aaf 	.word	0x08005aaf
 8005a7c:	08005aaf 	.word	0x08005aaf
 8005a80:	08005aaf 	.word	0x08005aaf
 8005a84:	08005aa7 	.word	0x08005aa7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005a88:	f7fd ffde 	bl	8003a48 <HAL_RCC_GetPCLK1Freq>
 8005a8c:	61b8      	str	r0, [r7, #24]
        break;
 8005a8e:	e013      	b.n	8005ab8 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005a90:	f7fd fffc 	bl	8003a8c <HAL_RCC_GetPCLK2Freq>
 8005a94:	61b8      	str	r0, [r7, #24]
        break;
 8005a96:	e00f      	b.n	8005ab8 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005a98:	4b20      	ldr	r3, [pc, #128]	@ (8005b1c <UART_SetConfig+0x268>)
 8005a9a:	61bb      	str	r3, [r7, #24]
        break;
 8005a9c:	e00c      	b.n	8005ab8 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005a9e:	f7fd ff73 	bl	8003988 <HAL_RCC_GetSysClockFreq>
 8005aa2:	61b8      	str	r0, [r7, #24]
        break;
 8005aa4:	e008      	b.n	8005ab8 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005aa6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005aaa:	61bb      	str	r3, [r7, #24]
        break;
 8005aac:	e004      	b.n	8005ab8 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8005aae:	2300      	movs	r3, #0
 8005ab0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005ab2:	2301      	movs	r3, #1
 8005ab4:	77bb      	strb	r3, [r7, #30]
        break;
 8005ab6:	bf00      	nop
    }

    if (pclk != 0U)
 8005ab8:	69bb      	ldr	r3, [r7, #24]
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d018      	beq.n	8005af0 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	685b      	ldr	r3, [r3, #4]
 8005ac2:	085a      	lsrs	r2, r3, #1
 8005ac4:	69bb      	ldr	r3, [r7, #24]
 8005ac6:	441a      	add	r2, r3
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	685b      	ldr	r3, [r3, #4]
 8005acc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ad0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005ad2:	693b      	ldr	r3, [r7, #16]
 8005ad4:	2b0f      	cmp	r3, #15
 8005ad6:	d909      	bls.n	8005aec <UART_SetConfig+0x238>
 8005ad8:	693b      	ldr	r3, [r7, #16]
 8005ada:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005ade:	d205      	bcs.n	8005aec <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005ae0:	693b      	ldr	r3, [r7, #16]
 8005ae2:	b29a      	uxth	r2, r3
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	60da      	str	r2, [r3, #12]
 8005aea:	e001      	b.n	8005af0 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8005aec:	2301      	movs	r3, #1
 8005aee:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	2200      	movs	r2, #0
 8005af4:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	2200      	movs	r2, #0
 8005afa:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8005afc:	7fbb      	ldrb	r3, [r7, #30]
}
 8005afe:	4618      	mov	r0, r3
 8005b00:	3720      	adds	r7, #32
 8005b02:	46bd      	mov	sp, r7
 8005b04:	bd80      	pop	{r7, pc}
 8005b06:	bf00      	nop
 8005b08:	efff69f3 	.word	0xefff69f3
 8005b0c:	40013800 	.word	0x40013800
 8005b10:	40021000 	.word	0x40021000
 8005b14:	40004400 	.word	0x40004400
 8005b18:	40004800 	.word	0x40004800
 8005b1c:	007a1200 	.word	0x007a1200

08005b20 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005b20:	b480      	push	{r7}
 8005b22:	b083      	sub	sp, #12
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b2c:	f003 0308 	and.w	r3, r3, #8
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d00a      	beq.n	8005b4a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	685b      	ldr	r3, [r3, #4]
 8005b3a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	430a      	orrs	r2, r1
 8005b48:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b4e:	f003 0301 	and.w	r3, r3, #1
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d00a      	beq.n	8005b6c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	685b      	ldr	r3, [r3, #4]
 8005b5c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	430a      	orrs	r2, r1
 8005b6a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b70:	f003 0302 	and.w	r3, r3, #2
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d00a      	beq.n	8005b8e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	685b      	ldr	r3, [r3, #4]
 8005b7e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	430a      	orrs	r2, r1
 8005b8c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b92:	f003 0304 	and.w	r3, r3, #4
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d00a      	beq.n	8005bb0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	685b      	ldr	r3, [r3, #4]
 8005ba0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	430a      	orrs	r2, r1
 8005bae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bb4:	f003 0310 	and.w	r3, r3, #16
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d00a      	beq.n	8005bd2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	689b      	ldr	r3, [r3, #8]
 8005bc2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	430a      	orrs	r2, r1
 8005bd0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bd6:	f003 0320 	and.w	r3, r3, #32
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d00a      	beq.n	8005bf4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	689b      	ldr	r3, [r3, #8]
 8005be4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	430a      	orrs	r2, r1
 8005bf2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bf8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d01a      	beq.n	8005c36 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	685b      	ldr	r3, [r3, #4]
 8005c06:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	430a      	orrs	r2, r1
 8005c14:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c1a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005c1e:	d10a      	bne.n	8005c36 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	685b      	ldr	r3, [r3, #4]
 8005c26:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	430a      	orrs	r2, r1
 8005c34:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c3a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d00a      	beq.n	8005c58 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	685b      	ldr	r3, [r3, #4]
 8005c48:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	430a      	orrs	r2, r1
 8005c56:	605a      	str	r2, [r3, #4]
  }
}
 8005c58:	bf00      	nop
 8005c5a:	370c      	adds	r7, #12
 8005c5c:	46bd      	mov	sp, r7
 8005c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c62:	4770      	bx	lr

08005c64 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005c64:	b580      	push	{r7, lr}
 8005c66:	b098      	sub	sp, #96	@ 0x60
 8005c68:	af02      	add	r7, sp, #8
 8005c6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	2200      	movs	r2, #0
 8005c70:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005c74:	f7fc f896 	bl	8001da4 <HAL_GetTick>
 8005c78:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	f003 0308 	and.w	r3, r3, #8
 8005c84:	2b08      	cmp	r3, #8
 8005c86:	d12e      	bne.n	8005ce6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005c88:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005c8c:	9300      	str	r3, [sp, #0]
 8005c8e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005c90:	2200      	movs	r2, #0
 8005c92:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005c96:	6878      	ldr	r0, [r7, #4]
 8005c98:	f000 f88c 	bl	8005db4 <UART_WaitOnFlagUntilTimeout>
 8005c9c:	4603      	mov	r3, r0
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d021      	beq.n	8005ce6 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ca8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005caa:	e853 3f00 	ldrex	r3, [r3]
 8005cae:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005cb0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005cb2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005cb6:	653b      	str	r3, [r7, #80]	@ 0x50
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	461a      	mov	r2, r3
 8005cbe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005cc0:	647b      	str	r3, [r7, #68]	@ 0x44
 8005cc2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cc4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005cc6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005cc8:	e841 2300 	strex	r3, r2, [r1]
 8005ccc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005cce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d1e6      	bne.n	8005ca2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	2220      	movs	r2, #32
 8005cd8:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	2200      	movs	r2, #0
 8005cde:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005ce2:	2303      	movs	r3, #3
 8005ce4:	e062      	b.n	8005dac <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	f003 0304 	and.w	r3, r3, #4
 8005cf0:	2b04      	cmp	r3, #4
 8005cf2:	d149      	bne.n	8005d88 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005cf4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005cf8:	9300      	str	r3, [sp, #0]
 8005cfa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005cfc:	2200      	movs	r2, #0
 8005cfe:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005d02:	6878      	ldr	r0, [r7, #4]
 8005d04:	f000 f856 	bl	8005db4 <UART_WaitOnFlagUntilTimeout>
 8005d08:	4603      	mov	r3, r0
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d03c      	beq.n	8005d88 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d16:	e853 3f00 	ldrex	r3, [r3]
 8005d1a:	623b      	str	r3, [r7, #32]
   return(result);
 8005d1c:	6a3b      	ldr	r3, [r7, #32]
 8005d1e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005d22:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	461a      	mov	r2, r3
 8005d2a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005d2c:	633b      	str	r3, [r7, #48]	@ 0x30
 8005d2e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d30:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005d32:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005d34:	e841 2300 	strex	r3, r2, [r1]
 8005d38:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005d3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d1e6      	bne.n	8005d0e <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	3308      	adds	r3, #8
 8005d46:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d48:	693b      	ldr	r3, [r7, #16]
 8005d4a:	e853 3f00 	ldrex	r3, [r3]
 8005d4e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	f023 0301 	bic.w	r3, r3, #1
 8005d56:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	3308      	adds	r3, #8
 8005d5e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005d60:	61fa      	str	r2, [r7, #28]
 8005d62:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d64:	69b9      	ldr	r1, [r7, #24]
 8005d66:	69fa      	ldr	r2, [r7, #28]
 8005d68:	e841 2300 	strex	r3, r2, [r1]
 8005d6c:	617b      	str	r3, [r7, #20]
   return(result);
 8005d6e:	697b      	ldr	r3, [r7, #20]
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d1e5      	bne.n	8005d40 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	2220      	movs	r2, #32
 8005d78:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	2200      	movs	r2, #0
 8005d80:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005d84:	2303      	movs	r3, #3
 8005d86:	e011      	b.n	8005dac <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	2220      	movs	r2, #32
 8005d8c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	2220      	movs	r2, #32
 8005d92:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	2200      	movs	r2, #0
 8005d9a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	2200      	movs	r2, #0
 8005da0:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	2200      	movs	r2, #0
 8005da6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8005daa:	2300      	movs	r3, #0
}
 8005dac:	4618      	mov	r0, r3
 8005dae:	3758      	adds	r7, #88	@ 0x58
 8005db0:	46bd      	mov	sp, r7
 8005db2:	bd80      	pop	{r7, pc}

08005db4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005db4:	b580      	push	{r7, lr}
 8005db6:	b084      	sub	sp, #16
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	60f8      	str	r0, [r7, #12]
 8005dbc:	60b9      	str	r1, [r7, #8]
 8005dbe:	603b      	str	r3, [r7, #0]
 8005dc0:	4613      	mov	r3, r2
 8005dc2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005dc4:	e04f      	b.n	8005e66 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005dc6:	69bb      	ldr	r3, [r7, #24]
 8005dc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005dcc:	d04b      	beq.n	8005e66 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005dce:	f7fb ffe9 	bl	8001da4 <HAL_GetTick>
 8005dd2:	4602      	mov	r2, r0
 8005dd4:	683b      	ldr	r3, [r7, #0]
 8005dd6:	1ad3      	subs	r3, r2, r3
 8005dd8:	69ba      	ldr	r2, [r7, #24]
 8005dda:	429a      	cmp	r2, r3
 8005ddc:	d302      	bcc.n	8005de4 <UART_WaitOnFlagUntilTimeout+0x30>
 8005dde:	69bb      	ldr	r3, [r7, #24]
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d101      	bne.n	8005de8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005de4:	2303      	movs	r3, #3
 8005de6:	e04e      	b.n	8005e86 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	f003 0304 	and.w	r3, r3, #4
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d037      	beq.n	8005e66 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005df6:	68bb      	ldr	r3, [r7, #8]
 8005df8:	2b80      	cmp	r3, #128	@ 0x80
 8005dfa:	d034      	beq.n	8005e66 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005dfc:	68bb      	ldr	r3, [r7, #8]
 8005dfe:	2b40      	cmp	r3, #64	@ 0x40
 8005e00:	d031      	beq.n	8005e66 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	69db      	ldr	r3, [r3, #28]
 8005e08:	f003 0308 	and.w	r3, r3, #8
 8005e0c:	2b08      	cmp	r3, #8
 8005e0e:	d110      	bne.n	8005e32 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	2208      	movs	r2, #8
 8005e16:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005e18:	68f8      	ldr	r0, [r7, #12]
 8005e1a:	f000 f838 	bl	8005e8e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	2208      	movs	r2, #8
 8005e22:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	2200      	movs	r2, #0
 8005e2a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8005e2e:	2301      	movs	r3, #1
 8005e30:	e029      	b.n	8005e86 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	69db      	ldr	r3, [r3, #28]
 8005e38:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005e3c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005e40:	d111      	bne.n	8005e66 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005e4a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005e4c:	68f8      	ldr	r0, [r7, #12]
 8005e4e:	f000 f81e 	bl	8005e8e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	2220      	movs	r2, #32
 8005e56:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	2200      	movs	r2, #0
 8005e5e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8005e62:	2303      	movs	r3, #3
 8005e64:	e00f      	b.n	8005e86 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	69da      	ldr	r2, [r3, #28]
 8005e6c:	68bb      	ldr	r3, [r7, #8]
 8005e6e:	4013      	ands	r3, r2
 8005e70:	68ba      	ldr	r2, [r7, #8]
 8005e72:	429a      	cmp	r2, r3
 8005e74:	bf0c      	ite	eq
 8005e76:	2301      	moveq	r3, #1
 8005e78:	2300      	movne	r3, #0
 8005e7a:	b2db      	uxtb	r3, r3
 8005e7c:	461a      	mov	r2, r3
 8005e7e:	79fb      	ldrb	r3, [r7, #7]
 8005e80:	429a      	cmp	r2, r3
 8005e82:	d0a0      	beq.n	8005dc6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005e84:	2300      	movs	r3, #0
}
 8005e86:	4618      	mov	r0, r3
 8005e88:	3710      	adds	r7, #16
 8005e8a:	46bd      	mov	sp, r7
 8005e8c:	bd80      	pop	{r7, pc}

08005e8e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005e8e:	b480      	push	{r7}
 8005e90:	b095      	sub	sp, #84	@ 0x54
 8005e92:	af00      	add	r7, sp, #0
 8005e94:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e9c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e9e:	e853 3f00 	ldrex	r3, [r3]
 8005ea2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005ea4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ea6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005eaa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	461a      	mov	r2, r3
 8005eb2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005eb4:	643b      	str	r3, [r7, #64]	@ 0x40
 8005eb6:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005eb8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005eba:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005ebc:	e841 2300 	strex	r3, r2, [r1]
 8005ec0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005ec2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d1e6      	bne.n	8005e96 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	3308      	adds	r3, #8
 8005ece:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ed0:	6a3b      	ldr	r3, [r7, #32]
 8005ed2:	e853 3f00 	ldrex	r3, [r3]
 8005ed6:	61fb      	str	r3, [r7, #28]
   return(result);
 8005ed8:	69fb      	ldr	r3, [r7, #28]
 8005eda:	f023 0301 	bic.w	r3, r3, #1
 8005ede:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	3308      	adds	r3, #8
 8005ee6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005ee8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005eea:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005eec:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005eee:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005ef0:	e841 2300 	strex	r3, r2, [r1]
 8005ef4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005ef6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d1e5      	bne.n	8005ec8 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005f00:	2b01      	cmp	r3, #1
 8005f02:	d118      	bne.n	8005f36 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	e853 3f00 	ldrex	r3, [r3]
 8005f10:	60bb      	str	r3, [r7, #8]
   return(result);
 8005f12:	68bb      	ldr	r3, [r7, #8]
 8005f14:	f023 0310 	bic.w	r3, r3, #16
 8005f18:	647b      	str	r3, [r7, #68]	@ 0x44
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	461a      	mov	r2, r3
 8005f20:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005f22:	61bb      	str	r3, [r7, #24]
 8005f24:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f26:	6979      	ldr	r1, [r7, #20]
 8005f28:	69ba      	ldr	r2, [r7, #24]
 8005f2a:	e841 2300 	strex	r3, r2, [r1]
 8005f2e:	613b      	str	r3, [r7, #16]
   return(result);
 8005f30:	693b      	ldr	r3, [r7, #16]
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d1e6      	bne.n	8005f04 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	2220      	movs	r2, #32
 8005f3a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	2200      	movs	r2, #0
 8005f42:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	2200      	movs	r2, #0
 8005f48:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8005f4a:	bf00      	nop
 8005f4c:	3754      	adds	r7, #84	@ 0x54
 8005f4e:	46bd      	mov	sp, r7
 8005f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f54:	4770      	bx	lr

08005f56 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005f56:	b580      	push	{r7, lr}
 8005f58:	b084      	sub	sp, #16
 8005f5a:	af00      	add	r7, sp, #0
 8005f5c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f62:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	2200      	movs	r2, #0
 8005f68:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	2200      	movs	r2, #0
 8005f70:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005f74:	68f8      	ldr	r0, [r7, #12]
 8005f76:	f7ff fc87 	bl	8005888 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005f7a:	bf00      	nop
 8005f7c:	3710      	adds	r7, #16
 8005f7e:	46bd      	mov	sp, r7
 8005f80:	bd80      	pop	{r7, pc}

08005f82 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005f82:	b580      	push	{r7, lr}
 8005f84:	b088      	sub	sp, #32
 8005f86:	af00      	add	r7, sp, #0
 8005f88:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	e853 3f00 	ldrex	r3, [r3]
 8005f96:	60bb      	str	r3, [r7, #8]
   return(result);
 8005f98:	68bb      	ldr	r3, [r7, #8]
 8005f9a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005f9e:	61fb      	str	r3, [r7, #28]
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	461a      	mov	r2, r3
 8005fa6:	69fb      	ldr	r3, [r7, #28]
 8005fa8:	61bb      	str	r3, [r7, #24]
 8005faa:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fac:	6979      	ldr	r1, [r7, #20]
 8005fae:	69ba      	ldr	r2, [r7, #24]
 8005fb0:	e841 2300 	strex	r3, r2, [r1]
 8005fb4:	613b      	str	r3, [r7, #16]
   return(result);
 8005fb6:	693b      	ldr	r3, [r7, #16]
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d1e6      	bne.n	8005f8a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	2220      	movs	r2, #32
 8005fc0:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	2200      	movs	r2, #0
 8005fc6:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005fc8:	6878      	ldr	r0, [r7, #4]
 8005fca:	f7ff fc53 	bl	8005874 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005fce:	bf00      	nop
 8005fd0:	3720      	adds	r7, #32
 8005fd2:	46bd      	mov	sp, r7
 8005fd4:	bd80      	pop	{r7, pc}

08005fd6 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005fd6:	b480      	push	{r7}
 8005fd8:	b083      	sub	sp, #12
 8005fda:	af00      	add	r7, sp, #0
 8005fdc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005fde:	bf00      	nop
 8005fe0:	370c      	adds	r7, #12
 8005fe2:	46bd      	mov	sp, r7
 8005fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe8:	4770      	bx	lr
	...

08005fec <siprintf>:
 8005fec:	b40e      	push	{r1, r2, r3}
 8005fee:	b500      	push	{lr}
 8005ff0:	b09c      	sub	sp, #112	@ 0x70
 8005ff2:	ab1d      	add	r3, sp, #116	@ 0x74
 8005ff4:	9002      	str	r0, [sp, #8]
 8005ff6:	9006      	str	r0, [sp, #24]
 8005ff8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8005ffc:	4809      	ldr	r0, [pc, #36]	@ (8006024 <siprintf+0x38>)
 8005ffe:	9107      	str	r1, [sp, #28]
 8006000:	9104      	str	r1, [sp, #16]
 8006002:	4909      	ldr	r1, [pc, #36]	@ (8006028 <siprintf+0x3c>)
 8006004:	f853 2b04 	ldr.w	r2, [r3], #4
 8006008:	9105      	str	r1, [sp, #20]
 800600a:	6800      	ldr	r0, [r0, #0]
 800600c:	9301      	str	r3, [sp, #4]
 800600e:	a902      	add	r1, sp, #8
 8006010:	f000 f9a4 	bl	800635c <_svfiprintf_r>
 8006014:	9b02      	ldr	r3, [sp, #8]
 8006016:	2200      	movs	r2, #0
 8006018:	701a      	strb	r2, [r3, #0]
 800601a:	b01c      	add	sp, #112	@ 0x70
 800601c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006020:	b003      	add	sp, #12
 8006022:	4770      	bx	lr
 8006024:	2000000c 	.word	0x2000000c
 8006028:	ffff0208 	.word	0xffff0208

0800602c <memset>:
 800602c:	4402      	add	r2, r0
 800602e:	4603      	mov	r3, r0
 8006030:	4293      	cmp	r3, r2
 8006032:	d100      	bne.n	8006036 <memset+0xa>
 8006034:	4770      	bx	lr
 8006036:	f803 1b01 	strb.w	r1, [r3], #1
 800603a:	e7f9      	b.n	8006030 <memset+0x4>

0800603c <strcat>:
 800603c:	b510      	push	{r4, lr}
 800603e:	4602      	mov	r2, r0
 8006040:	7814      	ldrb	r4, [r2, #0]
 8006042:	4613      	mov	r3, r2
 8006044:	3201      	adds	r2, #1
 8006046:	2c00      	cmp	r4, #0
 8006048:	d1fa      	bne.n	8006040 <strcat+0x4>
 800604a:	3b01      	subs	r3, #1
 800604c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006050:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006054:	2a00      	cmp	r2, #0
 8006056:	d1f9      	bne.n	800604c <strcat+0x10>
 8006058:	bd10      	pop	{r4, pc}
	...

0800605c <__errno>:
 800605c:	4b01      	ldr	r3, [pc, #4]	@ (8006064 <__errno+0x8>)
 800605e:	6818      	ldr	r0, [r3, #0]
 8006060:	4770      	bx	lr
 8006062:	bf00      	nop
 8006064:	2000000c 	.word	0x2000000c

08006068 <__libc_init_array>:
 8006068:	b570      	push	{r4, r5, r6, lr}
 800606a:	4d0d      	ldr	r5, [pc, #52]	@ (80060a0 <__libc_init_array+0x38>)
 800606c:	4c0d      	ldr	r4, [pc, #52]	@ (80060a4 <__libc_init_array+0x3c>)
 800606e:	1b64      	subs	r4, r4, r5
 8006070:	10a4      	asrs	r4, r4, #2
 8006072:	2600      	movs	r6, #0
 8006074:	42a6      	cmp	r6, r4
 8006076:	d109      	bne.n	800608c <__libc_init_array+0x24>
 8006078:	4d0b      	ldr	r5, [pc, #44]	@ (80060a8 <__libc_init_array+0x40>)
 800607a:	4c0c      	ldr	r4, [pc, #48]	@ (80060ac <__libc_init_array+0x44>)
 800607c:	f000 fc66 	bl	800694c <_init>
 8006080:	1b64      	subs	r4, r4, r5
 8006082:	10a4      	asrs	r4, r4, #2
 8006084:	2600      	movs	r6, #0
 8006086:	42a6      	cmp	r6, r4
 8006088:	d105      	bne.n	8006096 <__libc_init_array+0x2e>
 800608a:	bd70      	pop	{r4, r5, r6, pc}
 800608c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006090:	4798      	blx	r3
 8006092:	3601      	adds	r6, #1
 8006094:	e7ee      	b.n	8006074 <__libc_init_array+0xc>
 8006096:	f855 3b04 	ldr.w	r3, [r5], #4
 800609a:	4798      	blx	r3
 800609c:	3601      	adds	r6, #1
 800609e:	e7f2      	b.n	8006086 <__libc_init_array+0x1e>
 80060a0:	08007454 	.word	0x08007454
 80060a4:	08007454 	.word	0x08007454
 80060a8:	08007454 	.word	0x08007454
 80060ac:	08007458 	.word	0x08007458

080060b0 <__retarget_lock_acquire_recursive>:
 80060b0:	4770      	bx	lr

080060b2 <__retarget_lock_release_recursive>:
 80060b2:	4770      	bx	lr

080060b4 <_free_r>:
 80060b4:	b538      	push	{r3, r4, r5, lr}
 80060b6:	4605      	mov	r5, r0
 80060b8:	2900      	cmp	r1, #0
 80060ba:	d041      	beq.n	8006140 <_free_r+0x8c>
 80060bc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80060c0:	1f0c      	subs	r4, r1, #4
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	bfb8      	it	lt
 80060c6:	18e4      	addlt	r4, r4, r3
 80060c8:	f000 f8e0 	bl	800628c <__malloc_lock>
 80060cc:	4a1d      	ldr	r2, [pc, #116]	@ (8006144 <_free_r+0x90>)
 80060ce:	6813      	ldr	r3, [r2, #0]
 80060d0:	b933      	cbnz	r3, 80060e0 <_free_r+0x2c>
 80060d2:	6063      	str	r3, [r4, #4]
 80060d4:	6014      	str	r4, [r2, #0]
 80060d6:	4628      	mov	r0, r5
 80060d8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80060dc:	f000 b8dc 	b.w	8006298 <__malloc_unlock>
 80060e0:	42a3      	cmp	r3, r4
 80060e2:	d908      	bls.n	80060f6 <_free_r+0x42>
 80060e4:	6820      	ldr	r0, [r4, #0]
 80060e6:	1821      	adds	r1, r4, r0
 80060e8:	428b      	cmp	r3, r1
 80060ea:	bf01      	itttt	eq
 80060ec:	6819      	ldreq	r1, [r3, #0]
 80060ee:	685b      	ldreq	r3, [r3, #4]
 80060f0:	1809      	addeq	r1, r1, r0
 80060f2:	6021      	streq	r1, [r4, #0]
 80060f4:	e7ed      	b.n	80060d2 <_free_r+0x1e>
 80060f6:	461a      	mov	r2, r3
 80060f8:	685b      	ldr	r3, [r3, #4]
 80060fa:	b10b      	cbz	r3, 8006100 <_free_r+0x4c>
 80060fc:	42a3      	cmp	r3, r4
 80060fe:	d9fa      	bls.n	80060f6 <_free_r+0x42>
 8006100:	6811      	ldr	r1, [r2, #0]
 8006102:	1850      	adds	r0, r2, r1
 8006104:	42a0      	cmp	r0, r4
 8006106:	d10b      	bne.n	8006120 <_free_r+0x6c>
 8006108:	6820      	ldr	r0, [r4, #0]
 800610a:	4401      	add	r1, r0
 800610c:	1850      	adds	r0, r2, r1
 800610e:	4283      	cmp	r3, r0
 8006110:	6011      	str	r1, [r2, #0]
 8006112:	d1e0      	bne.n	80060d6 <_free_r+0x22>
 8006114:	6818      	ldr	r0, [r3, #0]
 8006116:	685b      	ldr	r3, [r3, #4]
 8006118:	6053      	str	r3, [r2, #4]
 800611a:	4408      	add	r0, r1
 800611c:	6010      	str	r0, [r2, #0]
 800611e:	e7da      	b.n	80060d6 <_free_r+0x22>
 8006120:	d902      	bls.n	8006128 <_free_r+0x74>
 8006122:	230c      	movs	r3, #12
 8006124:	602b      	str	r3, [r5, #0]
 8006126:	e7d6      	b.n	80060d6 <_free_r+0x22>
 8006128:	6820      	ldr	r0, [r4, #0]
 800612a:	1821      	adds	r1, r4, r0
 800612c:	428b      	cmp	r3, r1
 800612e:	bf04      	itt	eq
 8006130:	6819      	ldreq	r1, [r3, #0]
 8006132:	685b      	ldreq	r3, [r3, #4]
 8006134:	6063      	str	r3, [r4, #4]
 8006136:	bf04      	itt	eq
 8006138:	1809      	addeq	r1, r1, r0
 800613a:	6021      	streq	r1, [r4, #0]
 800613c:	6054      	str	r4, [r2, #4]
 800613e:	e7ca      	b.n	80060d6 <_free_r+0x22>
 8006140:	bd38      	pop	{r3, r4, r5, pc}
 8006142:	bf00      	nop
 8006144:	20000db0 	.word	0x20000db0

08006148 <sbrk_aligned>:
 8006148:	b570      	push	{r4, r5, r6, lr}
 800614a:	4e0f      	ldr	r6, [pc, #60]	@ (8006188 <sbrk_aligned+0x40>)
 800614c:	460c      	mov	r4, r1
 800614e:	6831      	ldr	r1, [r6, #0]
 8006150:	4605      	mov	r5, r0
 8006152:	b911      	cbnz	r1, 800615a <sbrk_aligned+0x12>
 8006154:	f000 fba6 	bl	80068a4 <_sbrk_r>
 8006158:	6030      	str	r0, [r6, #0]
 800615a:	4621      	mov	r1, r4
 800615c:	4628      	mov	r0, r5
 800615e:	f000 fba1 	bl	80068a4 <_sbrk_r>
 8006162:	1c43      	adds	r3, r0, #1
 8006164:	d103      	bne.n	800616e <sbrk_aligned+0x26>
 8006166:	f04f 34ff 	mov.w	r4, #4294967295
 800616a:	4620      	mov	r0, r4
 800616c:	bd70      	pop	{r4, r5, r6, pc}
 800616e:	1cc4      	adds	r4, r0, #3
 8006170:	f024 0403 	bic.w	r4, r4, #3
 8006174:	42a0      	cmp	r0, r4
 8006176:	d0f8      	beq.n	800616a <sbrk_aligned+0x22>
 8006178:	1a21      	subs	r1, r4, r0
 800617a:	4628      	mov	r0, r5
 800617c:	f000 fb92 	bl	80068a4 <_sbrk_r>
 8006180:	3001      	adds	r0, #1
 8006182:	d1f2      	bne.n	800616a <sbrk_aligned+0x22>
 8006184:	e7ef      	b.n	8006166 <sbrk_aligned+0x1e>
 8006186:	bf00      	nop
 8006188:	20000dac 	.word	0x20000dac

0800618c <_malloc_r>:
 800618c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006190:	1ccd      	adds	r5, r1, #3
 8006192:	f025 0503 	bic.w	r5, r5, #3
 8006196:	3508      	adds	r5, #8
 8006198:	2d0c      	cmp	r5, #12
 800619a:	bf38      	it	cc
 800619c:	250c      	movcc	r5, #12
 800619e:	2d00      	cmp	r5, #0
 80061a0:	4606      	mov	r6, r0
 80061a2:	db01      	blt.n	80061a8 <_malloc_r+0x1c>
 80061a4:	42a9      	cmp	r1, r5
 80061a6:	d904      	bls.n	80061b2 <_malloc_r+0x26>
 80061a8:	230c      	movs	r3, #12
 80061aa:	6033      	str	r3, [r6, #0]
 80061ac:	2000      	movs	r0, #0
 80061ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80061b2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006288 <_malloc_r+0xfc>
 80061b6:	f000 f869 	bl	800628c <__malloc_lock>
 80061ba:	f8d8 3000 	ldr.w	r3, [r8]
 80061be:	461c      	mov	r4, r3
 80061c0:	bb44      	cbnz	r4, 8006214 <_malloc_r+0x88>
 80061c2:	4629      	mov	r1, r5
 80061c4:	4630      	mov	r0, r6
 80061c6:	f7ff ffbf 	bl	8006148 <sbrk_aligned>
 80061ca:	1c43      	adds	r3, r0, #1
 80061cc:	4604      	mov	r4, r0
 80061ce:	d158      	bne.n	8006282 <_malloc_r+0xf6>
 80061d0:	f8d8 4000 	ldr.w	r4, [r8]
 80061d4:	4627      	mov	r7, r4
 80061d6:	2f00      	cmp	r7, #0
 80061d8:	d143      	bne.n	8006262 <_malloc_r+0xd6>
 80061da:	2c00      	cmp	r4, #0
 80061dc:	d04b      	beq.n	8006276 <_malloc_r+0xea>
 80061de:	6823      	ldr	r3, [r4, #0]
 80061e0:	4639      	mov	r1, r7
 80061e2:	4630      	mov	r0, r6
 80061e4:	eb04 0903 	add.w	r9, r4, r3
 80061e8:	f000 fb5c 	bl	80068a4 <_sbrk_r>
 80061ec:	4581      	cmp	r9, r0
 80061ee:	d142      	bne.n	8006276 <_malloc_r+0xea>
 80061f0:	6821      	ldr	r1, [r4, #0]
 80061f2:	1a6d      	subs	r5, r5, r1
 80061f4:	4629      	mov	r1, r5
 80061f6:	4630      	mov	r0, r6
 80061f8:	f7ff ffa6 	bl	8006148 <sbrk_aligned>
 80061fc:	3001      	adds	r0, #1
 80061fe:	d03a      	beq.n	8006276 <_malloc_r+0xea>
 8006200:	6823      	ldr	r3, [r4, #0]
 8006202:	442b      	add	r3, r5
 8006204:	6023      	str	r3, [r4, #0]
 8006206:	f8d8 3000 	ldr.w	r3, [r8]
 800620a:	685a      	ldr	r2, [r3, #4]
 800620c:	bb62      	cbnz	r2, 8006268 <_malloc_r+0xdc>
 800620e:	f8c8 7000 	str.w	r7, [r8]
 8006212:	e00f      	b.n	8006234 <_malloc_r+0xa8>
 8006214:	6822      	ldr	r2, [r4, #0]
 8006216:	1b52      	subs	r2, r2, r5
 8006218:	d420      	bmi.n	800625c <_malloc_r+0xd0>
 800621a:	2a0b      	cmp	r2, #11
 800621c:	d917      	bls.n	800624e <_malloc_r+0xc2>
 800621e:	1961      	adds	r1, r4, r5
 8006220:	42a3      	cmp	r3, r4
 8006222:	6025      	str	r5, [r4, #0]
 8006224:	bf18      	it	ne
 8006226:	6059      	strne	r1, [r3, #4]
 8006228:	6863      	ldr	r3, [r4, #4]
 800622a:	bf08      	it	eq
 800622c:	f8c8 1000 	streq.w	r1, [r8]
 8006230:	5162      	str	r2, [r4, r5]
 8006232:	604b      	str	r3, [r1, #4]
 8006234:	4630      	mov	r0, r6
 8006236:	f000 f82f 	bl	8006298 <__malloc_unlock>
 800623a:	f104 000b 	add.w	r0, r4, #11
 800623e:	1d23      	adds	r3, r4, #4
 8006240:	f020 0007 	bic.w	r0, r0, #7
 8006244:	1ac2      	subs	r2, r0, r3
 8006246:	bf1c      	itt	ne
 8006248:	1a1b      	subne	r3, r3, r0
 800624a:	50a3      	strne	r3, [r4, r2]
 800624c:	e7af      	b.n	80061ae <_malloc_r+0x22>
 800624e:	6862      	ldr	r2, [r4, #4]
 8006250:	42a3      	cmp	r3, r4
 8006252:	bf0c      	ite	eq
 8006254:	f8c8 2000 	streq.w	r2, [r8]
 8006258:	605a      	strne	r2, [r3, #4]
 800625a:	e7eb      	b.n	8006234 <_malloc_r+0xa8>
 800625c:	4623      	mov	r3, r4
 800625e:	6864      	ldr	r4, [r4, #4]
 8006260:	e7ae      	b.n	80061c0 <_malloc_r+0x34>
 8006262:	463c      	mov	r4, r7
 8006264:	687f      	ldr	r7, [r7, #4]
 8006266:	e7b6      	b.n	80061d6 <_malloc_r+0x4a>
 8006268:	461a      	mov	r2, r3
 800626a:	685b      	ldr	r3, [r3, #4]
 800626c:	42a3      	cmp	r3, r4
 800626e:	d1fb      	bne.n	8006268 <_malloc_r+0xdc>
 8006270:	2300      	movs	r3, #0
 8006272:	6053      	str	r3, [r2, #4]
 8006274:	e7de      	b.n	8006234 <_malloc_r+0xa8>
 8006276:	230c      	movs	r3, #12
 8006278:	6033      	str	r3, [r6, #0]
 800627a:	4630      	mov	r0, r6
 800627c:	f000 f80c 	bl	8006298 <__malloc_unlock>
 8006280:	e794      	b.n	80061ac <_malloc_r+0x20>
 8006282:	6005      	str	r5, [r0, #0]
 8006284:	e7d6      	b.n	8006234 <_malloc_r+0xa8>
 8006286:	bf00      	nop
 8006288:	20000db0 	.word	0x20000db0

0800628c <__malloc_lock>:
 800628c:	4801      	ldr	r0, [pc, #4]	@ (8006294 <__malloc_lock+0x8>)
 800628e:	f7ff bf0f 	b.w	80060b0 <__retarget_lock_acquire_recursive>
 8006292:	bf00      	nop
 8006294:	20000da8 	.word	0x20000da8

08006298 <__malloc_unlock>:
 8006298:	4801      	ldr	r0, [pc, #4]	@ (80062a0 <__malloc_unlock+0x8>)
 800629a:	f7ff bf0a 	b.w	80060b2 <__retarget_lock_release_recursive>
 800629e:	bf00      	nop
 80062a0:	20000da8 	.word	0x20000da8

080062a4 <__ssputs_r>:
 80062a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80062a8:	688e      	ldr	r6, [r1, #8]
 80062aa:	461f      	mov	r7, r3
 80062ac:	42be      	cmp	r6, r7
 80062ae:	680b      	ldr	r3, [r1, #0]
 80062b0:	4682      	mov	sl, r0
 80062b2:	460c      	mov	r4, r1
 80062b4:	4690      	mov	r8, r2
 80062b6:	d82d      	bhi.n	8006314 <__ssputs_r+0x70>
 80062b8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80062bc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80062c0:	d026      	beq.n	8006310 <__ssputs_r+0x6c>
 80062c2:	6965      	ldr	r5, [r4, #20]
 80062c4:	6909      	ldr	r1, [r1, #16]
 80062c6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80062ca:	eba3 0901 	sub.w	r9, r3, r1
 80062ce:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80062d2:	1c7b      	adds	r3, r7, #1
 80062d4:	444b      	add	r3, r9
 80062d6:	106d      	asrs	r5, r5, #1
 80062d8:	429d      	cmp	r5, r3
 80062da:	bf38      	it	cc
 80062dc:	461d      	movcc	r5, r3
 80062de:	0553      	lsls	r3, r2, #21
 80062e0:	d527      	bpl.n	8006332 <__ssputs_r+0x8e>
 80062e2:	4629      	mov	r1, r5
 80062e4:	f7ff ff52 	bl	800618c <_malloc_r>
 80062e8:	4606      	mov	r6, r0
 80062ea:	b360      	cbz	r0, 8006346 <__ssputs_r+0xa2>
 80062ec:	6921      	ldr	r1, [r4, #16]
 80062ee:	464a      	mov	r2, r9
 80062f0:	f000 fae8 	bl	80068c4 <memcpy>
 80062f4:	89a3      	ldrh	r3, [r4, #12]
 80062f6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80062fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80062fe:	81a3      	strh	r3, [r4, #12]
 8006300:	6126      	str	r6, [r4, #16]
 8006302:	6165      	str	r5, [r4, #20]
 8006304:	444e      	add	r6, r9
 8006306:	eba5 0509 	sub.w	r5, r5, r9
 800630a:	6026      	str	r6, [r4, #0]
 800630c:	60a5      	str	r5, [r4, #8]
 800630e:	463e      	mov	r6, r7
 8006310:	42be      	cmp	r6, r7
 8006312:	d900      	bls.n	8006316 <__ssputs_r+0x72>
 8006314:	463e      	mov	r6, r7
 8006316:	6820      	ldr	r0, [r4, #0]
 8006318:	4632      	mov	r2, r6
 800631a:	4641      	mov	r1, r8
 800631c:	f000 faa8 	bl	8006870 <memmove>
 8006320:	68a3      	ldr	r3, [r4, #8]
 8006322:	1b9b      	subs	r3, r3, r6
 8006324:	60a3      	str	r3, [r4, #8]
 8006326:	6823      	ldr	r3, [r4, #0]
 8006328:	4433      	add	r3, r6
 800632a:	6023      	str	r3, [r4, #0]
 800632c:	2000      	movs	r0, #0
 800632e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006332:	462a      	mov	r2, r5
 8006334:	f000 fad4 	bl	80068e0 <_realloc_r>
 8006338:	4606      	mov	r6, r0
 800633a:	2800      	cmp	r0, #0
 800633c:	d1e0      	bne.n	8006300 <__ssputs_r+0x5c>
 800633e:	6921      	ldr	r1, [r4, #16]
 8006340:	4650      	mov	r0, sl
 8006342:	f7ff feb7 	bl	80060b4 <_free_r>
 8006346:	230c      	movs	r3, #12
 8006348:	f8ca 3000 	str.w	r3, [sl]
 800634c:	89a3      	ldrh	r3, [r4, #12]
 800634e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006352:	81a3      	strh	r3, [r4, #12]
 8006354:	f04f 30ff 	mov.w	r0, #4294967295
 8006358:	e7e9      	b.n	800632e <__ssputs_r+0x8a>
	...

0800635c <_svfiprintf_r>:
 800635c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006360:	4698      	mov	r8, r3
 8006362:	898b      	ldrh	r3, [r1, #12]
 8006364:	061b      	lsls	r3, r3, #24
 8006366:	b09d      	sub	sp, #116	@ 0x74
 8006368:	4607      	mov	r7, r0
 800636a:	460d      	mov	r5, r1
 800636c:	4614      	mov	r4, r2
 800636e:	d510      	bpl.n	8006392 <_svfiprintf_r+0x36>
 8006370:	690b      	ldr	r3, [r1, #16]
 8006372:	b973      	cbnz	r3, 8006392 <_svfiprintf_r+0x36>
 8006374:	2140      	movs	r1, #64	@ 0x40
 8006376:	f7ff ff09 	bl	800618c <_malloc_r>
 800637a:	6028      	str	r0, [r5, #0]
 800637c:	6128      	str	r0, [r5, #16]
 800637e:	b930      	cbnz	r0, 800638e <_svfiprintf_r+0x32>
 8006380:	230c      	movs	r3, #12
 8006382:	603b      	str	r3, [r7, #0]
 8006384:	f04f 30ff 	mov.w	r0, #4294967295
 8006388:	b01d      	add	sp, #116	@ 0x74
 800638a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800638e:	2340      	movs	r3, #64	@ 0x40
 8006390:	616b      	str	r3, [r5, #20]
 8006392:	2300      	movs	r3, #0
 8006394:	9309      	str	r3, [sp, #36]	@ 0x24
 8006396:	2320      	movs	r3, #32
 8006398:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800639c:	f8cd 800c 	str.w	r8, [sp, #12]
 80063a0:	2330      	movs	r3, #48	@ 0x30
 80063a2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8006540 <_svfiprintf_r+0x1e4>
 80063a6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80063aa:	f04f 0901 	mov.w	r9, #1
 80063ae:	4623      	mov	r3, r4
 80063b0:	469a      	mov	sl, r3
 80063b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80063b6:	b10a      	cbz	r2, 80063bc <_svfiprintf_r+0x60>
 80063b8:	2a25      	cmp	r2, #37	@ 0x25
 80063ba:	d1f9      	bne.n	80063b0 <_svfiprintf_r+0x54>
 80063bc:	ebba 0b04 	subs.w	fp, sl, r4
 80063c0:	d00b      	beq.n	80063da <_svfiprintf_r+0x7e>
 80063c2:	465b      	mov	r3, fp
 80063c4:	4622      	mov	r2, r4
 80063c6:	4629      	mov	r1, r5
 80063c8:	4638      	mov	r0, r7
 80063ca:	f7ff ff6b 	bl	80062a4 <__ssputs_r>
 80063ce:	3001      	adds	r0, #1
 80063d0:	f000 80a7 	beq.w	8006522 <_svfiprintf_r+0x1c6>
 80063d4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80063d6:	445a      	add	r2, fp
 80063d8:	9209      	str	r2, [sp, #36]	@ 0x24
 80063da:	f89a 3000 	ldrb.w	r3, [sl]
 80063de:	2b00      	cmp	r3, #0
 80063e0:	f000 809f 	beq.w	8006522 <_svfiprintf_r+0x1c6>
 80063e4:	2300      	movs	r3, #0
 80063e6:	f04f 32ff 	mov.w	r2, #4294967295
 80063ea:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80063ee:	f10a 0a01 	add.w	sl, sl, #1
 80063f2:	9304      	str	r3, [sp, #16]
 80063f4:	9307      	str	r3, [sp, #28]
 80063f6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80063fa:	931a      	str	r3, [sp, #104]	@ 0x68
 80063fc:	4654      	mov	r4, sl
 80063fe:	2205      	movs	r2, #5
 8006400:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006404:	484e      	ldr	r0, [pc, #312]	@ (8006540 <_svfiprintf_r+0x1e4>)
 8006406:	f7f9 fefb 	bl	8000200 <memchr>
 800640a:	9a04      	ldr	r2, [sp, #16]
 800640c:	b9d8      	cbnz	r0, 8006446 <_svfiprintf_r+0xea>
 800640e:	06d0      	lsls	r0, r2, #27
 8006410:	bf44      	itt	mi
 8006412:	2320      	movmi	r3, #32
 8006414:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006418:	0711      	lsls	r1, r2, #28
 800641a:	bf44      	itt	mi
 800641c:	232b      	movmi	r3, #43	@ 0x2b
 800641e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006422:	f89a 3000 	ldrb.w	r3, [sl]
 8006426:	2b2a      	cmp	r3, #42	@ 0x2a
 8006428:	d015      	beq.n	8006456 <_svfiprintf_r+0xfa>
 800642a:	9a07      	ldr	r2, [sp, #28]
 800642c:	4654      	mov	r4, sl
 800642e:	2000      	movs	r0, #0
 8006430:	f04f 0c0a 	mov.w	ip, #10
 8006434:	4621      	mov	r1, r4
 8006436:	f811 3b01 	ldrb.w	r3, [r1], #1
 800643a:	3b30      	subs	r3, #48	@ 0x30
 800643c:	2b09      	cmp	r3, #9
 800643e:	d94b      	bls.n	80064d8 <_svfiprintf_r+0x17c>
 8006440:	b1b0      	cbz	r0, 8006470 <_svfiprintf_r+0x114>
 8006442:	9207      	str	r2, [sp, #28]
 8006444:	e014      	b.n	8006470 <_svfiprintf_r+0x114>
 8006446:	eba0 0308 	sub.w	r3, r0, r8
 800644a:	fa09 f303 	lsl.w	r3, r9, r3
 800644e:	4313      	orrs	r3, r2
 8006450:	9304      	str	r3, [sp, #16]
 8006452:	46a2      	mov	sl, r4
 8006454:	e7d2      	b.n	80063fc <_svfiprintf_r+0xa0>
 8006456:	9b03      	ldr	r3, [sp, #12]
 8006458:	1d19      	adds	r1, r3, #4
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	9103      	str	r1, [sp, #12]
 800645e:	2b00      	cmp	r3, #0
 8006460:	bfbb      	ittet	lt
 8006462:	425b      	neglt	r3, r3
 8006464:	f042 0202 	orrlt.w	r2, r2, #2
 8006468:	9307      	strge	r3, [sp, #28]
 800646a:	9307      	strlt	r3, [sp, #28]
 800646c:	bfb8      	it	lt
 800646e:	9204      	strlt	r2, [sp, #16]
 8006470:	7823      	ldrb	r3, [r4, #0]
 8006472:	2b2e      	cmp	r3, #46	@ 0x2e
 8006474:	d10a      	bne.n	800648c <_svfiprintf_r+0x130>
 8006476:	7863      	ldrb	r3, [r4, #1]
 8006478:	2b2a      	cmp	r3, #42	@ 0x2a
 800647a:	d132      	bne.n	80064e2 <_svfiprintf_r+0x186>
 800647c:	9b03      	ldr	r3, [sp, #12]
 800647e:	1d1a      	adds	r2, r3, #4
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	9203      	str	r2, [sp, #12]
 8006484:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006488:	3402      	adds	r4, #2
 800648a:	9305      	str	r3, [sp, #20]
 800648c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8006550 <_svfiprintf_r+0x1f4>
 8006490:	7821      	ldrb	r1, [r4, #0]
 8006492:	2203      	movs	r2, #3
 8006494:	4650      	mov	r0, sl
 8006496:	f7f9 feb3 	bl	8000200 <memchr>
 800649a:	b138      	cbz	r0, 80064ac <_svfiprintf_r+0x150>
 800649c:	9b04      	ldr	r3, [sp, #16]
 800649e:	eba0 000a 	sub.w	r0, r0, sl
 80064a2:	2240      	movs	r2, #64	@ 0x40
 80064a4:	4082      	lsls	r2, r0
 80064a6:	4313      	orrs	r3, r2
 80064a8:	3401      	adds	r4, #1
 80064aa:	9304      	str	r3, [sp, #16]
 80064ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80064b0:	4824      	ldr	r0, [pc, #144]	@ (8006544 <_svfiprintf_r+0x1e8>)
 80064b2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80064b6:	2206      	movs	r2, #6
 80064b8:	f7f9 fea2 	bl	8000200 <memchr>
 80064bc:	2800      	cmp	r0, #0
 80064be:	d036      	beq.n	800652e <_svfiprintf_r+0x1d2>
 80064c0:	4b21      	ldr	r3, [pc, #132]	@ (8006548 <_svfiprintf_r+0x1ec>)
 80064c2:	bb1b      	cbnz	r3, 800650c <_svfiprintf_r+0x1b0>
 80064c4:	9b03      	ldr	r3, [sp, #12]
 80064c6:	3307      	adds	r3, #7
 80064c8:	f023 0307 	bic.w	r3, r3, #7
 80064cc:	3308      	adds	r3, #8
 80064ce:	9303      	str	r3, [sp, #12]
 80064d0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80064d2:	4433      	add	r3, r6
 80064d4:	9309      	str	r3, [sp, #36]	@ 0x24
 80064d6:	e76a      	b.n	80063ae <_svfiprintf_r+0x52>
 80064d8:	fb0c 3202 	mla	r2, ip, r2, r3
 80064dc:	460c      	mov	r4, r1
 80064de:	2001      	movs	r0, #1
 80064e0:	e7a8      	b.n	8006434 <_svfiprintf_r+0xd8>
 80064e2:	2300      	movs	r3, #0
 80064e4:	3401      	adds	r4, #1
 80064e6:	9305      	str	r3, [sp, #20]
 80064e8:	4619      	mov	r1, r3
 80064ea:	f04f 0c0a 	mov.w	ip, #10
 80064ee:	4620      	mov	r0, r4
 80064f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80064f4:	3a30      	subs	r2, #48	@ 0x30
 80064f6:	2a09      	cmp	r2, #9
 80064f8:	d903      	bls.n	8006502 <_svfiprintf_r+0x1a6>
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d0c6      	beq.n	800648c <_svfiprintf_r+0x130>
 80064fe:	9105      	str	r1, [sp, #20]
 8006500:	e7c4      	b.n	800648c <_svfiprintf_r+0x130>
 8006502:	fb0c 2101 	mla	r1, ip, r1, r2
 8006506:	4604      	mov	r4, r0
 8006508:	2301      	movs	r3, #1
 800650a:	e7f0      	b.n	80064ee <_svfiprintf_r+0x192>
 800650c:	ab03      	add	r3, sp, #12
 800650e:	9300      	str	r3, [sp, #0]
 8006510:	462a      	mov	r2, r5
 8006512:	4b0e      	ldr	r3, [pc, #56]	@ (800654c <_svfiprintf_r+0x1f0>)
 8006514:	a904      	add	r1, sp, #16
 8006516:	4638      	mov	r0, r7
 8006518:	f3af 8000 	nop.w
 800651c:	1c42      	adds	r2, r0, #1
 800651e:	4606      	mov	r6, r0
 8006520:	d1d6      	bne.n	80064d0 <_svfiprintf_r+0x174>
 8006522:	89ab      	ldrh	r3, [r5, #12]
 8006524:	065b      	lsls	r3, r3, #25
 8006526:	f53f af2d 	bmi.w	8006384 <_svfiprintf_r+0x28>
 800652a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800652c:	e72c      	b.n	8006388 <_svfiprintf_r+0x2c>
 800652e:	ab03      	add	r3, sp, #12
 8006530:	9300      	str	r3, [sp, #0]
 8006532:	462a      	mov	r2, r5
 8006534:	4b05      	ldr	r3, [pc, #20]	@ (800654c <_svfiprintf_r+0x1f0>)
 8006536:	a904      	add	r1, sp, #16
 8006538:	4638      	mov	r0, r7
 800653a:	f000 f879 	bl	8006630 <_printf_i>
 800653e:	e7ed      	b.n	800651c <_svfiprintf_r+0x1c0>
 8006540:	08007418 	.word	0x08007418
 8006544:	08007422 	.word	0x08007422
 8006548:	00000000 	.word	0x00000000
 800654c:	080062a5 	.word	0x080062a5
 8006550:	0800741e 	.word	0x0800741e

08006554 <_printf_common>:
 8006554:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006558:	4616      	mov	r6, r2
 800655a:	4698      	mov	r8, r3
 800655c:	688a      	ldr	r2, [r1, #8]
 800655e:	690b      	ldr	r3, [r1, #16]
 8006560:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006564:	4293      	cmp	r3, r2
 8006566:	bfb8      	it	lt
 8006568:	4613      	movlt	r3, r2
 800656a:	6033      	str	r3, [r6, #0]
 800656c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006570:	4607      	mov	r7, r0
 8006572:	460c      	mov	r4, r1
 8006574:	b10a      	cbz	r2, 800657a <_printf_common+0x26>
 8006576:	3301      	adds	r3, #1
 8006578:	6033      	str	r3, [r6, #0]
 800657a:	6823      	ldr	r3, [r4, #0]
 800657c:	0699      	lsls	r1, r3, #26
 800657e:	bf42      	ittt	mi
 8006580:	6833      	ldrmi	r3, [r6, #0]
 8006582:	3302      	addmi	r3, #2
 8006584:	6033      	strmi	r3, [r6, #0]
 8006586:	6825      	ldr	r5, [r4, #0]
 8006588:	f015 0506 	ands.w	r5, r5, #6
 800658c:	d106      	bne.n	800659c <_printf_common+0x48>
 800658e:	f104 0a19 	add.w	sl, r4, #25
 8006592:	68e3      	ldr	r3, [r4, #12]
 8006594:	6832      	ldr	r2, [r6, #0]
 8006596:	1a9b      	subs	r3, r3, r2
 8006598:	42ab      	cmp	r3, r5
 800659a:	dc26      	bgt.n	80065ea <_printf_common+0x96>
 800659c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80065a0:	6822      	ldr	r2, [r4, #0]
 80065a2:	3b00      	subs	r3, #0
 80065a4:	bf18      	it	ne
 80065a6:	2301      	movne	r3, #1
 80065a8:	0692      	lsls	r2, r2, #26
 80065aa:	d42b      	bmi.n	8006604 <_printf_common+0xb0>
 80065ac:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80065b0:	4641      	mov	r1, r8
 80065b2:	4638      	mov	r0, r7
 80065b4:	47c8      	blx	r9
 80065b6:	3001      	adds	r0, #1
 80065b8:	d01e      	beq.n	80065f8 <_printf_common+0xa4>
 80065ba:	6823      	ldr	r3, [r4, #0]
 80065bc:	6922      	ldr	r2, [r4, #16]
 80065be:	f003 0306 	and.w	r3, r3, #6
 80065c2:	2b04      	cmp	r3, #4
 80065c4:	bf02      	ittt	eq
 80065c6:	68e5      	ldreq	r5, [r4, #12]
 80065c8:	6833      	ldreq	r3, [r6, #0]
 80065ca:	1aed      	subeq	r5, r5, r3
 80065cc:	68a3      	ldr	r3, [r4, #8]
 80065ce:	bf0c      	ite	eq
 80065d0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80065d4:	2500      	movne	r5, #0
 80065d6:	4293      	cmp	r3, r2
 80065d8:	bfc4      	itt	gt
 80065da:	1a9b      	subgt	r3, r3, r2
 80065dc:	18ed      	addgt	r5, r5, r3
 80065de:	2600      	movs	r6, #0
 80065e0:	341a      	adds	r4, #26
 80065e2:	42b5      	cmp	r5, r6
 80065e4:	d11a      	bne.n	800661c <_printf_common+0xc8>
 80065e6:	2000      	movs	r0, #0
 80065e8:	e008      	b.n	80065fc <_printf_common+0xa8>
 80065ea:	2301      	movs	r3, #1
 80065ec:	4652      	mov	r2, sl
 80065ee:	4641      	mov	r1, r8
 80065f0:	4638      	mov	r0, r7
 80065f2:	47c8      	blx	r9
 80065f4:	3001      	adds	r0, #1
 80065f6:	d103      	bne.n	8006600 <_printf_common+0xac>
 80065f8:	f04f 30ff 	mov.w	r0, #4294967295
 80065fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006600:	3501      	adds	r5, #1
 8006602:	e7c6      	b.n	8006592 <_printf_common+0x3e>
 8006604:	18e1      	adds	r1, r4, r3
 8006606:	1c5a      	adds	r2, r3, #1
 8006608:	2030      	movs	r0, #48	@ 0x30
 800660a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800660e:	4422      	add	r2, r4
 8006610:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006614:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006618:	3302      	adds	r3, #2
 800661a:	e7c7      	b.n	80065ac <_printf_common+0x58>
 800661c:	2301      	movs	r3, #1
 800661e:	4622      	mov	r2, r4
 8006620:	4641      	mov	r1, r8
 8006622:	4638      	mov	r0, r7
 8006624:	47c8      	blx	r9
 8006626:	3001      	adds	r0, #1
 8006628:	d0e6      	beq.n	80065f8 <_printf_common+0xa4>
 800662a:	3601      	adds	r6, #1
 800662c:	e7d9      	b.n	80065e2 <_printf_common+0x8e>
	...

08006630 <_printf_i>:
 8006630:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006634:	7e0f      	ldrb	r7, [r1, #24]
 8006636:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006638:	2f78      	cmp	r7, #120	@ 0x78
 800663a:	4691      	mov	r9, r2
 800663c:	4680      	mov	r8, r0
 800663e:	460c      	mov	r4, r1
 8006640:	469a      	mov	sl, r3
 8006642:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006646:	d807      	bhi.n	8006658 <_printf_i+0x28>
 8006648:	2f62      	cmp	r7, #98	@ 0x62
 800664a:	d80a      	bhi.n	8006662 <_printf_i+0x32>
 800664c:	2f00      	cmp	r7, #0
 800664e:	f000 80d2 	beq.w	80067f6 <_printf_i+0x1c6>
 8006652:	2f58      	cmp	r7, #88	@ 0x58
 8006654:	f000 80b9 	beq.w	80067ca <_printf_i+0x19a>
 8006658:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800665c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006660:	e03a      	b.n	80066d8 <_printf_i+0xa8>
 8006662:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006666:	2b15      	cmp	r3, #21
 8006668:	d8f6      	bhi.n	8006658 <_printf_i+0x28>
 800666a:	a101      	add	r1, pc, #4	@ (adr r1, 8006670 <_printf_i+0x40>)
 800666c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006670:	080066c9 	.word	0x080066c9
 8006674:	080066dd 	.word	0x080066dd
 8006678:	08006659 	.word	0x08006659
 800667c:	08006659 	.word	0x08006659
 8006680:	08006659 	.word	0x08006659
 8006684:	08006659 	.word	0x08006659
 8006688:	080066dd 	.word	0x080066dd
 800668c:	08006659 	.word	0x08006659
 8006690:	08006659 	.word	0x08006659
 8006694:	08006659 	.word	0x08006659
 8006698:	08006659 	.word	0x08006659
 800669c:	080067dd 	.word	0x080067dd
 80066a0:	08006707 	.word	0x08006707
 80066a4:	08006797 	.word	0x08006797
 80066a8:	08006659 	.word	0x08006659
 80066ac:	08006659 	.word	0x08006659
 80066b0:	080067ff 	.word	0x080067ff
 80066b4:	08006659 	.word	0x08006659
 80066b8:	08006707 	.word	0x08006707
 80066bc:	08006659 	.word	0x08006659
 80066c0:	08006659 	.word	0x08006659
 80066c4:	0800679f 	.word	0x0800679f
 80066c8:	6833      	ldr	r3, [r6, #0]
 80066ca:	1d1a      	adds	r2, r3, #4
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	6032      	str	r2, [r6, #0]
 80066d0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80066d4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80066d8:	2301      	movs	r3, #1
 80066da:	e09d      	b.n	8006818 <_printf_i+0x1e8>
 80066dc:	6833      	ldr	r3, [r6, #0]
 80066de:	6820      	ldr	r0, [r4, #0]
 80066e0:	1d19      	adds	r1, r3, #4
 80066e2:	6031      	str	r1, [r6, #0]
 80066e4:	0606      	lsls	r6, r0, #24
 80066e6:	d501      	bpl.n	80066ec <_printf_i+0xbc>
 80066e8:	681d      	ldr	r5, [r3, #0]
 80066ea:	e003      	b.n	80066f4 <_printf_i+0xc4>
 80066ec:	0645      	lsls	r5, r0, #25
 80066ee:	d5fb      	bpl.n	80066e8 <_printf_i+0xb8>
 80066f0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80066f4:	2d00      	cmp	r5, #0
 80066f6:	da03      	bge.n	8006700 <_printf_i+0xd0>
 80066f8:	232d      	movs	r3, #45	@ 0x2d
 80066fa:	426d      	negs	r5, r5
 80066fc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006700:	4859      	ldr	r0, [pc, #356]	@ (8006868 <_printf_i+0x238>)
 8006702:	230a      	movs	r3, #10
 8006704:	e011      	b.n	800672a <_printf_i+0xfa>
 8006706:	6821      	ldr	r1, [r4, #0]
 8006708:	6833      	ldr	r3, [r6, #0]
 800670a:	0608      	lsls	r0, r1, #24
 800670c:	f853 5b04 	ldr.w	r5, [r3], #4
 8006710:	d402      	bmi.n	8006718 <_printf_i+0xe8>
 8006712:	0649      	lsls	r1, r1, #25
 8006714:	bf48      	it	mi
 8006716:	b2ad      	uxthmi	r5, r5
 8006718:	2f6f      	cmp	r7, #111	@ 0x6f
 800671a:	4853      	ldr	r0, [pc, #332]	@ (8006868 <_printf_i+0x238>)
 800671c:	6033      	str	r3, [r6, #0]
 800671e:	bf14      	ite	ne
 8006720:	230a      	movne	r3, #10
 8006722:	2308      	moveq	r3, #8
 8006724:	2100      	movs	r1, #0
 8006726:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800672a:	6866      	ldr	r6, [r4, #4]
 800672c:	60a6      	str	r6, [r4, #8]
 800672e:	2e00      	cmp	r6, #0
 8006730:	bfa2      	ittt	ge
 8006732:	6821      	ldrge	r1, [r4, #0]
 8006734:	f021 0104 	bicge.w	r1, r1, #4
 8006738:	6021      	strge	r1, [r4, #0]
 800673a:	b90d      	cbnz	r5, 8006740 <_printf_i+0x110>
 800673c:	2e00      	cmp	r6, #0
 800673e:	d04b      	beq.n	80067d8 <_printf_i+0x1a8>
 8006740:	4616      	mov	r6, r2
 8006742:	fbb5 f1f3 	udiv	r1, r5, r3
 8006746:	fb03 5711 	mls	r7, r3, r1, r5
 800674a:	5dc7      	ldrb	r7, [r0, r7]
 800674c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006750:	462f      	mov	r7, r5
 8006752:	42bb      	cmp	r3, r7
 8006754:	460d      	mov	r5, r1
 8006756:	d9f4      	bls.n	8006742 <_printf_i+0x112>
 8006758:	2b08      	cmp	r3, #8
 800675a:	d10b      	bne.n	8006774 <_printf_i+0x144>
 800675c:	6823      	ldr	r3, [r4, #0]
 800675e:	07df      	lsls	r7, r3, #31
 8006760:	d508      	bpl.n	8006774 <_printf_i+0x144>
 8006762:	6923      	ldr	r3, [r4, #16]
 8006764:	6861      	ldr	r1, [r4, #4]
 8006766:	4299      	cmp	r1, r3
 8006768:	bfde      	ittt	le
 800676a:	2330      	movle	r3, #48	@ 0x30
 800676c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006770:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006774:	1b92      	subs	r2, r2, r6
 8006776:	6122      	str	r2, [r4, #16]
 8006778:	f8cd a000 	str.w	sl, [sp]
 800677c:	464b      	mov	r3, r9
 800677e:	aa03      	add	r2, sp, #12
 8006780:	4621      	mov	r1, r4
 8006782:	4640      	mov	r0, r8
 8006784:	f7ff fee6 	bl	8006554 <_printf_common>
 8006788:	3001      	adds	r0, #1
 800678a:	d14a      	bne.n	8006822 <_printf_i+0x1f2>
 800678c:	f04f 30ff 	mov.w	r0, #4294967295
 8006790:	b004      	add	sp, #16
 8006792:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006796:	6823      	ldr	r3, [r4, #0]
 8006798:	f043 0320 	orr.w	r3, r3, #32
 800679c:	6023      	str	r3, [r4, #0]
 800679e:	4833      	ldr	r0, [pc, #204]	@ (800686c <_printf_i+0x23c>)
 80067a0:	2778      	movs	r7, #120	@ 0x78
 80067a2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80067a6:	6823      	ldr	r3, [r4, #0]
 80067a8:	6831      	ldr	r1, [r6, #0]
 80067aa:	061f      	lsls	r7, r3, #24
 80067ac:	f851 5b04 	ldr.w	r5, [r1], #4
 80067b0:	d402      	bmi.n	80067b8 <_printf_i+0x188>
 80067b2:	065f      	lsls	r7, r3, #25
 80067b4:	bf48      	it	mi
 80067b6:	b2ad      	uxthmi	r5, r5
 80067b8:	6031      	str	r1, [r6, #0]
 80067ba:	07d9      	lsls	r1, r3, #31
 80067bc:	bf44      	itt	mi
 80067be:	f043 0320 	orrmi.w	r3, r3, #32
 80067c2:	6023      	strmi	r3, [r4, #0]
 80067c4:	b11d      	cbz	r5, 80067ce <_printf_i+0x19e>
 80067c6:	2310      	movs	r3, #16
 80067c8:	e7ac      	b.n	8006724 <_printf_i+0xf4>
 80067ca:	4827      	ldr	r0, [pc, #156]	@ (8006868 <_printf_i+0x238>)
 80067cc:	e7e9      	b.n	80067a2 <_printf_i+0x172>
 80067ce:	6823      	ldr	r3, [r4, #0]
 80067d0:	f023 0320 	bic.w	r3, r3, #32
 80067d4:	6023      	str	r3, [r4, #0]
 80067d6:	e7f6      	b.n	80067c6 <_printf_i+0x196>
 80067d8:	4616      	mov	r6, r2
 80067da:	e7bd      	b.n	8006758 <_printf_i+0x128>
 80067dc:	6833      	ldr	r3, [r6, #0]
 80067de:	6825      	ldr	r5, [r4, #0]
 80067e0:	6961      	ldr	r1, [r4, #20]
 80067e2:	1d18      	adds	r0, r3, #4
 80067e4:	6030      	str	r0, [r6, #0]
 80067e6:	062e      	lsls	r6, r5, #24
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	d501      	bpl.n	80067f0 <_printf_i+0x1c0>
 80067ec:	6019      	str	r1, [r3, #0]
 80067ee:	e002      	b.n	80067f6 <_printf_i+0x1c6>
 80067f0:	0668      	lsls	r0, r5, #25
 80067f2:	d5fb      	bpl.n	80067ec <_printf_i+0x1bc>
 80067f4:	8019      	strh	r1, [r3, #0]
 80067f6:	2300      	movs	r3, #0
 80067f8:	6123      	str	r3, [r4, #16]
 80067fa:	4616      	mov	r6, r2
 80067fc:	e7bc      	b.n	8006778 <_printf_i+0x148>
 80067fe:	6833      	ldr	r3, [r6, #0]
 8006800:	1d1a      	adds	r2, r3, #4
 8006802:	6032      	str	r2, [r6, #0]
 8006804:	681e      	ldr	r6, [r3, #0]
 8006806:	6862      	ldr	r2, [r4, #4]
 8006808:	2100      	movs	r1, #0
 800680a:	4630      	mov	r0, r6
 800680c:	f7f9 fcf8 	bl	8000200 <memchr>
 8006810:	b108      	cbz	r0, 8006816 <_printf_i+0x1e6>
 8006812:	1b80      	subs	r0, r0, r6
 8006814:	6060      	str	r0, [r4, #4]
 8006816:	6863      	ldr	r3, [r4, #4]
 8006818:	6123      	str	r3, [r4, #16]
 800681a:	2300      	movs	r3, #0
 800681c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006820:	e7aa      	b.n	8006778 <_printf_i+0x148>
 8006822:	6923      	ldr	r3, [r4, #16]
 8006824:	4632      	mov	r2, r6
 8006826:	4649      	mov	r1, r9
 8006828:	4640      	mov	r0, r8
 800682a:	47d0      	blx	sl
 800682c:	3001      	adds	r0, #1
 800682e:	d0ad      	beq.n	800678c <_printf_i+0x15c>
 8006830:	6823      	ldr	r3, [r4, #0]
 8006832:	079b      	lsls	r3, r3, #30
 8006834:	d413      	bmi.n	800685e <_printf_i+0x22e>
 8006836:	68e0      	ldr	r0, [r4, #12]
 8006838:	9b03      	ldr	r3, [sp, #12]
 800683a:	4298      	cmp	r0, r3
 800683c:	bfb8      	it	lt
 800683e:	4618      	movlt	r0, r3
 8006840:	e7a6      	b.n	8006790 <_printf_i+0x160>
 8006842:	2301      	movs	r3, #1
 8006844:	4632      	mov	r2, r6
 8006846:	4649      	mov	r1, r9
 8006848:	4640      	mov	r0, r8
 800684a:	47d0      	blx	sl
 800684c:	3001      	adds	r0, #1
 800684e:	d09d      	beq.n	800678c <_printf_i+0x15c>
 8006850:	3501      	adds	r5, #1
 8006852:	68e3      	ldr	r3, [r4, #12]
 8006854:	9903      	ldr	r1, [sp, #12]
 8006856:	1a5b      	subs	r3, r3, r1
 8006858:	42ab      	cmp	r3, r5
 800685a:	dcf2      	bgt.n	8006842 <_printf_i+0x212>
 800685c:	e7eb      	b.n	8006836 <_printf_i+0x206>
 800685e:	2500      	movs	r5, #0
 8006860:	f104 0619 	add.w	r6, r4, #25
 8006864:	e7f5      	b.n	8006852 <_printf_i+0x222>
 8006866:	bf00      	nop
 8006868:	08007429 	.word	0x08007429
 800686c:	0800743a 	.word	0x0800743a

08006870 <memmove>:
 8006870:	4288      	cmp	r0, r1
 8006872:	b510      	push	{r4, lr}
 8006874:	eb01 0402 	add.w	r4, r1, r2
 8006878:	d902      	bls.n	8006880 <memmove+0x10>
 800687a:	4284      	cmp	r4, r0
 800687c:	4623      	mov	r3, r4
 800687e:	d807      	bhi.n	8006890 <memmove+0x20>
 8006880:	1e43      	subs	r3, r0, #1
 8006882:	42a1      	cmp	r1, r4
 8006884:	d008      	beq.n	8006898 <memmove+0x28>
 8006886:	f811 2b01 	ldrb.w	r2, [r1], #1
 800688a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800688e:	e7f8      	b.n	8006882 <memmove+0x12>
 8006890:	4402      	add	r2, r0
 8006892:	4601      	mov	r1, r0
 8006894:	428a      	cmp	r2, r1
 8006896:	d100      	bne.n	800689a <memmove+0x2a>
 8006898:	bd10      	pop	{r4, pc}
 800689a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800689e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80068a2:	e7f7      	b.n	8006894 <memmove+0x24>

080068a4 <_sbrk_r>:
 80068a4:	b538      	push	{r3, r4, r5, lr}
 80068a6:	4d06      	ldr	r5, [pc, #24]	@ (80068c0 <_sbrk_r+0x1c>)
 80068a8:	2300      	movs	r3, #0
 80068aa:	4604      	mov	r4, r0
 80068ac:	4608      	mov	r0, r1
 80068ae:	602b      	str	r3, [r5, #0]
 80068b0:	f7fb f9ac 	bl	8001c0c <_sbrk>
 80068b4:	1c43      	adds	r3, r0, #1
 80068b6:	d102      	bne.n	80068be <_sbrk_r+0x1a>
 80068b8:	682b      	ldr	r3, [r5, #0]
 80068ba:	b103      	cbz	r3, 80068be <_sbrk_r+0x1a>
 80068bc:	6023      	str	r3, [r4, #0]
 80068be:	bd38      	pop	{r3, r4, r5, pc}
 80068c0:	20000da4 	.word	0x20000da4

080068c4 <memcpy>:
 80068c4:	440a      	add	r2, r1
 80068c6:	4291      	cmp	r1, r2
 80068c8:	f100 33ff 	add.w	r3, r0, #4294967295
 80068cc:	d100      	bne.n	80068d0 <memcpy+0xc>
 80068ce:	4770      	bx	lr
 80068d0:	b510      	push	{r4, lr}
 80068d2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80068d6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80068da:	4291      	cmp	r1, r2
 80068dc:	d1f9      	bne.n	80068d2 <memcpy+0xe>
 80068de:	bd10      	pop	{r4, pc}

080068e0 <_realloc_r>:
 80068e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80068e4:	4680      	mov	r8, r0
 80068e6:	4615      	mov	r5, r2
 80068e8:	460c      	mov	r4, r1
 80068ea:	b921      	cbnz	r1, 80068f6 <_realloc_r+0x16>
 80068ec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80068f0:	4611      	mov	r1, r2
 80068f2:	f7ff bc4b 	b.w	800618c <_malloc_r>
 80068f6:	b92a      	cbnz	r2, 8006904 <_realloc_r+0x24>
 80068f8:	f7ff fbdc 	bl	80060b4 <_free_r>
 80068fc:	2400      	movs	r4, #0
 80068fe:	4620      	mov	r0, r4
 8006900:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006904:	f000 f81a 	bl	800693c <_malloc_usable_size_r>
 8006908:	4285      	cmp	r5, r0
 800690a:	4606      	mov	r6, r0
 800690c:	d802      	bhi.n	8006914 <_realloc_r+0x34>
 800690e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8006912:	d8f4      	bhi.n	80068fe <_realloc_r+0x1e>
 8006914:	4629      	mov	r1, r5
 8006916:	4640      	mov	r0, r8
 8006918:	f7ff fc38 	bl	800618c <_malloc_r>
 800691c:	4607      	mov	r7, r0
 800691e:	2800      	cmp	r0, #0
 8006920:	d0ec      	beq.n	80068fc <_realloc_r+0x1c>
 8006922:	42b5      	cmp	r5, r6
 8006924:	462a      	mov	r2, r5
 8006926:	4621      	mov	r1, r4
 8006928:	bf28      	it	cs
 800692a:	4632      	movcs	r2, r6
 800692c:	f7ff ffca 	bl	80068c4 <memcpy>
 8006930:	4621      	mov	r1, r4
 8006932:	4640      	mov	r0, r8
 8006934:	f7ff fbbe 	bl	80060b4 <_free_r>
 8006938:	463c      	mov	r4, r7
 800693a:	e7e0      	b.n	80068fe <_realloc_r+0x1e>

0800693c <_malloc_usable_size_r>:
 800693c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006940:	1f18      	subs	r0, r3, #4
 8006942:	2b00      	cmp	r3, #0
 8006944:	bfbc      	itt	lt
 8006946:	580b      	ldrlt	r3, [r1, r0]
 8006948:	18c0      	addlt	r0, r0, r3
 800694a:	4770      	bx	lr

0800694c <_init>:
 800694c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800694e:	bf00      	nop
 8006950:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006952:	bc08      	pop	{r3}
 8006954:	469e      	mov	lr, r3
 8006956:	4770      	bx	lr

08006958 <_fini>:
 8006958:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800695a:	bf00      	nop
 800695c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800695e:	bc08      	pop	{r3}
 8006960:	469e      	mov	lr, r3
 8006962:	4770      	bx	lr
