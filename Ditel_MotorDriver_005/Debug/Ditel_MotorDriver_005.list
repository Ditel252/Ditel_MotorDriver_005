
Ditel_MotorDriver_005.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005e04  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  08005f94  08005f94  00006f94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006014  08006014  0000805c  2**0
                  CONTENTS
  4 .ARM          00000008  08006014  08006014  00007014  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800601c  0800601c  0000805c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800601c  0800601c  0000701c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006020  08006020  00007020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08006024  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000805c  2**0
                  CONTENTS
 10 .bss          00000480  2000005c  2000005c  0000805c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200004dc  200004dc  0000805c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000805c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001177e  00000000  00000000  0000808c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000284c  00000000  00000000  0001980a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f00  00000000  00000000  0001c058  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000bb1  00000000  00000000  0001cf58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001bd2c  00000000  00000000  0001db09  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013e0a  00000000  00000000  00039835  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a64f0  00000000  00000000  0004d63f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000f3b2f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000435c  00000000  00000000  000f3b74  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006a  00000000  00000000  000f7ed0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000005c 	.word	0x2000005c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005f7c 	.word	0x08005f7c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000060 	.word	0x20000060
 80001cc:	08005f7c 	.word	0x08005f7c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <_7SegInit>:

#include <D-M-005/7Seg.h>

_7SEG_SETTING _7SegSetting;

void _7SegInit(_7SEG_SETTING *__7SegSetting){
 8000270:	b580      	push	{r7, lr}
 8000272:	b082      	sub	sp, #8
 8000274:	af00      	add	r7, sp, #0
 8000276:	6078      	str	r0, [r7, #4]
	_7SegSetting.__7SegSi_GpioPort = __7SegSetting->__7SegSi_GpioPort;
 8000278:	687b      	ldr	r3, [r7, #4]
 800027a:	681b      	ldr	r3, [r3, #0]
 800027c:	4a18      	ldr	r2, [pc, #96]	@ (80002e0 <_7SegInit+0x70>)
 800027e:	6013      	str	r3, [r2, #0]
	_7SegSetting.__7SegSi_Pin = __7SegSetting->__7SegSi_Pin;
 8000280:	687b      	ldr	r3, [r7, #4]
 8000282:	889a      	ldrh	r2, [r3, #4]
 8000284:	4b16      	ldr	r3, [pc, #88]	@ (80002e0 <_7SegInit+0x70>)
 8000286:	809a      	strh	r2, [r3, #4]
	_7SegSetting.__7SegRck_GpioPort = __7SegSetting->__7SegRck_GpioPort;
 8000288:	687b      	ldr	r3, [r7, #4]
 800028a:	689b      	ldr	r3, [r3, #8]
 800028c:	4a14      	ldr	r2, [pc, #80]	@ (80002e0 <_7SegInit+0x70>)
 800028e:	6093      	str	r3, [r2, #8]
	_7SegSetting.__7SegRck_Pin = __7SegSetting->__7SegRck_Pin;
 8000290:	687b      	ldr	r3, [r7, #4]
 8000292:	899a      	ldrh	r2, [r3, #12]
 8000294:	4b12      	ldr	r3, [pc, #72]	@ (80002e0 <_7SegInit+0x70>)
 8000296:	819a      	strh	r2, [r3, #12]
	_7SegSetting.__7SegSck_GpioPort = __7SegSetting->__7SegSck_GpioPort;
 8000298:	687b      	ldr	r3, [r7, #4]
 800029a:	691b      	ldr	r3, [r3, #16]
 800029c:	4a10      	ldr	r2, [pc, #64]	@ (80002e0 <_7SegInit+0x70>)
 800029e:	6113      	str	r3, [r2, #16]
	_7SegSetting.__7SegSck_Pin = __7SegSetting->__7SegSck_Pin;
 80002a0:	687b      	ldr	r3, [r7, #4]
 80002a2:	8a9a      	ldrh	r2, [r3, #20]
 80002a4:	4b0e      	ldr	r3, [pc, #56]	@ (80002e0 <_7SegInit+0x70>)
 80002a6:	829a      	strh	r2, [r3, #20]

	HAL_GPIO_WritePin(_7SegSetting.__7SegSi_GpioPort, _7SegSetting.__7SegSi_Pin, GPIO_PIN_RESET);
 80002a8:	4b0d      	ldr	r3, [pc, #52]	@ (80002e0 <_7SegInit+0x70>)
 80002aa:	681b      	ldr	r3, [r3, #0]
 80002ac:	4a0c      	ldr	r2, [pc, #48]	@ (80002e0 <_7SegInit+0x70>)
 80002ae:	8891      	ldrh	r1, [r2, #4]
 80002b0:	2200      	movs	r2, #0
 80002b2:	4618      	mov	r0, r3
 80002b4:	f001 fd86 	bl	8001dc4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(_7SegSetting.__7SegRck_GpioPort, _7SegSetting.__7SegRck_Pin, GPIO_PIN_RESET);
 80002b8:	4b09      	ldr	r3, [pc, #36]	@ (80002e0 <_7SegInit+0x70>)
 80002ba:	689b      	ldr	r3, [r3, #8]
 80002bc:	4a08      	ldr	r2, [pc, #32]	@ (80002e0 <_7SegInit+0x70>)
 80002be:	8991      	ldrh	r1, [r2, #12]
 80002c0:	2200      	movs	r2, #0
 80002c2:	4618      	mov	r0, r3
 80002c4:	f001 fd7e 	bl	8001dc4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(_7SegSetting.__7SegSck_GpioPort, _7SegSetting.__7SegSck_Pin, GPIO_PIN_RESET);
 80002c8:	4b05      	ldr	r3, [pc, #20]	@ (80002e0 <_7SegInit+0x70>)
 80002ca:	691b      	ldr	r3, [r3, #16]
 80002cc:	4a04      	ldr	r2, [pc, #16]	@ (80002e0 <_7SegInit+0x70>)
 80002ce:	8a91      	ldrh	r1, [r2, #20]
 80002d0:	2200      	movs	r2, #0
 80002d2:	4618      	mov	r0, r3
 80002d4:	f001 fd76 	bl	8001dc4 <HAL_GPIO_WritePin>
}
 80002d8:	bf00      	nop
 80002da:	3708      	adds	r7, #8
 80002dc:	46bd      	mov	sp, r7
 80002de:	bd80      	pop	{r7, pc}
 80002e0:	20000078 	.word	0x20000078

080002e4 <_7SegReset>:
            __7Seg1byteDisplay(~(0b00011110 | (isDisplayDp ? 0b10000000 : 0b00000000)));
            break;
    }
}

void _7SegReset(){
 80002e4:	b580      	push	{r7, lr}
 80002e6:	af00      	add	r7, sp, #0
    __7Seg1byteDisplay(~(0b00000000));
 80002e8:	f04f 30ff 	mov.w	r0, #4294967295
 80002ec:	f000 f878 	bl	80003e0 <__7Seg1byteDisplay>
    __7Seg1byteDisplay(~(0b00000000));
 80002f0:	f04f 30ff 	mov.w	r0, #4294967295
 80002f4:	f000 f874 	bl	80003e0 <__7Seg1byteDisplay>
}
 80002f8:	bf00      	nop
 80002fa:	bd80      	pop	{r7, pc}

080002fc <_7SegSetUpAnimation>:

void _7SegSetUpAnimation(_SETUP_STEP_FOR_7SEG __SetupStep){
 80002fc:	b580      	push	{r7, lr}
 80002fe:	b082      	sub	sp, #8
 8000300:	af00      	add	r7, sp, #0
 8000302:	4603      	mov	r3, r0
 8000304:	71fb      	strb	r3, [r7, #7]
	switch (__SetupStep) {
 8000306:	79fb      	ldrb	r3, [r7, #7]
 8000308:	3b01      	subs	r3, #1
 800030a:	2b08      	cmp	r3, #8
 800030c:	d863      	bhi.n	80003d6 <_7SegSetUpAnimation+0xda>
 800030e:	a201      	add	r2, pc, #4	@ (adr r2, 8000314 <_7SegSetUpAnimation+0x18>)
 8000310:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000314:	08000339 	.word	0x08000339
 8000318:	0800034b 	.word	0x0800034b
 800031c:	0800035d 	.word	0x0800035d
 8000320:	0800036f 	.word	0x0800036f
 8000324:	08000381 	.word	0x08000381
 8000328:	08000393 	.word	0x08000393
 800032c:	080003a5 	.word	0x080003a5
 8000330:	080003b7 	.word	0x080003b7
 8000334:	080003c9 	.word	0x080003c9
		case _SETUP_STEP_START_PROGRAM:
			__7Seg1byteDisplay(__7SEG_NULL_1Byte);
 8000338:	f04f 30ff 	mov.w	r0, #4294967295
 800033c:	f000 f850 	bl	80003e0 <__7Seg1byteDisplay>
			__7Seg1byteDisplay(__7SEG_ONLY_A_1Byte);
 8000340:	f06f 0002 	mvn.w	r0, #2
 8000344:	f000 f84c 	bl	80003e0 <__7Seg1byteDisplay>
			break;
 8000348:	e045      	b.n	80003d6 <_7SegSetUpAnimation+0xda>
		case _SETUP_STEP_SETUP_MOTOR:
			__7Seg1byteDisplay(__7SEG_ONLY_A_1Byte);
 800034a:	f06f 0002 	mvn.w	r0, #2
 800034e:	f000 f847 	bl	80003e0 <__7Seg1byteDisplay>
			__7Seg1byteDisplay(__7SEG_NULL_1Byte);
 8000352:	f04f 30ff 	mov.w	r0, #4294967295
 8000356:	f000 f843 	bl	80003e0 <__7Seg1byteDisplay>
			break;
 800035a:	e03c      	b.n	80003d6 <_7SegSetUpAnimation+0xda>
		case _SETUP_STEP_SETUP_AND_READ_SWICH:
			__7Seg1byteDisplay(__7SEG_ONLY_B_1Byte);
 800035c:	f06f 0001 	mvn.w	r0, #1
 8000360:	f000 f83e 	bl	80003e0 <__7Seg1byteDisplay>
			__7Seg1byteDisplay(__7SEG_NULL_1Byte);
 8000364:	f04f 30ff 	mov.w	r0, #4294967295
 8000368:	f000 f83a 	bl	80003e0 <__7Seg1byteDisplay>
			break;
 800036c:	e033      	b.n	80003d6 <_7SegSetUpAnimation+0xda>
		case _SETUP_STEP_NULL2:
			__7Seg1byteDisplay(__7SEG_ONLY_C_1Byte);
 800036e:	f06f 0040 	mvn.w	r0, #64	@ 0x40
 8000372:	f000 f835 	bl	80003e0 <__7Seg1byteDisplay>
			__7Seg1byteDisplay(__7SEG_NULL_1Byte);
 8000376:	f04f 30ff 	mov.w	r0, #4294967295
 800037a:	f000 f831 	bl	80003e0 <__7Seg1byteDisplay>
			break;
 800037e:	e02a      	b.n	80003d6 <_7SegSetUpAnimation+0xda>
		case _SETUP_STEP_NULL3:
			__7Seg1byteDisplay(__7SEG_ONLY_D_1Byte);
 8000380:	f06f 0020 	mvn.w	r0, #32
 8000384:	f000 f82c 	bl	80003e0 <__7Seg1byteDisplay>
			__7Seg1byteDisplay(__7SEG_NULL_1Byte);
 8000388:	f04f 30ff 	mov.w	r0, #4294967295
 800038c:	f000 f828 	bl	80003e0 <__7Seg1byteDisplay>
			break;
 8000390:	e021      	b.n	80003d6 <_7SegSetUpAnimation+0xda>
		case _SETUP_STEP_NULL4:
			__7Seg1byteDisplay(__7SEG_NULL_1Byte);
 8000392:	f04f 30ff 	mov.w	r0, #4294967295
 8000396:	f000 f823 	bl	80003e0 <__7Seg1byteDisplay>
			__7Seg1byteDisplay(__7SEG_ONLY_D_1Byte);
 800039a:	f06f 0020 	mvn.w	r0, #32
 800039e:	f000 f81f 	bl	80003e0 <__7Seg1byteDisplay>
			break;
 80003a2:	e018      	b.n	80003d6 <_7SegSetUpAnimation+0xda>
		case _SETUP_STEP_NULL5:
			__7Seg1byteDisplay(__7SEG_NULL_1Byte);
 80003a4:	f04f 30ff 	mov.w	r0, #4294967295
 80003a8:	f000 f81a 	bl	80003e0 <__7Seg1byteDisplay>
			__7Seg1byteDisplay(__7SEG_ONLY_E_1Byte);
 80003ac:	f06f 0010 	mvn.w	r0, #16
 80003b0:	f000 f816 	bl	80003e0 <__7Seg1byteDisplay>
			break;
 80003b4:	e00f      	b.n	80003d6 <_7SegSetUpAnimation+0xda>
		case _SETUP_STEP_NULL6:
			__7Seg1byteDisplay(__7SEG_NULL_1Byte);
 80003b6:	f04f 30ff 	mov.w	r0, #4294967295
 80003ba:	f000 f811 	bl	80003e0 <__7Seg1byteDisplay>
			__7Seg1byteDisplay(__7SEG_ONLY_F_1Byte);
 80003be:	f06f 0004 	mvn.w	r0, #4
 80003c2:	f000 f80d 	bl	80003e0 <__7Seg1byteDisplay>
			break;
 80003c6:	e006      	b.n	80003d6 <_7SegSetUpAnimation+0xda>
		case _SETUP_STEP_FINISH:
			__7Seg1byteDisplay(~__7SEG_ONLY_G_1Byte | ~__7SEG_ONLY_DP_1Byte);
 80003c8:	2088      	movs	r0, #136	@ 0x88
 80003ca:	f000 f809 	bl	80003e0 <__7Seg1byteDisplay>
			__7Seg1byteDisplay(~__7SEG_ONLY_G_1Byte | ~__7SEG_ONLY_DP_1Byte);
 80003ce:	2088      	movs	r0, #136	@ 0x88
 80003d0:	f000 f806 	bl	80003e0 <__7Seg1byteDisplay>
			break;
 80003d4:	bf00      	nop
	}
}
 80003d6:	bf00      	nop
 80003d8:	3708      	adds	r7, #8
 80003da:	46bd      	mov	sp, r7
 80003dc:	bd80      	pop	{r7, pc}
 80003de:	bf00      	nop

080003e0 <__7Seg1byteDisplay>:

void __7Seg1byteDisplay(uint8_t _displayContent){
 80003e0:	b580      	push	{r7, lr}
 80003e2:	b084      	sub	sp, #16
 80003e4:	af00      	add	r7, sp, #0
 80003e6:	4603      	mov	r3, r0
 80003e8:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(_7SegSetting.__7SegRck_GpioPort, _7SegSetting.__7SegRck_Pin, GPIO_PIN_RESET);
 80003ea:	4b1e      	ldr	r3, [pc, #120]	@ (8000464 <__7Seg1byteDisplay+0x84>)
 80003ec:	689b      	ldr	r3, [r3, #8]
 80003ee:	4a1d      	ldr	r2, [pc, #116]	@ (8000464 <__7Seg1byteDisplay+0x84>)
 80003f0:	8991      	ldrh	r1, [r2, #12]
 80003f2:	2200      	movs	r2, #0
 80003f4:	4618      	mov	r0, r3
 80003f6:	f001 fce5 	bl	8001dc4 <HAL_GPIO_WritePin>
    for (int i = 0; i < 8; i++){
 80003fa:	2300      	movs	r3, #0
 80003fc:	60fb      	str	r3, [r7, #12]
 80003fe:	e021      	b.n	8000444 <__7Seg1byteDisplay+0x64>
        HAL_GPIO_WritePin(_7SegSetting.__7SegSi_GpioPort, _7SegSetting.__7SegSi_Pin, (_displayContent & (1U << i)) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000400:	4b18      	ldr	r3, [pc, #96]	@ (8000464 <__7Seg1byteDisplay+0x84>)
 8000402:	6818      	ldr	r0, [r3, #0]
 8000404:	4b17      	ldr	r3, [pc, #92]	@ (8000464 <__7Seg1byteDisplay+0x84>)
 8000406:	8899      	ldrh	r1, [r3, #4]
 8000408:	79fa      	ldrb	r2, [r7, #7]
 800040a:	68fb      	ldr	r3, [r7, #12]
 800040c:	fa22 f303 	lsr.w	r3, r2, r3
 8000410:	b2db      	uxtb	r3, r3
 8000412:	f003 0301 	and.w	r3, r3, #1
 8000416:	b2db      	uxtb	r3, r3
 8000418:	461a      	mov	r2, r3
 800041a:	f001 fcd3 	bl	8001dc4 <HAL_GPIO_WritePin>

        HAL_GPIO_WritePin(_7SegSetting.__7SegSck_GpioPort, _7SegSetting.__7SegSck_Pin, GPIO_PIN_SET);
 800041e:	4b11      	ldr	r3, [pc, #68]	@ (8000464 <__7Seg1byteDisplay+0x84>)
 8000420:	691b      	ldr	r3, [r3, #16]
 8000422:	4a10      	ldr	r2, [pc, #64]	@ (8000464 <__7Seg1byteDisplay+0x84>)
 8000424:	8a91      	ldrh	r1, [r2, #20]
 8000426:	2201      	movs	r2, #1
 8000428:	4618      	mov	r0, r3
 800042a:	f001 fccb 	bl	8001dc4 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(_7SegSetting.__7SegSck_GpioPort, _7SegSetting.__7SegSck_Pin, GPIO_PIN_RESET);
 800042e:	4b0d      	ldr	r3, [pc, #52]	@ (8000464 <__7Seg1byteDisplay+0x84>)
 8000430:	691b      	ldr	r3, [r3, #16]
 8000432:	4a0c      	ldr	r2, [pc, #48]	@ (8000464 <__7Seg1byteDisplay+0x84>)
 8000434:	8a91      	ldrh	r1, [r2, #20]
 8000436:	2200      	movs	r2, #0
 8000438:	4618      	mov	r0, r3
 800043a:	f001 fcc3 	bl	8001dc4 <HAL_GPIO_WritePin>
    for (int i = 0; i < 8; i++){
 800043e:	68fb      	ldr	r3, [r7, #12]
 8000440:	3301      	adds	r3, #1
 8000442:	60fb      	str	r3, [r7, #12]
 8000444:	68fb      	ldr	r3, [r7, #12]
 8000446:	2b07      	cmp	r3, #7
 8000448:	ddda      	ble.n	8000400 <__7Seg1byteDisplay+0x20>
    }

    HAL_GPIO_WritePin(_7SegSetting.__7SegRck_GpioPort, _7SegSetting.__7SegRck_Pin, GPIO_PIN_SET);
 800044a:	4b06      	ldr	r3, [pc, #24]	@ (8000464 <__7Seg1byteDisplay+0x84>)
 800044c:	689b      	ldr	r3, [r3, #8]
 800044e:	4a05      	ldr	r2, [pc, #20]	@ (8000464 <__7Seg1byteDisplay+0x84>)
 8000450:	8991      	ldrh	r1, [r2, #12]
 8000452:	2201      	movs	r2, #1
 8000454:	4618      	mov	r0, r3
 8000456:	f001 fcb5 	bl	8001dc4 <HAL_GPIO_WritePin>
}
 800045a:	bf00      	nop
 800045c:	3710      	adds	r7, #16
 800045e:	46bd      	mov	sp, r7
 8000460:	bd80      	pop	{r7, pc}
 8000462:	bf00      	nop
 8000464:	20000078 	.word	0x20000078

08000468 <_MotorInit>:

#include "D-M-005/Motor.h"

_MOTOR_SETTING _MotorSetting;

void _MotorInit(_MOTOR_SETTING *__MotorSetting){
 8000468:	b580      	push	{r7, lr}
 800046a:	b082      	sub	sp, #8
 800046c:	af00      	add	r7, sp, #0
 800046e:	6078      	str	r0, [r7, #4]
	_MotorSetting.__MotorN1_Tim = __MotorSetting->__MotorN1_Tim;
 8000470:	687b      	ldr	r3, [r7, #4]
 8000472:	681b      	ldr	r3, [r3, #0]
 8000474:	4a5c      	ldr	r2, [pc, #368]	@ (80005e8 <_MotorInit+0x180>)
 8000476:	6013      	str	r3, [r2, #0]
	_MotorSetting.__MotorN1_TimChannel = __MotorSetting->__MotorN1_TimChannel;
 8000478:	687b      	ldr	r3, [r7, #4]
 800047a:	685b      	ldr	r3, [r3, #4]
 800047c:	4a5a      	ldr	r2, [pc, #360]	@ (80005e8 <_MotorInit+0x180>)
 800047e:	6053      	str	r3, [r2, #4]
	_MotorSetting.__MotorN2_Tim = __MotorSetting->__MotorN2_Tim;
 8000480:	687b      	ldr	r3, [r7, #4]
 8000482:	689b      	ldr	r3, [r3, #8]
 8000484:	4a58      	ldr	r2, [pc, #352]	@ (80005e8 <_MotorInit+0x180>)
 8000486:	6093      	str	r3, [r2, #8]
	_MotorSetting.__MotorN2_TimChannel = __MotorSetting->__MotorN2_TimChannel;
 8000488:	687b      	ldr	r3, [r7, #4]
 800048a:	68db      	ldr	r3, [r3, #12]
 800048c:	4a56      	ldr	r2, [pc, #344]	@ (80005e8 <_MotorInit+0x180>)
 800048e:	60d3      	str	r3, [r2, #12]

	_MotorSetting.__MotorP1_GpioPort = __MotorSetting->__MotorP1_GpioPort;
 8000490:	687b      	ldr	r3, [r7, #4]
 8000492:	691b      	ldr	r3, [r3, #16]
 8000494:	4a54      	ldr	r2, [pc, #336]	@ (80005e8 <_MotorInit+0x180>)
 8000496:	6113      	str	r3, [r2, #16]
	_MotorSetting.__MotorP1_Pin = __MotorSetting->__MotorP1_Pin;
 8000498:	687b      	ldr	r3, [r7, #4]
 800049a:	8a9a      	ldrh	r2, [r3, #20]
 800049c:	4b52      	ldr	r3, [pc, #328]	@ (80005e8 <_MotorInit+0x180>)
 800049e:	829a      	strh	r2, [r3, #20]
	_MotorSetting.__MotorP2_GpioPort = __MotorSetting->__MotorP2_GpioPort;
 80004a0:	687b      	ldr	r3, [r7, #4]
 80004a2:	699b      	ldr	r3, [r3, #24]
 80004a4:	4a50      	ldr	r2, [pc, #320]	@ (80005e8 <_MotorInit+0x180>)
 80004a6:	6193      	str	r3, [r2, #24]
	_MotorSetting.__MotorP2_Pin = __MotorSetting->__MotorP2_Pin;
 80004a8:	687b      	ldr	r3, [r7, #4]
 80004aa:	8b9a      	ldrh	r2, [r3, #28]
 80004ac:	4b4e      	ldr	r3, [pc, #312]	@ (80005e8 <_MotorInit+0x180>)
 80004ae:	839a      	strh	r2, [r3, #28]

	_MotorSetting.__DeadTime_TIM = __MotorSetting->__DeadTime_TIM;
 80004b0:	687b      	ldr	r3, [r7, #4]
 80004b2:	6a1b      	ldr	r3, [r3, #32]
 80004b4:	4a4c      	ldr	r2, [pc, #304]	@ (80005e8 <_MotorInit+0x180>)
 80004b6:	6213      	str	r3, [r2, #32]

	HAL_GPIO_WritePin(_MotorSetting.__MotorP1_GpioPort, _MotorSetting.__MotorP1_Pin, GPIO_PIN_RESET);
 80004b8:	4b4b      	ldr	r3, [pc, #300]	@ (80005e8 <_MotorInit+0x180>)
 80004ba:	691b      	ldr	r3, [r3, #16]
 80004bc:	4a4a      	ldr	r2, [pc, #296]	@ (80005e8 <_MotorInit+0x180>)
 80004be:	8a91      	ldrh	r1, [r2, #20]
 80004c0:	2200      	movs	r2, #0
 80004c2:	4618      	mov	r0, r3
 80004c4:	f001 fc7e 	bl	8001dc4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(_MotorSetting.__MotorP2_GpioPort, _MotorSetting.__MotorP2_Pin, GPIO_PIN_RESET);
 80004c8:	4b47      	ldr	r3, [pc, #284]	@ (80005e8 <_MotorInit+0x180>)
 80004ca:	699b      	ldr	r3, [r3, #24]
 80004cc:	4a46      	ldr	r2, [pc, #280]	@ (80005e8 <_MotorInit+0x180>)
 80004ce:	8b91      	ldrh	r1, [r2, #28]
 80004d0:	2200      	movs	r2, #0
 80004d2:	4618      	mov	r0, r3
 80004d4:	f001 fc76 	bl	8001dc4 <HAL_GPIO_WritePin>

	HAL_TIM_PWM_Start(_MotorSetting.__MotorN1_Tim, _MotorSetting.__MotorN1_TimChannel);
 80004d8:	4b43      	ldr	r3, [pc, #268]	@ (80005e8 <_MotorInit+0x180>)
 80004da:	681b      	ldr	r3, [r3, #0]
 80004dc:	4a42      	ldr	r2, [pc, #264]	@ (80005e8 <_MotorInit+0x180>)
 80004de:	6852      	ldr	r2, [r2, #4]
 80004e0:	4611      	mov	r1, r2
 80004e2:	4618      	mov	r0, r3
 80004e4:	f003 f978 	bl	80037d8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(_MotorSetting.__MotorN2_Tim, _MotorSetting.__MotorN2_TimChannel);
 80004e8:	4b3f      	ldr	r3, [pc, #252]	@ (80005e8 <_MotorInit+0x180>)
 80004ea:	689b      	ldr	r3, [r3, #8]
 80004ec:	4a3e      	ldr	r2, [pc, #248]	@ (80005e8 <_MotorInit+0x180>)
 80004ee:	68d2      	ldr	r2, [r2, #12]
 80004f0:	4611      	mov	r1, r2
 80004f2:	4618      	mov	r0, r3
 80004f4:	f003 f970 	bl	80037d8 <HAL_TIM_PWM_Start>

	HAL_TIM_Base_Start(_MotorSetting.__DeadTime_TIM);
 80004f8:	4b3b      	ldr	r3, [pc, #236]	@ (80005e8 <_MotorInit+0x180>)
 80004fa:	6a1b      	ldr	r3, [r3, #32]
 80004fc:	4618      	mov	r0, r3
 80004fe:	f003 f855 	bl	80035ac <HAL_TIM_Base_Start>

	__HAL_TIM_SET_COMPARE(_MotorSetting.__MotorN1_Tim, _MotorSetting.__MotorN1_TimChannel, 0);
 8000502:	4b39      	ldr	r3, [pc, #228]	@ (80005e8 <_MotorInit+0x180>)
 8000504:	685b      	ldr	r3, [r3, #4]
 8000506:	2b00      	cmp	r3, #0
 8000508:	d105      	bne.n	8000516 <_MotorInit+0xae>
 800050a:	4b37      	ldr	r3, [pc, #220]	@ (80005e8 <_MotorInit+0x180>)
 800050c:	681b      	ldr	r3, [r3, #0]
 800050e:	681b      	ldr	r3, [r3, #0]
 8000510:	2200      	movs	r2, #0
 8000512:	635a      	str	r2, [r3, #52]	@ 0x34
 8000514:	e02c      	b.n	8000570 <_MotorInit+0x108>
 8000516:	4b34      	ldr	r3, [pc, #208]	@ (80005e8 <_MotorInit+0x180>)
 8000518:	685b      	ldr	r3, [r3, #4]
 800051a:	2b04      	cmp	r3, #4
 800051c:	d105      	bne.n	800052a <_MotorInit+0xc2>
 800051e:	4b32      	ldr	r3, [pc, #200]	@ (80005e8 <_MotorInit+0x180>)
 8000520:	681b      	ldr	r3, [r3, #0]
 8000522:	681a      	ldr	r2, [r3, #0]
 8000524:	2300      	movs	r3, #0
 8000526:	6393      	str	r3, [r2, #56]	@ 0x38
 8000528:	e022      	b.n	8000570 <_MotorInit+0x108>
 800052a:	4b2f      	ldr	r3, [pc, #188]	@ (80005e8 <_MotorInit+0x180>)
 800052c:	685b      	ldr	r3, [r3, #4]
 800052e:	2b08      	cmp	r3, #8
 8000530:	d105      	bne.n	800053e <_MotorInit+0xd6>
 8000532:	4b2d      	ldr	r3, [pc, #180]	@ (80005e8 <_MotorInit+0x180>)
 8000534:	681b      	ldr	r3, [r3, #0]
 8000536:	681a      	ldr	r2, [r3, #0]
 8000538:	2300      	movs	r3, #0
 800053a:	63d3      	str	r3, [r2, #60]	@ 0x3c
 800053c:	e018      	b.n	8000570 <_MotorInit+0x108>
 800053e:	4b2a      	ldr	r3, [pc, #168]	@ (80005e8 <_MotorInit+0x180>)
 8000540:	685b      	ldr	r3, [r3, #4]
 8000542:	2b0c      	cmp	r3, #12
 8000544:	d105      	bne.n	8000552 <_MotorInit+0xea>
 8000546:	4b28      	ldr	r3, [pc, #160]	@ (80005e8 <_MotorInit+0x180>)
 8000548:	681b      	ldr	r3, [r3, #0]
 800054a:	681a      	ldr	r2, [r3, #0]
 800054c:	2300      	movs	r3, #0
 800054e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000550:	e00e      	b.n	8000570 <_MotorInit+0x108>
 8000552:	4b25      	ldr	r3, [pc, #148]	@ (80005e8 <_MotorInit+0x180>)
 8000554:	685b      	ldr	r3, [r3, #4]
 8000556:	2b10      	cmp	r3, #16
 8000558:	d105      	bne.n	8000566 <_MotorInit+0xfe>
 800055a:	4b23      	ldr	r3, [pc, #140]	@ (80005e8 <_MotorInit+0x180>)
 800055c:	681b      	ldr	r3, [r3, #0]
 800055e:	681a      	ldr	r2, [r3, #0]
 8000560:	2300      	movs	r3, #0
 8000562:	6593      	str	r3, [r2, #88]	@ 0x58
 8000564:	e004      	b.n	8000570 <_MotorInit+0x108>
 8000566:	4b20      	ldr	r3, [pc, #128]	@ (80005e8 <_MotorInit+0x180>)
 8000568:	681b      	ldr	r3, [r3, #0]
 800056a:	681a      	ldr	r2, [r3, #0]
 800056c:	2300      	movs	r3, #0
 800056e:	65d3      	str	r3, [r2, #92]	@ 0x5c
	__HAL_TIM_SET_COMPARE(_MotorSetting.__MotorN2_Tim, _MotorSetting.__MotorN2_TimChannel, 0);
 8000570:	4b1d      	ldr	r3, [pc, #116]	@ (80005e8 <_MotorInit+0x180>)
 8000572:	68db      	ldr	r3, [r3, #12]
 8000574:	2b00      	cmp	r3, #0
 8000576:	d105      	bne.n	8000584 <_MotorInit+0x11c>
 8000578:	4b1b      	ldr	r3, [pc, #108]	@ (80005e8 <_MotorInit+0x180>)
 800057a:	689b      	ldr	r3, [r3, #8]
 800057c:	681b      	ldr	r3, [r3, #0]
 800057e:	2200      	movs	r2, #0
 8000580:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8000582:	e02c      	b.n	80005de <_MotorInit+0x176>
	__HAL_TIM_SET_COMPARE(_MotorSetting.__MotorN2_Tim, _MotorSetting.__MotorN2_TimChannel, 0);
 8000584:	4b18      	ldr	r3, [pc, #96]	@ (80005e8 <_MotorInit+0x180>)
 8000586:	68db      	ldr	r3, [r3, #12]
 8000588:	2b04      	cmp	r3, #4
 800058a:	d105      	bne.n	8000598 <_MotorInit+0x130>
 800058c:	4b16      	ldr	r3, [pc, #88]	@ (80005e8 <_MotorInit+0x180>)
 800058e:	689b      	ldr	r3, [r3, #8]
 8000590:	681a      	ldr	r2, [r3, #0]
 8000592:	2300      	movs	r3, #0
 8000594:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8000596:	e022      	b.n	80005de <_MotorInit+0x176>
	__HAL_TIM_SET_COMPARE(_MotorSetting.__MotorN2_Tim, _MotorSetting.__MotorN2_TimChannel, 0);
 8000598:	4b13      	ldr	r3, [pc, #76]	@ (80005e8 <_MotorInit+0x180>)
 800059a:	68db      	ldr	r3, [r3, #12]
 800059c:	2b08      	cmp	r3, #8
 800059e:	d105      	bne.n	80005ac <_MotorInit+0x144>
 80005a0:	4b11      	ldr	r3, [pc, #68]	@ (80005e8 <_MotorInit+0x180>)
 80005a2:	689b      	ldr	r3, [r3, #8]
 80005a4:	681a      	ldr	r2, [r3, #0]
 80005a6:	2300      	movs	r3, #0
 80005a8:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 80005aa:	e018      	b.n	80005de <_MotorInit+0x176>
	__HAL_TIM_SET_COMPARE(_MotorSetting.__MotorN2_Tim, _MotorSetting.__MotorN2_TimChannel, 0);
 80005ac:	4b0e      	ldr	r3, [pc, #56]	@ (80005e8 <_MotorInit+0x180>)
 80005ae:	68db      	ldr	r3, [r3, #12]
 80005b0:	2b0c      	cmp	r3, #12
 80005b2:	d105      	bne.n	80005c0 <_MotorInit+0x158>
 80005b4:	4b0c      	ldr	r3, [pc, #48]	@ (80005e8 <_MotorInit+0x180>)
 80005b6:	689b      	ldr	r3, [r3, #8]
 80005b8:	681a      	ldr	r2, [r3, #0]
 80005ba:	2300      	movs	r3, #0
 80005bc:	6413      	str	r3, [r2, #64]	@ 0x40
}
 80005be:	e00e      	b.n	80005de <_MotorInit+0x176>
	__HAL_TIM_SET_COMPARE(_MotorSetting.__MotorN2_Tim, _MotorSetting.__MotorN2_TimChannel, 0);
 80005c0:	4b09      	ldr	r3, [pc, #36]	@ (80005e8 <_MotorInit+0x180>)
 80005c2:	68db      	ldr	r3, [r3, #12]
 80005c4:	2b10      	cmp	r3, #16
 80005c6:	d105      	bne.n	80005d4 <_MotorInit+0x16c>
 80005c8:	4b07      	ldr	r3, [pc, #28]	@ (80005e8 <_MotorInit+0x180>)
 80005ca:	689b      	ldr	r3, [r3, #8]
 80005cc:	681a      	ldr	r2, [r3, #0]
 80005ce:	2300      	movs	r3, #0
 80005d0:	6593      	str	r3, [r2, #88]	@ 0x58
}
 80005d2:	e004      	b.n	80005de <_MotorInit+0x176>
	__HAL_TIM_SET_COMPARE(_MotorSetting.__MotorN2_Tim, _MotorSetting.__MotorN2_TimChannel, 0);
 80005d4:	4b04      	ldr	r3, [pc, #16]	@ (80005e8 <_MotorInit+0x180>)
 80005d6:	689b      	ldr	r3, [r3, #8]
 80005d8:	681a      	ldr	r2, [r3, #0]
 80005da:	2300      	movs	r3, #0
 80005dc:	65d3      	str	r3, [r2, #92]	@ 0x5c
}
 80005de:	bf00      	nop
 80005e0:	3708      	adds	r7, #8
 80005e2:	46bd      	mov	sp, r7
 80005e4:	bd80      	pop	{r7, pc}
 80005e6:	bf00      	nop
 80005e8:	20000090 	.word	0x20000090

080005ec <_SwitchInit>:

#include "D-M-005/Switch.h"

_SWITCH_SETTING _SwitchSetting;

void _SwitchInit(_SWITCH_SETTING *__SwitchSetting){
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b082      	sub	sp, #8
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	6078      	str	r0, [r7, #4]
	_SwitchSetting.__ShiftRegisterClk_GpioPort = __SwitchSetting->__ShiftRegisterClk_GpioPort;
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	4a14      	ldr	r2, [pc, #80]	@ (800064c <_SwitchInit+0x60>)
 80005fa:	6013      	str	r3, [r2, #0]
	_SwitchSetting.__ShiftRegisterClk_Pin = __SwitchSetting->__ShiftRegisterClk_Pin;
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	889a      	ldrh	r2, [r3, #4]
 8000600:	4b12      	ldr	r3, [pc, #72]	@ (800064c <_SwitchInit+0x60>)
 8000602:	809a      	strh	r2, [r3, #4]
	_SwitchSetting.__ShiftRegisterQh_GpioPort = __SwitchSetting->__ShiftRegisterQh_GpioPort;
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	691b      	ldr	r3, [r3, #16]
 8000608:	4a10      	ldr	r2, [pc, #64]	@ (800064c <_SwitchInit+0x60>)
 800060a:	6113      	str	r3, [r2, #16]
	_SwitchSetting.__ShiftRegisterQh_Pin = __SwitchSetting->__ShiftRegisterQh_Pin;
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	8a9a      	ldrh	r2, [r3, #20]
 8000610:	4b0e      	ldr	r3, [pc, #56]	@ (800064c <_SwitchInit+0x60>)
 8000612:	829a      	strh	r2, [r3, #20]
	_SwitchSetting.__ShiftRegisterShLd_GpioPort = __SwitchSetting->__ShiftRegisterShLd_GpioPort;
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	689b      	ldr	r3, [r3, #8]
 8000618:	4a0c      	ldr	r2, [pc, #48]	@ (800064c <_SwitchInit+0x60>)
 800061a:	6093      	str	r3, [r2, #8]
	_SwitchSetting.__ShiftRegisterShLd_Pin = __SwitchSetting->__ShiftRegisterShLd_Pin;
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	899a      	ldrh	r2, [r3, #12]
 8000620:	4b0a      	ldr	r3, [pc, #40]	@ (800064c <_SwitchInit+0x60>)
 8000622:	819a      	strh	r2, [r3, #12]

	HAL_GPIO_WritePin(_SwitchSetting.__ShiftRegisterClk_GpioPort, _SwitchSetting.__ShiftRegisterClk_Pin, GPIO_PIN_RESET);
 8000624:	4b09      	ldr	r3, [pc, #36]	@ (800064c <_SwitchInit+0x60>)
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	4a08      	ldr	r2, [pc, #32]	@ (800064c <_SwitchInit+0x60>)
 800062a:	8891      	ldrh	r1, [r2, #4]
 800062c:	2200      	movs	r2, #0
 800062e:	4618      	mov	r0, r3
 8000630:	f001 fbc8 	bl	8001dc4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(_SwitchSetting.__ShiftRegisterShLd_GpioPort, _SwitchSetting.__ShiftRegisterShLd_Pin, GPIO_PIN_RESET);
 8000634:	4b05      	ldr	r3, [pc, #20]	@ (800064c <_SwitchInit+0x60>)
 8000636:	689b      	ldr	r3, [r3, #8]
 8000638:	4a04      	ldr	r2, [pc, #16]	@ (800064c <_SwitchInit+0x60>)
 800063a:	8991      	ldrh	r1, [r2, #12]
 800063c:	2200      	movs	r2, #0
 800063e:	4618      	mov	r0, r3
 8000640:	f001 fbc0 	bl	8001dc4 <HAL_GPIO_WritePin>
}
 8000644:	bf00      	nop
 8000646:	3708      	adds	r7, #8
 8000648:	46bd      	mov	sp, r7
 800064a:	bd80      	pop	{r7, pc}
 800064c:	200000b4 	.word	0x200000b4

08000650 <_SwitchRead>:

void _SwitchRead(_SWITCH_READ_DATA *__SwitchReadData){
 8000650:	b580      	push	{r7, lr}
 8000652:	b084      	sub	sp, #16
 8000654:	af00      	add	r7, sp, #0
 8000656:	6078      	str	r0, [r7, #4]
	uint8_t _readSwData = 0;
 8000658:	2300      	movs	r3, #0
 800065a:	73fb      	strb	r3, [r7, #15]

	HAL_GPIO_WritePin(_SwitchSetting.__ShiftRegisterShLd_GpioPort, _SwitchSetting.__ShiftRegisterShLd_Pin, GPIO_PIN_RESET);
 800065c:	4b5a      	ldr	r3, [pc, #360]	@ (80007c8 <_SwitchRead+0x178>)
 800065e:	689b      	ldr	r3, [r3, #8]
 8000660:	4a59      	ldr	r2, [pc, #356]	@ (80007c8 <_SwitchRead+0x178>)
 8000662:	8991      	ldrh	r1, [r2, #12]
 8000664:	2200      	movs	r2, #0
 8000666:	4618      	mov	r0, r3
 8000668:	f001 fbac 	bl	8001dc4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(_SwitchSetting.__ShiftRegisterClk_GpioPort, _SwitchSetting.__ShiftRegisterClk_Pin, GPIO_PIN_SET);
 800066c:	4b56      	ldr	r3, [pc, #344]	@ (80007c8 <_SwitchRead+0x178>)
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	4a55      	ldr	r2, [pc, #340]	@ (80007c8 <_SwitchRead+0x178>)
 8000672:	8891      	ldrh	r1, [r2, #4]
 8000674:	2201      	movs	r2, #1
 8000676:	4618      	mov	r0, r3
 8000678:	f001 fba4 	bl	8001dc4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(_SwitchSetting.__ShiftRegisterClk_GpioPort, _SwitchSetting.__ShiftRegisterClk_Pin, GPIO_PIN_RESET);
 800067c:	4b52      	ldr	r3, [pc, #328]	@ (80007c8 <_SwitchRead+0x178>)
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	4a51      	ldr	r2, [pc, #324]	@ (80007c8 <_SwitchRead+0x178>)
 8000682:	8891      	ldrh	r1, [r2, #4]
 8000684:	2200      	movs	r2, #0
 8000686:	4618      	mov	r0, r3
 8000688:	f001 fb9c 	bl	8001dc4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(_SwitchSetting.__ShiftRegisterShLd_GpioPort, _SwitchSetting.__ShiftRegisterShLd_Pin, GPIO_PIN_SET);
 800068c:	4b4e      	ldr	r3, [pc, #312]	@ (80007c8 <_SwitchRead+0x178>)
 800068e:	689b      	ldr	r3, [r3, #8]
 8000690:	4a4d      	ldr	r2, [pc, #308]	@ (80007c8 <_SwitchRead+0x178>)
 8000692:	8991      	ldrh	r1, [r2, #12]
 8000694:	2201      	movs	r2, #1
 8000696:	4618      	mov	r0, r3
 8000698:	f001 fb94 	bl	8001dc4 <HAL_GPIO_WritePin>

	_readSwData = _readSwData | (HAL_GPIO_ReadPin(_SwitchSetting.__ShiftRegisterQh_GpioPort, _SwitchSetting.__ShiftRegisterQh_Pin) << 7);
 800069c:	4b4a      	ldr	r3, [pc, #296]	@ (80007c8 <_SwitchRead+0x178>)
 800069e:	691b      	ldr	r3, [r3, #16]
 80006a0:	4a49      	ldr	r2, [pc, #292]	@ (80007c8 <_SwitchRead+0x178>)
 80006a2:	8a92      	ldrh	r2, [r2, #20]
 80006a4:	4611      	mov	r1, r2
 80006a6:	4618      	mov	r0, r3
 80006a8:	f001 fb74 	bl	8001d94 <HAL_GPIO_ReadPin>
 80006ac:	4603      	mov	r3, r0
 80006ae:	01db      	lsls	r3, r3, #7
 80006b0:	b25a      	sxtb	r2, r3
 80006b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80006b6:	4313      	orrs	r3, r2
 80006b8:	b25b      	sxtb	r3, r3
 80006ba:	73fb      	strb	r3, [r7, #15]
	for(int i = 6; i >= 0; i--){
 80006bc:	2306      	movs	r3, #6
 80006be:	60bb      	str	r3, [r7, #8]
 80006c0:	e025      	b.n	800070e <_SwitchRead+0xbe>
		HAL_GPIO_WritePin(_SwitchSetting.__ShiftRegisterClk_GpioPort, _SwitchSetting.__ShiftRegisterClk_Pin, GPIO_PIN_SET);
 80006c2:	4b41      	ldr	r3, [pc, #260]	@ (80007c8 <_SwitchRead+0x178>)
 80006c4:	681b      	ldr	r3, [r3, #0]
 80006c6:	4a40      	ldr	r2, [pc, #256]	@ (80007c8 <_SwitchRead+0x178>)
 80006c8:	8891      	ldrh	r1, [r2, #4]
 80006ca:	2201      	movs	r2, #1
 80006cc:	4618      	mov	r0, r3
 80006ce:	f001 fb79 	bl	8001dc4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(_SwitchSetting.__ShiftRegisterClk_GpioPort, _SwitchSetting.__ShiftRegisterClk_Pin, GPIO_PIN_RESET);
 80006d2:	4b3d      	ldr	r3, [pc, #244]	@ (80007c8 <_SwitchRead+0x178>)
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	4a3c      	ldr	r2, [pc, #240]	@ (80007c8 <_SwitchRead+0x178>)
 80006d8:	8891      	ldrh	r1, [r2, #4]
 80006da:	2200      	movs	r2, #0
 80006dc:	4618      	mov	r0, r3
 80006de:	f001 fb71 	bl	8001dc4 <HAL_GPIO_WritePin>

		_readSwData = _readSwData | (HAL_GPIO_ReadPin(_SwitchSetting.__ShiftRegisterQh_GpioPort, _SwitchSetting.__ShiftRegisterQh_Pin) << i);
 80006e2:	4b39      	ldr	r3, [pc, #228]	@ (80007c8 <_SwitchRead+0x178>)
 80006e4:	691b      	ldr	r3, [r3, #16]
 80006e6:	4a38      	ldr	r2, [pc, #224]	@ (80007c8 <_SwitchRead+0x178>)
 80006e8:	8a92      	ldrh	r2, [r2, #20]
 80006ea:	4611      	mov	r1, r2
 80006ec:	4618      	mov	r0, r3
 80006ee:	f001 fb51 	bl	8001d94 <HAL_GPIO_ReadPin>
 80006f2:	4603      	mov	r3, r0
 80006f4:	461a      	mov	r2, r3
 80006f6:	68bb      	ldr	r3, [r7, #8]
 80006f8:	fa02 f303 	lsl.w	r3, r2, r3
 80006fc:	b25a      	sxtb	r2, r3
 80006fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000702:	4313      	orrs	r3, r2
 8000704:	b25b      	sxtb	r3, r3
 8000706:	73fb      	strb	r3, [r7, #15]
	for(int i = 6; i >= 0; i--){
 8000708:	68bb      	ldr	r3, [r7, #8]
 800070a:	3b01      	subs	r3, #1
 800070c:	60bb      	str	r3, [r7, #8]
 800070e:	68bb      	ldr	r3, [r7, #8]
 8000710:	2b00      	cmp	r3, #0
 8000712:	dad6      	bge.n	80006c2 <_SwitchRead+0x72>
	}

	__SwitchReadData->_Address = 0;
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	2200      	movs	r2, #0
 8000718:	701a      	strb	r2, [r3, #0]
	__SwitchReadData->_Address |= (!!(_readSwData & (1U << __SWITCH_BIT_ADDRESS_4TH_DIGIT))) << 3;
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	781b      	ldrb	r3, [r3, #0]
 800071e:	b25a      	sxtb	r2, r3
 8000720:	7bfb      	ldrb	r3, [r7, #15]
 8000722:	00db      	lsls	r3, r3, #3
 8000724:	b25b      	sxtb	r3, r3
 8000726:	f003 0308 	and.w	r3, r3, #8
 800072a:	b25b      	sxtb	r3, r3
 800072c:	4313      	orrs	r3, r2
 800072e:	b25b      	sxtb	r3, r3
 8000730:	b2da      	uxtb	r2, r3
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	701a      	strb	r2, [r3, #0]
	__SwitchReadData->_Address |= (!!(_readSwData & (1U << __SWITCH_BIT_ADDRESS_3ND_DIGIT))) << 2;
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	781b      	ldrb	r3, [r3, #0]
 800073a:	b25a      	sxtb	r2, r3
 800073c:	7bfb      	ldrb	r3, [r7, #15]
 800073e:	005b      	lsls	r3, r3, #1
 8000740:	b25b      	sxtb	r3, r3
 8000742:	f003 0304 	and.w	r3, r3, #4
 8000746:	b25b      	sxtb	r3, r3
 8000748:	4313      	orrs	r3, r2
 800074a:	b25b      	sxtb	r3, r3
 800074c:	b2da      	uxtb	r2, r3
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	701a      	strb	r2, [r3, #0]
	__SwitchReadData->_Address |= (!!(_readSwData & (1U << __SWITCH_BIT_ADDRESS_2ND_DIGIT))) << 1;
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	781b      	ldrb	r3, [r3, #0]
 8000756:	b25a      	sxtb	r2, r3
 8000758:	7bfb      	ldrb	r3, [r7, #15]
 800075a:	085b      	lsrs	r3, r3, #1
 800075c:	b25b      	sxtb	r3, r3
 800075e:	f003 0302 	and.w	r3, r3, #2
 8000762:	b25b      	sxtb	r3, r3
 8000764:	4313      	orrs	r3, r2
 8000766:	b25b      	sxtb	r3, r3
 8000768:	b2da      	uxtb	r2, r3
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	701a      	strb	r2, [r3, #0]
	__SwitchReadData->_Address |= (!!(_readSwData & (1U << __SWITCH_BIT_ADDRESS_1ST_DIGIT))) << 0;
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	781b      	ldrb	r3, [r3, #0]
 8000772:	b25a      	sxtb	r2, r3
 8000774:	7bfb      	ldrb	r3, [r7, #15]
 8000776:	f003 0308 	and.w	r3, r3, #8
 800077a:	2b00      	cmp	r3, #0
 800077c:	bf14      	ite	ne
 800077e:	2301      	movne	r3, #1
 8000780:	2300      	moveq	r3, #0
 8000782:	b2db      	uxtb	r3, r3
 8000784:	b25b      	sxtb	r3, r3
 8000786:	4313      	orrs	r3, r2
 8000788:	b25b      	sxtb	r3, r3
 800078a:	b2da      	uxtb	r2, r3
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	701a      	strb	r2, [r3, #0]

	if(!!!(_readSwData & (1U << __SWITCH_BIT_OPERATION_MODE)))
 8000790:	7bfb      	ldrb	r3, [r7, #15]
 8000792:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000796:	2b00      	cmp	r3, #0
 8000798:	d103      	bne.n	80007a2 <_SwitchRead+0x152>
		__SwitchReadData->_OperatingMode = _SWITCH_OPERATION_MODE_NORMAL;
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	2200      	movs	r2, #0
 800079e:	705a      	strb	r2, [r3, #1]
 80007a0:	e002      	b.n	80007a8 <_SwitchRead+0x158>
	else
		__SwitchReadData->_OperatingMode = _SWITCH_OPERATION_MODE_PC_CONSOLE;
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	2201      	movs	r2, #1
 80007a6:	705a      	strb	r2, [r3, #1]

	if(!!(_readSwData & (1U << __SWITCH_BIT_COMMUNICATION_MODE)))
 80007a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	da03      	bge.n	80007b8 <_SwitchRead+0x168>
		__SwitchReadData->_CommunicationMode = _SWITCH_COMMUNICATION_MODE_CAN;
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	2200      	movs	r2, #0
 80007b4:	709a      	strb	r2, [r3, #2]
	else
		__SwitchReadData->_CommunicationMode = _SWITCH_COMMUNICATION_MODE_UART;
}
 80007b6:	e002      	b.n	80007be <_SwitchRead+0x16e>
		__SwitchReadData->_CommunicationMode = _SWITCH_COMMUNICATION_MODE_UART;
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	2201      	movs	r2, #1
 80007bc:	709a      	strb	r2, [r3, #2]
}
 80007be:	bf00      	nop
 80007c0:	3710      	adds	r7, #16
 80007c2:	46bd      	mov	sp, r7
 80007c4:	bd80      	pop	{r7, pc}
 80007c6:	bf00      	nop
 80007c8:	200000b4 	.word	0x200000b4

080007cc <Init>:
static void MX_TIM2_Init(void);
static void MX_TIM3_Init(void);
static void MX_TIM1_Init(void);
static void MX_TIM15_Init(void);
/* USER CODE BEGIN PFP */
void Init(){
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b082      	sub	sp, #8
 80007d0:	af00      	add	r7, sp, #0
	uint32_t _nowTick = HAL_GetTick();
 80007d2:	f000 fed7 	bl	8001584 <HAL_GetTick>
 80007d6:	6078      	str	r0, [r7, #4]
	uint32_t _lastReadTick = _nowTick;
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	603b      	str	r3, [r7, #0]

	//Start Program
	_Init_7Seg();
 80007dc:	f000 f88c 	bl	80008f8 <_Init_7Seg>
	_7SegReset();
 80007e0:	f7ff fd80 	bl	80002e4 <_7SegReset>

	_7SegSetUpAnimation(_SETUP_STEP_START_PROGRAM);
 80007e4:	2001      	movs	r0, #1
 80007e6:	f7ff fd89 	bl	80002fc <_7SegSetUpAnimation>
	_lastReadTick = _nowTick;
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	603b      	str	r3, [r7, #0]

	//Init Motor
	_Init_Motor();
 80007ee:	f000 f8a3 	bl	8000938 <_Init_Motor>

	while((_nowTick - _lastReadTick) <= 200)
 80007f2:	e002      	b.n	80007fa <Init+0x2e>
		_nowTick = HAL_GetTick();
 80007f4:	f000 fec6 	bl	8001584 <HAL_GetTick>
 80007f8:	6078      	str	r0, [r7, #4]
	while((_nowTick - _lastReadTick) <= 200)
 80007fa:	687a      	ldr	r2, [r7, #4]
 80007fc:	683b      	ldr	r3, [r7, #0]
 80007fe:	1ad3      	subs	r3, r2, r3
 8000800:	2bc8      	cmp	r3, #200	@ 0xc8
 8000802:	d9f7      	bls.n	80007f4 <Init+0x28>
	_lastReadTick = _nowTick;
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	603b      	str	r3, [r7, #0]

	_7SegSetUpAnimation(_SETUP_STEP_SETUP_MOTOR);
 8000808:	2002      	movs	r0, #2
 800080a:	f7ff fd77 	bl	80002fc <_7SegSetUpAnimation>

	//Init Switch And Read State
	_Init_Switch();
 800080e:	f000 f8c1 	bl	8000994 <_Init_Switch>

	while((_nowTick - _lastReadTick) <= 200)
 8000812:	e002      	b.n	800081a <Init+0x4e>
		_nowTick = HAL_GetTick();
 8000814:	f000 feb6 	bl	8001584 <HAL_GetTick>
 8000818:	6078      	str	r0, [r7, #4]
	while((_nowTick - _lastReadTick) <= 200)
 800081a:	687a      	ldr	r2, [r7, #4]
 800081c:	683b      	ldr	r3, [r7, #0]
 800081e:	1ad3      	subs	r3, r2, r3
 8000820:	2bc8      	cmp	r3, #200	@ 0xc8
 8000822:	d9f7      	bls.n	8000814 <Init+0x48>
	_lastReadTick = _nowTick;
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	603b      	str	r3, [r7, #0]
	_7SegSetUpAnimation(_SETUP_STEP_SETUP_AND_READ_SWICH);
 8000828:	2003      	movs	r0, #3
 800082a:	f7ff fd67 	bl	80002fc <_7SegSetUpAnimation>


	while((_nowTick - _lastReadTick) <= 200)
 800082e:	e002      	b.n	8000836 <Init+0x6a>
		_nowTick = HAL_GetTick();
 8000830:	f000 fea8 	bl	8001584 <HAL_GetTick>
 8000834:	6078      	str	r0, [r7, #4]
	while((_nowTick - _lastReadTick) <= 200)
 8000836:	687a      	ldr	r2, [r7, #4]
 8000838:	683b      	ldr	r3, [r7, #0]
 800083a:	1ad3      	subs	r3, r2, r3
 800083c:	2bc8      	cmp	r3, #200	@ 0xc8
 800083e:	d9f7      	bls.n	8000830 <Init+0x64>
	_lastReadTick = _nowTick;
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	603b      	str	r3, [r7, #0]
	_7SegSetUpAnimation(_SETUP_STEP_NULL2);
 8000844:	2004      	movs	r0, #4
 8000846:	f7ff fd59 	bl	80002fc <_7SegSetUpAnimation>


	while((_nowTick - _lastReadTick) <= 200)
 800084a:	e002      	b.n	8000852 <Init+0x86>
		_nowTick = HAL_GetTick();
 800084c:	f000 fe9a 	bl	8001584 <HAL_GetTick>
 8000850:	6078      	str	r0, [r7, #4]
	while((_nowTick - _lastReadTick) <= 200)
 8000852:	687a      	ldr	r2, [r7, #4]
 8000854:	683b      	ldr	r3, [r7, #0]
 8000856:	1ad3      	subs	r3, r2, r3
 8000858:	2bc8      	cmp	r3, #200	@ 0xc8
 800085a:	d9f7      	bls.n	800084c <Init+0x80>
	_lastReadTick = _nowTick;
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	603b      	str	r3, [r7, #0]
	_7SegSetUpAnimation(_SETUP_STEP_NULL3);
 8000860:	2005      	movs	r0, #5
 8000862:	f7ff fd4b 	bl	80002fc <_7SegSetUpAnimation>


	while((_nowTick - _lastReadTick) <= 200)
 8000866:	e002      	b.n	800086e <Init+0xa2>
		_nowTick = HAL_GetTick();
 8000868:	f000 fe8c 	bl	8001584 <HAL_GetTick>
 800086c:	6078      	str	r0, [r7, #4]
	while((_nowTick - _lastReadTick) <= 200)
 800086e:	687a      	ldr	r2, [r7, #4]
 8000870:	683b      	ldr	r3, [r7, #0]
 8000872:	1ad3      	subs	r3, r2, r3
 8000874:	2bc8      	cmp	r3, #200	@ 0xc8
 8000876:	d9f7      	bls.n	8000868 <Init+0x9c>
	_lastReadTick = _nowTick;
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	603b      	str	r3, [r7, #0]
	_7SegSetUpAnimation(_SETUP_STEP_NULL4);
 800087c:	2006      	movs	r0, #6
 800087e:	f7ff fd3d 	bl	80002fc <_7SegSetUpAnimation>


	while((_nowTick - _lastReadTick) <= 200)
 8000882:	e002      	b.n	800088a <Init+0xbe>
		_nowTick = HAL_GetTick();
 8000884:	f000 fe7e 	bl	8001584 <HAL_GetTick>
 8000888:	6078      	str	r0, [r7, #4]
	while((_nowTick - _lastReadTick) <= 200)
 800088a:	687a      	ldr	r2, [r7, #4]
 800088c:	683b      	ldr	r3, [r7, #0]
 800088e:	1ad3      	subs	r3, r2, r3
 8000890:	2bc8      	cmp	r3, #200	@ 0xc8
 8000892:	d9f7      	bls.n	8000884 <Init+0xb8>
	_lastReadTick = _nowTick;
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	603b      	str	r3, [r7, #0]
	_7SegSetUpAnimation(_SETUP_STEP_NULL5);
 8000898:	2007      	movs	r0, #7
 800089a:	f7ff fd2f 	bl	80002fc <_7SegSetUpAnimation>


	while((_nowTick - _lastReadTick) <= 200)
 800089e:	e002      	b.n	80008a6 <Init+0xda>
		_nowTick = HAL_GetTick();
 80008a0:	f000 fe70 	bl	8001584 <HAL_GetTick>
 80008a4:	6078      	str	r0, [r7, #4]
	while((_nowTick - _lastReadTick) <= 200)
 80008a6:	687a      	ldr	r2, [r7, #4]
 80008a8:	683b      	ldr	r3, [r7, #0]
 80008aa:	1ad3      	subs	r3, r2, r3
 80008ac:	2bc8      	cmp	r3, #200	@ 0xc8
 80008ae:	d9f7      	bls.n	80008a0 <Init+0xd4>
	_lastReadTick = _nowTick;
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	603b      	str	r3, [r7, #0]
	_7SegSetUpAnimation(_SETUP_STEP_NULL6);
 80008b4:	2008      	movs	r0, #8
 80008b6:	f7ff fd21 	bl	80002fc <_7SegSetUpAnimation>


	while((_nowTick - _lastReadTick) <= 200)
 80008ba:	e002      	b.n	80008c2 <Init+0xf6>
		_nowTick = HAL_GetTick();
 80008bc:	f000 fe62 	bl	8001584 <HAL_GetTick>
 80008c0:	6078      	str	r0, [r7, #4]
	while((_nowTick - _lastReadTick) <= 200)
 80008c2:	687a      	ldr	r2, [r7, #4]
 80008c4:	683b      	ldr	r3, [r7, #0]
 80008c6:	1ad3      	subs	r3, r2, r3
 80008c8:	2bc8      	cmp	r3, #200	@ 0xc8
 80008ca:	d9f7      	bls.n	80008bc <Init+0xf0>
	_lastReadTick = _nowTick;
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	603b      	str	r3, [r7, #0]
	_7SegSetUpAnimation(_SETUP_STEP_FINISH);
 80008d0:	2009      	movs	r0, #9
 80008d2:	f7ff fd13 	bl	80002fc <_7SegSetUpAnimation>


	while((_nowTick - _lastReadTick) <= 200)
 80008d6:	e002      	b.n	80008de <Init+0x112>
		_nowTick = HAL_GetTick();
 80008d8:	f000 fe54 	bl	8001584 <HAL_GetTick>
 80008dc:	6078      	str	r0, [r7, #4]
	while((_nowTick - _lastReadTick) <= 200)
 80008de:	687a      	ldr	r2, [r7, #4]
 80008e0:	683b      	ldr	r3, [r7, #0]
 80008e2:	1ad3      	subs	r3, r2, r3
 80008e4:	2bc8      	cmp	r3, #200	@ 0xc8
 80008e6:	d9f7      	bls.n	80008d8 <Init+0x10c>
	_lastReadTick = _nowTick;
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	603b      	str	r3, [r7, #0]
	_7SegReset();
 80008ec:	f7ff fcfa 	bl	80002e4 <_7SegReset>
}
 80008f0:	bf00      	nop
 80008f2:	3708      	adds	r7, #8
 80008f4:	46bd      	mov	sp, r7
 80008f6:	bd80      	pop	{r7, pc}

080008f8 <_Init_7Seg>:

void _Init_7Seg(){
 80008f8:	b580      	push	{r7, lr}
 80008fa:	af00      	add	r7, sp, #0
	Setting_7Seg.__7SegSi_GpioPort = _7SEG_SI_GPIO_Port;
 80008fc:	4b0c      	ldr	r3, [pc, #48]	@ (8000930 <_Init_7Seg+0x38>)
 80008fe:	4a0d      	ldr	r2, [pc, #52]	@ (8000934 <_Init_7Seg+0x3c>)
 8000900:	601a      	str	r2, [r3, #0]
	Setting_7Seg.__7SegSi_Pin = _7SEG_SI_Pin;
 8000902:	4b0b      	ldr	r3, [pc, #44]	@ (8000930 <_Init_7Seg+0x38>)
 8000904:	2240      	movs	r2, #64	@ 0x40
 8000906:	809a      	strh	r2, [r3, #4]
	Setting_7Seg.__7SegRck_GpioPort = _7SEG_RCK_GPIO_Port;
 8000908:	4b09      	ldr	r3, [pc, #36]	@ (8000930 <_Init_7Seg+0x38>)
 800090a:	4a0a      	ldr	r2, [pc, #40]	@ (8000934 <_Init_7Seg+0x3c>)
 800090c:	609a      	str	r2, [r3, #8]
	Setting_7Seg.__7SegRck_Pin = _7SEG_RCK_Pin;
 800090e:	4b08      	ldr	r3, [pc, #32]	@ (8000930 <_Init_7Seg+0x38>)
 8000910:	2220      	movs	r2, #32
 8000912:	819a      	strh	r2, [r3, #12]
	Setting_7Seg.__7SegSck_GpioPort = _7SEG_SCK_GPIO_Port;
 8000914:	4b06      	ldr	r3, [pc, #24]	@ (8000930 <_Init_7Seg+0x38>)
 8000916:	4a07      	ldr	r2, [pc, #28]	@ (8000934 <_Init_7Seg+0x3c>)
 8000918:	611a      	str	r2, [r3, #16]
	Setting_7Seg.__7SegSck_Pin = _7SEG_SCK_Pin;
 800091a:	4b05      	ldr	r3, [pc, #20]	@ (8000930 <_Init_7Seg+0x38>)
 800091c:	2210      	movs	r2, #16
 800091e:	829a      	strh	r2, [r3, #20]

	_7SegInit(&Setting_7Seg);
 8000920:	4803      	ldr	r0, [pc, #12]	@ (8000930 <_Init_7Seg+0x38>)
 8000922:	f7ff fca5 	bl	8000270 <_7SegInit>
	_7SegReset();
 8000926:	f7ff fcdd 	bl	80002e4 <_7SegReset>
}
 800092a:	bf00      	nop
 800092c:	bd80      	pop	{r7, pc}
 800092e:	bf00      	nop
 8000930:	20000334 	.word	0x20000334
 8000934:	48000400 	.word	0x48000400

08000938 <_Init_Motor>:

void _Init_Motor(){
 8000938:	b580      	push	{r7, lr}
 800093a:	af00      	add	r7, sp, #0
	Setting_Motor.__MotorN1_Tim = &htim2;
 800093c:	4b10      	ldr	r3, [pc, #64]	@ (8000980 <_Init_Motor+0x48>)
 800093e:	4a11      	ldr	r2, [pc, #68]	@ (8000984 <_Init_Motor+0x4c>)
 8000940:	601a      	str	r2, [r3, #0]
	Setting_Motor.__MotorN1_TimChannel = TIM_CHANNEL_2;
 8000942:	4b0f      	ldr	r3, [pc, #60]	@ (8000980 <_Init_Motor+0x48>)
 8000944:	2204      	movs	r2, #4
 8000946:	605a      	str	r2, [r3, #4]
	Setting_Motor.__MotorN2_Tim = &htim3;
 8000948:	4b0d      	ldr	r3, [pc, #52]	@ (8000980 <_Init_Motor+0x48>)
 800094a:	4a0f      	ldr	r2, [pc, #60]	@ (8000988 <_Init_Motor+0x50>)
 800094c:	609a      	str	r2, [r3, #8]
	Setting_Motor.__MotorN2_TimChannel = TIM_CHANNEL_3;
 800094e:	4b0c      	ldr	r3, [pc, #48]	@ (8000980 <_Init_Motor+0x48>)
 8000950:	2208      	movs	r2, #8
 8000952:	60da      	str	r2, [r3, #12]

	Setting_Motor.__MotorP1_GpioPort = SIG_P1_GPIO_Port;
 8000954:	4b0a      	ldr	r3, [pc, #40]	@ (8000980 <_Init_Motor+0x48>)
 8000956:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 800095a:	611a      	str	r2, [r3, #16]
	Setting_Motor.__MotorP1_Pin = SIG_P1_Pin;
 800095c:	4b08      	ldr	r3, [pc, #32]	@ (8000980 <_Init_Motor+0x48>)
 800095e:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000962:	829a      	strh	r2, [r3, #20]
	Setting_Motor.__MotorP2_GpioPort = SIG_P2_GPIO_Port;
 8000964:	4b06      	ldr	r3, [pc, #24]	@ (8000980 <_Init_Motor+0x48>)
 8000966:	4a09      	ldr	r2, [pc, #36]	@ (800098c <_Init_Motor+0x54>)
 8000968:	619a      	str	r2, [r3, #24]
	Setting_Motor.__MotorP2_Pin = SIG_P2_Pin;
 800096a:	4b05      	ldr	r3, [pc, #20]	@ (8000980 <_Init_Motor+0x48>)
 800096c:	2202      	movs	r2, #2
 800096e:	839a      	strh	r2, [r3, #28]

	Setting_Motor.__DeadTime_TIM = &htim1;
 8000970:	4b03      	ldr	r3, [pc, #12]	@ (8000980 <_Init_Motor+0x48>)
 8000972:	4a07      	ldr	r2, [pc, #28]	@ (8000990 <_Init_Motor+0x58>)
 8000974:	621a      	str	r2, [r3, #32]

	_MotorInit(&Setting_Motor);
 8000976:	4802      	ldr	r0, [pc, #8]	@ (8000980 <_Init_Motor+0x48>)
 8000978:	f7ff fd76 	bl	8000468 <_MotorInit>
}
 800097c:	bf00      	nop
 800097e:	bd80      	pop	{r7, pc}
 8000980:	2000034c 	.word	0x2000034c
 8000984:	20000140 	.word	0x20000140
 8000988:	2000018c 	.word	0x2000018c
 800098c:	48000400 	.word	0x48000400
 8000990:	200000f4 	.word	0x200000f4

08000994 <_Init_Switch>:

void _Init_Switch(){
 8000994:	b580      	push	{r7, lr}
 8000996:	af00      	add	r7, sp, #0
	Setting_Swich.__ShiftRegisterClk_GpioPort = SW_CLK_GPIO_Port;
 8000998:	4b0e      	ldr	r3, [pc, #56]	@ (80009d4 <_Init_Switch+0x40>)
 800099a:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 800099e:	601a      	str	r2, [r3, #0]
	Setting_Swich.__ShiftRegisterClk_Pin = SW_CLK_Pin;
 80009a0:	4b0c      	ldr	r3, [pc, #48]	@ (80009d4 <_Init_Switch+0x40>)
 80009a2:	2210      	movs	r2, #16
 80009a4:	809a      	strh	r2, [r3, #4]
	Setting_Swich.__ShiftRegisterQh_GpioPort = SW_QH_GPIO_Port;
 80009a6:	4b0b      	ldr	r3, [pc, #44]	@ (80009d4 <_Init_Switch+0x40>)
 80009a8:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80009ac:	611a      	str	r2, [r3, #16]
	Setting_Swich.__ShiftRegisterQh_Pin = SW_QH_Pin;
 80009ae:	4b09      	ldr	r3, [pc, #36]	@ (80009d4 <_Init_Switch+0x40>)
 80009b0:	2201      	movs	r2, #1
 80009b2:	829a      	strh	r2, [r3, #20]
	Setting_Swich.__ShiftRegisterShLd_GpioPort = SW_SH_LD_GPIO_Port;
 80009b4:	4b07      	ldr	r3, [pc, #28]	@ (80009d4 <_Init_Switch+0x40>)
 80009b6:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80009ba:	609a      	str	r2, [r3, #8]
	Setting_Swich.__ShiftRegisterShLd_Pin = SW_SH_LD_Pin;
 80009bc:	4b05      	ldr	r3, [pc, #20]	@ (80009d4 <_Init_Switch+0x40>)
 80009be:	2202      	movs	r2, #2
 80009c0:	819a      	strh	r2, [r3, #12]

	_SwitchInit(&Setting_Swich);
 80009c2:	4804      	ldr	r0, [pc, #16]	@ (80009d4 <_Init_Switch+0x40>)
 80009c4:	f7ff fe12 	bl	80005ec <_SwitchInit>
	_SwitchRead(&SwichReadData);
 80009c8:	4803      	ldr	r0, [pc, #12]	@ (80009d8 <_Init_Switch+0x44>)
 80009ca:	f7ff fe41 	bl	8000650 <_SwitchRead>
}
 80009ce:	bf00      	nop
 80009d0:	bd80      	pop	{r7, pc}
 80009d2:	bf00      	nop
 80009d4:	20000370 	.word	0x20000370
 80009d8:	20000388 	.word	0x20000388

080009dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b0a2      	sub	sp, #136	@ 0x88
 80009e0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009e2:	f000 fd75 	bl	80014d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009e6:	f000 f83d 	bl	8000a64 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009ea:	f000 fac5 	bl	8000f78 <MX_GPIO_Init>
  MX_CAN_Init();
 80009ee:	f000 f895 	bl	8000b1c <MX_CAN_Init>
  MX_USART1_UART_Init();
 80009f2:	f000 fa5d 	bl	8000eb0 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80009f6:	f000 fa8d 	bl	8000f14 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 80009fa:	f000 f919 	bl	8000c30 <MX_TIM2_Init>
  MX_TIM3_Init();
 80009fe:	f000 f98d 	bl	8000d1c <MX_TIM3_Init>
  MX_TIM1_Init();
 8000a02:	f000 f8c1 	bl	8000b88 <MX_TIM1_Init>
  MX_TIM15_Init();
 8000a06:	f000 fa01 	bl	8000e0c <MX_TIM15_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(LED_POWER_GPIO_Port, LED_POWER_Pin, GPIO_PIN_SET); //Power Led ON
 8000a0a:	2201      	movs	r2, #1
 8000a0c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000a10:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a14:	f001 f9d6 	bl	8001dc4 <HAL_GPIO_WritePin>

  Init(); //Init
 8000a18:	f7ff fed8 	bl	80007cc <Init>

  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET);
 8000a1c:	2201      	movs	r2, #1
 8000a1e:	2180      	movs	r1, #128	@ 0x80
 8000a20:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a24:	f001 f9ce 	bl	8001dc4 <HAL_GPIO_WritePin>

  char str[128];

  sprintf(str, "0x%02x : %u : %u\r\n", SwichReadData._Address, SwichReadData._OperatingMode, SwichReadData._CommunicationMode);
 8000a28:	4b0b      	ldr	r3, [pc, #44]	@ (8000a58 <main+0x7c>)
 8000a2a:	781b      	ldrb	r3, [r3, #0]
 8000a2c:	461a      	mov	r2, r3
 8000a2e:	4b0a      	ldr	r3, [pc, #40]	@ (8000a58 <main+0x7c>)
 8000a30:	785b      	ldrb	r3, [r3, #1]
 8000a32:	4619      	mov	r1, r3
 8000a34:	4b08      	ldr	r3, [pc, #32]	@ (8000a58 <main+0x7c>)
 8000a36:	789b      	ldrb	r3, [r3, #2]
 8000a38:	4638      	mov	r0, r7
 8000a3a:	9300      	str	r3, [sp, #0]
 8000a3c:	460b      	mov	r3, r1
 8000a3e:	4907      	ldr	r1, [pc, #28]	@ (8000a5c <main+0x80>)
 8000a40:	f004 fdfc 	bl	800563c <siprintf>
  HAL_UART_Transmit(&huart1, (uint8_t *)str, 14, 300);
 8000a44:	4639      	mov	r1, r7
 8000a46:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8000a4a:	220e      	movs	r2, #14
 8000a4c:	4804      	ldr	r0, [pc, #16]	@ (8000a60 <main+0x84>)
 8000a4e:	f003 fec9 	bl	80047e4 <HAL_UART_Transmit>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000a52:	bf00      	nop
 8000a54:	e7fd      	b.n	8000a52 <main+0x76>
 8000a56:	bf00      	nop
 8000a58:	20000388 	.word	0x20000388
 8000a5c:	08005f94 	.word	0x08005f94
 8000a60:	20000224 	.word	0x20000224

08000a64 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b096      	sub	sp, #88	@ 0x58
 8000a68:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a6a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000a6e:	2228      	movs	r2, #40	@ 0x28
 8000a70:	2100      	movs	r1, #0
 8000a72:	4618      	mov	r0, r3
 8000a74:	f004 fe02 	bl	800567c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a78:	f107 031c 	add.w	r3, r7, #28
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	601a      	str	r2, [r3, #0]
 8000a80:	605a      	str	r2, [r3, #4]
 8000a82:	609a      	str	r2, [r3, #8]
 8000a84:	60da      	str	r2, [r3, #12]
 8000a86:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a88:	1d3b      	adds	r3, r7, #4
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	601a      	str	r2, [r3, #0]
 8000a8e:	605a      	str	r2, [r3, #4]
 8000a90:	609a      	str	r2, [r3, #8]
 8000a92:	60da      	str	r2, [r3, #12]
 8000a94:	611a      	str	r2, [r3, #16]
 8000a96:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a98:	2302      	movs	r3, #2
 8000a9a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a9c:	2301      	movs	r3, #1
 8000a9e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000aa0:	2310      	movs	r3, #16
 8000aa2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000aa4:	2302      	movs	r3, #2
 8000aa6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL15;
 8000aac:	f44f 1350 	mov.w	r3, #3407872	@ 0x340000
 8000ab0:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ab2:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	f001 f99c 	bl	8001df4 <HAL_RCC_OscConfig>
 8000abc:	4603      	mov	r3, r0
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d001      	beq.n	8000ac6 <SystemClock_Config+0x62>
  {
    Error_Handler();
 8000ac2:	f000 fabb 	bl	800103c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ac6:	230f      	movs	r3, #15
 8000ac8:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000aca:	2302      	movs	r3, #2
 8000acc:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000ad2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000ad6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000adc:	f107 031c 	add.w	r3, r7, #28
 8000ae0:	2102      	movs	r1, #2
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	f002 f9c4 	bl	8002e70 <HAL_RCC_ClockConfig>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d001      	beq.n	8000af2 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000aee:	f000 faa5 	bl	800103c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_TIM1;
 8000af2:	f241 0301 	movw	r3, #4097	@ 0x1001
 8000af6:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000af8:	2300      	movs	r3, #0
 8000afa:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 8000afc:	2300      	movs	r3, #0
 8000afe:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b00:	1d3b      	adds	r3, r7, #4
 8000b02:	4618      	mov	r0, r3
 8000b04:	f002 fbd4 	bl	80032b0 <HAL_RCCEx_PeriphCLKConfig>
 8000b08:	4603      	mov	r3, r0
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d001      	beq.n	8000b12 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000b0e:	f000 fa95 	bl	800103c <Error_Handler>
  }
}
 8000b12:	bf00      	nop
 8000b14:	3758      	adds	r7, #88	@ 0x58
 8000b16:	46bd      	mov	sp, r7
 8000b18:	bd80      	pop	{r7, pc}
	...

08000b1c <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 8000b20:	4b17      	ldr	r3, [pc, #92]	@ (8000b80 <MX_CAN_Init+0x64>)
 8000b22:	4a18      	ldr	r2, [pc, #96]	@ (8000b84 <MX_CAN_Init+0x68>)
 8000b24:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 3;
 8000b26:	4b16      	ldr	r3, [pc, #88]	@ (8000b80 <MX_CAN_Init+0x64>)
 8000b28:	2203      	movs	r2, #3
 8000b2a:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000b2c:	4b14      	ldr	r3, [pc, #80]	@ (8000b80 <MX_CAN_Init+0x64>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000b32:	4b13      	ldr	r3, [pc, #76]	@ (8000b80 <MX_CAN_Init+0x64>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_7TQ;
 8000b38:	4b11      	ldr	r3, [pc, #68]	@ (8000b80 <MX_CAN_Init+0x64>)
 8000b3a:	f44f 22c0 	mov.w	r2, #393216	@ 0x60000
 8000b3e:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000b40:	4b0f      	ldr	r3, [pc, #60]	@ (8000b80 <MX_CAN_Init+0x64>)
 8000b42:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8000b46:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000b48:	4b0d      	ldr	r3, [pc, #52]	@ (8000b80 <MX_CAN_Init+0x64>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8000b4e:	4b0c      	ldr	r3, [pc, #48]	@ (8000b80 <MX_CAN_Init+0x64>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000b54:	4b0a      	ldr	r3, [pc, #40]	@ (8000b80 <MX_CAN_Init+0x64>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8000b5a:	4b09      	ldr	r3, [pc, #36]	@ (8000b80 <MX_CAN_Init+0x64>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000b60:	4b07      	ldr	r3, [pc, #28]	@ (8000b80 <MX_CAN_Init+0x64>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8000b66:	4b06      	ldr	r3, [pc, #24]	@ (8000b80 <MX_CAN_Init+0x64>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000b6c:	4804      	ldr	r0, [pc, #16]	@ (8000b80 <MX_CAN_Init+0x64>)
 8000b6e:	f000 fd15 	bl	800159c <HAL_CAN_Init>
 8000b72:	4603      	mov	r3, r0
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d001      	beq.n	8000b7c <MX_CAN_Init+0x60>
  {
    Error_Handler();
 8000b78:	f000 fa60 	bl	800103c <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8000b7c:	bf00      	nop
 8000b7e:	bd80      	pop	{r7, pc}
 8000b80:	200000cc 	.word	0x200000cc
 8000b84:	40006400 	.word	0x40006400

08000b88 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b088      	sub	sp, #32
 8000b8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b8e:	f107 0310 	add.w	r3, r7, #16
 8000b92:	2200      	movs	r2, #0
 8000b94:	601a      	str	r2, [r3, #0]
 8000b96:	605a      	str	r2, [r3, #4]
 8000b98:	609a      	str	r2, [r3, #8]
 8000b9a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b9c:	1d3b      	adds	r3, r7, #4
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	601a      	str	r2, [r3, #0]
 8000ba2:	605a      	str	r2, [r3, #4]
 8000ba4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000ba6:	4b20      	ldr	r3, [pc, #128]	@ (8000c28 <MX_TIM1_Init+0xa0>)
 8000ba8:	4a20      	ldr	r2, [pc, #128]	@ (8000c2c <MX_TIM1_Init+0xa4>)
 8000baa:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 6-1;
 8000bac:	4b1e      	ldr	r3, [pc, #120]	@ (8000c28 <MX_TIM1_Init+0xa0>)
 8000bae:	2205      	movs	r2, #5
 8000bb0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bb2:	4b1d      	ldr	r3, [pc, #116]	@ (8000c28 <MX_TIM1_Init+0xa0>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xffff-1;
 8000bb8:	4b1b      	ldr	r3, [pc, #108]	@ (8000c28 <MX_TIM1_Init+0xa0>)
 8000bba:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8000bbe:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bc0:	4b19      	ldr	r3, [pc, #100]	@ (8000c28 <MX_TIM1_Init+0xa0>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000bc6:	4b18      	ldr	r3, [pc, #96]	@ (8000c28 <MX_TIM1_Init+0xa0>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bcc:	4b16      	ldr	r3, [pc, #88]	@ (8000c28 <MX_TIM1_Init+0xa0>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000bd2:	4815      	ldr	r0, [pc, #84]	@ (8000c28 <MX_TIM1_Init+0xa0>)
 8000bd4:	f002 fc92 	bl	80034fc <HAL_TIM_Base_Init>
 8000bd8:	4603      	mov	r3, r0
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d001      	beq.n	8000be2 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8000bde:	f000 fa2d 	bl	800103c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000be2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000be6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000be8:	f107 0310 	add.w	r3, r7, #16
 8000bec:	4619      	mov	r1, r3
 8000bee:	480e      	ldr	r0, [pc, #56]	@ (8000c28 <MX_TIM1_Init+0xa0>)
 8000bf0:	f003 f86c 	bl	8003ccc <HAL_TIM_ConfigClockSource>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d001      	beq.n	8000bfe <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8000bfa:	f000 fa1f 	bl	800103c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000c02:	2300      	movs	r3, #0
 8000c04:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c06:	2300      	movs	r3, #0
 8000c08:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000c0a:	1d3b      	adds	r3, r7, #4
 8000c0c:	4619      	mov	r1, r3
 8000c0e:	4806      	ldr	r0, [pc, #24]	@ (8000c28 <MX_TIM1_Init+0xa0>)
 8000c10:	f003 fd10 	bl	8004634 <HAL_TIMEx_MasterConfigSynchronization>
 8000c14:	4603      	mov	r3, r0
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d001      	beq.n	8000c1e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000c1a:	f000 fa0f 	bl	800103c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000c1e:	bf00      	nop
 8000c20:	3720      	adds	r7, #32
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bd80      	pop	{r7, pc}
 8000c26:	bf00      	nop
 8000c28:	200000f4 	.word	0x200000f4
 8000c2c:	40012c00 	.word	0x40012c00

08000c30 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b08e      	sub	sp, #56	@ 0x38
 8000c34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c36:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	601a      	str	r2, [r3, #0]
 8000c3e:	605a      	str	r2, [r3, #4]
 8000c40:	609a      	str	r2, [r3, #8]
 8000c42:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c44:	f107 031c 	add.w	r3, r7, #28
 8000c48:	2200      	movs	r2, #0
 8000c4a:	601a      	str	r2, [r3, #0]
 8000c4c:	605a      	str	r2, [r3, #4]
 8000c4e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c50:	463b      	mov	r3, r7
 8000c52:	2200      	movs	r2, #0
 8000c54:	601a      	str	r2, [r3, #0]
 8000c56:	605a      	str	r2, [r3, #4]
 8000c58:	609a      	str	r2, [r3, #8]
 8000c5a:	60da      	str	r2, [r3, #12]
 8000c5c:	611a      	str	r2, [r3, #16]
 8000c5e:	615a      	str	r2, [r3, #20]
 8000c60:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000c62:	4b2d      	ldr	r3, [pc, #180]	@ (8000d18 <MX_TIM2_Init+0xe8>)
 8000c64:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000c68:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000c6a:	4b2b      	ldr	r3, [pc, #172]	@ (8000d18 <MX_TIM2_Init+0xe8>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c70:	4b29      	ldr	r3, [pc, #164]	@ (8000d18 <MX_TIM2_Init+0xe8>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 60000-1;
 8000c76:	4b28      	ldr	r3, [pc, #160]	@ (8000d18 <MX_TIM2_Init+0xe8>)
 8000c78:	f64e 225f 	movw	r2, #59999	@ 0xea5f
 8000c7c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c7e:	4b26      	ldr	r3, [pc, #152]	@ (8000d18 <MX_TIM2_Init+0xe8>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c84:	4b24      	ldr	r3, [pc, #144]	@ (8000d18 <MX_TIM2_Init+0xe8>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000c8a:	4823      	ldr	r0, [pc, #140]	@ (8000d18 <MX_TIM2_Init+0xe8>)
 8000c8c:	f002 fc36 	bl	80034fc <HAL_TIM_Base_Init>
 8000c90:	4603      	mov	r3, r0
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d001      	beq.n	8000c9a <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8000c96:	f000 f9d1 	bl	800103c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c9a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000c9e:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000ca0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000ca4:	4619      	mov	r1, r3
 8000ca6:	481c      	ldr	r0, [pc, #112]	@ (8000d18 <MX_TIM2_Init+0xe8>)
 8000ca8:	f003 f810 	bl	8003ccc <HAL_TIM_ConfigClockSource>
 8000cac:	4603      	mov	r3, r0
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d001      	beq.n	8000cb6 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8000cb2:	f000 f9c3 	bl	800103c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000cb6:	4818      	ldr	r0, [pc, #96]	@ (8000d18 <MX_TIM2_Init+0xe8>)
 8000cb8:	f002 fd2d 	bl	8003716 <HAL_TIM_PWM_Init>
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d001      	beq.n	8000cc6 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8000cc2:	f000 f9bb 	bl	800103c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000cce:	f107 031c 	add.w	r3, r7, #28
 8000cd2:	4619      	mov	r1, r3
 8000cd4:	4810      	ldr	r0, [pc, #64]	@ (8000d18 <MX_TIM2_Init+0xe8>)
 8000cd6:	f003 fcad 	bl	8004634 <HAL_TIMEx_MasterConfigSynchronization>
 8000cda:	4603      	mov	r3, r0
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d001      	beq.n	8000ce4 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8000ce0:	f000 f9ac 	bl	800103c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ce4:	2360      	movs	r3, #96	@ 0x60
 8000ce6:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000cec:	2300      	movs	r3, #0
 8000cee:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000cf4:	463b      	mov	r3, r7
 8000cf6:	2204      	movs	r2, #4
 8000cf8:	4619      	mov	r1, r3
 8000cfa:	4807      	ldr	r0, [pc, #28]	@ (8000d18 <MX_TIM2_Init+0xe8>)
 8000cfc:	f002 fed2 	bl	8003aa4 <HAL_TIM_PWM_ConfigChannel>
 8000d00:	4603      	mov	r3, r0
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d001      	beq.n	8000d0a <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8000d06:	f000 f999 	bl	800103c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000d0a:	4803      	ldr	r0, [pc, #12]	@ (8000d18 <MX_TIM2_Init+0xe8>)
 8000d0c:	f000 fa5e 	bl	80011cc <HAL_TIM_MspPostInit>

}
 8000d10:	bf00      	nop
 8000d12:	3738      	adds	r7, #56	@ 0x38
 8000d14:	46bd      	mov	sp, r7
 8000d16:	bd80      	pop	{r7, pc}
 8000d18:	20000140 	.word	0x20000140

08000d1c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b08e      	sub	sp, #56	@ 0x38
 8000d20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d22:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000d26:	2200      	movs	r2, #0
 8000d28:	601a      	str	r2, [r3, #0]
 8000d2a:	605a      	str	r2, [r3, #4]
 8000d2c:	609a      	str	r2, [r3, #8]
 8000d2e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d30:	f107 031c 	add.w	r3, r7, #28
 8000d34:	2200      	movs	r2, #0
 8000d36:	601a      	str	r2, [r3, #0]
 8000d38:	605a      	str	r2, [r3, #4]
 8000d3a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d3c:	463b      	mov	r3, r7
 8000d3e:	2200      	movs	r2, #0
 8000d40:	601a      	str	r2, [r3, #0]
 8000d42:	605a      	str	r2, [r3, #4]
 8000d44:	609a      	str	r2, [r3, #8]
 8000d46:	60da      	str	r2, [r3, #12]
 8000d48:	611a      	str	r2, [r3, #16]
 8000d4a:	615a      	str	r2, [r3, #20]
 8000d4c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000d4e:	4b2d      	ldr	r3, [pc, #180]	@ (8000e04 <MX_TIM3_Init+0xe8>)
 8000d50:	4a2d      	ldr	r2, [pc, #180]	@ (8000e08 <MX_TIM3_Init+0xec>)
 8000d52:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000d54:	4b2b      	ldr	r3, [pc, #172]	@ (8000e04 <MX_TIM3_Init+0xe8>)
 8000d56:	2200      	movs	r2, #0
 8000d58:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d5a:	4b2a      	ldr	r3, [pc, #168]	@ (8000e04 <MX_TIM3_Init+0xe8>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 60000-1;
 8000d60:	4b28      	ldr	r3, [pc, #160]	@ (8000e04 <MX_TIM3_Init+0xe8>)
 8000d62:	f64e 225f 	movw	r2, #59999	@ 0xea5f
 8000d66:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d68:	4b26      	ldr	r3, [pc, #152]	@ (8000e04 <MX_TIM3_Init+0xe8>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d6e:	4b25      	ldr	r3, [pc, #148]	@ (8000e04 <MX_TIM3_Init+0xe8>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000d74:	4823      	ldr	r0, [pc, #140]	@ (8000e04 <MX_TIM3_Init+0xe8>)
 8000d76:	f002 fbc1 	bl	80034fc <HAL_TIM_Base_Init>
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d001      	beq.n	8000d84 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8000d80:	f000 f95c 	bl	800103c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d84:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000d88:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000d8a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000d8e:	4619      	mov	r1, r3
 8000d90:	481c      	ldr	r0, [pc, #112]	@ (8000e04 <MX_TIM3_Init+0xe8>)
 8000d92:	f002 ff9b 	bl	8003ccc <HAL_TIM_ConfigClockSource>
 8000d96:	4603      	mov	r3, r0
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d001      	beq.n	8000da0 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8000d9c:	f000 f94e 	bl	800103c <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 8000da0:	4818      	ldr	r0, [pc, #96]	@ (8000e04 <MX_TIM3_Init+0xe8>)
 8000da2:	f002 fc57 	bl	8003654 <HAL_TIM_OC_Init>
 8000da6:	4603      	mov	r3, r0
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d001      	beq.n	8000db0 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8000dac:	f000 f946 	bl	800103c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000db0:	2300      	movs	r3, #0
 8000db2:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000db4:	2300      	movs	r3, #0
 8000db6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000db8:	f107 031c 	add.w	r3, r7, #28
 8000dbc:	4619      	mov	r1, r3
 8000dbe:	4811      	ldr	r0, [pc, #68]	@ (8000e04 <MX_TIM3_Init+0xe8>)
 8000dc0:	f003 fc38 	bl	8004634 <HAL_TIMEx_MasterConfigSynchronization>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d001      	beq.n	8000dce <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8000dca:	f000 f937 	bl	800103c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000dde:	463b      	mov	r3, r7
 8000de0:	2208      	movs	r2, #8
 8000de2:	4619      	mov	r1, r3
 8000de4:	4807      	ldr	r0, [pc, #28]	@ (8000e04 <MX_TIM3_Init+0xe8>)
 8000de6:	f002 fde3 	bl	80039b0 <HAL_TIM_OC_ConfigChannel>
 8000dea:	4603      	mov	r3, r0
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d001      	beq.n	8000df4 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8000df0:	f000 f924 	bl	800103c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000df4:	4803      	ldr	r0, [pc, #12]	@ (8000e04 <MX_TIM3_Init+0xe8>)
 8000df6:	f000 f9e9 	bl	80011cc <HAL_TIM_MspPostInit>

}
 8000dfa:	bf00      	nop
 8000dfc:	3738      	adds	r7, #56	@ 0x38
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	bd80      	pop	{r7, pc}
 8000e02:	bf00      	nop
 8000e04:	2000018c 	.word	0x2000018c
 8000e08:	40000400 	.word	0x40000400

08000e0c <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b088      	sub	sp, #32
 8000e10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e12:	f107 0310 	add.w	r3, r7, #16
 8000e16:	2200      	movs	r2, #0
 8000e18:	601a      	str	r2, [r3, #0]
 8000e1a:	605a      	str	r2, [r3, #4]
 8000e1c:	609a      	str	r2, [r3, #8]
 8000e1e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e20:	1d3b      	adds	r3, r7, #4
 8000e22:	2200      	movs	r2, #0
 8000e24:	601a      	str	r2, [r3, #0]
 8000e26:	605a      	str	r2, [r3, #4]
 8000e28:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8000e2a:	4b1f      	ldr	r3, [pc, #124]	@ (8000ea8 <MX_TIM15_Init+0x9c>)
 8000e2c:	4a1f      	ldr	r2, [pc, #124]	@ (8000eac <MX_TIM15_Init+0xa0>)
 8000e2e:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 8000e30:	4b1d      	ldr	r3, [pc, #116]	@ (8000ea8 <MX_TIM15_Init+0x9c>)
 8000e32:	2200      	movs	r2, #0
 8000e34:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e36:	4b1c      	ldr	r3, [pc, #112]	@ (8000ea8 <MX_TIM15_Init+0x9c>)
 8000e38:	2200      	movs	r2, #0
 8000e3a:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 8000e3c:	4b1a      	ldr	r3, [pc, #104]	@ (8000ea8 <MX_TIM15_Init+0x9c>)
 8000e3e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000e42:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e44:	4b18      	ldr	r3, [pc, #96]	@ (8000ea8 <MX_TIM15_Init+0x9c>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8000e4a:	4b17      	ldr	r3, [pc, #92]	@ (8000ea8 <MX_TIM15_Init+0x9c>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e50:	4b15      	ldr	r3, [pc, #84]	@ (8000ea8 <MX_TIM15_Init+0x9c>)
 8000e52:	2200      	movs	r2, #0
 8000e54:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8000e56:	4814      	ldr	r0, [pc, #80]	@ (8000ea8 <MX_TIM15_Init+0x9c>)
 8000e58:	f002 fb50 	bl	80034fc <HAL_TIM_Base_Init>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d001      	beq.n	8000e66 <MX_TIM15_Init+0x5a>
  {
    Error_Handler();
 8000e62:	f000 f8eb 	bl	800103c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e66:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e6a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8000e6c:	f107 0310 	add.w	r3, r7, #16
 8000e70:	4619      	mov	r1, r3
 8000e72:	480d      	ldr	r0, [pc, #52]	@ (8000ea8 <MX_TIM15_Init+0x9c>)
 8000e74:	f002 ff2a 	bl	8003ccc <HAL_TIM_ConfigClockSource>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d001      	beq.n	8000e82 <MX_TIM15_Init+0x76>
  {
    Error_Handler();
 8000e7e:	f000 f8dd 	bl	800103c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e82:	2300      	movs	r3, #0
 8000e84:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e86:	2300      	movs	r3, #0
 8000e88:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8000e8a:	1d3b      	adds	r3, r7, #4
 8000e8c:	4619      	mov	r1, r3
 8000e8e:	4806      	ldr	r0, [pc, #24]	@ (8000ea8 <MX_TIM15_Init+0x9c>)
 8000e90:	f003 fbd0 	bl	8004634 <HAL_TIMEx_MasterConfigSynchronization>
 8000e94:	4603      	mov	r3, r0
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d001      	beq.n	8000e9e <MX_TIM15_Init+0x92>
  {
    Error_Handler();
 8000e9a:	f000 f8cf 	bl	800103c <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 8000e9e:	bf00      	nop
 8000ea0:	3720      	adds	r7, #32
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bd80      	pop	{r7, pc}
 8000ea6:	bf00      	nop
 8000ea8:	200001d8 	.word	0x200001d8
 8000eac:	40014000 	.word	0x40014000

08000eb0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000eb4:	4b15      	ldr	r3, [pc, #84]	@ (8000f0c <MX_USART1_UART_Init+0x5c>)
 8000eb6:	4a16      	ldr	r2, [pc, #88]	@ (8000f10 <MX_USART1_UART_Init+0x60>)
 8000eb8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000eba:	4b14      	ldr	r3, [pc, #80]	@ (8000f0c <MX_USART1_UART_Init+0x5c>)
 8000ebc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000ec0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000ec2:	4b12      	ldr	r3, [pc, #72]	@ (8000f0c <MX_USART1_UART_Init+0x5c>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000ec8:	4b10      	ldr	r3, [pc, #64]	@ (8000f0c <MX_USART1_UART_Init+0x5c>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000ece:	4b0f      	ldr	r3, [pc, #60]	@ (8000f0c <MX_USART1_UART_Init+0x5c>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000ed4:	4b0d      	ldr	r3, [pc, #52]	@ (8000f0c <MX_USART1_UART_Init+0x5c>)
 8000ed6:	220c      	movs	r2, #12
 8000ed8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000eda:	4b0c      	ldr	r3, [pc, #48]	@ (8000f0c <MX_USART1_UART_Init+0x5c>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ee0:	4b0a      	ldr	r3, [pc, #40]	@ (8000f0c <MX_USART1_UART_Init+0x5c>)
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ee6:	4b09      	ldr	r3, [pc, #36]	@ (8000f0c <MX_USART1_UART_Init+0x5c>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000eec:	4b07      	ldr	r3, [pc, #28]	@ (8000f0c <MX_USART1_UART_Init+0x5c>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_MultiProcessor_Init(&huart1, 0, UART_WAKEUPMETHOD_IDLELINE) != HAL_OK)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	2100      	movs	r1, #0
 8000ef6:	4805      	ldr	r0, [pc, #20]	@ (8000f0c <MX_USART1_UART_Init+0x5c>)
 8000ef8:	f003 fc0a 	bl	8004710 <HAL_MultiProcessor_Init>
 8000efc:	4603      	mov	r3, r0
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d001      	beq.n	8000f06 <MX_USART1_UART_Init+0x56>
  {
    Error_Handler();
 8000f02:	f000 f89b 	bl	800103c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000f06:	bf00      	nop
 8000f08:	bd80      	pop	{r7, pc}
 8000f0a:	bf00      	nop
 8000f0c:	20000224 	.word	0x20000224
 8000f10:	40013800 	.word	0x40013800

08000f14 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000f18:	4b15      	ldr	r3, [pc, #84]	@ (8000f70 <MX_USART2_UART_Init+0x5c>)
 8000f1a:	4a16      	ldr	r2, [pc, #88]	@ (8000f74 <MX_USART2_UART_Init+0x60>)
 8000f1c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8000f1e:	4b14      	ldr	r3, [pc, #80]	@ (8000f70 <MX_USART2_UART_Init+0x5c>)
 8000f20:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 8000f24:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000f26:	4b12      	ldr	r3, [pc, #72]	@ (8000f70 <MX_USART2_UART_Init+0x5c>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000f2c:	4b10      	ldr	r3, [pc, #64]	@ (8000f70 <MX_USART2_UART_Init+0x5c>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000f32:	4b0f      	ldr	r3, [pc, #60]	@ (8000f70 <MX_USART2_UART_Init+0x5c>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000f38:	4b0d      	ldr	r3, [pc, #52]	@ (8000f70 <MX_USART2_UART_Init+0x5c>)
 8000f3a:	220c      	movs	r2, #12
 8000f3c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f3e:	4b0c      	ldr	r3, [pc, #48]	@ (8000f70 <MX_USART2_UART_Init+0x5c>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f44:	4b0a      	ldr	r3, [pc, #40]	@ (8000f70 <MX_USART2_UART_Init+0x5c>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f4a:	4b09      	ldr	r3, [pc, #36]	@ (8000f70 <MX_USART2_UART_Init+0x5c>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f50:	4b07      	ldr	r3, [pc, #28]	@ (8000f70 <MX_USART2_UART_Init+0x5c>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_MultiProcessor_Init(&huart2, 0, UART_WAKEUPMETHOD_IDLELINE) != HAL_OK)
 8000f56:	2200      	movs	r2, #0
 8000f58:	2100      	movs	r1, #0
 8000f5a:	4805      	ldr	r0, [pc, #20]	@ (8000f70 <MX_USART2_UART_Init+0x5c>)
 8000f5c:	f003 fbd8 	bl	8004710 <HAL_MultiProcessor_Init>
 8000f60:	4603      	mov	r3, r0
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d001      	beq.n	8000f6a <MX_USART2_UART_Init+0x56>
  {
    Error_Handler();
 8000f66:	f000 f869 	bl	800103c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000f6a:	bf00      	nop
 8000f6c:	bd80      	pop	{r7, pc}
 8000f6e:	bf00      	nop
 8000f70:	200002ac 	.word	0x200002ac
 8000f74:	40004400 	.word	0x40004400

08000f78 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b088      	sub	sp, #32
 8000f7c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f7e:	f107 030c 	add.w	r3, r7, #12
 8000f82:	2200      	movs	r2, #0
 8000f84:	601a      	str	r2, [r3, #0]
 8000f86:	605a      	str	r2, [r3, #4]
 8000f88:	609a      	str	r2, [r3, #8]
 8000f8a:	60da      	str	r2, [r3, #12]
 8000f8c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f8e:	4b29      	ldr	r3, [pc, #164]	@ (8001034 <MX_GPIO_Init+0xbc>)
 8000f90:	695b      	ldr	r3, [r3, #20]
 8000f92:	4a28      	ldr	r2, [pc, #160]	@ (8001034 <MX_GPIO_Init+0xbc>)
 8000f94:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f98:	6153      	str	r3, [r2, #20]
 8000f9a:	4b26      	ldr	r3, [pc, #152]	@ (8001034 <MX_GPIO_Init+0xbc>)
 8000f9c:	695b      	ldr	r3, [r3, #20]
 8000f9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000fa2:	60bb      	str	r3, [r7, #8]
 8000fa4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fa6:	4b23      	ldr	r3, [pc, #140]	@ (8001034 <MX_GPIO_Init+0xbc>)
 8000fa8:	695b      	ldr	r3, [r3, #20]
 8000faa:	4a22      	ldr	r2, [pc, #136]	@ (8001034 <MX_GPIO_Init+0xbc>)
 8000fac:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000fb0:	6153      	str	r3, [r2, #20]
 8000fb2:	4b20      	ldr	r3, [pc, #128]	@ (8001034 <MX_GPIO_Init+0xbc>)
 8000fb4:	695b      	ldr	r3, [r3, #20]
 8000fb6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000fba:	607b      	str	r3, [r7, #4]
 8000fbc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SW_SH_LD_Pin|SW_CLK_Pin|LED_POWER_Pin|SIG_P1_Pin, GPIO_PIN_RESET);
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	f248 1112 	movw	r1, #33042	@ 0x8112
 8000fc4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000fc8:	f000 fefc 	bl	8001dc4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SIG_P2_Pin|_7SEG_SCK_Pin|_7SEG_RCK_Pin|_7SEG_SI_Pin
 8000fcc:	2200      	movs	r2, #0
 8000fce:	21f2      	movs	r1, #242	@ 0xf2
 8000fd0:	4819      	ldr	r0, [pc, #100]	@ (8001038 <MX_GPIO_Init+0xc0>)
 8000fd2:	f000 fef7 	bl	8001dc4 <HAL_GPIO_WritePin>
                          |LED_UART_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : SW_QH_Pin ROTARY_ENCODER_Z_Pin ROTARY_ENCODER_B_Pin ROTARY_ENCODER_A_Pin */
  GPIO_InitStruct.Pin = SW_QH_Pin|ROTARY_ENCODER_Z_Pin|ROTARY_ENCODER_B_Pin|ROTARY_ENCODER_A_Pin;
 8000fd6:	23e1      	movs	r3, #225	@ 0xe1
 8000fd8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fe2:	f107 030c 	add.w	r3, r7, #12
 8000fe6:	4619      	mov	r1, r3
 8000fe8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000fec:	f000 fd60 	bl	8001ab0 <HAL_GPIO_Init>

  /*Configure GPIO pins : SW_SH_LD_Pin SW_CLK_Pin LED_POWER_Pin SIG_P1_Pin */
  GPIO_InitStruct.Pin = SW_SH_LD_Pin|SW_CLK_Pin|LED_POWER_Pin|SIG_P1_Pin;
 8000ff0:	f248 1312 	movw	r3, #33042	@ 0x8112
 8000ff4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ff6:	2301      	movs	r3, #1
 8000ff8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ffe:	2300      	movs	r3, #0
 8001000:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001002:	f107 030c 	add.w	r3, r7, #12
 8001006:	4619      	mov	r1, r3
 8001008:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800100c:	f000 fd50 	bl	8001ab0 <HAL_GPIO_Init>

  /*Configure GPIO pins : SIG_P2_Pin _7SEG_SCK_Pin _7SEG_RCK_Pin _7SEG_SI_Pin
                           LED_UART_Pin */
  GPIO_InitStruct.Pin = SIG_P2_Pin|_7SEG_SCK_Pin|_7SEG_RCK_Pin|_7SEG_SI_Pin
 8001010:	23f2      	movs	r3, #242	@ 0xf2
 8001012:	60fb      	str	r3, [r7, #12]
                          |LED_UART_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001014:	2301      	movs	r3, #1
 8001016:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001018:	2300      	movs	r3, #0
 800101a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800101c:	2300      	movs	r3, #0
 800101e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001020:	f107 030c 	add.w	r3, r7, #12
 8001024:	4619      	mov	r1, r3
 8001026:	4804      	ldr	r0, [pc, #16]	@ (8001038 <MX_GPIO_Init+0xc0>)
 8001028:	f000 fd42 	bl	8001ab0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800102c:	bf00      	nop
 800102e:	3720      	adds	r7, #32
 8001030:	46bd      	mov	sp, r7
 8001032:	bd80      	pop	{r7, pc}
 8001034:	40021000 	.word	0x40021000
 8001038:	48000400 	.word	0x48000400

0800103c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800103c:	b480      	push	{r7}
 800103e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001040:	b672      	cpsid	i
}
 8001042:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001044:	bf00      	nop
 8001046:	e7fd      	b.n	8001044 <Error_Handler+0x8>

08001048 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001048:	b480      	push	{r7}
 800104a:	b083      	sub	sp, #12
 800104c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800104e:	4b0f      	ldr	r3, [pc, #60]	@ (800108c <HAL_MspInit+0x44>)
 8001050:	699b      	ldr	r3, [r3, #24]
 8001052:	4a0e      	ldr	r2, [pc, #56]	@ (800108c <HAL_MspInit+0x44>)
 8001054:	f043 0301 	orr.w	r3, r3, #1
 8001058:	6193      	str	r3, [r2, #24]
 800105a:	4b0c      	ldr	r3, [pc, #48]	@ (800108c <HAL_MspInit+0x44>)
 800105c:	699b      	ldr	r3, [r3, #24]
 800105e:	f003 0301 	and.w	r3, r3, #1
 8001062:	607b      	str	r3, [r7, #4]
 8001064:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001066:	4b09      	ldr	r3, [pc, #36]	@ (800108c <HAL_MspInit+0x44>)
 8001068:	69db      	ldr	r3, [r3, #28]
 800106a:	4a08      	ldr	r2, [pc, #32]	@ (800108c <HAL_MspInit+0x44>)
 800106c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001070:	61d3      	str	r3, [r2, #28]
 8001072:	4b06      	ldr	r3, [pc, #24]	@ (800108c <HAL_MspInit+0x44>)
 8001074:	69db      	ldr	r3, [r3, #28]
 8001076:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800107a:	603b      	str	r3, [r7, #0]
 800107c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800107e:	bf00      	nop
 8001080:	370c      	adds	r7, #12
 8001082:	46bd      	mov	sp, r7
 8001084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001088:	4770      	bx	lr
 800108a:	bf00      	nop
 800108c:	40021000 	.word	0x40021000

08001090 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b08a      	sub	sp, #40	@ 0x28
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001098:	f107 0314 	add.w	r3, r7, #20
 800109c:	2200      	movs	r2, #0
 800109e:	601a      	str	r2, [r3, #0]
 80010a0:	605a      	str	r2, [r3, #4]
 80010a2:	609a      	str	r2, [r3, #8]
 80010a4:	60da      	str	r2, [r3, #12]
 80010a6:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN)
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	4a18      	ldr	r2, [pc, #96]	@ (8001110 <HAL_CAN_MspInit+0x80>)
 80010ae:	4293      	cmp	r3, r2
 80010b0:	d129      	bne.n	8001106 <HAL_CAN_MspInit+0x76>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80010b2:	4b18      	ldr	r3, [pc, #96]	@ (8001114 <HAL_CAN_MspInit+0x84>)
 80010b4:	69db      	ldr	r3, [r3, #28]
 80010b6:	4a17      	ldr	r2, [pc, #92]	@ (8001114 <HAL_CAN_MspInit+0x84>)
 80010b8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80010bc:	61d3      	str	r3, [r2, #28]
 80010be:	4b15      	ldr	r3, [pc, #84]	@ (8001114 <HAL_CAN_MspInit+0x84>)
 80010c0:	69db      	ldr	r3, [r3, #28]
 80010c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80010c6:	613b      	str	r3, [r7, #16]
 80010c8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010ca:	4b12      	ldr	r3, [pc, #72]	@ (8001114 <HAL_CAN_MspInit+0x84>)
 80010cc:	695b      	ldr	r3, [r3, #20]
 80010ce:	4a11      	ldr	r2, [pc, #68]	@ (8001114 <HAL_CAN_MspInit+0x84>)
 80010d0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80010d4:	6153      	str	r3, [r2, #20]
 80010d6:	4b0f      	ldr	r3, [pc, #60]	@ (8001114 <HAL_CAN_MspInit+0x84>)
 80010d8:	695b      	ldr	r3, [r3, #20]
 80010da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010de:	60fb      	str	r3, [r7, #12]
 80010e0:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = CAN_RXD_Pin|CAN_TXD_Pin;
 80010e2:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80010e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010e8:	2302      	movs	r3, #2
 80010ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ec:	2300      	movs	r3, #0
 80010ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80010f0:	2303      	movs	r3, #3
 80010f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN;
 80010f4:	2309      	movs	r3, #9
 80010f6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010f8:	f107 0314 	add.w	r3, r7, #20
 80010fc:	4619      	mov	r1, r3
 80010fe:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001102:	f000 fcd5 	bl	8001ab0 <HAL_GPIO_Init>

  /* USER CODE END CAN_MspInit 1 */

  }

}
 8001106:	bf00      	nop
 8001108:	3728      	adds	r7, #40	@ 0x28
 800110a:	46bd      	mov	sp, r7
 800110c:	bd80      	pop	{r7, pc}
 800110e:	bf00      	nop
 8001110:	40006400 	.word	0x40006400
 8001114:	40021000 	.word	0x40021000

08001118 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001118:	b480      	push	{r7}
 800111a:	b087      	sub	sp, #28
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	4a25      	ldr	r2, [pc, #148]	@ (80011bc <HAL_TIM_Base_MspInit+0xa4>)
 8001126:	4293      	cmp	r3, r2
 8001128:	d10c      	bne.n	8001144 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800112a:	4b25      	ldr	r3, [pc, #148]	@ (80011c0 <HAL_TIM_Base_MspInit+0xa8>)
 800112c:	699b      	ldr	r3, [r3, #24]
 800112e:	4a24      	ldr	r2, [pc, #144]	@ (80011c0 <HAL_TIM_Base_MspInit+0xa8>)
 8001130:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001134:	6193      	str	r3, [r2, #24]
 8001136:	4b22      	ldr	r3, [pc, #136]	@ (80011c0 <HAL_TIM_Base_MspInit+0xa8>)
 8001138:	699b      	ldr	r3, [r3, #24]
 800113a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800113e:	617b      	str	r3, [r7, #20]
 8001140:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 8001142:	e034      	b.n	80011ae <HAL_TIM_Base_MspInit+0x96>
  else if(htim_base->Instance==TIM2)
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800114c:	d10c      	bne.n	8001168 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800114e:	4b1c      	ldr	r3, [pc, #112]	@ (80011c0 <HAL_TIM_Base_MspInit+0xa8>)
 8001150:	69db      	ldr	r3, [r3, #28]
 8001152:	4a1b      	ldr	r2, [pc, #108]	@ (80011c0 <HAL_TIM_Base_MspInit+0xa8>)
 8001154:	f043 0301 	orr.w	r3, r3, #1
 8001158:	61d3      	str	r3, [r2, #28]
 800115a:	4b19      	ldr	r3, [pc, #100]	@ (80011c0 <HAL_TIM_Base_MspInit+0xa8>)
 800115c:	69db      	ldr	r3, [r3, #28]
 800115e:	f003 0301 	and.w	r3, r3, #1
 8001162:	613b      	str	r3, [r7, #16]
 8001164:	693b      	ldr	r3, [r7, #16]
}
 8001166:	e022      	b.n	80011ae <HAL_TIM_Base_MspInit+0x96>
  else if(htim_base->Instance==TIM3)
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	4a15      	ldr	r2, [pc, #84]	@ (80011c4 <HAL_TIM_Base_MspInit+0xac>)
 800116e:	4293      	cmp	r3, r2
 8001170:	d10c      	bne.n	800118c <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001172:	4b13      	ldr	r3, [pc, #76]	@ (80011c0 <HAL_TIM_Base_MspInit+0xa8>)
 8001174:	69db      	ldr	r3, [r3, #28]
 8001176:	4a12      	ldr	r2, [pc, #72]	@ (80011c0 <HAL_TIM_Base_MspInit+0xa8>)
 8001178:	f043 0302 	orr.w	r3, r3, #2
 800117c:	61d3      	str	r3, [r2, #28]
 800117e:	4b10      	ldr	r3, [pc, #64]	@ (80011c0 <HAL_TIM_Base_MspInit+0xa8>)
 8001180:	69db      	ldr	r3, [r3, #28]
 8001182:	f003 0302 	and.w	r3, r3, #2
 8001186:	60fb      	str	r3, [r7, #12]
 8001188:	68fb      	ldr	r3, [r7, #12]
}
 800118a:	e010      	b.n	80011ae <HAL_TIM_Base_MspInit+0x96>
  else if(htim_base->Instance==TIM15)
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	4a0d      	ldr	r2, [pc, #52]	@ (80011c8 <HAL_TIM_Base_MspInit+0xb0>)
 8001192:	4293      	cmp	r3, r2
 8001194:	d10b      	bne.n	80011ae <HAL_TIM_Base_MspInit+0x96>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8001196:	4b0a      	ldr	r3, [pc, #40]	@ (80011c0 <HAL_TIM_Base_MspInit+0xa8>)
 8001198:	699b      	ldr	r3, [r3, #24]
 800119a:	4a09      	ldr	r2, [pc, #36]	@ (80011c0 <HAL_TIM_Base_MspInit+0xa8>)
 800119c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80011a0:	6193      	str	r3, [r2, #24]
 80011a2:	4b07      	ldr	r3, [pc, #28]	@ (80011c0 <HAL_TIM_Base_MspInit+0xa8>)
 80011a4:	699b      	ldr	r3, [r3, #24]
 80011a6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80011aa:	60bb      	str	r3, [r7, #8]
 80011ac:	68bb      	ldr	r3, [r7, #8]
}
 80011ae:	bf00      	nop
 80011b0:	371c      	adds	r7, #28
 80011b2:	46bd      	mov	sp, r7
 80011b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b8:	4770      	bx	lr
 80011ba:	bf00      	nop
 80011bc:	40012c00 	.word	0x40012c00
 80011c0:	40021000 	.word	0x40021000
 80011c4:	40000400 	.word	0x40000400
 80011c8:	40014000 	.word	0x40014000

080011cc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b08a      	sub	sp, #40	@ 0x28
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011d4:	f107 0314 	add.w	r3, r7, #20
 80011d8:	2200      	movs	r2, #0
 80011da:	601a      	str	r2, [r3, #0]
 80011dc:	605a      	str	r2, [r3, #4]
 80011de:	609a      	str	r2, [r3, #8]
 80011e0:	60da      	str	r2, [r3, #12]
 80011e2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80011ec:	d11c      	bne.n	8001228 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011ee:	4b21      	ldr	r3, [pc, #132]	@ (8001274 <HAL_TIM_MspPostInit+0xa8>)
 80011f0:	695b      	ldr	r3, [r3, #20]
 80011f2:	4a20      	ldr	r2, [pc, #128]	@ (8001274 <HAL_TIM_MspPostInit+0xa8>)
 80011f4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80011f8:	6153      	str	r3, [r2, #20]
 80011fa:	4b1e      	ldr	r3, [pc, #120]	@ (8001274 <HAL_TIM_MspPostInit+0xa8>)
 80011fc:	695b      	ldr	r3, [r3, #20]
 80011fe:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001202:	613b      	str	r3, [r7, #16]
 8001204:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = SIG_N1_Pin;
 8001206:	2308      	movs	r3, #8
 8001208:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800120a:	2302      	movs	r3, #2
 800120c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800120e:	2300      	movs	r3, #0
 8001210:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001212:	2300      	movs	r3, #0
 8001214:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001216:	2301      	movs	r3, #1
 8001218:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(SIG_N1_GPIO_Port, &GPIO_InitStruct);
 800121a:	f107 0314 	add.w	r3, r7, #20
 800121e:	4619      	mov	r1, r3
 8001220:	4815      	ldr	r0, [pc, #84]	@ (8001278 <HAL_TIM_MspPostInit+0xac>)
 8001222:	f000 fc45 	bl	8001ab0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001226:	e020      	b.n	800126a <HAL_TIM_MspPostInit+0x9e>
  else if(htim->Instance==TIM3)
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	4a13      	ldr	r2, [pc, #76]	@ (800127c <HAL_TIM_MspPostInit+0xb0>)
 800122e:	4293      	cmp	r3, r2
 8001230:	d11b      	bne.n	800126a <HAL_TIM_MspPostInit+0x9e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001232:	4b10      	ldr	r3, [pc, #64]	@ (8001274 <HAL_TIM_MspPostInit+0xa8>)
 8001234:	695b      	ldr	r3, [r3, #20]
 8001236:	4a0f      	ldr	r2, [pc, #60]	@ (8001274 <HAL_TIM_MspPostInit+0xa8>)
 8001238:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800123c:	6153      	str	r3, [r2, #20]
 800123e:	4b0d      	ldr	r3, [pc, #52]	@ (8001274 <HAL_TIM_MspPostInit+0xa8>)
 8001240:	695b      	ldr	r3, [r3, #20]
 8001242:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001246:	60fb      	str	r3, [r7, #12]
 8001248:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = SIG_N2_Pin;
 800124a:	2301      	movs	r3, #1
 800124c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800124e:	2302      	movs	r3, #2
 8001250:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001252:	2300      	movs	r3, #0
 8001254:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001256:	2300      	movs	r3, #0
 8001258:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800125a:	2302      	movs	r3, #2
 800125c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(SIG_N2_GPIO_Port, &GPIO_InitStruct);
 800125e:	f107 0314 	add.w	r3, r7, #20
 8001262:	4619      	mov	r1, r3
 8001264:	4804      	ldr	r0, [pc, #16]	@ (8001278 <HAL_TIM_MspPostInit+0xac>)
 8001266:	f000 fc23 	bl	8001ab0 <HAL_GPIO_Init>
}
 800126a:	bf00      	nop
 800126c:	3728      	adds	r7, #40	@ 0x28
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}
 8001272:	bf00      	nop
 8001274:	40021000 	.word	0x40021000
 8001278:	48000400 	.word	0x48000400
 800127c:	40000400 	.word	0x40000400

08001280 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b08c      	sub	sp, #48	@ 0x30
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001288:	f107 031c 	add.w	r3, r7, #28
 800128c:	2200      	movs	r2, #0
 800128e:	601a      	str	r2, [r3, #0]
 8001290:	605a      	str	r2, [r3, #4]
 8001292:	609a      	str	r2, [r3, #8]
 8001294:	60da      	str	r2, [r3, #12]
 8001296:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	4a33      	ldr	r2, [pc, #204]	@ (800136c <HAL_UART_MspInit+0xec>)
 800129e:	4293      	cmp	r3, r2
 80012a0:	d132      	bne.n	8001308 <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80012a2:	4b33      	ldr	r3, [pc, #204]	@ (8001370 <HAL_UART_MspInit+0xf0>)
 80012a4:	699b      	ldr	r3, [r3, #24]
 80012a6:	4a32      	ldr	r2, [pc, #200]	@ (8001370 <HAL_UART_MspInit+0xf0>)
 80012a8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80012ac:	6193      	str	r3, [r2, #24]
 80012ae:	4b30      	ldr	r3, [pc, #192]	@ (8001370 <HAL_UART_MspInit+0xf0>)
 80012b0:	699b      	ldr	r3, [r3, #24]
 80012b2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80012b6:	61bb      	str	r3, [r7, #24]
 80012b8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012ba:	4b2d      	ldr	r3, [pc, #180]	@ (8001370 <HAL_UART_MspInit+0xf0>)
 80012bc:	695b      	ldr	r3, [r3, #20]
 80012be:	4a2c      	ldr	r2, [pc, #176]	@ (8001370 <HAL_UART_MspInit+0xf0>)
 80012c0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80012c4:	6153      	str	r3, [r2, #20]
 80012c6:	4b2a      	ldr	r3, [pc, #168]	@ (8001370 <HAL_UART_MspInit+0xf0>)
 80012c8:	695b      	ldr	r3, [r3, #20]
 80012ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012ce:	617b      	str	r3, [r7, #20]
 80012d0:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = PC_UART_TXD_Pin|PC_UART_RXD_Pin;
 80012d2:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80012d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012d8:	2312      	movs	r3, #18
 80012da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012dc:	2300      	movs	r3, #0
 80012de:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80012e0:	2303      	movs	r3, #3
 80012e2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80012e4:	2307      	movs	r3, #7
 80012e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012e8:	f107 031c 	add.w	r3, r7, #28
 80012ec:	4619      	mov	r1, r3
 80012ee:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80012f2:	f000 fbdd 	bl	8001ab0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80012f6:	2200      	movs	r2, #0
 80012f8:	2100      	movs	r1, #0
 80012fa:	2025      	movs	r0, #37	@ 0x25
 80012fc:	f000 fb25 	bl	800194a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001300:	2025      	movs	r0, #37	@ 0x25
 8001302:	f000 fb3e 	bl	8001982 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001306:	e02d      	b.n	8001364 <HAL_UART_MspInit+0xe4>
  else if(huart->Instance==USART2)
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	4a19      	ldr	r2, [pc, #100]	@ (8001374 <HAL_UART_MspInit+0xf4>)
 800130e:	4293      	cmp	r3, r2
 8001310:	d128      	bne.n	8001364 <HAL_UART_MspInit+0xe4>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001312:	4b17      	ldr	r3, [pc, #92]	@ (8001370 <HAL_UART_MspInit+0xf0>)
 8001314:	69db      	ldr	r3, [r3, #28]
 8001316:	4a16      	ldr	r2, [pc, #88]	@ (8001370 <HAL_UART_MspInit+0xf0>)
 8001318:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800131c:	61d3      	str	r3, [r2, #28]
 800131e:	4b14      	ldr	r3, [pc, #80]	@ (8001370 <HAL_UART_MspInit+0xf0>)
 8001320:	69db      	ldr	r3, [r3, #28]
 8001322:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001326:	613b      	str	r3, [r7, #16]
 8001328:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800132a:	4b11      	ldr	r3, [pc, #68]	@ (8001370 <HAL_UART_MspInit+0xf0>)
 800132c:	695b      	ldr	r3, [r3, #20]
 800132e:	4a10      	ldr	r2, [pc, #64]	@ (8001370 <HAL_UART_MspInit+0xf0>)
 8001330:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001334:	6153      	str	r3, [r2, #20]
 8001336:	4b0e      	ldr	r3, [pc, #56]	@ (8001370 <HAL_UART_MspInit+0xf0>)
 8001338:	695b      	ldr	r3, [r3, #20]
 800133a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800133e:	60fb      	str	r3, [r7, #12]
 8001340:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = N_C__Pin|UART_RX_Pin;
 8001342:	230c      	movs	r3, #12
 8001344:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001346:	2312      	movs	r3, #18
 8001348:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800134a:	2300      	movs	r3, #0
 800134c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800134e:	2303      	movs	r3, #3
 8001350:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001352:	2307      	movs	r3, #7
 8001354:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001356:	f107 031c 	add.w	r3, r7, #28
 800135a:	4619      	mov	r1, r3
 800135c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001360:	f000 fba6 	bl	8001ab0 <HAL_GPIO_Init>
}
 8001364:	bf00      	nop
 8001366:	3730      	adds	r7, #48	@ 0x30
 8001368:	46bd      	mov	sp, r7
 800136a:	bd80      	pop	{r7, pc}
 800136c:	40013800 	.word	0x40013800
 8001370:	40021000 	.word	0x40021000
 8001374:	40004400 	.word	0x40004400

08001378 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001378:	b480      	push	{r7}
 800137a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800137c:	bf00      	nop
 800137e:	e7fd      	b.n	800137c <NMI_Handler+0x4>

08001380 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001380:	b480      	push	{r7}
 8001382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001384:	bf00      	nop
 8001386:	e7fd      	b.n	8001384 <HardFault_Handler+0x4>

08001388 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001388:	b480      	push	{r7}
 800138a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800138c:	bf00      	nop
 800138e:	e7fd      	b.n	800138c <MemManage_Handler+0x4>

08001390 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001390:	b480      	push	{r7}
 8001392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001394:	bf00      	nop
 8001396:	e7fd      	b.n	8001394 <BusFault_Handler+0x4>

08001398 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001398:	b480      	push	{r7}
 800139a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800139c:	bf00      	nop
 800139e:	e7fd      	b.n	800139c <UsageFault_Handler+0x4>

080013a0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013a0:	b480      	push	{r7}
 80013a2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013a4:	bf00      	nop
 80013a6:	46bd      	mov	sp, r7
 80013a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ac:	4770      	bx	lr

080013ae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013ae:	b480      	push	{r7}
 80013b0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013b2:	bf00      	nop
 80013b4:	46bd      	mov	sp, r7
 80013b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ba:	4770      	bx	lr

080013bc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013bc:	b480      	push	{r7}
 80013be:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013c0:	bf00      	nop
 80013c2:	46bd      	mov	sp, r7
 80013c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c8:	4770      	bx	lr

080013ca <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013ca:	b580      	push	{r7, lr}
 80013cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013ce:	f000 f8c5 	bl	800155c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013d2:	bf00      	nop
 80013d4:	bd80      	pop	{r7, pc}
	...

080013d8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXT line 25.
  */
void USART1_IRQHandler(void)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80013dc:	4802      	ldr	r0, [pc, #8]	@ (80013e8 <USART1_IRQHandler+0x10>)
 80013de:	f003 fa8b 	bl	80048f8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80013e2:	bf00      	nop
 80013e4:	bd80      	pop	{r7, pc}
 80013e6:	bf00      	nop
 80013e8:	20000224 	.word	0x20000224

080013ec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b086      	sub	sp, #24
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80013f4:	4a14      	ldr	r2, [pc, #80]	@ (8001448 <_sbrk+0x5c>)
 80013f6:	4b15      	ldr	r3, [pc, #84]	@ (800144c <_sbrk+0x60>)
 80013f8:	1ad3      	subs	r3, r2, r3
 80013fa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80013fc:	697b      	ldr	r3, [r7, #20]
 80013fe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001400:	4b13      	ldr	r3, [pc, #76]	@ (8001450 <_sbrk+0x64>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	2b00      	cmp	r3, #0
 8001406:	d102      	bne.n	800140e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001408:	4b11      	ldr	r3, [pc, #68]	@ (8001450 <_sbrk+0x64>)
 800140a:	4a12      	ldr	r2, [pc, #72]	@ (8001454 <_sbrk+0x68>)
 800140c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800140e:	4b10      	ldr	r3, [pc, #64]	@ (8001450 <_sbrk+0x64>)
 8001410:	681a      	ldr	r2, [r3, #0]
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	4413      	add	r3, r2
 8001416:	693a      	ldr	r2, [r7, #16]
 8001418:	429a      	cmp	r2, r3
 800141a:	d207      	bcs.n	800142c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800141c:	f004 f936 	bl	800568c <__errno>
 8001420:	4603      	mov	r3, r0
 8001422:	220c      	movs	r2, #12
 8001424:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001426:	f04f 33ff 	mov.w	r3, #4294967295
 800142a:	e009      	b.n	8001440 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800142c:	4b08      	ldr	r3, [pc, #32]	@ (8001450 <_sbrk+0x64>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001432:	4b07      	ldr	r3, [pc, #28]	@ (8001450 <_sbrk+0x64>)
 8001434:	681a      	ldr	r2, [r3, #0]
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	4413      	add	r3, r2
 800143a:	4a05      	ldr	r2, [pc, #20]	@ (8001450 <_sbrk+0x64>)
 800143c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800143e:	68fb      	ldr	r3, [r7, #12]
}
 8001440:	4618      	mov	r0, r3
 8001442:	3718      	adds	r7, #24
 8001444:	46bd      	mov	sp, r7
 8001446:	bd80      	pop	{r7, pc}
 8001448:	20003000 	.word	0x20003000
 800144c:	00000400 	.word	0x00000400
 8001450:	2000038c 	.word	0x2000038c
 8001454:	200004e0 	.word	0x200004e0

08001458 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001458:	b480      	push	{r7}
 800145a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800145c:	4b06      	ldr	r3, [pc, #24]	@ (8001478 <SystemInit+0x20>)
 800145e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001462:	4a05      	ldr	r2, [pc, #20]	@ (8001478 <SystemInit+0x20>)
 8001464:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001468:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800146c:	bf00      	nop
 800146e:	46bd      	mov	sp, r7
 8001470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001474:	4770      	bx	lr
 8001476:	bf00      	nop
 8001478:	e000ed00 	.word	0xe000ed00

0800147c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800147c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80014b4 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001480:	f7ff ffea 	bl	8001458 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001484:	480c      	ldr	r0, [pc, #48]	@ (80014b8 <LoopForever+0x6>)
  ldr r1, =_edata
 8001486:	490d      	ldr	r1, [pc, #52]	@ (80014bc <LoopForever+0xa>)
  ldr r2, =_sidata
 8001488:	4a0d      	ldr	r2, [pc, #52]	@ (80014c0 <LoopForever+0xe>)
  movs r3, #0
 800148a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800148c:	e002      	b.n	8001494 <LoopCopyDataInit>

0800148e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800148e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001490:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001492:	3304      	adds	r3, #4

08001494 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001494:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001496:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001498:	d3f9      	bcc.n	800148e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800149a:	4a0a      	ldr	r2, [pc, #40]	@ (80014c4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800149c:	4c0a      	ldr	r4, [pc, #40]	@ (80014c8 <LoopForever+0x16>)
  movs r3, #0
 800149e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014a0:	e001      	b.n	80014a6 <LoopFillZerobss>

080014a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014a4:	3204      	adds	r2, #4

080014a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014a8:	d3fb      	bcc.n	80014a2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80014aa:	f004 f8f5 	bl	8005698 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80014ae:	f7ff fa95 	bl	80009dc <main>

080014b2 <LoopForever>:

LoopForever:
    b LoopForever
 80014b2:	e7fe      	b.n	80014b2 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80014b4:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 80014b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014bc:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80014c0:	08006024 	.word	0x08006024
  ldr r2, =_sbss
 80014c4:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 80014c8:	200004dc 	.word	0x200004dc

080014cc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80014cc:	e7fe      	b.n	80014cc <ADC1_2_IRQHandler>
	...

080014d0 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80014d4:	4b08      	ldr	r3, [pc, #32]	@ (80014f8 <HAL_Init+0x28>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	4a07      	ldr	r2, [pc, #28]	@ (80014f8 <HAL_Init+0x28>)
 80014da:	f043 0310 	orr.w	r3, r3, #16
 80014de:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014e0:	2003      	movs	r0, #3
 80014e2:	f000 fa27 	bl	8001934 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80014e6:	200f      	movs	r0, #15
 80014e8:	f000 f808 	bl	80014fc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80014ec:	f7ff fdac 	bl	8001048 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014f0:	2300      	movs	r3, #0
}
 80014f2:	4618      	mov	r0, r3
 80014f4:	bd80      	pop	{r7, pc}
 80014f6:	bf00      	nop
 80014f8:	40022000 	.word	0x40022000

080014fc <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b082      	sub	sp, #8
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001504:	4b12      	ldr	r3, [pc, #72]	@ (8001550 <HAL_InitTick+0x54>)
 8001506:	681a      	ldr	r2, [r3, #0]
 8001508:	4b12      	ldr	r3, [pc, #72]	@ (8001554 <HAL_InitTick+0x58>)
 800150a:	781b      	ldrb	r3, [r3, #0]
 800150c:	4619      	mov	r1, r3
 800150e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001512:	fbb3 f3f1 	udiv	r3, r3, r1
 8001516:	fbb2 f3f3 	udiv	r3, r2, r3
 800151a:	4618      	mov	r0, r3
 800151c:	f000 fa3f 	bl	800199e <HAL_SYSTICK_Config>
 8001520:	4603      	mov	r3, r0
 8001522:	2b00      	cmp	r3, #0
 8001524:	d001      	beq.n	800152a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001526:	2301      	movs	r3, #1
 8001528:	e00e      	b.n	8001548 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	2b0f      	cmp	r3, #15
 800152e:	d80a      	bhi.n	8001546 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001530:	2200      	movs	r2, #0
 8001532:	6879      	ldr	r1, [r7, #4]
 8001534:	f04f 30ff 	mov.w	r0, #4294967295
 8001538:	f000 fa07 	bl	800194a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800153c:	4a06      	ldr	r2, [pc, #24]	@ (8001558 <HAL_InitTick+0x5c>)
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001542:	2300      	movs	r3, #0
 8001544:	e000      	b.n	8001548 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001546:	2301      	movs	r3, #1
}
 8001548:	4618      	mov	r0, r3
 800154a:	3708      	adds	r7, #8
 800154c:	46bd      	mov	sp, r7
 800154e:	bd80      	pop	{r7, pc}
 8001550:	20000000 	.word	0x20000000
 8001554:	20000008 	.word	0x20000008
 8001558:	20000004 	.word	0x20000004

0800155c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800155c:	b480      	push	{r7}
 800155e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001560:	4b06      	ldr	r3, [pc, #24]	@ (800157c <HAL_IncTick+0x20>)
 8001562:	781b      	ldrb	r3, [r3, #0]
 8001564:	461a      	mov	r2, r3
 8001566:	4b06      	ldr	r3, [pc, #24]	@ (8001580 <HAL_IncTick+0x24>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	4413      	add	r3, r2
 800156c:	4a04      	ldr	r2, [pc, #16]	@ (8001580 <HAL_IncTick+0x24>)
 800156e:	6013      	str	r3, [r2, #0]
}
 8001570:	bf00      	nop
 8001572:	46bd      	mov	sp, r7
 8001574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001578:	4770      	bx	lr
 800157a:	bf00      	nop
 800157c:	20000008 	.word	0x20000008
 8001580:	20000390 	.word	0x20000390

08001584 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001584:	b480      	push	{r7}
 8001586:	af00      	add	r7, sp, #0
  return uwTick;  
 8001588:	4b03      	ldr	r3, [pc, #12]	@ (8001598 <HAL_GetTick+0x14>)
 800158a:	681b      	ldr	r3, [r3, #0]
}
 800158c:	4618      	mov	r0, r3
 800158e:	46bd      	mov	sp, r7
 8001590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001594:	4770      	bx	lr
 8001596:	bf00      	nop
 8001598:	20000390 	.word	0x20000390

0800159c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b084      	sub	sp, #16
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d101      	bne.n	80015ae <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80015aa:	2301      	movs	r3, #1
 80015ac:	e0ed      	b.n	800178a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80015b4:	b2db      	uxtb	r3, r3
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d102      	bne.n	80015c0 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80015ba:	6878      	ldr	r0, [r7, #4]
 80015bc:	f7ff fd68 	bl	8001090 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	681a      	ldr	r2, [r3, #0]
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f042 0201 	orr.w	r2, r2, #1
 80015ce:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80015d0:	f7ff ffd8 	bl	8001584 <HAL_GetTick>
 80015d4:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80015d6:	e012      	b.n	80015fe <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80015d8:	f7ff ffd4 	bl	8001584 <HAL_GetTick>
 80015dc:	4602      	mov	r2, r0
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	1ad3      	subs	r3, r2, r3
 80015e2:	2b0a      	cmp	r3, #10
 80015e4:	d90b      	bls.n	80015fe <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015ea:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	2205      	movs	r2, #5
 80015f6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80015fa:	2301      	movs	r3, #1
 80015fc:	e0c5      	b.n	800178a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	685b      	ldr	r3, [r3, #4]
 8001604:	f003 0301 	and.w	r3, r3, #1
 8001608:	2b00      	cmp	r3, #0
 800160a:	d0e5      	beq.n	80015d8 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	681a      	ldr	r2, [r3, #0]
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f022 0202 	bic.w	r2, r2, #2
 800161a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800161c:	f7ff ffb2 	bl	8001584 <HAL_GetTick>
 8001620:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001622:	e012      	b.n	800164a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001624:	f7ff ffae 	bl	8001584 <HAL_GetTick>
 8001628:	4602      	mov	r2, r0
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	1ad3      	subs	r3, r2, r3
 800162e:	2b0a      	cmp	r3, #10
 8001630:	d90b      	bls.n	800164a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001636:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	2205      	movs	r2, #5
 8001642:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001646:	2301      	movs	r3, #1
 8001648:	e09f      	b.n	800178a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	685b      	ldr	r3, [r3, #4]
 8001650:	f003 0302 	and.w	r3, r3, #2
 8001654:	2b00      	cmp	r3, #0
 8001656:	d1e5      	bne.n	8001624 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	7e1b      	ldrb	r3, [r3, #24]
 800165c:	2b01      	cmp	r3, #1
 800165e:	d108      	bne.n	8001672 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	681a      	ldr	r2, [r3, #0]
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800166e:	601a      	str	r2, [r3, #0]
 8001670:	e007      	b.n	8001682 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	681a      	ldr	r2, [r3, #0]
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001680:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	7e5b      	ldrb	r3, [r3, #25]
 8001686:	2b01      	cmp	r3, #1
 8001688:	d108      	bne.n	800169c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	681a      	ldr	r2, [r3, #0]
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001698:	601a      	str	r2, [r3, #0]
 800169a:	e007      	b.n	80016ac <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	681a      	ldr	r2, [r3, #0]
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80016aa:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	7e9b      	ldrb	r3, [r3, #26]
 80016b0:	2b01      	cmp	r3, #1
 80016b2:	d108      	bne.n	80016c6 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	681a      	ldr	r2, [r3, #0]
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f042 0220 	orr.w	r2, r2, #32
 80016c2:	601a      	str	r2, [r3, #0]
 80016c4:	e007      	b.n	80016d6 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	681a      	ldr	r2, [r3, #0]
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	f022 0220 	bic.w	r2, r2, #32
 80016d4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	7edb      	ldrb	r3, [r3, #27]
 80016da:	2b01      	cmp	r3, #1
 80016dc:	d108      	bne.n	80016f0 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	681a      	ldr	r2, [r3, #0]
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	f022 0210 	bic.w	r2, r2, #16
 80016ec:	601a      	str	r2, [r3, #0]
 80016ee:	e007      	b.n	8001700 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	681a      	ldr	r2, [r3, #0]
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f042 0210 	orr.w	r2, r2, #16
 80016fe:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	7f1b      	ldrb	r3, [r3, #28]
 8001704:	2b01      	cmp	r3, #1
 8001706:	d108      	bne.n	800171a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	681a      	ldr	r2, [r3, #0]
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f042 0208 	orr.w	r2, r2, #8
 8001716:	601a      	str	r2, [r3, #0]
 8001718:	e007      	b.n	800172a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	681a      	ldr	r2, [r3, #0]
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	f022 0208 	bic.w	r2, r2, #8
 8001728:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	7f5b      	ldrb	r3, [r3, #29]
 800172e:	2b01      	cmp	r3, #1
 8001730:	d108      	bne.n	8001744 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	681a      	ldr	r2, [r3, #0]
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f042 0204 	orr.w	r2, r2, #4
 8001740:	601a      	str	r2, [r3, #0]
 8001742:	e007      	b.n	8001754 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	681a      	ldr	r2, [r3, #0]
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f022 0204 	bic.w	r2, r2, #4
 8001752:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	689a      	ldr	r2, [r3, #8]
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	68db      	ldr	r3, [r3, #12]
 800175c:	431a      	orrs	r2, r3
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	691b      	ldr	r3, [r3, #16]
 8001762:	431a      	orrs	r2, r3
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	695b      	ldr	r3, [r3, #20]
 8001768:	ea42 0103 	orr.w	r1, r2, r3
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	685b      	ldr	r3, [r3, #4]
 8001770:	1e5a      	subs	r2, r3, #1
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	430a      	orrs	r2, r1
 8001778:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	2200      	movs	r2, #0
 800177e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	2201      	movs	r2, #1
 8001784:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001788:	2300      	movs	r3, #0
}
 800178a:	4618      	mov	r0, r3
 800178c:	3710      	adds	r7, #16
 800178e:	46bd      	mov	sp, r7
 8001790:	bd80      	pop	{r7, pc}
	...

08001794 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001794:	b480      	push	{r7}
 8001796:	b085      	sub	sp, #20
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	f003 0307 	and.w	r3, r3, #7
 80017a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017a4:	4b0c      	ldr	r3, [pc, #48]	@ (80017d8 <__NVIC_SetPriorityGrouping+0x44>)
 80017a6:	68db      	ldr	r3, [r3, #12]
 80017a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017aa:	68ba      	ldr	r2, [r7, #8]
 80017ac:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80017b0:	4013      	ands	r3, r2
 80017b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017b8:	68bb      	ldr	r3, [r7, #8]
 80017ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017bc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80017c0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80017c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017c6:	4a04      	ldr	r2, [pc, #16]	@ (80017d8 <__NVIC_SetPriorityGrouping+0x44>)
 80017c8:	68bb      	ldr	r3, [r7, #8]
 80017ca:	60d3      	str	r3, [r2, #12]
}
 80017cc:	bf00      	nop
 80017ce:	3714      	adds	r7, #20
 80017d0:	46bd      	mov	sp, r7
 80017d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d6:	4770      	bx	lr
 80017d8:	e000ed00 	.word	0xe000ed00

080017dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017dc:	b480      	push	{r7}
 80017de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017e0:	4b04      	ldr	r3, [pc, #16]	@ (80017f4 <__NVIC_GetPriorityGrouping+0x18>)
 80017e2:	68db      	ldr	r3, [r3, #12]
 80017e4:	0a1b      	lsrs	r3, r3, #8
 80017e6:	f003 0307 	and.w	r3, r3, #7
}
 80017ea:	4618      	mov	r0, r3
 80017ec:	46bd      	mov	sp, r7
 80017ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f2:	4770      	bx	lr
 80017f4:	e000ed00 	.word	0xe000ed00

080017f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017f8:	b480      	push	{r7}
 80017fa:	b083      	sub	sp, #12
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	4603      	mov	r3, r0
 8001800:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001802:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001806:	2b00      	cmp	r3, #0
 8001808:	db0b      	blt.n	8001822 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800180a:	79fb      	ldrb	r3, [r7, #7]
 800180c:	f003 021f 	and.w	r2, r3, #31
 8001810:	4907      	ldr	r1, [pc, #28]	@ (8001830 <__NVIC_EnableIRQ+0x38>)
 8001812:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001816:	095b      	lsrs	r3, r3, #5
 8001818:	2001      	movs	r0, #1
 800181a:	fa00 f202 	lsl.w	r2, r0, r2
 800181e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001822:	bf00      	nop
 8001824:	370c      	adds	r7, #12
 8001826:	46bd      	mov	sp, r7
 8001828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182c:	4770      	bx	lr
 800182e:	bf00      	nop
 8001830:	e000e100 	.word	0xe000e100

08001834 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001834:	b480      	push	{r7}
 8001836:	b083      	sub	sp, #12
 8001838:	af00      	add	r7, sp, #0
 800183a:	4603      	mov	r3, r0
 800183c:	6039      	str	r1, [r7, #0]
 800183e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001840:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001844:	2b00      	cmp	r3, #0
 8001846:	db0a      	blt.n	800185e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	b2da      	uxtb	r2, r3
 800184c:	490c      	ldr	r1, [pc, #48]	@ (8001880 <__NVIC_SetPriority+0x4c>)
 800184e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001852:	0112      	lsls	r2, r2, #4
 8001854:	b2d2      	uxtb	r2, r2
 8001856:	440b      	add	r3, r1
 8001858:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800185c:	e00a      	b.n	8001874 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	b2da      	uxtb	r2, r3
 8001862:	4908      	ldr	r1, [pc, #32]	@ (8001884 <__NVIC_SetPriority+0x50>)
 8001864:	79fb      	ldrb	r3, [r7, #7]
 8001866:	f003 030f 	and.w	r3, r3, #15
 800186a:	3b04      	subs	r3, #4
 800186c:	0112      	lsls	r2, r2, #4
 800186e:	b2d2      	uxtb	r2, r2
 8001870:	440b      	add	r3, r1
 8001872:	761a      	strb	r2, [r3, #24]
}
 8001874:	bf00      	nop
 8001876:	370c      	adds	r7, #12
 8001878:	46bd      	mov	sp, r7
 800187a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187e:	4770      	bx	lr
 8001880:	e000e100 	.word	0xe000e100
 8001884:	e000ed00 	.word	0xe000ed00

08001888 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001888:	b480      	push	{r7}
 800188a:	b089      	sub	sp, #36	@ 0x24
 800188c:	af00      	add	r7, sp, #0
 800188e:	60f8      	str	r0, [r7, #12]
 8001890:	60b9      	str	r1, [r7, #8]
 8001892:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	f003 0307 	and.w	r3, r3, #7
 800189a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800189c:	69fb      	ldr	r3, [r7, #28]
 800189e:	f1c3 0307 	rsb	r3, r3, #7
 80018a2:	2b04      	cmp	r3, #4
 80018a4:	bf28      	it	cs
 80018a6:	2304      	movcs	r3, #4
 80018a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018aa:	69fb      	ldr	r3, [r7, #28]
 80018ac:	3304      	adds	r3, #4
 80018ae:	2b06      	cmp	r3, #6
 80018b0:	d902      	bls.n	80018b8 <NVIC_EncodePriority+0x30>
 80018b2:	69fb      	ldr	r3, [r7, #28]
 80018b4:	3b03      	subs	r3, #3
 80018b6:	e000      	b.n	80018ba <NVIC_EncodePriority+0x32>
 80018b8:	2300      	movs	r3, #0
 80018ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018bc:	f04f 32ff 	mov.w	r2, #4294967295
 80018c0:	69bb      	ldr	r3, [r7, #24]
 80018c2:	fa02 f303 	lsl.w	r3, r2, r3
 80018c6:	43da      	mvns	r2, r3
 80018c8:	68bb      	ldr	r3, [r7, #8]
 80018ca:	401a      	ands	r2, r3
 80018cc:	697b      	ldr	r3, [r7, #20]
 80018ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018d0:	f04f 31ff 	mov.w	r1, #4294967295
 80018d4:	697b      	ldr	r3, [r7, #20]
 80018d6:	fa01 f303 	lsl.w	r3, r1, r3
 80018da:	43d9      	mvns	r1, r3
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018e0:	4313      	orrs	r3, r2
         );
}
 80018e2:	4618      	mov	r0, r3
 80018e4:	3724      	adds	r7, #36	@ 0x24
 80018e6:	46bd      	mov	sp, r7
 80018e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ec:	4770      	bx	lr
	...

080018f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b082      	sub	sp, #8
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	3b01      	subs	r3, #1
 80018fc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001900:	d301      	bcc.n	8001906 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001902:	2301      	movs	r3, #1
 8001904:	e00f      	b.n	8001926 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001906:	4a0a      	ldr	r2, [pc, #40]	@ (8001930 <SysTick_Config+0x40>)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	3b01      	subs	r3, #1
 800190c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800190e:	210f      	movs	r1, #15
 8001910:	f04f 30ff 	mov.w	r0, #4294967295
 8001914:	f7ff ff8e 	bl	8001834 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001918:	4b05      	ldr	r3, [pc, #20]	@ (8001930 <SysTick_Config+0x40>)
 800191a:	2200      	movs	r2, #0
 800191c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800191e:	4b04      	ldr	r3, [pc, #16]	@ (8001930 <SysTick_Config+0x40>)
 8001920:	2207      	movs	r2, #7
 8001922:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001924:	2300      	movs	r3, #0
}
 8001926:	4618      	mov	r0, r3
 8001928:	3708      	adds	r7, #8
 800192a:	46bd      	mov	sp, r7
 800192c:	bd80      	pop	{r7, pc}
 800192e:	bf00      	nop
 8001930:	e000e010 	.word	0xe000e010

08001934 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b082      	sub	sp, #8
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800193c:	6878      	ldr	r0, [r7, #4]
 800193e:	f7ff ff29 	bl	8001794 <__NVIC_SetPriorityGrouping>
}
 8001942:	bf00      	nop
 8001944:	3708      	adds	r7, #8
 8001946:	46bd      	mov	sp, r7
 8001948:	bd80      	pop	{r7, pc}

0800194a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800194a:	b580      	push	{r7, lr}
 800194c:	b086      	sub	sp, #24
 800194e:	af00      	add	r7, sp, #0
 8001950:	4603      	mov	r3, r0
 8001952:	60b9      	str	r1, [r7, #8]
 8001954:	607a      	str	r2, [r7, #4]
 8001956:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001958:	2300      	movs	r3, #0
 800195a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800195c:	f7ff ff3e 	bl	80017dc <__NVIC_GetPriorityGrouping>
 8001960:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001962:	687a      	ldr	r2, [r7, #4]
 8001964:	68b9      	ldr	r1, [r7, #8]
 8001966:	6978      	ldr	r0, [r7, #20]
 8001968:	f7ff ff8e 	bl	8001888 <NVIC_EncodePriority>
 800196c:	4602      	mov	r2, r0
 800196e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001972:	4611      	mov	r1, r2
 8001974:	4618      	mov	r0, r3
 8001976:	f7ff ff5d 	bl	8001834 <__NVIC_SetPriority>
}
 800197a:	bf00      	nop
 800197c:	3718      	adds	r7, #24
 800197e:	46bd      	mov	sp, r7
 8001980:	bd80      	pop	{r7, pc}

08001982 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001982:	b580      	push	{r7, lr}
 8001984:	b082      	sub	sp, #8
 8001986:	af00      	add	r7, sp, #0
 8001988:	4603      	mov	r3, r0
 800198a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800198c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001990:	4618      	mov	r0, r3
 8001992:	f7ff ff31 	bl	80017f8 <__NVIC_EnableIRQ>
}
 8001996:	bf00      	nop
 8001998:	3708      	adds	r7, #8
 800199a:	46bd      	mov	sp, r7
 800199c:	bd80      	pop	{r7, pc}

0800199e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800199e:	b580      	push	{r7, lr}
 80019a0:	b082      	sub	sp, #8
 80019a2:	af00      	add	r7, sp, #0
 80019a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019a6:	6878      	ldr	r0, [r7, #4]
 80019a8:	f7ff ffa2 	bl	80018f0 <SysTick_Config>
 80019ac:	4603      	mov	r3, r0
}
 80019ae:	4618      	mov	r0, r3
 80019b0:	3708      	adds	r7, #8
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bd80      	pop	{r7, pc}

080019b6 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80019b6:	b480      	push	{r7}
 80019b8:	b083      	sub	sp, #12
 80019ba:	af00      	add	r7, sp, #0
 80019bc:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d101      	bne.n	80019c8 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 80019c4:	2301      	movs	r3, #1
 80019c6:	e02e      	b.n	8001a26 <HAL_DMA_Abort+0x70>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80019ce:	2b02      	cmp	r3, #2
 80019d0:	d008      	beq.n	80019e4 <HAL_DMA_Abort+0x2e>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	2204      	movs	r2, #4
 80019d6:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	2200      	movs	r2, #0
 80019dc:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 80019e0:	2301      	movs	r3, #1
 80019e2:	e020      	b.n	8001a26 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	681a      	ldr	r2, [r3, #0]
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f022 020e 	bic.w	r2, r2, #14
 80019f2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	681a      	ldr	r2, [r3, #0]
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f022 0201 	bic.w	r2, r2, #1
 8001a02:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001a0c:	2101      	movs	r1, #1
 8001a0e:	fa01 f202 	lsl.w	r2, r1, r2
 8001a12:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	2201      	movs	r2, #1
 8001a18:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	2200      	movs	r2, #0
 8001a20:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001a24:	2300      	movs	r3, #0
}
 8001a26:	4618      	mov	r0, r3
 8001a28:	370c      	adds	r7, #12
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a30:	4770      	bx	lr

08001a32 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001a32:	b580      	push	{r7, lr}
 8001a34:	b084      	sub	sp, #16
 8001a36:	af00      	add	r7, sp, #0
 8001a38:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001a44:	2b02      	cmp	r3, #2
 8001a46:	d005      	beq.n	8001a54 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	2204      	movs	r2, #4
 8001a4c:	639a      	str	r2, [r3, #56]	@ 0x38

    status = HAL_ERROR;
 8001a4e:	2301      	movs	r3, #1
 8001a50:	73fb      	strb	r3, [r7, #15]
 8001a52:	e027      	b.n	8001aa4 <HAL_DMA_Abort_IT+0x72>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	681a      	ldr	r2, [r3, #0]
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f022 020e 	bic.w	r2, r2, #14
 8001a62:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	681a      	ldr	r2, [r3, #0]
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f022 0201 	bic.w	r2, r2, #1
 8001a72:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001a7c:	2101      	movs	r1, #1
 8001a7e:	fa01 f202 	lsl.w	r2, r1, r2
 8001a82:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	2201      	movs	r2, #1
 8001a88:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	2200      	movs	r2, #0
 8001a90:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d003      	beq.n	8001aa4 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001aa0:	6878      	ldr	r0, [r7, #4]
 8001aa2:	4798      	blx	r3
    }
  }
  return status;
 8001aa4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	3710      	adds	r7, #16
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd80      	pop	{r7, pc}
	...

08001ab0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	b087      	sub	sp, #28
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
 8001ab8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001aba:	2300      	movs	r3, #0
 8001abc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001abe:	e14e      	b.n	8001d5e <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	681a      	ldr	r2, [r3, #0]
 8001ac4:	2101      	movs	r1, #1
 8001ac6:	697b      	ldr	r3, [r7, #20]
 8001ac8:	fa01 f303 	lsl.w	r3, r1, r3
 8001acc:	4013      	ands	r3, r2
 8001ace:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	f000 8140 	beq.w	8001d58 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	685b      	ldr	r3, [r3, #4]
 8001adc:	f003 0303 	and.w	r3, r3, #3
 8001ae0:	2b01      	cmp	r3, #1
 8001ae2:	d005      	beq.n	8001af0 <HAL_GPIO_Init+0x40>
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	685b      	ldr	r3, [r3, #4]
 8001ae8:	f003 0303 	and.w	r3, r3, #3
 8001aec:	2b02      	cmp	r3, #2
 8001aee:	d130      	bne.n	8001b52 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	689b      	ldr	r3, [r3, #8]
 8001af4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001af6:	697b      	ldr	r3, [r7, #20]
 8001af8:	005b      	lsls	r3, r3, #1
 8001afa:	2203      	movs	r2, #3
 8001afc:	fa02 f303 	lsl.w	r3, r2, r3
 8001b00:	43db      	mvns	r3, r3
 8001b02:	693a      	ldr	r2, [r7, #16]
 8001b04:	4013      	ands	r3, r2
 8001b06:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	68da      	ldr	r2, [r3, #12]
 8001b0c:	697b      	ldr	r3, [r7, #20]
 8001b0e:	005b      	lsls	r3, r3, #1
 8001b10:	fa02 f303 	lsl.w	r3, r2, r3
 8001b14:	693a      	ldr	r2, [r7, #16]
 8001b16:	4313      	orrs	r3, r2
 8001b18:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	693a      	ldr	r2, [r7, #16]
 8001b1e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	685b      	ldr	r3, [r3, #4]
 8001b24:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b26:	2201      	movs	r2, #1
 8001b28:	697b      	ldr	r3, [r7, #20]
 8001b2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b2e:	43db      	mvns	r3, r3
 8001b30:	693a      	ldr	r2, [r7, #16]
 8001b32:	4013      	ands	r3, r2
 8001b34:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b36:	683b      	ldr	r3, [r7, #0]
 8001b38:	685b      	ldr	r3, [r3, #4]
 8001b3a:	091b      	lsrs	r3, r3, #4
 8001b3c:	f003 0201 	and.w	r2, r3, #1
 8001b40:	697b      	ldr	r3, [r7, #20]
 8001b42:	fa02 f303 	lsl.w	r3, r2, r3
 8001b46:	693a      	ldr	r2, [r7, #16]
 8001b48:	4313      	orrs	r3, r2
 8001b4a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	693a      	ldr	r2, [r7, #16]
 8001b50:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	685b      	ldr	r3, [r3, #4]
 8001b56:	f003 0303 	and.w	r3, r3, #3
 8001b5a:	2b03      	cmp	r3, #3
 8001b5c:	d017      	beq.n	8001b8e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	68db      	ldr	r3, [r3, #12]
 8001b62:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001b64:	697b      	ldr	r3, [r7, #20]
 8001b66:	005b      	lsls	r3, r3, #1
 8001b68:	2203      	movs	r2, #3
 8001b6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b6e:	43db      	mvns	r3, r3
 8001b70:	693a      	ldr	r2, [r7, #16]
 8001b72:	4013      	ands	r3, r2
 8001b74:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001b76:	683b      	ldr	r3, [r7, #0]
 8001b78:	689a      	ldr	r2, [r3, #8]
 8001b7a:	697b      	ldr	r3, [r7, #20]
 8001b7c:	005b      	lsls	r3, r3, #1
 8001b7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b82:	693a      	ldr	r2, [r7, #16]
 8001b84:	4313      	orrs	r3, r2
 8001b86:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	693a      	ldr	r2, [r7, #16]
 8001b8c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	685b      	ldr	r3, [r3, #4]
 8001b92:	f003 0303 	and.w	r3, r3, #3
 8001b96:	2b02      	cmp	r3, #2
 8001b98:	d123      	bne.n	8001be2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001b9a:	697b      	ldr	r3, [r7, #20]
 8001b9c:	08da      	lsrs	r2, r3, #3
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	3208      	adds	r2, #8
 8001ba2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ba6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001ba8:	697b      	ldr	r3, [r7, #20]
 8001baa:	f003 0307 	and.w	r3, r3, #7
 8001bae:	009b      	lsls	r3, r3, #2
 8001bb0:	220f      	movs	r2, #15
 8001bb2:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb6:	43db      	mvns	r3, r3
 8001bb8:	693a      	ldr	r2, [r7, #16]
 8001bba:	4013      	ands	r3, r2
 8001bbc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	691a      	ldr	r2, [r3, #16]
 8001bc2:	697b      	ldr	r3, [r7, #20]
 8001bc4:	f003 0307 	and.w	r3, r3, #7
 8001bc8:	009b      	lsls	r3, r3, #2
 8001bca:	fa02 f303 	lsl.w	r3, r2, r3
 8001bce:	693a      	ldr	r2, [r7, #16]
 8001bd0:	4313      	orrs	r3, r2
 8001bd2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001bd4:	697b      	ldr	r3, [r7, #20]
 8001bd6:	08da      	lsrs	r2, r3, #3
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	3208      	adds	r2, #8
 8001bdc:	6939      	ldr	r1, [r7, #16]
 8001bde:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001be8:	697b      	ldr	r3, [r7, #20]
 8001bea:	005b      	lsls	r3, r3, #1
 8001bec:	2203      	movs	r2, #3
 8001bee:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf2:	43db      	mvns	r3, r3
 8001bf4:	693a      	ldr	r2, [r7, #16]
 8001bf6:	4013      	ands	r3, r2
 8001bf8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	685b      	ldr	r3, [r3, #4]
 8001bfe:	f003 0203 	and.w	r2, r3, #3
 8001c02:	697b      	ldr	r3, [r7, #20]
 8001c04:	005b      	lsls	r3, r3, #1
 8001c06:	fa02 f303 	lsl.w	r3, r2, r3
 8001c0a:	693a      	ldr	r2, [r7, #16]
 8001c0c:	4313      	orrs	r3, r2
 8001c0e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	693a      	ldr	r2, [r7, #16]
 8001c14:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	685b      	ldr	r3, [r3, #4]
 8001c1a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	f000 809a 	beq.w	8001d58 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c24:	4b55      	ldr	r3, [pc, #340]	@ (8001d7c <HAL_GPIO_Init+0x2cc>)
 8001c26:	699b      	ldr	r3, [r3, #24]
 8001c28:	4a54      	ldr	r2, [pc, #336]	@ (8001d7c <HAL_GPIO_Init+0x2cc>)
 8001c2a:	f043 0301 	orr.w	r3, r3, #1
 8001c2e:	6193      	str	r3, [r2, #24]
 8001c30:	4b52      	ldr	r3, [pc, #328]	@ (8001d7c <HAL_GPIO_Init+0x2cc>)
 8001c32:	699b      	ldr	r3, [r3, #24]
 8001c34:	f003 0301 	and.w	r3, r3, #1
 8001c38:	60bb      	str	r3, [r7, #8]
 8001c3a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001c3c:	4a50      	ldr	r2, [pc, #320]	@ (8001d80 <HAL_GPIO_Init+0x2d0>)
 8001c3e:	697b      	ldr	r3, [r7, #20]
 8001c40:	089b      	lsrs	r3, r3, #2
 8001c42:	3302      	adds	r3, #2
 8001c44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c48:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001c4a:	697b      	ldr	r3, [r7, #20]
 8001c4c:	f003 0303 	and.w	r3, r3, #3
 8001c50:	009b      	lsls	r3, r3, #2
 8001c52:	220f      	movs	r2, #15
 8001c54:	fa02 f303 	lsl.w	r3, r2, r3
 8001c58:	43db      	mvns	r3, r3
 8001c5a:	693a      	ldr	r2, [r7, #16]
 8001c5c:	4013      	ands	r3, r2
 8001c5e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001c66:	d013      	beq.n	8001c90 <HAL_GPIO_Init+0x1e0>
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	4a46      	ldr	r2, [pc, #280]	@ (8001d84 <HAL_GPIO_Init+0x2d4>)
 8001c6c:	4293      	cmp	r3, r2
 8001c6e:	d00d      	beq.n	8001c8c <HAL_GPIO_Init+0x1dc>
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	4a45      	ldr	r2, [pc, #276]	@ (8001d88 <HAL_GPIO_Init+0x2d8>)
 8001c74:	4293      	cmp	r3, r2
 8001c76:	d007      	beq.n	8001c88 <HAL_GPIO_Init+0x1d8>
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	4a44      	ldr	r2, [pc, #272]	@ (8001d8c <HAL_GPIO_Init+0x2dc>)
 8001c7c:	4293      	cmp	r3, r2
 8001c7e:	d101      	bne.n	8001c84 <HAL_GPIO_Init+0x1d4>
 8001c80:	2303      	movs	r3, #3
 8001c82:	e006      	b.n	8001c92 <HAL_GPIO_Init+0x1e2>
 8001c84:	2305      	movs	r3, #5
 8001c86:	e004      	b.n	8001c92 <HAL_GPIO_Init+0x1e2>
 8001c88:	2302      	movs	r3, #2
 8001c8a:	e002      	b.n	8001c92 <HAL_GPIO_Init+0x1e2>
 8001c8c:	2301      	movs	r3, #1
 8001c8e:	e000      	b.n	8001c92 <HAL_GPIO_Init+0x1e2>
 8001c90:	2300      	movs	r3, #0
 8001c92:	697a      	ldr	r2, [r7, #20]
 8001c94:	f002 0203 	and.w	r2, r2, #3
 8001c98:	0092      	lsls	r2, r2, #2
 8001c9a:	4093      	lsls	r3, r2
 8001c9c:	693a      	ldr	r2, [r7, #16]
 8001c9e:	4313      	orrs	r3, r2
 8001ca0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001ca2:	4937      	ldr	r1, [pc, #220]	@ (8001d80 <HAL_GPIO_Init+0x2d0>)
 8001ca4:	697b      	ldr	r3, [r7, #20]
 8001ca6:	089b      	lsrs	r3, r3, #2
 8001ca8:	3302      	adds	r3, #2
 8001caa:	693a      	ldr	r2, [r7, #16]
 8001cac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001cb0:	4b37      	ldr	r3, [pc, #220]	@ (8001d90 <HAL_GPIO_Init+0x2e0>)
 8001cb2:	689b      	ldr	r3, [r3, #8]
 8001cb4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	43db      	mvns	r3, r3
 8001cba:	693a      	ldr	r2, [r7, #16]
 8001cbc:	4013      	ands	r3, r2
 8001cbe:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	685b      	ldr	r3, [r3, #4]
 8001cc4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d003      	beq.n	8001cd4 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8001ccc:	693a      	ldr	r2, [r7, #16]
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	4313      	orrs	r3, r2
 8001cd2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001cd4:	4a2e      	ldr	r2, [pc, #184]	@ (8001d90 <HAL_GPIO_Init+0x2e0>)
 8001cd6:	693b      	ldr	r3, [r7, #16]
 8001cd8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001cda:	4b2d      	ldr	r3, [pc, #180]	@ (8001d90 <HAL_GPIO_Init+0x2e0>)
 8001cdc:	68db      	ldr	r3, [r3, #12]
 8001cde:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	43db      	mvns	r3, r3
 8001ce4:	693a      	ldr	r2, [r7, #16]
 8001ce6:	4013      	ands	r3, r2
 8001ce8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	685b      	ldr	r3, [r3, #4]
 8001cee:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d003      	beq.n	8001cfe <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8001cf6:	693a      	ldr	r2, [r7, #16]
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	4313      	orrs	r3, r2
 8001cfc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001cfe:	4a24      	ldr	r2, [pc, #144]	@ (8001d90 <HAL_GPIO_Init+0x2e0>)
 8001d00:	693b      	ldr	r3, [r7, #16]
 8001d02:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001d04:	4b22      	ldr	r3, [pc, #136]	@ (8001d90 <HAL_GPIO_Init+0x2e0>)
 8001d06:	685b      	ldr	r3, [r3, #4]
 8001d08:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	43db      	mvns	r3, r3
 8001d0e:	693a      	ldr	r2, [r7, #16]
 8001d10:	4013      	ands	r3, r2
 8001d12:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	685b      	ldr	r3, [r3, #4]
 8001d18:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d003      	beq.n	8001d28 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8001d20:	693a      	ldr	r2, [r7, #16]
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	4313      	orrs	r3, r2
 8001d26:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001d28:	4a19      	ldr	r2, [pc, #100]	@ (8001d90 <HAL_GPIO_Init+0x2e0>)
 8001d2a:	693b      	ldr	r3, [r7, #16]
 8001d2c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d2e:	4b18      	ldr	r3, [pc, #96]	@ (8001d90 <HAL_GPIO_Init+0x2e0>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	43db      	mvns	r3, r3
 8001d38:	693a      	ldr	r2, [r7, #16]
 8001d3a:	4013      	ands	r3, r2
 8001d3c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001d3e:	683b      	ldr	r3, [r7, #0]
 8001d40:	685b      	ldr	r3, [r3, #4]
 8001d42:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d003      	beq.n	8001d52 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8001d4a:	693a      	ldr	r2, [r7, #16]
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	4313      	orrs	r3, r2
 8001d50:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001d52:	4a0f      	ldr	r2, [pc, #60]	@ (8001d90 <HAL_GPIO_Init+0x2e0>)
 8001d54:	693b      	ldr	r3, [r7, #16]
 8001d56:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001d58:	697b      	ldr	r3, [r7, #20]
 8001d5a:	3301      	adds	r3, #1
 8001d5c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	681a      	ldr	r2, [r3, #0]
 8001d62:	697b      	ldr	r3, [r7, #20]
 8001d64:	fa22 f303 	lsr.w	r3, r2, r3
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	f47f aea9 	bne.w	8001ac0 <HAL_GPIO_Init+0x10>
  }
}
 8001d6e:	bf00      	nop
 8001d70:	bf00      	nop
 8001d72:	371c      	adds	r7, #28
 8001d74:	46bd      	mov	sp, r7
 8001d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7a:	4770      	bx	lr
 8001d7c:	40021000 	.word	0x40021000
 8001d80:	40010000 	.word	0x40010000
 8001d84:	48000400 	.word	0x48000400
 8001d88:	48000800 	.word	0x48000800
 8001d8c:	48000c00 	.word	0x48000c00
 8001d90:	40010400 	.word	0x40010400

08001d94 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001d94:	b480      	push	{r7}
 8001d96:	b085      	sub	sp, #20
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
 8001d9c:	460b      	mov	r3, r1
 8001d9e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	691a      	ldr	r2, [r3, #16]
 8001da4:	887b      	ldrh	r3, [r7, #2]
 8001da6:	4013      	ands	r3, r2
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d002      	beq.n	8001db2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001dac:	2301      	movs	r3, #1
 8001dae:	73fb      	strb	r3, [r7, #15]
 8001db0:	e001      	b.n	8001db6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001db2:	2300      	movs	r3, #0
 8001db4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001db6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001db8:	4618      	mov	r0, r3
 8001dba:	3714      	adds	r7, #20
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc2:	4770      	bx	lr

08001dc4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	b083      	sub	sp, #12
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
 8001dcc:	460b      	mov	r3, r1
 8001dce:	807b      	strh	r3, [r7, #2]
 8001dd0:	4613      	mov	r3, r2
 8001dd2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001dd4:	787b      	ldrb	r3, [r7, #1]
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d003      	beq.n	8001de2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001dda:	887a      	ldrh	r2, [r7, #2]
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001de0:	e002      	b.n	8001de8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001de2:	887a      	ldrh	r2, [r7, #2]
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001de8:	bf00      	nop
 8001dea:	370c      	adds	r7, #12
 8001dec:	46bd      	mov	sp, r7
 8001dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df2:	4770      	bx	lr

08001df4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 8001dfa:	af00      	add	r7, sp, #0
 8001dfc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e00:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001e04:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001e06:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e0a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d102      	bne.n	8001e1a <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001e14:	2301      	movs	r3, #1
 8001e16:	f001 b823 	b.w	8002e60 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e1a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e1e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f003 0301 	and.w	r3, r3, #1
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	f000 817d 	beq.w	800212a <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001e30:	4bbc      	ldr	r3, [pc, #752]	@ (8002124 <HAL_RCC_OscConfig+0x330>)
 8001e32:	685b      	ldr	r3, [r3, #4]
 8001e34:	f003 030c 	and.w	r3, r3, #12
 8001e38:	2b04      	cmp	r3, #4
 8001e3a:	d00c      	beq.n	8001e56 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001e3c:	4bb9      	ldr	r3, [pc, #740]	@ (8002124 <HAL_RCC_OscConfig+0x330>)
 8001e3e:	685b      	ldr	r3, [r3, #4]
 8001e40:	f003 030c 	and.w	r3, r3, #12
 8001e44:	2b08      	cmp	r3, #8
 8001e46:	d15c      	bne.n	8001f02 <HAL_RCC_OscConfig+0x10e>
 8001e48:	4bb6      	ldr	r3, [pc, #728]	@ (8002124 <HAL_RCC_OscConfig+0x330>)
 8001e4a:	685b      	ldr	r3, [r3, #4]
 8001e4c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e50:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001e54:	d155      	bne.n	8001f02 <HAL_RCC_OscConfig+0x10e>
 8001e56:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001e5a:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e5e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 8001e62:	fa93 f3a3 	rbit	r3, r3
 8001e66:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001e6a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e6e:	fab3 f383 	clz	r3, r3
 8001e72:	b2db      	uxtb	r3, r3
 8001e74:	095b      	lsrs	r3, r3, #5
 8001e76:	b2db      	uxtb	r3, r3
 8001e78:	f043 0301 	orr.w	r3, r3, #1
 8001e7c:	b2db      	uxtb	r3, r3
 8001e7e:	2b01      	cmp	r3, #1
 8001e80:	d102      	bne.n	8001e88 <HAL_RCC_OscConfig+0x94>
 8001e82:	4ba8      	ldr	r3, [pc, #672]	@ (8002124 <HAL_RCC_OscConfig+0x330>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	e015      	b.n	8001eb4 <HAL_RCC_OscConfig+0xc0>
 8001e88:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001e8c:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e90:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 8001e94:	fa93 f3a3 	rbit	r3, r3
 8001e98:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8001e9c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001ea0:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8001ea4:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 8001ea8:	fa93 f3a3 	rbit	r3, r3
 8001eac:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 8001eb0:	4b9c      	ldr	r3, [pc, #624]	@ (8002124 <HAL_RCC_OscConfig+0x330>)
 8001eb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001eb4:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001eb8:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 8001ebc:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8001ec0:	fa92 f2a2 	rbit	r2, r2
 8001ec4:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 8001ec8:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 8001ecc:	fab2 f282 	clz	r2, r2
 8001ed0:	b2d2      	uxtb	r2, r2
 8001ed2:	f042 0220 	orr.w	r2, r2, #32
 8001ed6:	b2d2      	uxtb	r2, r2
 8001ed8:	f002 021f 	and.w	r2, r2, #31
 8001edc:	2101      	movs	r1, #1
 8001ede:	fa01 f202 	lsl.w	r2, r1, r2
 8001ee2:	4013      	ands	r3, r2
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	f000 811f 	beq.w	8002128 <HAL_RCC_OscConfig+0x334>
 8001eea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001eee:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	685b      	ldr	r3, [r3, #4]
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	f040 8116 	bne.w	8002128 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8001efc:	2301      	movs	r3, #1
 8001efe:	f000 bfaf 	b.w	8002e60 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f02:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f06:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	685b      	ldr	r3, [r3, #4]
 8001f0e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001f12:	d106      	bne.n	8001f22 <HAL_RCC_OscConfig+0x12e>
 8001f14:	4b83      	ldr	r3, [pc, #524]	@ (8002124 <HAL_RCC_OscConfig+0x330>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	4a82      	ldr	r2, [pc, #520]	@ (8002124 <HAL_RCC_OscConfig+0x330>)
 8001f1a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f1e:	6013      	str	r3, [r2, #0]
 8001f20:	e036      	b.n	8001f90 <HAL_RCC_OscConfig+0x19c>
 8001f22:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f26:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	685b      	ldr	r3, [r3, #4]
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d10c      	bne.n	8001f4c <HAL_RCC_OscConfig+0x158>
 8001f32:	4b7c      	ldr	r3, [pc, #496]	@ (8002124 <HAL_RCC_OscConfig+0x330>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	4a7b      	ldr	r2, [pc, #492]	@ (8002124 <HAL_RCC_OscConfig+0x330>)
 8001f38:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001f3c:	6013      	str	r3, [r2, #0]
 8001f3e:	4b79      	ldr	r3, [pc, #484]	@ (8002124 <HAL_RCC_OscConfig+0x330>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	4a78      	ldr	r2, [pc, #480]	@ (8002124 <HAL_RCC_OscConfig+0x330>)
 8001f44:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001f48:	6013      	str	r3, [r2, #0]
 8001f4a:	e021      	b.n	8001f90 <HAL_RCC_OscConfig+0x19c>
 8001f4c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f50:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	685b      	ldr	r3, [r3, #4]
 8001f58:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001f5c:	d10c      	bne.n	8001f78 <HAL_RCC_OscConfig+0x184>
 8001f5e:	4b71      	ldr	r3, [pc, #452]	@ (8002124 <HAL_RCC_OscConfig+0x330>)
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	4a70      	ldr	r2, [pc, #448]	@ (8002124 <HAL_RCC_OscConfig+0x330>)
 8001f64:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001f68:	6013      	str	r3, [r2, #0]
 8001f6a:	4b6e      	ldr	r3, [pc, #440]	@ (8002124 <HAL_RCC_OscConfig+0x330>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	4a6d      	ldr	r2, [pc, #436]	@ (8002124 <HAL_RCC_OscConfig+0x330>)
 8001f70:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f74:	6013      	str	r3, [r2, #0]
 8001f76:	e00b      	b.n	8001f90 <HAL_RCC_OscConfig+0x19c>
 8001f78:	4b6a      	ldr	r3, [pc, #424]	@ (8002124 <HAL_RCC_OscConfig+0x330>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	4a69      	ldr	r2, [pc, #420]	@ (8002124 <HAL_RCC_OscConfig+0x330>)
 8001f7e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001f82:	6013      	str	r3, [r2, #0]
 8001f84:	4b67      	ldr	r3, [pc, #412]	@ (8002124 <HAL_RCC_OscConfig+0x330>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	4a66      	ldr	r2, [pc, #408]	@ (8002124 <HAL_RCC_OscConfig+0x330>)
 8001f8a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001f8e:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001f90:	4b64      	ldr	r3, [pc, #400]	@ (8002124 <HAL_RCC_OscConfig+0x330>)
 8001f92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f94:	f023 020f 	bic.w	r2, r3, #15
 8001f98:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f9c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	689b      	ldr	r3, [r3, #8]
 8001fa4:	495f      	ldr	r1, [pc, #380]	@ (8002124 <HAL_RCC_OscConfig+0x330>)
 8001fa6:	4313      	orrs	r3, r2
 8001fa8:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001faa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001fae:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	685b      	ldr	r3, [r3, #4]
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d059      	beq.n	800206e <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fba:	f7ff fae3 	bl	8001584 <HAL_GetTick>
 8001fbe:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fc2:	e00a      	b.n	8001fda <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001fc4:	f7ff fade 	bl	8001584 <HAL_GetTick>
 8001fc8:	4602      	mov	r2, r0
 8001fca:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001fce:	1ad3      	subs	r3, r2, r3
 8001fd0:	2b64      	cmp	r3, #100	@ 0x64
 8001fd2:	d902      	bls.n	8001fda <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8001fd4:	2303      	movs	r3, #3
 8001fd6:	f000 bf43 	b.w	8002e60 <HAL_RCC_OscConfig+0x106c>
 8001fda:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001fde:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fe2:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8001fe6:	fa93 f3a3 	rbit	r3, r3
 8001fea:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 8001fee:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ff2:	fab3 f383 	clz	r3, r3
 8001ff6:	b2db      	uxtb	r3, r3
 8001ff8:	095b      	lsrs	r3, r3, #5
 8001ffa:	b2db      	uxtb	r3, r3
 8001ffc:	f043 0301 	orr.w	r3, r3, #1
 8002000:	b2db      	uxtb	r3, r3
 8002002:	2b01      	cmp	r3, #1
 8002004:	d102      	bne.n	800200c <HAL_RCC_OscConfig+0x218>
 8002006:	4b47      	ldr	r3, [pc, #284]	@ (8002124 <HAL_RCC_OscConfig+0x330>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	e015      	b.n	8002038 <HAL_RCC_OscConfig+0x244>
 800200c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002010:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002014:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8002018:	fa93 f3a3 	rbit	r3, r3
 800201c:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8002020:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002024:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8002028:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 800202c:	fa93 f3a3 	rbit	r3, r3
 8002030:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8002034:	4b3b      	ldr	r3, [pc, #236]	@ (8002124 <HAL_RCC_OscConfig+0x330>)
 8002036:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002038:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800203c:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 8002040:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8002044:	fa92 f2a2 	rbit	r2, r2
 8002048:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 800204c:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8002050:	fab2 f282 	clz	r2, r2
 8002054:	b2d2      	uxtb	r2, r2
 8002056:	f042 0220 	orr.w	r2, r2, #32
 800205a:	b2d2      	uxtb	r2, r2
 800205c:	f002 021f 	and.w	r2, r2, #31
 8002060:	2101      	movs	r1, #1
 8002062:	fa01 f202 	lsl.w	r2, r1, r2
 8002066:	4013      	ands	r3, r2
 8002068:	2b00      	cmp	r3, #0
 800206a:	d0ab      	beq.n	8001fc4 <HAL_RCC_OscConfig+0x1d0>
 800206c:	e05d      	b.n	800212a <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800206e:	f7ff fa89 	bl	8001584 <HAL_GetTick>
 8002072:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002076:	e00a      	b.n	800208e <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002078:	f7ff fa84 	bl	8001584 <HAL_GetTick>
 800207c:	4602      	mov	r2, r0
 800207e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002082:	1ad3      	subs	r3, r2, r3
 8002084:	2b64      	cmp	r3, #100	@ 0x64
 8002086:	d902      	bls.n	800208e <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8002088:	2303      	movs	r3, #3
 800208a:	f000 bee9 	b.w	8002e60 <HAL_RCC_OscConfig+0x106c>
 800208e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002092:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002096:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 800209a:	fa93 f3a3 	rbit	r3, r3
 800209e:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 80020a2:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020a6:	fab3 f383 	clz	r3, r3
 80020aa:	b2db      	uxtb	r3, r3
 80020ac:	095b      	lsrs	r3, r3, #5
 80020ae:	b2db      	uxtb	r3, r3
 80020b0:	f043 0301 	orr.w	r3, r3, #1
 80020b4:	b2db      	uxtb	r3, r3
 80020b6:	2b01      	cmp	r3, #1
 80020b8:	d102      	bne.n	80020c0 <HAL_RCC_OscConfig+0x2cc>
 80020ba:	4b1a      	ldr	r3, [pc, #104]	@ (8002124 <HAL_RCC_OscConfig+0x330>)
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	e015      	b.n	80020ec <HAL_RCC_OscConfig+0x2f8>
 80020c0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80020c4:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020c8:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 80020cc:	fa93 f3a3 	rbit	r3, r3
 80020d0:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 80020d4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80020d8:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 80020dc:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 80020e0:	fa93 f3a3 	rbit	r3, r3
 80020e4:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 80020e8:	4b0e      	ldr	r3, [pc, #56]	@ (8002124 <HAL_RCC_OscConfig+0x330>)
 80020ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020ec:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80020f0:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 80020f4:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 80020f8:	fa92 f2a2 	rbit	r2, r2
 80020fc:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 8002100:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8002104:	fab2 f282 	clz	r2, r2
 8002108:	b2d2      	uxtb	r2, r2
 800210a:	f042 0220 	orr.w	r2, r2, #32
 800210e:	b2d2      	uxtb	r2, r2
 8002110:	f002 021f 	and.w	r2, r2, #31
 8002114:	2101      	movs	r1, #1
 8002116:	fa01 f202 	lsl.w	r2, r1, r2
 800211a:	4013      	ands	r3, r2
 800211c:	2b00      	cmp	r3, #0
 800211e:	d1ab      	bne.n	8002078 <HAL_RCC_OscConfig+0x284>
 8002120:	e003      	b.n	800212a <HAL_RCC_OscConfig+0x336>
 8002122:	bf00      	nop
 8002124:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002128:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800212a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800212e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f003 0302 	and.w	r3, r3, #2
 800213a:	2b00      	cmp	r3, #0
 800213c:	f000 817d 	beq.w	800243a <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002140:	4ba6      	ldr	r3, [pc, #664]	@ (80023dc <HAL_RCC_OscConfig+0x5e8>)
 8002142:	685b      	ldr	r3, [r3, #4]
 8002144:	f003 030c 	and.w	r3, r3, #12
 8002148:	2b00      	cmp	r3, #0
 800214a:	d00b      	beq.n	8002164 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800214c:	4ba3      	ldr	r3, [pc, #652]	@ (80023dc <HAL_RCC_OscConfig+0x5e8>)
 800214e:	685b      	ldr	r3, [r3, #4]
 8002150:	f003 030c 	and.w	r3, r3, #12
 8002154:	2b08      	cmp	r3, #8
 8002156:	d172      	bne.n	800223e <HAL_RCC_OscConfig+0x44a>
 8002158:	4ba0      	ldr	r3, [pc, #640]	@ (80023dc <HAL_RCC_OscConfig+0x5e8>)
 800215a:	685b      	ldr	r3, [r3, #4]
 800215c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002160:	2b00      	cmp	r3, #0
 8002162:	d16c      	bne.n	800223e <HAL_RCC_OscConfig+0x44a>
 8002164:	2302      	movs	r3, #2
 8002166:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800216a:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 800216e:	fa93 f3a3 	rbit	r3, r3
 8002172:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 8002176:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800217a:	fab3 f383 	clz	r3, r3
 800217e:	b2db      	uxtb	r3, r3
 8002180:	095b      	lsrs	r3, r3, #5
 8002182:	b2db      	uxtb	r3, r3
 8002184:	f043 0301 	orr.w	r3, r3, #1
 8002188:	b2db      	uxtb	r3, r3
 800218a:	2b01      	cmp	r3, #1
 800218c:	d102      	bne.n	8002194 <HAL_RCC_OscConfig+0x3a0>
 800218e:	4b93      	ldr	r3, [pc, #588]	@ (80023dc <HAL_RCC_OscConfig+0x5e8>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	e013      	b.n	80021bc <HAL_RCC_OscConfig+0x3c8>
 8002194:	2302      	movs	r3, #2
 8002196:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800219a:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 800219e:	fa93 f3a3 	rbit	r3, r3
 80021a2:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 80021a6:	2302      	movs	r3, #2
 80021a8:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 80021ac:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 80021b0:	fa93 f3a3 	rbit	r3, r3
 80021b4:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 80021b8:	4b88      	ldr	r3, [pc, #544]	@ (80023dc <HAL_RCC_OscConfig+0x5e8>)
 80021ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021bc:	2202      	movs	r2, #2
 80021be:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 80021c2:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 80021c6:	fa92 f2a2 	rbit	r2, r2
 80021ca:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 80021ce:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 80021d2:	fab2 f282 	clz	r2, r2
 80021d6:	b2d2      	uxtb	r2, r2
 80021d8:	f042 0220 	orr.w	r2, r2, #32
 80021dc:	b2d2      	uxtb	r2, r2
 80021de:	f002 021f 	and.w	r2, r2, #31
 80021e2:	2101      	movs	r1, #1
 80021e4:	fa01 f202 	lsl.w	r2, r1, r2
 80021e8:	4013      	ands	r3, r2
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d00a      	beq.n	8002204 <HAL_RCC_OscConfig+0x410>
 80021ee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021f2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	691b      	ldr	r3, [r3, #16]
 80021fa:	2b01      	cmp	r3, #1
 80021fc:	d002      	beq.n	8002204 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 80021fe:	2301      	movs	r3, #1
 8002200:	f000 be2e 	b.w	8002e60 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002204:	4b75      	ldr	r3, [pc, #468]	@ (80023dc <HAL_RCC_OscConfig+0x5e8>)
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800220c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002210:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	695b      	ldr	r3, [r3, #20]
 8002218:	21f8      	movs	r1, #248	@ 0xf8
 800221a:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800221e:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8002222:	fa91 f1a1 	rbit	r1, r1
 8002226:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 800222a:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 800222e:	fab1 f181 	clz	r1, r1
 8002232:	b2c9      	uxtb	r1, r1
 8002234:	408b      	lsls	r3, r1
 8002236:	4969      	ldr	r1, [pc, #420]	@ (80023dc <HAL_RCC_OscConfig+0x5e8>)
 8002238:	4313      	orrs	r3, r2
 800223a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800223c:	e0fd      	b.n	800243a <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800223e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002242:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	691b      	ldr	r3, [r3, #16]
 800224a:	2b00      	cmp	r3, #0
 800224c:	f000 8088 	beq.w	8002360 <HAL_RCC_OscConfig+0x56c>
 8002250:	2301      	movs	r3, #1
 8002252:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002256:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 800225a:	fa93 f3a3 	rbit	r3, r3
 800225e:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 8002262:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002266:	fab3 f383 	clz	r3, r3
 800226a:	b2db      	uxtb	r3, r3
 800226c:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002270:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002274:	009b      	lsls	r3, r3, #2
 8002276:	461a      	mov	r2, r3
 8002278:	2301      	movs	r3, #1
 800227a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800227c:	f7ff f982 	bl	8001584 <HAL_GetTick>
 8002280:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002284:	e00a      	b.n	800229c <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002286:	f7ff f97d 	bl	8001584 <HAL_GetTick>
 800228a:	4602      	mov	r2, r0
 800228c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002290:	1ad3      	subs	r3, r2, r3
 8002292:	2b02      	cmp	r3, #2
 8002294:	d902      	bls.n	800229c <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8002296:	2303      	movs	r3, #3
 8002298:	f000 bde2 	b.w	8002e60 <HAL_RCC_OscConfig+0x106c>
 800229c:	2302      	movs	r3, #2
 800229e:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022a2:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 80022a6:	fa93 f3a3 	rbit	r3, r3
 80022aa:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 80022ae:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022b2:	fab3 f383 	clz	r3, r3
 80022b6:	b2db      	uxtb	r3, r3
 80022b8:	095b      	lsrs	r3, r3, #5
 80022ba:	b2db      	uxtb	r3, r3
 80022bc:	f043 0301 	orr.w	r3, r3, #1
 80022c0:	b2db      	uxtb	r3, r3
 80022c2:	2b01      	cmp	r3, #1
 80022c4:	d102      	bne.n	80022cc <HAL_RCC_OscConfig+0x4d8>
 80022c6:	4b45      	ldr	r3, [pc, #276]	@ (80023dc <HAL_RCC_OscConfig+0x5e8>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	e013      	b.n	80022f4 <HAL_RCC_OscConfig+0x500>
 80022cc:	2302      	movs	r3, #2
 80022ce:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022d2:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 80022d6:	fa93 f3a3 	rbit	r3, r3
 80022da:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 80022de:	2302      	movs	r3, #2
 80022e0:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 80022e4:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 80022e8:	fa93 f3a3 	rbit	r3, r3
 80022ec:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 80022f0:	4b3a      	ldr	r3, [pc, #232]	@ (80023dc <HAL_RCC_OscConfig+0x5e8>)
 80022f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022f4:	2202      	movs	r2, #2
 80022f6:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 80022fa:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 80022fe:	fa92 f2a2 	rbit	r2, r2
 8002302:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 8002306:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 800230a:	fab2 f282 	clz	r2, r2
 800230e:	b2d2      	uxtb	r2, r2
 8002310:	f042 0220 	orr.w	r2, r2, #32
 8002314:	b2d2      	uxtb	r2, r2
 8002316:	f002 021f 	and.w	r2, r2, #31
 800231a:	2101      	movs	r1, #1
 800231c:	fa01 f202 	lsl.w	r2, r1, r2
 8002320:	4013      	ands	r3, r2
 8002322:	2b00      	cmp	r3, #0
 8002324:	d0af      	beq.n	8002286 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002326:	4b2d      	ldr	r3, [pc, #180]	@ (80023dc <HAL_RCC_OscConfig+0x5e8>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800232e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002332:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	695b      	ldr	r3, [r3, #20]
 800233a:	21f8      	movs	r1, #248	@ 0xf8
 800233c:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002340:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8002344:	fa91 f1a1 	rbit	r1, r1
 8002348:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 800234c:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 8002350:	fab1 f181 	clz	r1, r1
 8002354:	b2c9      	uxtb	r1, r1
 8002356:	408b      	lsls	r3, r1
 8002358:	4920      	ldr	r1, [pc, #128]	@ (80023dc <HAL_RCC_OscConfig+0x5e8>)
 800235a:	4313      	orrs	r3, r2
 800235c:	600b      	str	r3, [r1, #0]
 800235e:	e06c      	b.n	800243a <HAL_RCC_OscConfig+0x646>
 8002360:	2301      	movs	r3, #1
 8002362:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002366:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800236a:	fa93 f3a3 	rbit	r3, r3
 800236e:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 8002372:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002376:	fab3 f383 	clz	r3, r3
 800237a:	b2db      	uxtb	r3, r3
 800237c:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002380:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002384:	009b      	lsls	r3, r3, #2
 8002386:	461a      	mov	r2, r3
 8002388:	2300      	movs	r3, #0
 800238a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800238c:	f7ff f8fa 	bl	8001584 <HAL_GetTick>
 8002390:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002394:	e00a      	b.n	80023ac <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002396:	f7ff f8f5 	bl	8001584 <HAL_GetTick>
 800239a:	4602      	mov	r2, r0
 800239c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80023a0:	1ad3      	subs	r3, r2, r3
 80023a2:	2b02      	cmp	r3, #2
 80023a4:	d902      	bls.n	80023ac <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 80023a6:	2303      	movs	r3, #3
 80023a8:	f000 bd5a 	b.w	8002e60 <HAL_RCC_OscConfig+0x106c>
 80023ac:	2302      	movs	r3, #2
 80023ae:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023b2:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80023b6:	fa93 f3a3 	rbit	r3, r3
 80023ba:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 80023be:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023c2:	fab3 f383 	clz	r3, r3
 80023c6:	b2db      	uxtb	r3, r3
 80023c8:	095b      	lsrs	r3, r3, #5
 80023ca:	b2db      	uxtb	r3, r3
 80023cc:	f043 0301 	orr.w	r3, r3, #1
 80023d0:	b2db      	uxtb	r3, r3
 80023d2:	2b01      	cmp	r3, #1
 80023d4:	d104      	bne.n	80023e0 <HAL_RCC_OscConfig+0x5ec>
 80023d6:	4b01      	ldr	r3, [pc, #4]	@ (80023dc <HAL_RCC_OscConfig+0x5e8>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	e015      	b.n	8002408 <HAL_RCC_OscConfig+0x614>
 80023dc:	40021000 	.word	0x40021000
 80023e0:	2302      	movs	r3, #2
 80023e2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023e6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80023ea:	fa93 f3a3 	rbit	r3, r3
 80023ee:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 80023f2:	2302      	movs	r3, #2
 80023f4:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 80023f8:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80023fc:	fa93 f3a3 	rbit	r3, r3
 8002400:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8002404:	4bc8      	ldr	r3, [pc, #800]	@ (8002728 <HAL_RCC_OscConfig+0x934>)
 8002406:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002408:	2202      	movs	r2, #2
 800240a:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 800240e:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8002412:	fa92 f2a2 	rbit	r2, r2
 8002416:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 800241a:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 800241e:	fab2 f282 	clz	r2, r2
 8002422:	b2d2      	uxtb	r2, r2
 8002424:	f042 0220 	orr.w	r2, r2, #32
 8002428:	b2d2      	uxtb	r2, r2
 800242a:	f002 021f 	and.w	r2, r2, #31
 800242e:	2101      	movs	r1, #1
 8002430:	fa01 f202 	lsl.w	r2, r1, r2
 8002434:	4013      	ands	r3, r2
 8002436:	2b00      	cmp	r3, #0
 8002438:	d1ad      	bne.n	8002396 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800243a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800243e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f003 0308 	and.w	r3, r3, #8
 800244a:	2b00      	cmp	r3, #0
 800244c:	f000 8110 	beq.w	8002670 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002450:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002454:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	699b      	ldr	r3, [r3, #24]
 800245c:	2b00      	cmp	r3, #0
 800245e:	d079      	beq.n	8002554 <HAL_RCC_OscConfig+0x760>
 8002460:	2301      	movs	r3, #1
 8002462:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002466:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800246a:	fa93 f3a3 	rbit	r3, r3
 800246e:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 8002472:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002476:	fab3 f383 	clz	r3, r3
 800247a:	b2db      	uxtb	r3, r3
 800247c:	461a      	mov	r2, r3
 800247e:	4bab      	ldr	r3, [pc, #684]	@ (800272c <HAL_RCC_OscConfig+0x938>)
 8002480:	4413      	add	r3, r2
 8002482:	009b      	lsls	r3, r3, #2
 8002484:	461a      	mov	r2, r3
 8002486:	2301      	movs	r3, #1
 8002488:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800248a:	f7ff f87b 	bl	8001584 <HAL_GetTick>
 800248e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002492:	e00a      	b.n	80024aa <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002494:	f7ff f876 	bl	8001584 <HAL_GetTick>
 8002498:	4602      	mov	r2, r0
 800249a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800249e:	1ad3      	subs	r3, r2, r3
 80024a0:	2b02      	cmp	r3, #2
 80024a2:	d902      	bls.n	80024aa <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 80024a4:	2303      	movs	r3, #3
 80024a6:	f000 bcdb 	b.w	8002e60 <HAL_RCC_OscConfig+0x106c>
 80024aa:	2302      	movs	r3, #2
 80024ac:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024b0:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 80024b4:	fa93 f3a3 	rbit	r3, r3
 80024b8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80024bc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024c0:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80024c4:	2202      	movs	r2, #2
 80024c6:	601a      	str	r2, [r3, #0]
 80024c8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024cc:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	fa93 f2a3 	rbit	r2, r3
 80024d6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024da:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80024de:	601a      	str	r2, [r3, #0]
 80024e0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024e4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80024e8:	2202      	movs	r2, #2
 80024ea:	601a      	str	r2, [r3, #0]
 80024ec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024f0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	fa93 f2a3 	rbit	r2, r3
 80024fa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024fe:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002502:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002504:	4b88      	ldr	r3, [pc, #544]	@ (8002728 <HAL_RCC_OscConfig+0x934>)
 8002506:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002508:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800250c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002510:	2102      	movs	r1, #2
 8002512:	6019      	str	r1, [r3, #0]
 8002514:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002518:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	fa93 f1a3 	rbit	r1, r3
 8002522:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002526:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800252a:	6019      	str	r1, [r3, #0]
  return result;
 800252c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002530:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	fab3 f383 	clz	r3, r3
 800253a:	b2db      	uxtb	r3, r3
 800253c:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8002540:	b2db      	uxtb	r3, r3
 8002542:	f003 031f 	and.w	r3, r3, #31
 8002546:	2101      	movs	r1, #1
 8002548:	fa01 f303 	lsl.w	r3, r1, r3
 800254c:	4013      	ands	r3, r2
 800254e:	2b00      	cmp	r3, #0
 8002550:	d0a0      	beq.n	8002494 <HAL_RCC_OscConfig+0x6a0>
 8002552:	e08d      	b.n	8002670 <HAL_RCC_OscConfig+0x87c>
 8002554:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002558:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800255c:	2201      	movs	r2, #1
 800255e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002560:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002564:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	fa93 f2a3 	rbit	r2, r3
 800256e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002572:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002576:	601a      	str	r2, [r3, #0]
  return result;
 8002578:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800257c:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002580:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002582:	fab3 f383 	clz	r3, r3
 8002586:	b2db      	uxtb	r3, r3
 8002588:	461a      	mov	r2, r3
 800258a:	4b68      	ldr	r3, [pc, #416]	@ (800272c <HAL_RCC_OscConfig+0x938>)
 800258c:	4413      	add	r3, r2
 800258e:	009b      	lsls	r3, r3, #2
 8002590:	461a      	mov	r2, r3
 8002592:	2300      	movs	r3, #0
 8002594:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002596:	f7fe fff5 	bl	8001584 <HAL_GetTick>
 800259a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800259e:	e00a      	b.n	80025b6 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80025a0:	f7fe fff0 	bl	8001584 <HAL_GetTick>
 80025a4:	4602      	mov	r2, r0
 80025a6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80025aa:	1ad3      	subs	r3, r2, r3
 80025ac:	2b02      	cmp	r3, #2
 80025ae:	d902      	bls.n	80025b6 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 80025b0:	2303      	movs	r3, #3
 80025b2:	f000 bc55 	b.w	8002e60 <HAL_RCC_OscConfig+0x106c>
 80025b6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025ba:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80025be:	2202      	movs	r2, #2
 80025c0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025c2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025c6:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	fa93 f2a3 	rbit	r2, r3
 80025d0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025d4:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80025d8:	601a      	str	r2, [r3, #0]
 80025da:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025de:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80025e2:	2202      	movs	r2, #2
 80025e4:	601a      	str	r2, [r3, #0]
 80025e6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025ea:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	fa93 f2a3 	rbit	r2, r3
 80025f4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025f8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80025fc:	601a      	str	r2, [r3, #0]
 80025fe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002602:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8002606:	2202      	movs	r2, #2
 8002608:	601a      	str	r2, [r3, #0]
 800260a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800260e:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	fa93 f2a3 	rbit	r2, r3
 8002618:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800261c:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8002620:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002622:	4b41      	ldr	r3, [pc, #260]	@ (8002728 <HAL_RCC_OscConfig+0x934>)
 8002624:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002626:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800262a:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800262e:	2102      	movs	r1, #2
 8002630:	6019      	str	r1, [r3, #0]
 8002632:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002636:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	fa93 f1a3 	rbit	r1, r3
 8002640:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002644:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002648:	6019      	str	r1, [r3, #0]
  return result;
 800264a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800264e:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	fab3 f383 	clz	r3, r3
 8002658:	b2db      	uxtb	r3, r3
 800265a:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800265e:	b2db      	uxtb	r3, r3
 8002660:	f003 031f 	and.w	r3, r3, #31
 8002664:	2101      	movs	r1, #1
 8002666:	fa01 f303 	lsl.w	r3, r1, r3
 800266a:	4013      	ands	r3, r2
 800266c:	2b00      	cmp	r3, #0
 800266e:	d197      	bne.n	80025a0 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002670:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002674:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f003 0304 	and.w	r3, r3, #4
 8002680:	2b00      	cmp	r3, #0
 8002682:	f000 81a1 	beq.w	80029c8 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002686:	2300      	movs	r3, #0
 8002688:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800268c:	4b26      	ldr	r3, [pc, #152]	@ (8002728 <HAL_RCC_OscConfig+0x934>)
 800268e:	69db      	ldr	r3, [r3, #28]
 8002690:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002694:	2b00      	cmp	r3, #0
 8002696:	d116      	bne.n	80026c6 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002698:	4b23      	ldr	r3, [pc, #140]	@ (8002728 <HAL_RCC_OscConfig+0x934>)
 800269a:	69db      	ldr	r3, [r3, #28]
 800269c:	4a22      	ldr	r2, [pc, #136]	@ (8002728 <HAL_RCC_OscConfig+0x934>)
 800269e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80026a2:	61d3      	str	r3, [r2, #28]
 80026a4:	4b20      	ldr	r3, [pc, #128]	@ (8002728 <HAL_RCC_OscConfig+0x934>)
 80026a6:	69db      	ldr	r3, [r3, #28]
 80026a8:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 80026ac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026b0:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 80026b4:	601a      	str	r2, [r3, #0]
 80026b6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026ba:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 80026be:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80026c0:	2301      	movs	r3, #1
 80026c2:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026c6:	4b1a      	ldr	r3, [pc, #104]	@ (8002730 <HAL_RCC_OscConfig+0x93c>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d11a      	bne.n	8002708 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80026d2:	4b17      	ldr	r3, [pc, #92]	@ (8002730 <HAL_RCC_OscConfig+0x93c>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	4a16      	ldr	r2, [pc, #88]	@ (8002730 <HAL_RCC_OscConfig+0x93c>)
 80026d8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80026dc:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80026de:	f7fe ff51 	bl	8001584 <HAL_GetTick>
 80026e2:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026e6:	e009      	b.n	80026fc <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026e8:	f7fe ff4c 	bl	8001584 <HAL_GetTick>
 80026ec:	4602      	mov	r2, r0
 80026ee:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80026f2:	1ad3      	subs	r3, r2, r3
 80026f4:	2b64      	cmp	r3, #100	@ 0x64
 80026f6:	d901      	bls.n	80026fc <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 80026f8:	2303      	movs	r3, #3
 80026fa:	e3b1      	b.n	8002e60 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026fc:	4b0c      	ldr	r3, [pc, #48]	@ (8002730 <HAL_RCC_OscConfig+0x93c>)
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002704:	2b00      	cmp	r3, #0
 8002706:	d0ef      	beq.n	80026e8 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002708:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800270c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	68db      	ldr	r3, [r3, #12]
 8002714:	2b01      	cmp	r3, #1
 8002716:	d10d      	bne.n	8002734 <HAL_RCC_OscConfig+0x940>
 8002718:	4b03      	ldr	r3, [pc, #12]	@ (8002728 <HAL_RCC_OscConfig+0x934>)
 800271a:	6a1b      	ldr	r3, [r3, #32]
 800271c:	4a02      	ldr	r2, [pc, #8]	@ (8002728 <HAL_RCC_OscConfig+0x934>)
 800271e:	f043 0301 	orr.w	r3, r3, #1
 8002722:	6213      	str	r3, [r2, #32]
 8002724:	e03c      	b.n	80027a0 <HAL_RCC_OscConfig+0x9ac>
 8002726:	bf00      	nop
 8002728:	40021000 	.word	0x40021000
 800272c:	10908120 	.word	0x10908120
 8002730:	40007000 	.word	0x40007000
 8002734:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002738:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	68db      	ldr	r3, [r3, #12]
 8002740:	2b00      	cmp	r3, #0
 8002742:	d10c      	bne.n	800275e <HAL_RCC_OscConfig+0x96a>
 8002744:	4bc1      	ldr	r3, [pc, #772]	@ (8002a4c <HAL_RCC_OscConfig+0xc58>)
 8002746:	6a1b      	ldr	r3, [r3, #32]
 8002748:	4ac0      	ldr	r2, [pc, #768]	@ (8002a4c <HAL_RCC_OscConfig+0xc58>)
 800274a:	f023 0301 	bic.w	r3, r3, #1
 800274e:	6213      	str	r3, [r2, #32]
 8002750:	4bbe      	ldr	r3, [pc, #760]	@ (8002a4c <HAL_RCC_OscConfig+0xc58>)
 8002752:	6a1b      	ldr	r3, [r3, #32]
 8002754:	4abd      	ldr	r2, [pc, #756]	@ (8002a4c <HAL_RCC_OscConfig+0xc58>)
 8002756:	f023 0304 	bic.w	r3, r3, #4
 800275a:	6213      	str	r3, [r2, #32]
 800275c:	e020      	b.n	80027a0 <HAL_RCC_OscConfig+0x9ac>
 800275e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002762:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	68db      	ldr	r3, [r3, #12]
 800276a:	2b05      	cmp	r3, #5
 800276c:	d10c      	bne.n	8002788 <HAL_RCC_OscConfig+0x994>
 800276e:	4bb7      	ldr	r3, [pc, #732]	@ (8002a4c <HAL_RCC_OscConfig+0xc58>)
 8002770:	6a1b      	ldr	r3, [r3, #32]
 8002772:	4ab6      	ldr	r2, [pc, #728]	@ (8002a4c <HAL_RCC_OscConfig+0xc58>)
 8002774:	f043 0304 	orr.w	r3, r3, #4
 8002778:	6213      	str	r3, [r2, #32]
 800277a:	4bb4      	ldr	r3, [pc, #720]	@ (8002a4c <HAL_RCC_OscConfig+0xc58>)
 800277c:	6a1b      	ldr	r3, [r3, #32]
 800277e:	4ab3      	ldr	r2, [pc, #716]	@ (8002a4c <HAL_RCC_OscConfig+0xc58>)
 8002780:	f043 0301 	orr.w	r3, r3, #1
 8002784:	6213      	str	r3, [r2, #32]
 8002786:	e00b      	b.n	80027a0 <HAL_RCC_OscConfig+0x9ac>
 8002788:	4bb0      	ldr	r3, [pc, #704]	@ (8002a4c <HAL_RCC_OscConfig+0xc58>)
 800278a:	6a1b      	ldr	r3, [r3, #32]
 800278c:	4aaf      	ldr	r2, [pc, #700]	@ (8002a4c <HAL_RCC_OscConfig+0xc58>)
 800278e:	f023 0301 	bic.w	r3, r3, #1
 8002792:	6213      	str	r3, [r2, #32]
 8002794:	4bad      	ldr	r3, [pc, #692]	@ (8002a4c <HAL_RCC_OscConfig+0xc58>)
 8002796:	6a1b      	ldr	r3, [r3, #32]
 8002798:	4aac      	ldr	r2, [pc, #688]	@ (8002a4c <HAL_RCC_OscConfig+0xc58>)
 800279a:	f023 0304 	bic.w	r3, r3, #4
 800279e:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80027a0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027a4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	68db      	ldr	r3, [r3, #12]
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	f000 8081 	beq.w	80028b4 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027b2:	f7fe fee7 	bl	8001584 <HAL_GetTick>
 80027b6:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027ba:	e00b      	b.n	80027d4 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80027bc:	f7fe fee2 	bl	8001584 <HAL_GetTick>
 80027c0:	4602      	mov	r2, r0
 80027c2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80027c6:	1ad3      	subs	r3, r2, r3
 80027c8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80027cc:	4293      	cmp	r3, r2
 80027ce:	d901      	bls.n	80027d4 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 80027d0:	2303      	movs	r3, #3
 80027d2:	e345      	b.n	8002e60 <HAL_RCC_OscConfig+0x106c>
 80027d4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027d8:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80027dc:	2202      	movs	r2, #2
 80027de:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027e0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027e4:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	fa93 f2a3 	rbit	r2, r3
 80027ee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027f2:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80027f6:	601a      	str	r2, [r3, #0]
 80027f8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027fc:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8002800:	2202      	movs	r2, #2
 8002802:	601a      	str	r2, [r3, #0]
 8002804:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002808:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	fa93 f2a3 	rbit	r2, r3
 8002812:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002816:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800281a:	601a      	str	r2, [r3, #0]
  return result;
 800281c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002820:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8002824:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002826:	fab3 f383 	clz	r3, r3
 800282a:	b2db      	uxtb	r3, r3
 800282c:	095b      	lsrs	r3, r3, #5
 800282e:	b2db      	uxtb	r3, r3
 8002830:	f043 0302 	orr.w	r3, r3, #2
 8002834:	b2db      	uxtb	r3, r3
 8002836:	2b02      	cmp	r3, #2
 8002838:	d102      	bne.n	8002840 <HAL_RCC_OscConfig+0xa4c>
 800283a:	4b84      	ldr	r3, [pc, #528]	@ (8002a4c <HAL_RCC_OscConfig+0xc58>)
 800283c:	6a1b      	ldr	r3, [r3, #32]
 800283e:	e013      	b.n	8002868 <HAL_RCC_OscConfig+0xa74>
 8002840:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002844:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8002848:	2202      	movs	r2, #2
 800284a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800284c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002850:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	fa93 f2a3 	rbit	r2, r3
 800285a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800285e:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8002862:	601a      	str	r2, [r3, #0]
 8002864:	4b79      	ldr	r3, [pc, #484]	@ (8002a4c <HAL_RCC_OscConfig+0xc58>)
 8002866:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002868:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800286c:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8002870:	2102      	movs	r1, #2
 8002872:	6011      	str	r1, [r2, #0]
 8002874:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002878:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 800287c:	6812      	ldr	r2, [r2, #0]
 800287e:	fa92 f1a2 	rbit	r1, r2
 8002882:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002886:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 800288a:	6011      	str	r1, [r2, #0]
  return result;
 800288c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002890:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8002894:	6812      	ldr	r2, [r2, #0]
 8002896:	fab2 f282 	clz	r2, r2
 800289a:	b2d2      	uxtb	r2, r2
 800289c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80028a0:	b2d2      	uxtb	r2, r2
 80028a2:	f002 021f 	and.w	r2, r2, #31
 80028a6:	2101      	movs	r1, #1
 80028a8:	fa01 f202 	lsl.w	r2, r1, r2
 80028ac:	4013      	ands	r3, r2
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d084      	beq.n	80027bc <HAL_RCC_OscConfig+0x9c8>
 80028b2:	e07f      	b.n	80029b4 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028b4:	f7fe fe66 	bl	8001584 <HAL_GetTick>
 80028b8:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028bc:	e00b      	b.n	80028d6 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80028be:	f7fe fe61 	bl	8001584 <HAL_GetTick>
 80028c2:	4602      	mov	r2, r0
 80028c4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80028c8:	1ad3      	subs	r3, r2, r3
 80028ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80028ce:	4293      	cmp	r3, r2
 80028d0:	d901      	bls.n	80028d6 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 80028d2:	2303      	movs	r3, #3
 80028d4:	e2c4      	b.n	8002e60 <HAL_RCC_OscConfig+0x106c>
 80028d6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028da:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 80028de:	2202      	movs	r2, #2
 80028e0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028e2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028e6:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	fa93 f2a3 	rbit	r2, r3
 80028f0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028f4:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 80028f8:	601a      	str	r2, [r3, #0]
 80028fa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028fe:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8002902:	2202      	movs	r2, #2
 8002904:	601a      	str	r2, [r3, #0]
 8002906:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800290a:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	fa93 f2a3 	rbit	r2, r3
 8002914:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002918:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 800291c:	601a      	str	r2, [r3, #0]
  return result;
 800291e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002922:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8002926:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002928:	fab3 f383 	clz	r3, r3
 800292c:	b2db      	uxtb	r3, r3
 800292e:	095b      	lsrs	r3, r3, #5
 8002930:	b2db      	uxtb	r3, r3
 8002932:	f043 0302 	orr.w	r3, r3, #2
 8002936:	b2db      	uxtb	r3, r3
 8002938:	2b02      	cmp	r3, #2
 800293a:	d102      	bne.n	8002942 <HAL_RCC_OscConfig+0xb4e>
 800293c:	4b43      	ldr	r3, [pc, #268]	@ (8002a4c <HAL_RCC_OscConfig+0xc58>)
 800293e:	6a1b      	ldr	r3, [r3, #32]
 8002940:	e013      	b.n	800296a <HAL_RCC_OscConfig+0xb76>
 8002942:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002946:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 800294a:	2202      	movs	r2, #2
 800294c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800294e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002952:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	fa93 f2a3 	rbit	r2, r3
 800295c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002960:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8002964:	601a      	str	r2, [r3, #0]
 8002966:	4b39      	ldr	r3, [pc, #228]	@ (8002a4c <HAL_RCC_OscConfig+0xc58>)
 8002968:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800296a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800296e:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8002972:	2102      	movs	r1, #2
 8002974:	6011      	str	r1, [r2, #0]
 8002976:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800297a:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 800297e:	6812      	ldr	r2, [r2, #0]
 8002980:	fa92 f1a2 	rbit	r1, r2
 8002984:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002988:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 800298c:	6011      	str	r1, [r2, #0]
  return result;
 800298e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002992:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8002996:	6812      	ldr	r2, [r2, #0]
 8002998:	fab2 f282 	clz	r2, r2
 800299c:	b2d2      	uxtb	r2, r2
 800299e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80029a2:	b2d2      	uxtb	r2, r2
 80029a4:	f002 021f 	and.w	r2, r2, #31
 80029a8:	2101      	movs	r1, #1
 80029aa:	fa01 f202 	lsl.w	r2, r1, r2
 80029ae:	4013      	ands	r3, r2
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d184      	bne.n	80028be <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80029b4:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 80029b8:	2b01      	cmp	r3, #1
 80029ba:	d105      	bne.n	80029c8 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80029bc:	4b23      	ldr	r3, [pc, #140]	@ (8002a4c <HAL_RCC_OscConfig+0xc58>)
 80029be:	69db      	ldr	r3, [r3, #28]
 80029c0:	4a22      	ldr	r2, [pc, #136]	@ (8002a4c <HAL_RCC_OscConfig+0xc58>)
 80029c2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80029c6:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80029c8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029cc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	69db      	ldr	r3, [r3, #28]
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	f000 8242 	beq.w	8002e5e <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80029da:	4b1c      	ldr	r3, [pc, #112]	@ (8002a4c <HAL_RCC_OscConfig+0xc58>)
 80029dc:	685b      	ldr	r3, [r3, #4]
 80029de:	f003 030c 	and.w	r3, r3, #12
 80029e2:	2b08      	cmp	r3, #8
 80029e4:	f000 8213 	beq.w	8002e0e <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80029e8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029ec:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	69db      	ldr	r3, [r3, #28]
 80029f4:	2b02      	cmp	r3, #2
 80029f6:	f040 8162 	bne.w	8002cbe <HAL_RCC_OscConfig+0xeca>
 80029fa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029fe:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8002a02:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002a06:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a08:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a0c:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	fa93 f2a3 	rbit	r2, r3
 8002a16:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a1a:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8002a1e:	601a      	str	r2, [r3, #0]
  return result;
 8002a20:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a24:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8002a28:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a2a:	fab3 f383 	clz	r3, r3
 8002a2e:	b2db      	uxtb	r3, r3
 8002a30:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002a34:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002a38:	009b      	lsls	r3, r3, #2
 8002a3a:	461a      	mov	r2, r3
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a40:	f7fe fda0 	bl	8001584 <HAL_GetTick>
 8002a44:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a48:	e00c      	b.n	8002a64 <HAL_RCC_OscConfig+0xc70>
 8002a4a:	bf00      	nop
 8002a4c:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a50:	f7fe fd98 	bl	8001584 <HAL_GetTick>
 8002a54:	4602      	mov	r2, r0
 8002a56:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002a5a:	1ad3      	subs	r3, r2, r3
 8002a5c:	2b02      	cmp	r3, #2
 8002a5e:	d901      	bls.n	8002a64 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8002a60:	2303      	movs	r3, #3
 8002a62:	e1fd      	b.n	8002e60 <HAL_RCC_OscConfig+0x106c>
 8002a64:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a68:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8002a6c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002a70:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a72:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a76:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	fa93 f2a3 	rbit	r2, r3
 8002a80:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a84:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8002a88:	601a      	str	r2, [r3, #0]
  return result;
 8002a8a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a8e:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8002a92:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a94:	fab3 f383 	clz	r3, r3
 8002a98:	b2db      	uxtb	r3, r3
 8002a9a:	095b      	lsrs	r3, r3, #5
 8002a9c:	b2db      	uxtb	r3, r3
 8002a9e:	f043 0301 	orr.w	r3, r3, #1
 8002aa2:	b2db      	uxtb	r3, r3
 8002aa4:	2b01      	cmp	r3, #1
 8002aa6:	d102      	bne.n	8002aae <HAL_RCC_OscConfig+0xcba>
 8002aa8:	4bb0      	ldr	r3, [pc, #704]	@ (8002d6c <HAL_RCC_OscConfig+0xf78>)
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	e027      	b.n	8002afe <HAL_RCC_OscConfig+0xd0a>
 8002aae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ab2:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8002ab6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002aba:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002abc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ac0:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	fa93 f2a3 	rbit	r2, r3
 8002aca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ace:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8002ad2:	601a      	str	r2, [r3, #0]
 8002ad4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ad8:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8002adc:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002ae0:	601a      	str	r2, [r3, #0]
 8002ae2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ae6:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	fa93 f2a3 	rbit	r2, r3
 8002af0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002af4:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8002af8:	601a      	str	r2, [r3, #0]
 8002afa:	4b9c      	ldr	r3, [pc, #624]	@ (8002d6c <HAL_RCC_OscConfig+0xf78>)
 8002afc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002afe:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002b02:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8002b06:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002b0a:	6011      	str	r1, [r2, #0]
 8002b0c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002b10:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8002b14:	6812      	ldr	r2, [r2, #0]
 8002b16:	fa92 f1a2 	rbit	r1, r2
 8002b1a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002b1e:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8002b22:	6011      	str	r1, [r2, #0]
  return result;
 8002b24:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002b28:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8002b2c:	6812      	ldr	r2, [r2, #0]
 8002b2e:	fab2 f282 	clz	r2, r2
 8002b32:	b2d2      	uxtb	r2, r2
 8002b34:	f042 0220 	orr.w	r2, r2, #32
 8002b38:	b2d2      	uxtb	r2, r2
 8002b3a:	f002 021f 	and.w	r2, r2, #31
 8002b3e:	2101      	movs	r1, #1
 8002b40:	fa01 f202 	lsl.w	r2, r1, r2
 8002b44:	4013      	ands	r3, r2
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d182      	bne.n	8002a50 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002b4a:	4b88      	ldr	r3, [pc, #544]	@ (8002d6c <HAL_RCC_OscConfig+0xf78>)
 8002b4c:	685b      	ldr	r3, [r3, #4]
 8002b4e:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002b52:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b56:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8002b5e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b62:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	6a1b      	ldr	r3, [r3, #32]
 8002b6a:	430b      	orrs	r3, r1
 8002b6c:	497f      	ldr	r1, [pc, #508]	@ (8002d6c <HAL_RCC_OscConfig+0xf78>)
 8002b6e:	4313      	orrs	r3, r2
 8002b70:	604b      	str	r3, [r1, #4]
 8002b72:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b76:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8002b7a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002b7e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b80:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b84:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	fa93 f2a3 	rbit	r2, r3
 8002b8e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b92:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8002b96:	601a      	str	r2, [r3, #0]
  return result;
 8002b98:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b9c:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8002ba0:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ba2:	fab3 f383 	clz	r3, r3
 8002ba6:	b2db      	uxtb	r3, r3
 8002ba8:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002bac:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002bb0:	009b      	lsls	r3, r3, #2
 8002bb2:	461a      	mov	r2, r3
 8002bb4:	2301      	movs	r3, #1
 8002bb6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bb8:	f7fe fce4 	bl	8001584 <HAL_GetTick>
 8002bbc:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002bc0:	e009      	b.n	8002bd6 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002bc2:	f7fe fcdf 	bl	8001584 <HAL_GetTick>
 8002bc6:	4602      	mov	r2, r0
 8002bc8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002bcc:	1ad3      	subs	r3, r2, r3
 8002bce:	2b02      	cmp	r3, #2
 8002bd0:	d901      	bls.n	8002bd6 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8002bd2:	2303      	movs	r3, #3
 8002bd4:	e144      	b.n	8002e60 <HAL_RCC_OscConfig+0x106c>
 8002bd6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002bda:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8002bde:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002be2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002be4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002be8:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	fa93 f2a3 	rbit	r2, r3
 8002bf2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002bf6:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8002bfa:	601a      	str	r2, [r3, #0]
  return result;
 8002bfc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c00:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8002c04:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002c06:	fab3 f383 	clz	r3, r3
 8002c0a:	b2db      	uxtb	r3, r3
 8002c0c:	095b      	lsrs	r3, r3, #5
 8002c0e:	b2db      	uxtb	r3, r3
 8002c10:	f043 0301 	orr.w	r3, r3, #1
 8002c14:	b2db      	uxtb	r3, r3
 8002c16:	2b01      	cmp	r3, #1
 8002c18:	d102      	bne.n	8002c20 <HAL_RCC_OscConfig+0xe2c>
 8002c1a:	4b54      	ldr	r3, [pc, #336]	@ (8002d6c <HAL_RCC_OscConfig+0xf78>)
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	e027      	b.n	8002c70 <HAL_RCC_OscConfig+0xe7c>
 8002c20:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c24:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8002c28:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002c2c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c2e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c32:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	fa93 f2a3 	rbit	r2, r3
 8002c3c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c40:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002c44:	601a      	str	r2, [r3, #0]
 8002c46:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c4a:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8002c4e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002c52:	601a      	str	r2, [r3, #0]
 8002c54:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c58:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	fa93 f2a3 	rbit	r2, r3
 8002c62:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c66:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8002c6a:	601a      	str	r2, [r3, #0]
 8002c6c:	4b3f      	ldr	r3, [pc, #252]	@ (8002d6c <HAL_RCC_OscConfig+0xf78>)
 8002c6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c70:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002c74:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8002c78:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002c7c:	6011      	str	r1, [r2, #0]
 8002c7e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002c82:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8002c86:	6812      	ldr	r2, [r2, #0]
 8002c88:	fa92 f1a2 	rbit	r1, r2
 8002c8c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002c90:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8002c94:	6011      	str	r1, [r2, #0]
  return result;
 8002c96:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002c9a:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8002c9e:	6812      	ldr	r2, [r2, #0]
 8002ca0:	fab2 f282 	clz	r2, r2
 8002ca4:	b2d2      	uxtb	r2, r2
 8002ca6:	f042 0220 	orr.w	r2, r2, #32
 8002caa:	b2d2      	uxtb	r2, r2
 8002cac:	f002 021f 	and.w	r2, r2, #31
 8002cb0:	2101      	movs	r1, #1
 8002cb2:	fa01 f202 	lsl.w	r2, r1, r2
 8002cb6:	4013      	ands	r3, r2
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d082      	beq.n	8002bc2 <HAL_RCC_OscConfig+0xdce>
 8002cbc:	e0cf      	b.n	8002e5e <HAL_RCC_OscConfig+0x106a>
 8002cbe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002cc2:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8002cc6:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002cca:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ccc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002cd0:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	fa93 f2a3 	rbit	r2, r3
 8002cda:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002cde:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8002ce2:	601a      	str	r2, [r3, #0]
  return result;
 8002ce4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ce8:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8002cec:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cee:	fab3 f383 	clz	r3, r3
 8002cf2:	b2db      	uxtb	r3, r3
 8002cf4:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002cf8:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002cfc:	009b      	lsls	r3, r3, #2
 8002cfe:	461a      	mov	r2, r3
 8002d00:	2300      	movs	r3, #0
 8002d02:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d04:	f7fe fc3e 	bl	8001584 <HAL_GetTick>
 8002d08:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d0c:	e009      	b.n	8002d22 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d0e:	f7fe fc39 	bl	8001584 <HAL_GetTick>
 8002d12:	4602      	mov	r2, r0
 8002d14:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002d18:	1ad3      	subs	r3, r2, r3
 8002d1a:	2b02      	cmp	r3, #2
 8002d1c:	d901      	bls.n	8002d22 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8002d1e:	2303      	movs	r3, #3
 8002d20:	e09e      	b.n	8002e60 <HAL_RCC_OscConfig+0x106c>
 8002d22:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d26:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8002d2a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002d2e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d30:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d34:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	fa93 f2a3 	rbit	r2, r3
 8002d3e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d42:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8002d46:	601a      	str	r2, [r3, #0]
  return result;
 8002d48:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d4c:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8002d50:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d52:	fab3 f383 	clz	r3, r3
 8002d56:	b2db      	uxtb	r3, r3
 8002d58:	095b      	lsrs	r3, r3, #5
 8002d5a:	b2db      	uxtb	r3, r3
 8002d5c:	f043 0301 	orr.w	r3, r3, #1
 8002d60:	b2db      	uxtb	r3, r3
 8002d62:	2b01      	cmp	r3, #1
 8002d64:	d104      	bne.n	8002d70 <HAL_RCC_OscConfig+0xf7c>
 8002d66:	4b01      	ldr	r3, [pc, #4]	@ (8002d6c <HAL_RCC_OscConfig+0xf78>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	e029      	b.n	8002dc0 <HAL_RCC_OscConfig+0xfcc>
 8002d6c:	40021000 	.word	0x40021000
 8002d70:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d74:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8002d78:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002d7c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d7e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d82:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	fa93 f2a3 	rbit	r2, r3
 8002d8c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d90:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8002d94:	601a      	str	r2, [r3, #0]
 8002d96:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d9a:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8002d9e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002da2:	601a      	str	r2, [r3, #0]
 8002da4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002da8:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	fa93 f2a3 	rbit	r2, r3
 8002db2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002db6:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8002dba:	601a      	str	r2, [r3, #0]
 8002dbc:	4b2b      	ldr	r3, [pc, #172]	@ (8002e6c <HAL_RCC_OscConfig+0x1078>)
 8002dbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dc0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002dc4:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8002dc8:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002dcc:	6011      	str	r1, [r2, #0]
 8002dce:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002dd2:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8002dd6:	6812      	ldr	r2, [r2, #0]
 8002dd8:	fa92 f1a2 	rbit	r1, r2
 8002ddc:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002de0:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8002de4:	6011      	str	r1, [r2, #0]
  return result;
 8002de6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002dea:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8002dee:	6812      	ldr	r2, [r2, #0]
 8002df0:	fab2 f282 	clz	r2, r2
 8002df4:	b2d2      	uxtb	r2, r2
 8002df6:	f042 0220 	orr.w	r2, r2, #32
 8002dfa:	b2d2      	uxtb	r2, r2
 8002dfc:	f002 021f 	and.w	r2, r2, #31
 8002e00:	2101      	movs	r1, #1
 8002e02:	fa01 f202 	lsl.w	r2, r1, r2
 8002e06:	4013      	ands	r3, r2
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d180      	bne.n	8002d0e <HAL_RCC_OscConfig+0xf1a>
 8002e0c:	e027      	b.n	8002e5e <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002e0e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e12:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	69db      	ldr	r3, [r3, #28]
 8002e1a:	2b01      	cmp	r3, #1
 8002e1c:	d101      	bne.n	8002e22 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8002e1e:	2301      	movs	r3, #1
 8002e20:	e01e      	b.n	8002e60 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002e22:	4b12      	ldr	r3, [pc, #72]	@ (8002e6c <HAL_RCC_OscConfig+0x1078>)
 8002e24:	685b      	ldr	r3, [r3, #4]
 8002e26:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002e2a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8002e2e:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002e32:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e36:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	6a1b      	ldr	r3, [r3, #32]
 8002e3e:	429a      	cmp	r2, r3
 8002e40:	d10b      	bne.n	8002e5a <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8002e42:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8002e46:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002e4a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e4e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002e56:	429a      	cmp	r2, r3
 8002e58:	d001      	beq.n	8002e5e <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8002e5a:	2301      	movs	r3, #1
 8002e5c:	e000      	b.n	8002e60 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8002e5e:	2300      	movs	r3, #0
}
 8002e60:	4618      	mov	r0, r3
 8002e62:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 8002e66:	46bd      	mov	sp, r7
 8002e68:	bd80      	pop	{r7, pc}
 8002e6a:	bf00      	nop
 8002e6c:	40021000 	.word	0x40021000

08002e70 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b09e      	sub	sp, #120	@ 0x78
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
 8002e78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d101      	bne.n	8002e88 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002e84:	2301      	movs	r3, #1
 8002e86:	e162      	b.n	800314e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002e88:	4b90      	ldr	r3, [pc, #576]	@ (80030cc <HAL_RCC_ClockConfig+0x25c>)
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f003 0307 	and.w	r3, r3, #7
 8002e90:	683a      	ldr	r2, [r7, #0]
 8002e92:	429a      	cmp	r2, r3
 8002e94:	d910      	bls.n	8002eb8 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e96:	4b8d      	ldr	r3, [pc, #564]	@ (80030cc <HAL_RCC_ClockConfig+0x25c>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f023 0207 	bic.w	r2, r3, #7
 8002e9e:	498b      	ldr	r1, [pc, #556]	@ (80030cc <HAL_RCC_ClockConfig+0x25c>)
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	4313      	orrs	r3, r2
 8002ea4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ea6:	4b89      	ldr	r3, [pc, #548]	@ (80030cc <HAL_RCC_ClockConfig+0x25c>)
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f003 0307 	and.w	r3, r3, #7
 8002eae:	683a      	ldr	r2, [r7, #0]
 8002eb0:	429a      	cmp	r2, r3
 8002eb2:	d001      	beq.n	8002eb8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002eb4:	2301      	movs	r3, #1
 8002eb6:	e14a      	b.n	800314e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f003 0302 	and.w	r3, r3, #2
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d008      	beq.n	8002ed6 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ec4:	4b82      	ldr	r3, [pc, #520]	@ (80030d0 <HAL_RCC_ClockConfig+0x260>)
 8002ec6:	685b      	ldr	r3, [r3, #4]
 8002ec8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	689b      	ldr	r3, [r3, #8]
 8002ed0:	497f      	ldr	r1, [pc, #508]	@ (80030d0 <HAL_RCC_ClockConfig+0x260>)
 8002ed2:	4313      	orrs	r3, r2
 8002ed4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f003 0301 	and.w	r3, r3, #1
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	f000 80dc 	beq.w	800309c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	685b      	ldr	r3, [r3, #4]
 8002ee8:	2b01      	cmp	r3, #1
 8002eea:	d13c      	bne.n	8002f66 <HAL_RCC_ClockConfig+0xf6>
 8002eec:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002ef0:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ef2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002ef4:	fa93 f3a3 	rbit	r3, r3
 8002ef8:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8002efa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002efc:	fab3 f383 	clz	r3, r3
 8002f00:	b2db      	uxtb	r3, r3
 8002f02:	095b      	lsrs	r3, r3, #5
 8002f04:	b2db      	uxtb	r3, r3
 8002f06:	f043 0301 	orr.w	r3, r3, #1
 8002f0a:	b2db      	uxtb	r3, r3
 8002f0c:	2b01      	cmp	r3, #1
 8002f0e:	d102      	bne.n	8002f16 <HAL_RCC_ClockConfig+0xa6>
 8002f10:	4b6f      	ldr	r3, [pc, #444]	@ (80030d0 <HAL_RCC_ClockConfig+0x260>)
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	e00f      	b.n	8002f36 <HAL_RCC_ClockConfig+0xc6>
 8002f16:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002f1a:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f1c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002f1e:	fa93 f3a3 	rbit	r3, r3
 8002f22:	667b      	str	r3, [r7, #100]	@ 0x64
 8002f24:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002f28:	663b      	str	r3, [r7, #96]	@ 0x60
 8002f2a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002f2c:	fa93 f3a3 	rbit	r3, r3
 8002f30:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002f32:	4b67      	ldr	r3, [pc, #412]	@ (80030d0 <HAL_RCC_ClockConfig+0x260>)
 8002f34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f36:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002f3a:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002f3c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002f3e:	fa92 f2a2 	rbit	r2, r2
 8002f42:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8002f44:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8002f46:	fab2 f282 	clz	r2, r2
 8002f4a:	b2d2      	uxtb	r2, r2
 8002f4c:	f042 0220 	orr.w	r2, r2, #32
 8002f50:	b2d2      	uxtb	r2, r2
 8002f52:	f002 021f 	and.w	r2, r2, #31
 8002f56:	2101      	movs	r1, #1
 8002f58:	fa01 f202 	lsl.w	r2, r1, r2
 8002f5c:	4013      	ands	r3, r2
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d17b      	bne.n	800305a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002f62:	2301      	movs	r3, #1
 8002f64:	e0f3      	b.n	800314e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	685b      	ldr	r3, [r3, #4]
 8002f6a:	2b02      	cmp	r3, #2
 8002f6c:	d13c      	bne.n	8002fe8 <HAL_RCC_ClockConfig+0x178>
 8002f6e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002f72:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f74:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002f76:	fa93 f3a3 	rbit	r3, r3
 8002f7a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8002f7c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f7e:	fab3 f383 	clz	r3, r3
 8002f82:	b2db      	uxtb	r3, r3
 8002f84:	095b      	lsrs	r3, r3, #5
 8002f86:	b2db      	uxtb	r3, r3
 8002f88:	f043 0301 	orr.w	r3, r3, #1
 8002f8c:	b2db      	uxtb	r3, r3
 8002f8e:	2b01      	cmp	r3, #1
 8002f90:	d102      	bne.n	8002f98 <HAL_RCC_ClockConfig+0x128>
 8002f92:	4b4f      	ldr	r3, [pc, #316]	@ (80030d0 <HAL_RCC_ClockConfig+0x260>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	e00f      	b.n	8002fb8 <HAL_RCC_ClockConfig+0x148>
 8002f98:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002f9c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f9e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002fa0:	fa93 f3a3 	rbit	r3, r3
 8002fa4:	647b      	str	r3, [r7, #68]	@ 0x44
 8002fa6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002faa:	643b      	str	r3, [r7, #64]	@ 0x40
 8002fac:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002fae:	fa93 f3a3 	rbit	r3, r3
 8002fb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002fb4:	4b46      	ldr	r3, [pc, #280]	@ (80030d0 <HAL_RCC_ClockConfig+0x260>)
 8002fb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fb8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002fbc:	63ba      	str	r2, [r7, #56]	@ 0x38
 8002fbe:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002fc0:	fa92 f2a2 	rbit	r2, r2
 8002fc4:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8002fc6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002fc8:	fab2 f282 	clz	r2, r2
 8002fcc:	b2d2      	uxtb	r2, r2
 8002fce:	f042 0220 	orr.w	r2, r2, #32
 8002fd2:	b2d2      	uxtb	r2, r2
 8002fd4:	f002 021f 	and.w	r2, r2, #31
 8002fd8:	2101      	movs	r1, #1
 8002fda:	fa01 f202 	lsl.w	r2, r1, r2
 8002fde:	4013      	ands	r3, r2
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d13a      	bne.n	800305a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002fe4:	2301      	movs	r3, #1
 8002fe6:	e0b2      	b.n	800314e <HAL_RCC_ClockConfig+0x2de>
 8002fe8:	2302      	movs	r3, #2
 8002fea:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002fee:	fa93 f3a3 	rbit	r3, r3
 8002ff2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8002ff4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ff6:	fab3 f383 	clz	r3, r3
 8002ffa:	b2db      	uxtb	r3, r3
 8002ffc:	095b      	lsrs	r3, r3, #5
 8002ffe:	b2db      	uxtb	r3, r3
 8003000:	f043 0301 	orr.w	r3, r3, #1
 8003004:	b2db      	uxtb	r3, r3
 8003006:	2b01      	cmp	r3, #1
 8003008:	d102      	bne.n	8003010 <HAL_RCC_ClockConfig+0x1a0>
 800300a:	4b31      	ldr	r3, [pc, #196]	@ (80030d0 <HAL_RCC_ClockConfig+0x260>)
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	e00d      	b.n	800302c <HAL_RCC_ClockConfig+0x1bc>
 8003010:	2302      	movs	r3, #2
 8003012:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003014:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003016:	fa93 f3a3 	rbit	r3, r3
 800301a:	627b      	str	r3, [r7, #36]	@ 0x24
 800301c:	2302      	movs	r3, #2
 800301e:	623b      	str	r3, [r7, #32]
 8003020:	6a3b      	ldr	r3, [r7, #32]
 8003022:	fa93 f3a3 	rbit	r3, r3
 8003026:	61fb      	str	r3, [r7, #28]
 8003028:	4b29      	ldr	r3, [pc, #164]	@ (80030d0 <HAL_RCC_ClockConfig+0x260>)
 800302a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800302c:	2202      	movs	r2, #2
 800302e:	61ba      	str	r2, [r7, #24]
 8003030:	69ba      	ldr	r2, [r7, #24]
 8003032:	fa92 f2a2 	rbit	r2, r2
 8003036:	617a      	str	r2, [r7, #20]
  return result;
 8003038:	697a      	ldr	r2, [r7, #20]
 800303a:	fab2 f282 	clz	r2, r2
 800303e:	b2d2      	uxtb	r2, r2
 8003040:	f042 0220 	orr.w	r2, r2, #32
 8003044:	b2d2      	uxtb	r2, r2
 8003046:	f002 021f 	and.w	r2, r2, #31
 800304a:	2101      	movs	r1, #1
 800304c:	fa01 f202 	lsl.w	r2, r1, r2
 8003050:	4013      	ands	r3, r2
 8003052:	2b00      	cmp	r3, #0
 8003054:	d101      	bne.n	800305a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003056:	2301      	movs	r3, #1
 8003058:	e079      	b.n	800314e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800305a:	4b1d      	ldr	r3, [pc, #116]	@ (80030d0 <HAL_RCC_ClockConfig+0x260>)
 800305c:	685b      	ldr	r3, [r3, #4]
 800305e:	f023 0203 	bic.w	r2, r3, #3
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	685b      	ldr	r3, [r3, #4]
 8003066:	491a      	ldr	r1, [pc, #104]	@ (80030d0 <HAL_RCC_ClockConfig+0x260>)
 8003068:	4313      	orrs	r3, r2
 800306a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800306c:	f7fe fa8a 	bl	8001584 <HAL_GetTick>
 8003070:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003072:	e00a      	b.n	800308a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003074:	f7fe fa86 	bl	8001584 <HAL_GetTick>
 8003078:	4602      	mov	r2, r0
 800307a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800307c:	1ad3      	subs	r3, r2, r3
 800307e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003082:	4293      	cmp	r3, r2
 8003084:	d901      	bls.n	800308a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8003086:	2303      	movs	r3, #3
 8003088:	e061      	b.n	800314e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800308a:	4b11      	ldr	r3, [pc, #68]	@ (80030d0 <HAL_RCC_ClockConfig+0x260>)
 800308c:	685b      	ldr	r3, [r3, #4]
 800308e:	f003 020c 	and.w	r2, r3, #12
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	685b      	ldr	r3, [r3, #4]
 8003096:	009b      	lsls	r3, r3, #2
 8003098:	429a      	cmp	r2, r3
 800309a:	d1eb      	bne.n	8003074 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800309c:	4b0b      	ldr	r3, [pc, #44]	@ (80030cc <HAL_RCC_ClockConfig+0x25c>)
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f003 0307 	and.w	r3, r3, #7
 80030a4:	683a      	ldr	r2, [r7, #0]
 80030a6:	429a      	cmp	r2, r3
 80030a8:	d214      	bcs.n	80030d4 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030aa:	4b08      	ldr	r3, [pc, #32]	@ (80030cc <HAL_RCC_ClockConfig+0x25c>)
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f023 0207 	bic.w	r2, r3, #7
 80030b2:	4906      	ldr	r1, [pc, #24]	@ (80030cc <HAL_RCC_ClockConfig+0x25c>)
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	4313      	orrs	r3, r2
 80030b8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80030ba:	4b04      	ldr	r3, [pc, #16]	@ (80030cc <HAL_RCC_ClockConfig+0x25c>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f003 0307 	and.w	r3, r3, #7
 80030c2:	683a      	ldr	r2, [r7, #0]
 80030c4:	429a      	cmp	r2, r3
 80030c6:	d005      	beq.n	80030d4 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80030c8:	2301      	movs	r3, #1
 80030ca:	e040      	b.n	800314e <HAL_RCC_ClockConfig+0x2de>
 80030cc:	40022000 	.word	0x40022000
 80030d0:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f003 0304 	and.w	r3, r3, #4
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d008      	beq.n	80030f2 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80030e0:	4b1d      	ldr	r3, [pc, #116]	@ (8003158 <HAL_RCC_ClockConfig+0x2e8>)
 80030e2:	685b      	ldr	r3, [r3, #4]
 80030e4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	68db      	ldr	r3, [r3, #12]
 80030ec:	491a      	ldr	r1, [pc, #104]	@ (8003158 <HAL_RCC_ClockConfig+0x2e8>)
 80030ee:	4313      	orrs	r3, r2
 80030f0:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f003 0308 	and.w	r3, r3, #8
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d009      	beq.n	8003112 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80030fe:	4b16      	ldr	r3, [pc, #88]	@ (8003158 <HAL_RCC_ClockConfig+0x2e8>)
 8003100:	685b      	ldr	r3, [r3, #4]
 8003102:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	691b      	ldr	r3, [r3, #16]
 800310a:	00db      	lsls	r3, r3, #3
 800310c:	4912      	ldr	r1, [pc, #72]	@ (8003158 <HAL_RCC_ClockConfig+0x2e8>)
 800310e:	4313      	orrs	r3, r2
 8003110:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003112:	f000 f829 	bl	8003168 <HAL_RCC_GetSysClockFreq>
 8003116:	4601      	mov	r1, r0
 8003118:	4b0f      	ldr	r3, [pc, #60]	@ (8003158 <HAL_RCC_ClockConfig+0x2e8>)
 800311a:	685b      	ldr	r3, [r3, #4]
 800311c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003120:	22f0      	movs	r2, #240	@ 0xf0
 8003122:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003124:	693a      	ldr	r2, [r7, #16]
 8003126:	fa92 f2a2 	rbit	r2, r2
 800312a:	60fa      	str	r2, [r7, #12]
  return result;
 800312c:	68fa      	ldr	r2, [r7, #12]
 800312e:	fab2 f282 	clz	r2, r2
 8003132:	b2d2      	uxtb	r2, r2
 8003134:	40d3      	lsrs	r3, r2
 8003136:	4a09      	ldr	r2, [pc, #36]	@ (800315c <HAL_RCC_ClockConfig+0x2ec>)
 8003138:	5cd3      	ldrb	r3, [r2, r3]
 800313a:	fa21 f303 	lsr.w	r3, r1, r3
 800313e:	4a08      	ldr	r2, [pc, #32]	@ (8003160 <HAL_RCC_ClockConfig+0x2f0>)
 8003140:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003142:	4b08      	ldr	r3, [pc, #32]	@ (8003164 <HAL_RCC_ClockConfig+0x2f4>)
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	4618      	mov	r0, r3
 8003148:	f7fe f9d8 	bl	80014fc <HAL_InitTick>
  
  return HAL_OK;
 800314c:	2300      	movs	r3, #0
}
 800314e:	4618      	mov	r0, r3
 8003150:	3778      	adds	r7, #120	@ 0x78
 8003152:	46bd      	mov	sp, r7
 8003154:	bd80      	pop	{r7, pc}
 8003156:	bf00      	nop
 8003158:	40021000 	.word	0x40021000
 800315c:	08005fa8 	.word	0x08005fa8
 8003160:	20000000 	.word	0x20000000
 8003164:	20000004 	.word	0x20000004

08003168 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003168:	b480      	push	{r7}
 800316a:	b087      	sub	sp, #28
 800316c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800316e:	2300      	movs	r3, #0
 8003170:	60fb      	str	r3, [r7, #12]
 8003172:	2300      	movs	r3, #0
 8003174:	60bb      	str	r3, [r7, #8]
 8003176:	2300      	movs	r3, #0
 8003178:	617b      	str	r3, [r7, #20]
 800317a:	2300      	movs	r3, #0
 800317c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800317e:	2300      	movs	r3, #0
 8003180:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8003182:	4b1e      	ldr	r3, [pc, #120]	@ (80031fc <HAL_RCC_GetSysClockFreq+0x94>)
 8003184:	685b      	ldr	r3, [r3, #4]
 8003186:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	f003 030c 	and.w	r3, r3, #12
 800318e:	2b04      	cmp	r3, #4
 8003190:	d002      	beq.n	8003198 <HAL_RCC_GetSysClockFreq+0x30>
 8003192:	2b08      	cmp	r3, #8
 8003194:	d003      	beq.n	800319e <HAL_RCC_GetSysClockFreq+0x36>
 8003196:	e026      	b.n	80031e6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003198:	4b19      	ldr	r3, [pc, #100]	@ (8003200 <HAL_RCC_GetSysClockFreq+0x98>)
 800319a:	613b      	str	r3, [r7, #16]
      break;
 800319c:	e026      	b.n	80031ec <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	0c9b      	lsrs	r3, r3, #18
 80031a2:	f003 030f 	and.w	r3, r3, #15
 80031a6:	4a17      	ldr	r2, [pc, #92]	@ (8003204 <HAL_RCC_GetSysClockFreq+0x9c>)
 80031a8:	5cd3      	ldrb	r3, [r2, r3]
 80031aa:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 80031ac:	4b13      	ldr	r3, [pc, #76]	@ (80031fc <HAL_RCC_GetSysClockFreq+0x94>)
 80031ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031b0:	f003 030f 	and.w	r3, r3, #15
 80031b4:	4a14      	ldr	r2, [pc, #80]	@ (8003208 <HAL_RCC_GetSysClockFreq+0xa0>)
 80031b6:	5cd3      	ldrb	r3, [r2, r3]
 80031b8:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d008      	beq.n	80031d6 <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80031c4:	4a0e      	ldr	r2, [pc, #56]	@ (8003200 <HAL_RCC_GetSysClockFreq+0x98>)
 80031c6:	68bb      	ldr	r3, [r7, #8]
 80031c8:	fbb2 f2f3 	udiv	r2, r2, r3
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	fb02 f303 	mul.w	r3, r2, r3
 80031d2:	617b      	str	r3, [r7, #20]
 80031d4:	e004      	b.n	80031e0 <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	4a0c      	ldr	r2, [pc, #48]	@ (800320c <HAL_RCC_GetSysClockFreq+0xa4>)
 80031da:	fb02 f303 	mul.w	r3, r2, r3
 80031de:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80031e0:	697b      	ldr	r3, [r7, #20]
 80031e2:	613b      	str	r3, [r7, #16]
      break;
 80031e4:	e002      	b.n	80031ec <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80031e6:	4b06      	ldr	r3, [pc, #24]	@ (8003200 <HAL_RCC_GetSysClockFreq+0x98>)
 80031e8:	613b      	str	r3, [r7, #16]
      break;
 80031ea:	bf00      	nop
    }
  }
  return sysclockfreq;
 80031ec:	693b      	ldr	r3, [r7, #16]
}
 80031ee:	4618      	mov	r0, r3
 80031f0:	371c      	adds	r7, #28
 80031f2:	46bd      	mov	sp, r7
 80031f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f8:	4770      	bx	lr
 80031fa:	bf00      	nop
 80031fc:	40021000 	.word	0x40021000
 8003200:	007a1200 	.word	0x007a1200
 8003204:	08005fc0 	.word	0x08005fc0
 8003208:	08005fd0 	.word	0x08005fd0
 800320c:	003d0900 	.word	0x003d0900

08003210 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003210:	b480      	push	{r7}
 8003212:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003214:	4b03      	ldr	r3, [pc, #12]	@ (8003224 <HAL_RCC_GetHCLKFreq+0x14>)
 8003216:	681b      	ldr	r3, [r3, #0]
}
 8003218:	4618      	mov	r0, r3
 800321a:	46bd      	mov	sp, r7
 800321c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003220:	4770      	bx	lr
 8003222:	bf00      	nop
 8003224:	20000000 	.word	0x20000000

08003228 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	b082      	sub	sp, #8
 800322c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800322e:	f7ff ffef 	bl	8003210 <HAL_RCC_GetHCLKFreq>
 8003232:	4601      	mov	r1, r0
 8003234:	4b0b      	ldr	r3, [pc, #44]	@ (8003264 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8003236:	685b      	ldr	r3, [r3, #4]
 8003238:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800323c:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8003240:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003242:	687a      	ldr	r2, [r7, #4]
 8003244:	fa92 f2a2 	rbit	r2, r2
 8003248:	603a      	str	r2, [r7, #0]
  return result;
 800324a:	683a      	ldr	r2, [r7, #0]
 800324c:	fab2 f282 	clz	r2, r2
 8003250:	b2d2      	uxtb	r2, r2
 8003252:	40d3      	lsrs	r3, r2
 8003254:	4a04      	ldr	r2, [pc, #16]	@ (8003268 <HAL_RCC_GetPCLK1Freq+0x40>)
 8003256:	5cd3      	ldrb	r3, [r2, r3]
 8003258:	fa21 f303 	lsr.w	r3, r1, r3
}    
 800325c:	4618      	mov	r0, r3
 800325e:	3708      	adds	r7, #8
 8003260:	46bd      	mov	sp, r7
 8003262:	bd80      	pop	{r7, pc}
 8003264:	40021000 	.word	0x40021000
 8003268:	08005fb8 	.word	0x08005fb8

0800326c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800326c:	b580      	push	{r7, lr}
 800326e:	b082      	sub	sp, #8
 8003270:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8003272:	f7ff ffcd 	bl	8003210 <HAL_RCC_GetHCLKFreq>
 8003276:	4601      	mov	r1, r0
 8003278:	4b0b      	ldr	r3, [pc, #44]	@ (80032a8 <HAL_RCC_GetPCLK2Freq+0x3c>)
 800327a:	685b      	ldr	r3, [r3, #4]
 800327c:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 8003280:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 8003284:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003286:	687a      	ldr	r2, [r7, #4]
 8003288:	fa92 f2a2 	rbit	r2, r2
 800328c:	603a      	str	r2, [r7, #0]
  return result;
 800328e:	683a      	ldr	r2, [r7, #0]
 8003290:	fab2 f282 	clz	r2, r2
 8003294:	b2d2      	uxtb	r2, r2
 8003296:	40d3      	lsrs	r3, r2
 8003298:	4a04      	ldr	r2, [pc, #16]	@ (80032ac <HAL_RCC_GetPCLK2Freq+0x40>)
 800329a:	5cd3      	ldrb	r3, [r2, r3]
 800329c:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80032a0:	4618      	mov	r0, r3
 80032a2:	3708      	adds	r7, #8
 80032a4:	46bd      	mov	sp, r7
 80032a6:	bd80      	pop	{r7, pc}
 80032a8:	40021000 	.word	0x40021000
 80032ac:	08005fb8 	.word	0x08005fb8

080032b0 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b092      	sub	sp, #72	@ 0x48
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80032b8:	2300      	movs	r3, #0
 80032ba:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 80032bc:	2300      	movs	r3, #0
 80032be:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80032c0:	2300      	movs	r3, #0
 80032c2:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	f000 80cd 	beq.w	800346e <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80032d4:	4b86      	ldr	r3, [pc, #536]	@ (80034f0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80032d6:	69db      	ldr	r3, [r3, #28]
 80032d8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d10e      	bne.n	80032fe <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80032e0:	4b83      	ldr	r3, [pc, #524]	@ (80034f0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80032e2:	69db      	ldr	r3, [r3, #28]
 80032e4:	4a82      	ldr	r2, [pc, #520]	@ (80034f0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80032e6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80032ea:	61d3      	str	r3, [r2, #28]
 80032ec:	4b80      	ldr	r3, [pc, #512]	@ (80034f0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80032ee:	69db      	ldr	r3, [r3, #28]
 80032f0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80032f4:	60bb      	str	r3, [r7, #8]
 80032f6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80032f8:	2301      	movs	r3, #1
 80032fa:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032fe:	4b7d      	ldr	r3, [pc, #500]	@ (80034f4 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003306:	2b00      	cmp	r3, #0
 8003308:	d118      	bne.n	800333c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800330a:	4b7a      	ldr	r3, [pc, #488]	@ (80034f4 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	4a79      	ldr	r2, [pc, #484]	@ (80034f4 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003310:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003314:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003316:	f7fe f935 	bl	8001584 <HAL_GetTick>
 800331a:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800331c:	e008      	b.n	8003330 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800331e:	f7fe f931 	bl	8001584 <HAL_GetTick>
 8003322:	4602      	mov	r2, r0
 8003324:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003326:	1ad3      	subs	r3, r2, r3
 8003328:	2b64      	cmp	r3, #100	@ 0x64
 800332a:	d901      	bls.n	8003330 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 800332c:	2303      	movs	r3, #3
 800332e:	e0db      	b.n	80034e8 <HAL_RCCEx_PeriphCLKConfig+0x238>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003330:	4b70      	ldr	r3, [pc, #448]	@ (80034f4 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003338:	2b00      	cmp	r3, #0
 800333a:	d0f0      	beq.n	800331e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800333c:	4b6c      	ldr	r3, [pc, #432]	@ (80034f0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800333e:	6a1b      	ldr	r3, [r3, #32]
 8003340:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003344:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003346:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003348:	2b00      	cmp	r3, #0
 800334a:	d07d      	beq.n	8003448 <HAL_RCCEx_PeriphCLKConfig+0x198>
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	685b      	ldr	r3, [r3, #4]
 8003350:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003354:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003356:	429a      	cmp	r2, r3
 8003358:	d076      	beq.n	8003448 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800335a:	4b65      	ldr	r3, [pc, #404]	@ (80034f0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800335c:	6a1b      	ldr	r3, [r3, #32]
 800335e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003362:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003364:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003368:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800336a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800336c:	fa93 f3a3 	rbit	r3, r3
 8003370:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8003372:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003374:	fab3 f383 	clz	r3, r3
 8003378:	b2db      	uxtb	r3, r3
 800337a:	461a      	mov	r2, r3
 800337c:	4b5e      	ldr	r3, [pc, #376]	@ (80034f8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800337e:	4413      	add	r3, r2
 8003380:	009b      	lsls	r3, r3, #2
 8003382:	461a      	mov	r2, r3
 8003384:	2301      	movs	r3, #1
 8003386:	6013      	str	r3, [r2, #0]
 8003388:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800338c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800338e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003390:	fa93 f3a3 	rbit	r3, r3
 8003394:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8003396:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003398:	fab3 f383 	clz	r3, r3
 800339c:	b2db      	uxtb	r3, r3
 800339e:	461a      	mov	r2, r3
 80033a0:	4b55      	ldr	r3, [pc, #340]	@ (80034f8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80033a2:	4413      	add	r3, r2
 80033a4:	009b      	lsls	r3, r3, #2
 80033a6:	461a      	mov	r2, r3
 80033a8:	2300      	movs	r3, #0
 80033aa:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80033ac:	4a50      	ldr	r2, [pc, #320]	@ (80034f0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80033ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80033b0:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80033b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80033b4:	f003 0301 	and.w	r3, r3, #1
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d045      	beq.n	8003448 <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033bc:	f7fe f8e2 	bl	8001584 <HAL_GetTick>
 80033c0:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033c2:	e00a      	b.n	80033da <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033c4:	f7fe f8de 	bl	8001584 <HAL_GetTick>
 80033c8:	4602      	mov	r2, r0
 80033ca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80033cc:	1ad3      	subs	r3, r2, r3
 80033ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80033d2:	4293      	cmp	r3, r2
 80033d4:	d901      	bls.n	80033da <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 80033d6:	2303      	movs	r3, #3
 80033d8:	e086      	b.n	80034e8 <HAL_RCCEx_PeriphCLKConfig+0x238>
 80033da:	2302      	movs	r3, #2
 80033dc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80033e0:	fa93 f3a3 	rbit	r3, r3
 80033e4:	627b      	str	r3, [r7, #36]	@ 0x24
 80033e6:	2302      	movs	r3, #2
 80033e8:	623b      	str	r3, [r7, #32]
 80033ea:	6a3b      	ldr	r3, [r7, #32]
 80033ec:	fa93 f3a3 	rbit	r3, r3
 80033f0:	61fb      	str	r3, [r7, #28]
  return result;
 80033f2:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033f4:	fab3 f383 	clz	r3, r3
 80033f8:	b2db      	uxtb	r3, r3
 80033fa:	095b      	lsrs	r3, r3, #5
 80033fc:	b2db      	uxtb	r3, r3
 80033fe:	f043 0302 	orr.w	r3, r3, #2
 8003402:	b2db      	uxtb	r3, r3
 8003404:	2b02      	cmp	r3, #2
 8003406:	d102      	bne.n	800340e <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8003408:	4b39      	ldr	r3, [pc, #228]	@ (80034f0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800340a:	6a1b      	ldr	r3, [r3, #32]
 800340c:	e007      	b.n	800341e <HAL_RCCEx_PeriphCLKConfig+0x16e>
 800340e:	2302      	movs	r3, #2
 8003410:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003412:	69bb      	ldr	r3, [r7, #24]
 8003414:	fa93 f3a3 	rbit	r3, r3
 8003418:	617b      	str	r3, [r7, #20]
 800341a:	4b35      	ldr	r3, [pc, #212]	@ (80034f0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800341c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800341e:	2202      	movs	r2, #2
 8003420:	613a      	str	r2, [r7, #16]
 8003422:	693a      	ldr	r2, [r7, #16]
 8003424:	fa92 f2a2 	rbit	r2, r2
 8003428:	60fa      	str	r2, [r7, #12]
  return result;
 800342a:	68fa      	ldr	r2, [r7, #12]
 800342c:	fab2 f282 	clz	r2, r2
 8003430:	b2d2      	uxtb	r2, r2
 8003432:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003436:	b2d2      	uxtb	r2, r2
 8003438:	f002 021f 	and.w	r2, r2, #31
 800343c:	2101      	movs	r1, #1
 800343e:	fa01 f202 	lsl.w	r2, r1, r2
 8003442:	4013      	ands	r3, r2
 8003444:	2b00      	cmp	r3, #0
 8003446:	d0bd      	beq.n	80033c4 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003448:	4b29      	ldr	r3, [pc, #164]	@ (80034f0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800344a:	6a1b      	ldr	r3, [r3, #32]
 800344c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	685b      	ldr	r3, [r3, #4]
 8003454:	4926      	ldr	r1, [pc, #152]	@ (80034f0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003456:	4313      	orrs	r3, r2
 8003458:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800345a:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800345e:	2b01      	cmp	r3, #1
 8003460:	d105      	bne.n	800346e <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003462:	4b23      	ldr	r3, [pc, #140]	@ (80034f0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003464:	69db      	ldr	r3, [r3, #28]
 8003466:	4a22      	ldr	r2, [pc, #136]	@ (80034f0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003468:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800346c:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f003 0301 	and.w	r3, r3, #1
 8003476:	2b00      	cmp	r3, #0
 8003478:	d008      	beq.n	800348c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800347a:	4b1d      	ldr	r3, [pc, #116]	@ (80034f0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800347c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800347e:	f023 0203 	bic.w	r2, r3, #3
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	689b      	ldr	r3, [r3, #8]
 8003486:	491a      	ldr	r1, [pc, #104]	@ (80034f0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003488:	4313      	orrs	r3, r2
 800348a:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f003 0320 	and.w	r3, r3, #32
 8003494:	2b00      	cmp	r3, #0
 8003496:	d008      	beq.n	80034aa <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003498:	4b15      	ldr	r3, [pc, #84]	@ (80034f0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800349a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800349c:	f023 0210 	bic.w	r2, r3, #16
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	68db      	ldr	r3, [r3, #12]
 80034a4:	4912      	ldr	r1, [pc, #72]	@ (80034f0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80034a6:	4313      	orrs	r3, r2
 80034a8:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d008      	beq.n	80034c8 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80034b6:	4b0e      	ldr	r3, [pc, #56]	@ (80034f0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80034b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034ba:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	691b      	ldr	r3, [r3, #16]
 80034c2:	490b      	ldr	r1, [pc, #44]	@ (80034f0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80034c4:	4313      	orrs	r3, r2
 80034c6:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d008      	beq.n	80034e6 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80034d4:	4b06      	ldr	r3, [pc, #24]	@ (80034f0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80034d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034d8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	695b      	ldr	r3, [r3, #20]
 80034e0:	4903      	ldr	r1, [pc, #12]	@ (80034f0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80034e2:	4313      	orrs	r3, r2
 80034e4:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80034e6:	2300      	movs	r3, #0
}
 80034e8:	4618      	mov	r0, r3
 80034ea:	3748      	adds	r7, #72	@ 0x48
 80034ec:	46bd      	mov	sp, r7
 80034ee:	bd80      	pop	{r7, pc}
 80034f0:	40021000 	.word	0x40021000
 80034f4:	40007000 	.word	0x40007000
 80034f8:	10908100 	.word	0x10908100

080034fc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80034fc:	b580      	push	{r7, lr}
 80034fe:	b082      	sub	sp, #8
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2b00      	cmp	r3, #0
 8003508:	d101      	bne.n	800350e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800350a:	2301      	movs	r3, #1
 800350c:	e049      	b.n	80035a2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003514:	b2db      	uxtb	r3, r3
 8003516:	2b00      	cmp	r3, #0
 8003518:	d106      	bne.n	8003528 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	2200      	movs	r2, #0
 800351e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003522:	6878      	ldr	r0, [r7, #4]
 8003524:	f7fd fdf8 	bl	8001118 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2202      	movs	r2, #2
 800352c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681a      	ldr	r2, [r3, #0]
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	3304      	adds	r3, #4
 8003538:	4619      	mov	r1, r3
 800353a:	4610      	mov	r0, r2
 800353c:	f000 fc90 	bl	8003e60 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2201      	movs	r2, #1
 8003544:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	2201      	movs	r2, #1
 800354c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2201      	movs	r2, #1
 8003554:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2201      	movs	r2, #1
 800355c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2201      	movs	r2, #1
 8003564:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2201      	movs	r2, #1
 800356c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2201      	movs	r2, #1
 8003574:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2201      	movs	r2, #1
 800357c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2201      	movs	r2, #1
 8003584:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2201      	movs	r2, #1
 800358c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2201      	movs	r2, #1
 8003594:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2201      	movs	r2, #1
 800359c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80035a0:	2300      	movs	r3, #0
}
 80035a2:	4618      	mov	r0, r3
 80035a4:	3708      	adds	r7, #8
 80035a6:	46bd      	mov	sp, r7
 80035a8:	bd80      	pop	{r7, pc}
	...

080035ac <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80035ac:	b480      	push	{r7}
 80035ae:	b085      	sub	sp, #20
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80035ba:	b2db      	uxtb	r3, r3
 80035bc:	2b01      	cmp	r3, #1
 80035be:	d001      	beq.n	80035c4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80035c0:	2301      	movs	r3, #1
 80035c2:	e038      	b.n	8003636 <HAL_TIM_Base_Start+0x8a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2202      	movs	r2, #2
 80035c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	4a1c      	ldr	r2, [pc, #112]	@ (8003644 <HAL_TIM_Base_Start+0x98>)
 80035d2:	4293      	cmp	r3, r2
 80035d4:	d00e      	beq.n	80035f4 <HAL_TIM_Base_Start+0x48>
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80035de:	d009      	beq.n	80035f4 <HAL_TIM_Base_Start+0x48>
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	4a18      	ldr	r2, [pc, #96]	@ (8003648 <HAL_TIM_Base_Start+0x9c>)
 80035e6:	4293      	cmp	r3, r2
 80035e8:	d004      	beq.n	80035f4 <HAL_TIM_Base_Start+0x48>
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	4a17      	ldr	r2, [pc, #92]	@ (800364c <HAL_TIM_Base_Start+0xa0>)
 80035f0:	4293      	cmp	r3, r2
 80035f2:	d115      	bne.n	8003620 <HAL_TIM_Base_Start+0x74>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	689a      	ldr	r2, [r3, #8]
 80035fa:	4b15      	ldr	r3, [pc, #84]	@ (8003650 <HAL_TIM_Base_Start+0xa4>)
 80035fc:	4013      	ands	r3, r2
 80035fe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	2b06      	cmp	r3, #6
 8003604:	d015      	beq.n	8003632 <HAL_TIM_Base_Start+0x86>
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800360c:	d011      	beq.n	8003632 <HAL_TIM_Base_Start+0x86>
    {
      __HAL_TIM_ENABLE(htim);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	681a      	ldr	r2, [r3, #0]
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f042 0201 	orr.w	r2, r2, #1
 800361c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800361e:	e008      	b.n	8003632 <HAL_TIM_Base_Start+0x86>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	681a      	ldr	r2, [r3, #0]
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f042 0201 	orr.w	r2, r2, #1
 800362e:	601a      	str	r2, [r3, #0]
 8003630:	e000      	b.n	8003634 <HAL_TIM_Base_Start+0x88>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003632:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003634:	2300      	movs	r3, #0
}
 8003636:	4618      	mov	r0, r3
 8003638:	3714      	adds	r7, #20
 800363a:	46bd      	mov	sp, r7
 800363c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003640:	4770      	bx	lr
 8003642:	bf00      	nop
 8003644:	40012c00 	.word	0x40012c00
 8003648:	40000400 	.word	0x40000400
 800364c:	40014000 	.word	0x40014000
 8003650:	00010007 	.word	0x00010007

08003654 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8003654:	b580      	push	{r7, lr}
 8003656:	b082      	sub	sp, #8
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2b00      	cmp	r3, #0
 8003660:	d101      	bne.n	8003666 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8003662:	2301      	movs	r3, #1
 8003664:	e049      	b.n	80036fa <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800366c:	b2db      	uxtb	r3, r3
 800366e:	2b00      	cmp	r3, #0
 8003670:	d106      	bne.n	8003680 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	2200      	movs	r2, #0
 8003676:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800367a:	6878      	ldr	r0, [r7, #4]
 800367c:	f000 f841 	bl	8003702 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2202      	movs	r2, #2
 8003684:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681a      	ldr	r2, [r3, #0]
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	3304      	adds	r3, #4
 8003690:	4619      	mov	r1, r3
 8003692:	4610      	mov	r0, r2
 8003694:	f000 fbe4 	bl	8003e60 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2201      	movs	r2, #1
 800369c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2201      	movs	r2, #1
 80036a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2201      	movs	r2, #1
 80036ac:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2201      	movs	r2, #1
 80036b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2201      	movs	r2, #1
 80036bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2201      	movs	r2, #1
 80036c4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2201      	movs	r2, #1
 80036cc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2201      	movs	r2, #1
 80036d4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2201      	movs	r2, #1
 80036dc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2201      	movs	r2, #1
 80036e4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2201      	movs	r2, #1
 80036ec:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2201      	movs	r2, #1
 80036f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80036f8:	2300      	movs	r3, #0
}
 80036fa:	4618      	mov	r0, r3
 80036fc:	3708      	adds	r7, #8
 80036fe:	46bd      	mov	sp, r7
 8003700:	bd80      	pop	{r7, pc}

08003702 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8003702:	b480      	push	{r7}
 8003704:	b083      	sub	sp, #12
 8003706:	af00      	add	r7, sp, #0
 8003708:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 800370a:	bf00      	nop
 800370c:	370c      	adds	r7, #12
 800370e:	46bd      	mov	sp, r7
 8003710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003714:	4770      	bx	lr

08003716 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003716:	b580      	push	{r7, lr}
 8003718:	b082      	sub	sp, #8
 800371a:	af00      	add	r7, sp, #0
 800371c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	2b00      	cmp	r3, #0
 8003722:	d101      	bne.n	8003728 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003724:	2301      	movs	r3, #1
 8003726:	e049      	b.n	80037bc <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800372e:	b2db      	uxtb	r3, r3
 8003730:	2b00      	cmp	r3, #0
 8003732:	d106      	bne.n	8003742 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2200      	movs	r2, #0
 8003738:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800373c:	6878      	ldr	r0, [r7, #4]
 800373e:	f000 f841 	bl	80037c4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2202      	movs	r2, #2
 8003746:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681a      	ldr	r2, [r3, #0]
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	3304      	adds	r3, #4
 8003752:	4619      	mov	r1, r3
 8003754:	4610      	mov	r0, r2
 8003756:	f000 fb83 	bl	8003e60 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	2201      	movs	r2, #1
 800375e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	2201      	movs	r2, #1
 8003766:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	2201      	movs	r2, #1
 800376e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	2201      	movs	r2, #1
 8003776:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	2201      	movs	r2, #1
 800377e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	2201      	movs	r2, #1
 8003786:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	2201      	movs	r2, #1
 800378e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	2201      	movs	r2, #1
 8003796:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	2201      	movs	r2, #1
 800379e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	2201      	movs	r2, #1
 80037a6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	2201      	movs	r2, #1
 80037ae:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	2201      	movs	r2, #1
 80037b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80037ba:	2300      	movs	r3, #0
}
 80037bc:	4618      	mov	r0, r3
 80037be:	3708      	adds	r7, #8
 80037c0:	46bd      	mov	sp, r7
 80037c2:	bd80      	pop	{r7, pc}

080037c4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80037c4:	b480      	push	{r7}
 80037c6:	b083      	sub	sp, #12
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80037cc:	bf00      	nop
 80037ce:	370c      	adds	r7, #12
 80037d0:	46bd      	mov	sp, r7
 80037d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d6:	4770      	bx	lr

080037d8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	b084      	sub	sp, #16
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
 80037e0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d109      	bne.n	80037fc <HAL_TIM_PWM_Start+0x24>
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80037ee:	b2db      	uxtb	r3, r3
 80037f0:	2b01      	cmp	r3, #1
 80037f2:	bf14      	ite	ne
 80037f4:	2301      	movne	r3, #1
 80037f6:	2300      	moveq	r3, #0
 80037f8:	b2db      	uxtb	r3, r3
 80037fa:	e03c      	b.n	8003876 <HAL_TIM_PWM_Start+0x9e>
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	2b04      	cmp	r3, #4
 8003800:	d109      	bne.n	8003816 <HAL_TIM_PWM_Start+0x3e>
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003808:	b2db      	uxtb	r3, r3
 800380a:	2b01      	cmp	r3, #1
 800380c:	bf14      	ite	ne
 800380e:	2301      	movne	r3, #1
 8003810:	2300      	moveq	r3, #0
 8003812:	b2db      	uxtb	r3, r3
 8003814:	e02f      	b.n	8003876 <HAL_TIM_PWM_Start+0x9e>
 8003816:	683b      	ldr	r3, [r7, #0]
 8003818:	2b08      	cmp	r3, #8
 800381a:	d109      	bne.n	8003830 <HAL_TIM_PWM_Start+0x58>
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003822:	b2db      	uxtb	r3, r3
 8003824:	2b01      	cmp	r3, #1
 8003826:	bf14      	ite	ne
 8003828:	2301      	movne	r3, #1
 800382a:	2300      	moveq	r3, #0
 800382c:	b2db      	uxtb	r3, r3
 800382e:	e022      	b.n	8003876 <HAL_TIM_PWM_Start+0x9e>
 8003830:	683b      	ldr	r3, [r7, #0]
 8003832:	2b0c      	cmp	r3, #12
 8003834:	d109      	bne.n	800384a <HAL_TIM_PWM_Start+0x72>
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800383c:	b2db      	uxtb	r3, r3
 800383e:	2b01      	cmp	r3, #1
 8003840:	bf14      	ite	ne
 8003842:	2301      	movne	r3, #1
 8003844:	2300      	moveq	r3, #0
 8003846:	b2db      	uxtb	r3, r3
 8003848:	e015      	b.n	8003876 <HAL_TIM_PWM_Start+0x9e>
 800384a:	683b      	ldr	r3, [r7, #0]
 800384c:	2b10      	cmp	r3, #16
 800384e:	d109      	bne.n	8003864 <HAL_TIM_PWM_Start+0x8c>
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003856:	b2db      	uxtb	r3, r3
 8003858:	2b01      	cmp	r3, #1
 800385a:	bf14      	ite	ne
 800385c:	2301      	movne	r3, #1
 800385e:	2300      	moveq	r3, #0
 8003860:	b2db      	uxtb	r3, r3
 8003862:	e008      	b.n	8003876 <HAL_TIM_PWM_Start+0x9e>
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800386a:	b2db      	uxtb	r3, r3
 800386c:	2b01      	cmp	r3, #1
 800386e:	bf14      	ite	ne
 8003870:	2301      	movne	r3, #1
 8003872:	2300      	moveq	r3, #0
 8003874:	b2db      	uxtb	r3, r3
 8003876:	2b00      	cmp	r3, #0
 8003878:	d001      	beq.n	800387e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800387a:	2301      	movs	r3, #1
 800387c:	e088      	b.n	8003990 <HAL_TIM_PWM_Start+0x1b8>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800387e:	683b      	ldr	r3, [r7, #0]
 8003880:	2b00      	cmp	r3, #0
 8003882:	d104      	bne.n	800388e <HAL_TIM_PWM_Start+0xb6>
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2202      	movs	r2, #2
 8003888:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800388c:	e023      	b.n	80038d6 <HAL_TIM_PWM_Start+0xfe>
 800388e:	683b      	ldr	r3, [r7, #0]
 8003890:	2b04      	cmp	r3, #4
 8003892:	d104      	bne.n	800389e <HAL_TIM_PWM_Start+0xc6>
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2202      	movs	r2, #2
 8003898:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800389c:	e01b      	b.n	80038d6 <HAL_TIM_PWM_Start+0xfe>
 800389e:	683b      	ldr	r3, [r7, #0]
 80038a0:	2b08      	cmp	r3, #8
 80038a2:	d104      	bne.n	80038ae <HAL_TIM_PWM_Start+0xd6>
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2202      	movs	r2, #2
 80038a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80038ac:	e013      	b.n	80038d6 <HAL_TIM_PWM_Start+0xfe>
 80038ae:	683b      	ldr	r3, [r7, #0]
 80038b0:	2b0c      	cmp	r3, #12
 80038b2:	d104      	bne.n	80038be <HAL_TIM_PWM_Start+0xe6>
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2202      	movs	r2, #2
 80038b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80038bc:	e00b      	b.n	80038d6 <HAL_TIM_PWM_Start+0xfe>
 80038be:	683b      	ldr	r3, [r7, #0]
 80038c0:	2b10      	cmp	r3, #16
 80038c2:	d104      	bne.n	80038ce <HAL_TIM_PWM_Start+0xf6>
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2202      	movs	r2, #2
 80038c8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80038cc:	e003      	b.n	80038d6 <HAL_TIM_PWM_Start+0xfe>
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	2202      	movs	r2, #2
 80038d2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	2201      	movs	r2, #1
 80038dc:	6839      	ldr	r1, [r7, #0]
 80038de:	4618      	mov	r0, r3
 80038e0:	f000 fe82 	bl	80045e8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	4a2b      	ldr	r2, [pc, #172]	@ (8003998 <HAL_TIM_PWM_Start+0x1c0>)
 80038ea:	4293      	cmp	r3, r2
 80038ec:	d00e      	beq.n	800390c <HAL_TIM_PWM_Start+0x134>
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	4a2a      	ldr	r2, [pc, #168]	@ (800399c <HAL_TIM_PWM_Start+0x1c4>)
 80038f4:	4293      	cmp	r3, r2
 80038f6:	d009      	beq.n	800390c <HAL_TIM_PWM_Start+0x134>
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	4a28      	ldr	r2, [pc, #160]	@ (80039a0 <HAL_TIM_PWM_Start+0x1c8>)
 80038fe:	4293      	cmp	r3, r2
 8003900:	d004      	beq.n	800390c <HAL_TIM_PWM_Start+0x134>
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	4a27      	ldr	r2, [pc, #156]	@ (80039a4 <HAL_TIM_PWM_Start+0x1cc>)
 8003908:	4293      	cmp	r3, r2
 800390a:	d101      	bne.n	8003910 <HAL_TIM_PWM_Start+0x138>
 800390c:	2301      	movs	r3, #1
 800390e:	e000      	b.n	8003912 <HAL_TIM_PWM_Start+0x13a>
 8003910:	2300      	movs	r3, #0
 8003912:	2b00      	cmp	r3, #0
 8003914:	d007      	beq.n	8003926 <HAL_TIM_PWM_Start+0x14e>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003924:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	4a1b      	ldr	r2, [pc, #108]	@ (8003998 <HAL_TIM_PWM_Start+0x1c0>)
 800392c:	4293      	cmp	r3, r2
 800392e:	d00e      	beq.n	800394e <HAL_TIM_PWM_Start+0x176>
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003938:	d009      	beq.n	800394e <HAL_TIM_PWM_Start+0x176>
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	4a1a      	ldr	r2, [pc, #104]	@ (80039a8 <HAL_TIM_PWM_Start+0x1d0>)
 8003940:	4293      	cmp	r3, r2
 8003942:	d004      	beq.n	800394e <HAL_TIM_PWM_Start+0x176>
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	4a14      	ldr	r2, [pc, #80]	@ (800399c <HAL_TIM_PWM_Start+0x1c4>)
 800394a:	4293      	cmp	r3, r2
 800394c:	d115      	bne.n	800397a <HAL_TIM_PWM_Start+0x1a2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	689a      	ldr	r2, [r3, #8]
 8003954:	4b15      	ldr	r3, [pc, #84]	@ (80039ac <HAL_TIM_PWM_Start+0x1d4>)
 8003956:	4013      	ands	r3, r2
 8003958:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	2b06      	cmp	r3, #6
 800395e:	d015      	beq.n	800398c <HAL_TIM_PWM_Start+0x1b4>
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003966:	d011      	beq.n	800398c <HAL_TIM_PWM_Start+0x1b4>
    {
      __HAL_TIM_ENABLE(htim);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	681a      	ldr	r2, [r3, #0]
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f042 0201 	orr.w	r2, r2, #1
 8003976:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003978:	e008      	b.n	800398c <HAL_TIM_PWM_Start+0x1b4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	681a      	ldr	r2, [r3, #0]
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f042 0201 	orr.w	r2, r2, #1
 8003988:	601a      	str	r2, [r3, #0]
 800398a:	e000      	b.n	800398e <HAL_TIM_PWM_Start+0x1b6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800398c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800398e:	2300      	movs	r3, #0
}
 8003990:	4618      	mov	r0, r3
 8003992:	3710      	adds	r7, #16
 8003994:	46bd      	mov	sp, r7
 8003996:	bd80      	pop	{r7, pc}
 8003998:	40012c00 	.word	0x40012c00
 800399c:	40014000 	.word	0x40014000
 80039a0:	40014400 	.word	0x40014400
 80039a4:	40014800 	.word	0x40014800
 80039a8:	40000400 	.word	0x40000400
 80039ac:	00010007 	.word	0x00010007

080039b0 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b086      	sub	sp, #24
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	60f8      	str	r0, [r7, #12]
 80039b8:	60b9      	str	r1, [r7, #8]
 80039ba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80039bc:	2300      	movs	r3, #0
 80039be:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80039c6:	2b01      	cmp	r3, #1
 80039c8:	d101      	bne.n	80039ce <HAL_TIM_OC_ConfigChannel+0x1e>
 80039ca:	2302      	movs	r3, #2
 80039cc:	e066      	b.n	8003a9c <HAL_TIM_OC_ConfigChannel+0xec>
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	2201      	movs	r2, #1
 80039d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	2b14      	cmp	r3, #20
 80039da:	d857      	bhi.n	8003a8c <HAL_TIM_OC_ConfigChannel+0xdc>
 80039dc:	a201      	add	r2, pc, #4	@ (adr r2, 80039e4 <HAL_TIM_OC_ConfigChannel+0x34>)
 80039de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039e2:	bf00      	nop
 80039e4:	08003a39 	.word	0x08003a39
 80039e8:	08003a8d 	.word	0x08003a8d
 80039ec:	08003a8d 	.word	0x08003a8d
 80039f0:	08003a8d 	.word	0x08003a8d
 80039f4:	08003a47 	.word	0x08003a47
 80039f8:	08003a8d 	.word	0x08003a8d
 80039fc:	08003a8d 	.word	0x08003a8d
 8003a00:	08003a8d 	.word	0x08003a8d
 8003a04:	08003a55 	.word	0x08003a55
 8003a08:	08003a8d 	.word	0x08003a8d
 8003a0c:	08003a8d 	.word	0x08003a8d
 8003a10:	08003a8d 	.word	0x08003a8d
 8003a14:	08003a63 	.word	0x08003a63
 8003a18:	08003a8d 	.word	0x08003a8d
 8003a1c:	08003a8d 	.word	0x08003a8d
 8003a20:	08003a8d 	.word	0x08003a8d
 8003a24:	08003a71 	.word	0x08003a71
 8003a28:	08003a8d 	.word	0x08003a8d
 8003a2c:	08003a8d 	.word	0x08003a8d
 8003a30:	08003a8d 	.word	0x08003a8d
 8003a34:	08003a7f 	.word	0x08003a7f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	68b9      	ldr	r1, [r7, #8]
 8003a3e:	4618      	mov	r0, r3
 8003a40:	f000 fa92 	bl	8003f68 <TIM_OC1_SetConfig>
      break;
 8003a44:	e025      	b.n	8003a92 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	68b9      	ldr	r1, [r7, #8]
 8003a4c:	4618      	mov	r0, r3
 8003a4e:	f000 fb11 	bl	8004074 <TIM_OC2_SetConfig>
      break;
 8003a52:	e01e      	b.n	8003a92 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	68b9      	ldr	r1, [r7, #8]
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	f000 fb8a 	bl	8004174 <TIM_OC3_SetConfig>
      break;
 8003a60:	e017      	b.n	8003a92 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	68b9      	ldr	r1, [r7, #8]
 8003a68:	4618      	mov	r0, r3
 8003a6a:	f000 fc01 	bl	8004270 <TIM_OC4_SetConfig>
      break;
 8003a6e:	e010      	b.n	8003a92 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	68b9      	ldr	r1, [r7, #8]
 8003a76:	4618      	mov	r0, r3
 8003a78:	f000 fc5e 	bl	8004338 <TIM_OC5_SetConfig>
      break;
 8003a7c:	e009      	b.n	8003a92 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	68b9      	ldr	r1, [r7, #8]
 8003a84:	4618      	mov	r0, r3
 8003a86:	f000 fcb5 	bl	80043f4 <TIM_OC6_SetConfig>
      break;
 8003a8a:	e002      	b.n	8003a92 <HAL_TIM_OC_ConfigChannel+0xe2>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8003a8c:	2301      	movs	r3, #1
 8003a8e:	75fb      	strb	r3, [r7, #23]
      break;
 8003a90:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	2200      	movs	r2, #0
 8003a96:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003a9a:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	3718      	adds	r7, #24
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	bd80      	pop	{r7, pc}

08003aa4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	b086      	sub	sp, #24
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	60f8      	str	r0, [r7, #12]
 8003aac:	60b9      	str	r1, [r7, #8]
 8003aae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003ab0:	2300      	movs	r3, #0
 8003ab2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003aba:	2b01      	cmp	r3, #1
 8003abc:	d101      	bne.n	8003ac2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003abe:	2302      	movs	r3, #2
 8003ac0:	e0ff      	b.n	8003cc2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	2201      	movs	r2, #1
 8003ac6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	2b14      	cmp	r3, #20
 8003ace:	f200 80f0 	bhi.w	8003cb2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8003ad2:	a201      	add	r2, pc, #4	@ (adr r2, 8003ad8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003ad4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ad8:	08003b2d 	.word	0x08003b2d
 8003adc:	08003cb3 	.word	0x08003cb3
 8003ae0:	08003cb3 	.word	0x08003cb3
 8003ae4:	08003cb3 	.word	0x08003cb3
 8003ae8:	08003b6d 	.word	0x08003b6d
 8003aec:	08003cb3 	.word	0x08003cb3
 8003af0:	08003cb3 	.word	0x08003cb3
 8003af4:	08003cb3 	.word	0x08003cb3
 8003af8:	08003baf 	.word	0x08003baf
 8003afc:	08003cb3 	.word	0x08003cb3
 8003b00:	08003cb3 	.word	0x08003cb3
 8003b04:	08003cb3 	.word	0x08003cb3
 8003b08:	08003bef 	.word	0x08003bef
 8003b0c:	08003cb3 	.word	0x08003cb3
 8003b10:	08003cb3 	.word	0x08003cb3
 8003b14:	08003cb3 	.word	0x08003cb3
 8003b18:	08003c31 	.word	0x08003c31
 8003b1c:	08003cb3 	.word	0x08003cb3
 8003b20:	08003cb3 	.word	0x08003cb3
 8003b24:	08003cb3 	.word	0x08003cb3
 8003b28:	08003c71 	.word	0x08003c71
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	68b9      	ldr	r1, [r7, #8]
 8003b32:	4618      	mov	r0, r3
 8003b34:	f000 fa18 	bl	8003f68 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	699a      	ldr	r2, [r3, #24]
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f042 0208 	orr.w	r2, r2, #8
 8003b46:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	699a      	ldr	r2, [r3, #24]
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f022 0204 	bic.w	r2, r2, #4
 8003b56:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	6999      	ldr	r1, [r3, #24]
 8003b5e:	68bb      	ldr	r3, [r7, #8]
 8003b60:	691a      	ldr	r2, [r3, #16]
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	430a      	orrs	r2, r1
 8003b68:	619a      	str	r2, [r3, #24]
      break;
 8003b6a:	e0a5      	b.n	8003cb8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	68b9      	ldr	r1, [r7, #8]
 8003b72:	4618      	mov	r0, r3
 8003b74:	f000 fa7e 	bl	8004074 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	699a      	ldr	r2, [r3, #24]
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003b86:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	699a      	ldr	r2, [r3, #24]
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003b96:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	6999      	ldr	r1, [r3, #24]
 8003b9e:	68bb      	ldr	r3, [r7, #8]
 8003ba0:	691b      	ldr	r3, [r3, #16]
 8003ba2:	021a      	lsls	r2, r3, #8
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	430a      	orrs	r2, r1
 8003baa:	619a      	str	r2, [r3, #24]
      break;
 8003bac:	e084      	b.n	8003cb8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	68b9      	ldr	r1, [r7, #8]
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	f000 fadd 	bl	8004174 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	69da      	ldr	r2, [r3, #28]
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f042 0208 	orr.w	r2, r2, #8
 8003bc8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	69da      	ldr	r2, [r3, #28]
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f022 0204 	bic.w	r2, r2, #4
 8003bd8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	69d9      	ldr	r1, [r3, #28]
 8003be0:	68bb      	ldr	r3, [r7, #8]
 8003be2:	691a      	ldr	r2, [r3, #16]
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	430a      	orrs	r2, r1
 8003bea:	61da      	str	r2, [r3, #28]
      break;
 8003bec:	e064      	b.n	8003cb8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	68b9      	ldr	r1, [r7, #8]
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	f000 fb3b 	bl	8004270 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	69da      	ldr	r2, [r3, #28]
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003c08:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	69da      	ldr	r2, [r3, #28]
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003c18:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	69d9      	ldr	r1, [r3, #28]
 8003c20:	68bb      	ldr	r3, [r7, #8]
 8003c22:	691b      	ldr	r3, [r3, #16]
 8003c24:	021a      	lsls	r2, r3, #8
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	430a      	orrs	r2, r1
 8003c2c:	61da      	str	r2, [r3, #28]
      break;
 8003c2e:	e043      	b.n	8003cb8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	68b9      	ldr	r1, [r7, #8]
 8003c36:	4618      	mov	r0, r3
 8003c38:	f000 fb7e 	bl	8004338 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f042 0208 	orr.w	r2, r2, #8
 8003c4a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f022 0204 	bic.w	r2, r2, #4
 8003c5a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8003c62:	68bb      	ldr	r3, [r7, #8]
 8003c64:	691a      	ldr	r2, [r3, #16]
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	430a      	orrs	r2, r1
 8003c6c:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8003c6e:	e023      	b.n	8003cb8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	68b9      	ldr	r1, [r7, #8]
 8003c76:	4618      	mov	r0, r3
 8003c78:	f000 fbbc 	bl	80043f4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003c8a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003c9a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8003ca2:	68bb      	ldr	r3, [r7, #8]
 8003ca4:	691b      	ldr	r3, [r3, #16]
 8003ca6:	021a      	lsls	r2, r3, #8
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	430a      	orrs	r2, r1
 8003cae:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8003cb0:	e002      	b.n	8003cb8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8003cb2:	2301      	movs	r3, #1
 8003cb4:	75fb      	strb	r3, [r7, #23]
      break;
 8003cb6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	2200      	movs	r2, #0
 8003cbc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003cc0:	7dfb      	ldrb	r3, [r7, #23]
}
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	3718      	adds	r7, #24
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	bd80      	pop	{r7, pc}
 8003cca:	bf00      	nop

08003ccc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	b084      	sub	sp, #16
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
 8003cd4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003cd6:	2300      	movs	r3, #0
 8003cd8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003ce0:	2b01      	cmp	r3, #1
 8003ce2:	d101      	bne.n	8003ce8 <HAL_TIM_ConfigClockSource+0x1c>
 8003ce4:	2302      	movs	r3, #2
 8003ce6:	e0b6      	b.n	8003e56 <HAL_TIM_ConfigClockSource+0x18a>
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2201      	movs	r2, #1
 8003cec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2202      	movs	r2, #2
 8003cf4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	689b      	ldr	r3, [r3, #8]
 8003cfe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003d00:	68bb      	ldr	r3, [r7, #8]
 8003d02:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003d06:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003d0a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003d0c:	68bb      	ldr	r3, [r7, #8]
 8003d0e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003d12:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	68ba      	ldr	r2, [r7, #8]
 8003d1a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003d1c:	683b      	ldr	r3, [r7, #0]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003d24:	d03e      	beq.n	8003da4 <HAL_TIM_ConfigClockSource+0xd8>
 8003d26:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003d2a:	f200 8087 	bhi.w	8003e3c <HAL_TIM_ConfigClockSource+0x170>
 8003d2e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003d32:	f000 8086 	beq.w	8003e42 <HAL_TIM_ConfigClockSource+0x176>
 8003d36:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003d3a:	d87f      	bhi.n	8003e3c <HAL_TIM_ConfigClockSource+0x170>
 8003d3c:	2b70      	cmp	r3, #112	@ 0x70
 8003d3e:	d01a      	beq.n	8003d76 <HAL_TIM_ConfigClockSource+0xaa>
 8003d40:	2b70      	cmp	r3, #112	@ 0x70
 8003d42:	d87b      	bhi.n	8003e3c <HAL_TIM_ConfigClockSource+0x170>
 8003d44:	2b60      	cmp	r3, #96	@ 0x60
 8003d46:	d050      	beq.n	8003dea <HAL_TIM_ConfigClockSource+0x11e>
 8003d48:	2b60      	cmp	r3, #96	@ 0x60
 8003d4a:	d877      	bhi.n	8003e3c <HAL_TIM_ConfigClockSource+0x170>
 8003d4c:	2b50      	cmp	r3, #80	@ 0x50
 8003d4e:	d03c      	beq.n	8003dca <HAL_TIM_ConfigClockSource+0xfe>
 8003d50:	2b50      	cmp	r3, #80	@ 0x50
 8003d52:	d873      	bhi.n	8003e3c <HAL_TIM_ConfigClockSource+0x170>
 8003d54:	2b40      	cmp	r3, #64	@ 0x40
 8003d56:	d058      	beq.n	8003e0a <HAL_TIM_ConfigClockSource+0x13e>
 8003d58:	2b40      	cmp	r3, #64	@ 0x40
 8003d5a:	d86f      	bhi.n	8003e3c <HAL_TIM_ConfigClockSource+0x170>
 8003d5c:	2b30      	cmp	r3, #48	@ 0x30
 8003d5e:	d064      	beq.n	8003e2a <HAL_TIM_ConfigClockSource+0x15e>
 8003d60:	2b30      	cmp	r3, #48	@ 0x30
 8003d62:	d86b      	bhi.n	8003e3c <HAL_TIM_ConfigClockSource+0x170>
 8003d64:	2b20      	cmp	r3, #32
 8003d66:	d060      	beq.n	8003e2a <HAL_TIM_ConfigClockSource+0x15e>
 8003d68:	2b20      	cmp	r3, #32
 8003d6a:	d867      	bhi.n	8003e3c <HAL_TIM_ConfigClockSource+0x170>
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d05c      	beq.n	8003e2a <HAL_TIM_ConfigClockSource+0x15e>
 8003d70:	2b10      	cmp	r3, #16
 8003d72:	d05a      	beq.n	8003e2a <HAL_TIM_ConfigClockSource+0x15e>
 8003d74:	e062      	b.n	8003e3c <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003d7a:	683b      	ldr	r3, [r7, #0]
 8003d7c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003d7e:	683b      	ldr	r3, [r7, #0]
 8003d80:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003d82:	683b      	ldr	r3, [r7, #0]
 8003d84:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003d86:	f000 fc0f 	bl	80045a8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	689b      	ldr	r3, [r3, #8]
 8003d90:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003d92:	68bb      	ldr	r3, [r7, #8]
 8003d94:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003d98:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	68ba      	ldr	r2, [r7, #8]
 8003da0:	609a      	str	r2, [r3, #8]
      break;
 8003da2:	e04f      	b.n	8003e44 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003da8:	683b      	ldr	r3, [r7, #0]
 8003daa:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003dac:	683b      	ldr	r3, [r7, #0]
 8003dae:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003db4:	f000 fbf8 	bl	80045a8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	689a      	ldr	r2, [r3, #8]
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003dc6:	609a      	str	r2, [r3, #8]
      break;
 8003dc8:	e03c      	b.n	8003e44 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003dce:	683b      	ldr	r3, [r7, #0]
 8003dd0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003dd6:	461a      	mov	r2, r3
 8003dd8:	f000 fb6c 	bl	80044b4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	2150      	movs	r1, #80	@ 0x50
 8003de2:	4618      	mov	r0, r3
 8003de4:	f000 fbc5 	bl	8004572 <TIM_ITRx_SetConfig>
      break;
 8003de8:	e02c      	b.n	8003e44 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003dee:	683b      	ldr	r3, [r7, #0]
 8003df0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003df2:	683b      	ldr	r3, [r7, #0]
 8003df4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003df6:	461a      	mov	r2, r3
 8003df8:	f000 fb8b 	bl	8004512 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	2160      	movs	r1, #96	@ 0x60
 8003e02:	4618      	mov	r0, r3
 8003e04:	f000 fbb5 	bl	8004572 <TIM_ITRx_SetConfig>
      break;
 8003e08:	e01c      	b.n	8003e44 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003e0e:	683b      	ldr	r3, [r7, #0]
 8003e10:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003e12:	683b      	ldr	r3, [r7, #0]
 8003e14:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e16:	461a      	mov	r2, r3
 8003e18:	f000 fb4c 	bl	80044b4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	2140      	movs	r1, #64	@ 0x40
 8003e22:	4618      	mov	r0, r3
 8003e24:	f000 fba5 	bl	8004572 <TIM_ITRx_SetConfig>
      break;
 8003e28:	e00c      	b.n	8003e44 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681a      	ldr	r2, [r3, #0]
 8003e2e:	683b      	ldr	r3, [r7, #0]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	4619      	mov	r1, r3
 8003e34:	4610      	mov	r0, r2
 8003e36:	f000 fb9c 	bl	8004572 <TIM_ITRx_SetConfig>
      break;
 8003e3a:	e003      	b.n	8003e44 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8003e3c:	2301      	movs	r3, #1
 8003e3e:	73fb      	strb	r3, [r7, #15]
      break;
 8003e40:	e000      	b.n	8003e44 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8003e42:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2201      	movs	r2, #1
 8003e48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2200      	movs	r2, #0
 8003e50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003e54:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e56:	4618      	mov	r0, r3
 8003e58:	3710      	adds	r7, #16
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	bd80      	pop	{r7, pc}
	...

08003e60 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003e60:	b480      	push	{r7}
 8003e62:	b085      	sub	sp, #20
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	6078      	str	r0, [r7, #4]
 8003e68:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	4a38      	ldr	r2, [pc, #224]	@ (8003f54 <TIM_Base_SetConfig+0xf4>)
 8003e74:	4293      	cmp	r3, r2
 8003e76:	d007      	beq.n	8003e88 <TIM_Base_SetConfig+0x28>
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003e7e:	d003      	beq.n	8003e88 <TIM_Base_SetConfig+0x28>
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	4a35      	ldr	r2, [pc, #212]	@ (8003f58 <TIM_Base_SetConfig+0xf8>)
 8003e84:	4293      	cmp	r3, r2
 8003e86:	d108      	bne.n	8003e9a <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003e8e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003e90:	683b      	ldr	r3, [r7, #0]
 8003e92:	685b      	ldr	r3, [r3, #4]
 8003e94:	68fa      	ldr	r2, [r7, #12]
 8003e96:	4313      	orrs	r3, r2
 8003e98:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	4a2d      	ldr	r2, [pc, #180]	@ (8003f54 <TIM_Base_SetConfig+0xf4>)
 8003e9e:	4293      	cmp	r3, r2
 8003ea0:	d013      	beq.n	8003eca <TIM_Base_SetConfig+0x6a>
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003ea8:	d00f      	beq.n	8003eca <TIM_Base_SetConfig+0x6a>
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	4a2a      	ldr	r2, [pc, #168]	@ (8003f58 <TIM_Base_SetConfig+0xf8>)
 8003eae:	4293      	cmp	r3, r2
 8003eb0:	d00b      	beq.n	8003eca <TIM_Base_SetConfig+0x6a>
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	4a29      	ldr	r2, [pc, #164]	@ (8003f5c <TIM_Base_SetConfig+0xfc>)
 8003eb6:	4293      	cmp	r3, r2
 8003eb8:	d007      	beq.n	8003eca <TIM_Base_SetConfig+0x6a>
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	4a28      	ldr	r2, [pc, #160]	@ (8003f60 <TIM_Base_SetConfig+0x100>)
 8003ebe:	4293      	cmp	r3, r2
 8003ec0:	d003      	beq.n	8003eca <TIM_Base_SetConfig+0x6a>
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	4a27      	ldr	r2, [pc, #156]	@ (8003f64 <TIM_Base_SetConfig+0x104>)
 8003ec6:	4293      	cmp	r3, r2
 8003ec8:	d108      	bne.n	8003edc <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003ed0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003ed2:	683b      	ldr	r3, [r7, #0]
 8003ed4:	68db      	ldr	r3, [r3, #12]
 8003ed6:	68fa      	ldr	r2, [r7, #12]
 8003ed8:	4313      	orrs	r3, r2
 8003eda:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003ee2:	683b      	ldr	r3, [r7, #0]
 8003ee4:	695b      	ldr	r3, [r3, #20]
 8003ee6:	4313      	orrs	r3, r2
 8003ee8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	68fa      	ldr	r2, [r7, #12]
 8003eee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003ef0:	683b      	ldr	r3, [r7, #0]
 8003ef2:	689a      	ldr	r2, [r3, #8]
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003ef8:	683b      	ldr	r3, [r7, #0]
 8003efa:	681a      	ldr	r2, [r3, #0]
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	4a14      	ldr	r2, [pc, #80]	@ (8003f54 <TIM_Base_SetConfig+0xf4>)
 8003f04:	4293      	cmp	r3, r2
 8003f06:	d00b      	beq.n	8003f20 <TIM_Base_SetConfig+0xc0>
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	4a14      	ldr	r2, [pc, #80]	@ (8003f5c <TIM_Base_SetConfig+0xfc>)
 8003f0c:	4293      	cmp	r3, r2
 8003f0e:	d007      	beq.n	8003f20 <TIM_Base_SetConfig+0xc0>
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	4a13      	ldr	r2, [pc, #76]	@ (8003f60 <TIM_Base_SetConfig+0x100>)
 8003f14:	4293      	cmp	r3, r2
 8003f16:	d003      	beq.n	8003f20 <TIM_Base_SetConfig+0xc0>
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	4a12      	ldr	r2, [pc, #72]	@ (8003f64 <TIM_Base_SetConfig+0x104>)
 8003f1c:	4293      	cmp	r3, r2
 8003f1e:	d103      	bne.n	8003f28 <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003f20:	683b      	ldr	r3, [r7, #0]
 8003f22:	691a      	ldr	r2, [r3, #16]
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	2201      	movs	r2, #1
 8003f2c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	691b      	ldr	r3, [r3, #16]
 8003f32:	f003 0301 	and.w	r3, r3, #1
 8003f36:	2b01      	cmp	r3, #1
 8003f38:	d105      	bne.n	8003f46 <TIM_Base_SetConfig+0xe6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	691b      	ldr	r3, [r3, #16]
 8003f3e:	f023 0201 	bic.w	r2, r3, #1
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	611a      	str	r2, [r3, #16]
  }
}
 8003f46:	bf00      	nop
 8003f48:	3714      	adds	r7, #20
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f50:	4770      	bx	lr
 8003f52:	bf00      	nop
 8003f54:	40012c00 	.word	0x40012c00
 8003f58:	40000400 	.word	0x40000400
 8003f5c:	40014000 	.word	0x40014000
 8003f60:	40014400 	.word	0x40014400
 8003f64:	40014800 	.word	0x40014800

08003f68 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003f68:	b480      	push	{r7}
 8003f6a:	b087      	sub	sp, #28
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	6078      	str	r0, [r7, #4]
 8003f70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6a1b      	ldr	r3, [r3, #32]
 8003f76:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	6a1b      	ldr	r3, [r3, #32]
 8003f7c:	f023 0201 	bic.w	r2, r3, #1
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	685b      	ldr	r3, [r3, #4]
 8003f88:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	699b      	ldr	r3, [r3, #24]
 8003f8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003f96:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003f9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	f023 0303 	bic.w	r3, r3, #3
 8003fa2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003fa4:	683b      	ldr	r3, [r7, #0]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	68fa      	ldr	r2, [r7, #12]
 8003faa:	4313      	orrs	r3, r2
 8003fac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003fae:	697b      	ldr	r3, [r7, #20]
 8003fb0:	f023 0302 	bic.w	r3, r3, #2
 8003fb4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003fb6:	683b      	ldr	r3, [r7, #0]
 8003fb8:	689b      	ldr	r3, [r3, #8]
 8003fba:	697a      	ldr	r2, [r7, #20]
 8003fbc:	4313      	orrs	r3, r2
 8003fbe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	4a28      	ldr	r2, [pc, #160]	@ (8004064 <TIM_OC1_SetConfig+0xfc>)
 8003fc4:	4293      	cmp	r3, r2
 8003fc6:	d00b      	beq.n	8003fe0 <TIM_OC1_SetConfig+0x78>
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	4a27      	ldr	r2, [pc, #156]	@ (8004068 <TIM_OC1_SetConfig+0x100>)
 8003fcc:	4293      	cmp	r3, r2
 8003fce:	d007      	beq.n	8003fe0 <TIM_OC1_SetConfig+0x78>
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	4a26      	ldr	r2, [pc, #152]	@ (800406c <TIM_OC1_SetConfig+0x104>)
 8003fd4:	4293      	cmp	r3, r2
 8003fd6:	d003      	beq.n	8003fe0 <TIM_OC1_SetConfig+0x78>
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	4a25      	ldr	r2, [pc, #148]	@ (8004070 <TIM_OC1_SetConfig+0x108>)
 8003fdc:	4293      	cmp	r3, r2
 8003fde:	d10c      	bne.n	8003ffa <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003fe0:	697b      	ldr	r3, [r7, #20]
 8003fe2:	f023 0308 	bic.w	r3, r3, #8
 8003fe6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003fe8:	683b      	ldr	r3, [r7, #0]
 8003fea:	68db      	ldr	r3, [r3, #12]
 8003fec:	697a      	ldr	r2, [r7, #20]
 8003fee:	4313      	orrs	r3, r2
 8003ff0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003ff2:	697b      	ldr	r3, [r7, #20]
 8003ff4:	f023 0304 	bic.w	r3, r3, #4
 8003ff8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	4a19      	ldr	r2, [pc, #100]	@ (8004064 <TIM_OC1_SetConfig+0xfc>)
 8003ffe:	4293      	cmp	r3, r2
 8004000:	d00b      	beq.n	800401a <TIM_OC1_SetConfig+0xb2>
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	4a18      	ldr	r2, [pc, #96]	@ (8004068 <TIM_OC1_SetConfig+0x100>)
 8004006:	4293      	cmp	r3, r2
 8004008:	d007      	beq.n	800401a <TIM_OC1_SetConfig+0xb2>
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	4a17      	ldr	r2, [pc, #92]	@ (800406c <TIM_OC1_SetConfig+0x104>)
 800400e:	4293      	cmp	r3, r2
 8004010:	d003      	beq.n	800401a <TIM_OC1_SetConfig+0xb2>
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	4a16      	ldr	r2, [pc, #88]	@ (8004070 <TIM_OC1_SetConfig+0x108>)
 8004016:	4293      	cmp	r3, r2
 8004018:	d111      	bne.n	800403e <TIM_OC1_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800401a:	693b      	ldr	r3, [r7, #16]
 800401c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004020:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004022:	693b      	ldr	r3, [r7, #16]
 8004024:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004028:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800402a:	683b      	ldr	r3, [r7, #0]
 800402c:	695b      	ldr	r3, [r3, #20]
 800402e:	693a      	ldr	r2, [r7, #16]
 8004030:	4313      	orrs	r3, r2
 8004032:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004034:	683b      	ldr	r3, [r7, #0]
 8004036:	699b      	ldr	r3, [r3, #24]
 8004038:	693a      	ldr	r2, [r7, #16]
 800403a:	4313      	orrs	r3, r2
 800403c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	693a      	ldr	r2, [r7, #16]
 8004042:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	68fa      	ldr	r2, [r7, #12]
 8004048:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800404a:	683b      	ldr	r3, [r7, #0]
 800404c:	685a      	ldr	r2, [r3, #4]
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	697a      	ldr	r2, [r7, #20]
 8004056:	621a      	str	r2, [r3, #32]
}
 8004058:	bf00      	nop
 800405a:	371c      	adds	r7, #28
 800405c:	46bd      	mov	sp, r7
 800405e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004062:	4770      	bx	lr
 8004064:	40012c00 	.word	0x40012c00
 8004068:	40014000 	.word	0x40014000
 800406c:	40014400 	.word	0x40014400
 8004070:	40014800 	.word	0x40014800

08004074 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004074:	b480      	push	{r7}
 8004076:	b087      	sub	sp, #28
 8004078:	af00      	add	r7, sp, #0
 800407a:	6078      	str	r0, [r7, #4]
 800407c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6a1b      	ldr	r3, [r3, #32]
 8004082:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	6a1b      	ldr	r3, [r3, #32]
 8004088:	f023 0210 	bic.w	r2, r3, #16
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	685b      	ldr	r3, [r3, #4]
 8004094:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	699b      	ldr	r3, [r3, #24]
 800409a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80040a2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80040a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80040ae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80040b0:	683b      	ldr	r3, [r7, #0]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	021b      	lsls	r3, r3, #8
 80040b6:	68fa      	ldr	r2, [r7, #12]
 80040b8:	4313      	orrs	r3, r2
 80040ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80040bc:	697b      	ldr	r3, [r7, #20]
 80040be:	f023 0320 	bic.w	r3, r3, #32
 80040c2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	689b      	ldr	r3, [r3, #8]
 80040c8:	011b      	lsls	r3, r3, #4
 80040ca:	697a      	ldr	r2, [r7, #20]
 80040cc:	4313      	orrs	r3, r2
 80040ce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	4a24      	ldr	r2, [pc, #144]	@ (8004164 <TIM_OC2_SetConfig+0xf0>)
 80040d4:	4293      	cmp	r3, r2
 80040d6:	d10d      	bne.n	80040f4 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80040d8:	697b      	ldr	r3, [r7, #20]
 80040da:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80040de:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	68db      	ldr	r3, [r3, #12]
 80040e4:	011b      	lsls	r3, r3, #4
 80040e6:	697a      	ldr	r2, [r7, #20]
 80040e8:	4313      	orrs	r3, r2
 80040ea:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80040ec:	697b      	ldr	r3, [r7, #20]
 80040ee:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80040f2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	4a1b      	ldr	r2, [pc, #108]	@ (8004164 <TIM_OC2_SetConfig+0xf0>)
 80040f8:	4293      	cmp	r3, r2
 80040fa:	d00b      	beq.n	8004114 <TIM_OC2_SetConfig+0xa0>
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	4a1a      	ldr	r2, [pc, #104]	@ (8004168 <TIM_OC2_SetConfig+0xf4>)
 8004100:	4293      	cmp	r3, r2
 8004102:	d007      	beq.n	8004114 <TIM_OC2_SetConfig+0xa0>
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	4a19      	ldr	r2, [pc, #100]	@ (800416c <TIM_OC2_SetConfig+0xf8>)
 8004108:	4293      	cmp	r3, r2
 800410a:	d003      	beq.n	8004114 <TIM_OC2_SetConfig+0xa0>
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	4a18      	ldr	r2, [pc, #96]	@ (8004170 <TIM_OC2_SetConfig+0xfc>)
 8004110:	4293      	cmp	r3, r2
 8004112:	d113      	bne.n	800413c <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004114:	693b      	ldr	r3, [r7, #16]
 8004116:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800411a:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800411c:	693b      	ldr	r3, [r7, #16]
 800411e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004122:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004124:	683b      	ldr	r3, [r7, #0]
 8004126:	695b      	ldr	r3, [r3, #20]
 8004128:	009b      	lsls	r3, r3, #2
 800412a:	693a      	ldr	r2, [r7, #16]
 800412c:	4313      	orrs	r3, r2
 800412e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004130:	683b      	ldr	r3, [r7, #0]
 8004132:	699b      	ldr	r3, [r3, #24]
 8004134:	009b      	lsls	r3, r3, #2
 8004136:	693a      	ldr	r2, [r7, #16]
 8004138:	4313      	orrs	r3, r2
 800413a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	693a      	ldr	r2, [r7, #16]
 8004140:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	68fa      	ldr	r2, [r7, #12]
 8004146:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	685a      	ldr	r2, [r3, #4]
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	697a      	ldr	r2, [r7, #20]
 8004154:	621a      	str	r2, [r3, #32]
}
 8004156:	bf00      	nop
 8004158:	371c      	adds	r7, #28
 800415a:	46bd      	mov	sp, r7
 800415c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004160:	4770      	bx	lr
 8004162:	bf00      	nop
 8004164:	40012c00 	.word	0x40012c00
 8004168:	40014000 	.word	0x40014000
 800416c:	40014400 	.word	0x40014400
 8004170:	40014800 	.word	0x40014800

08004174 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004174:	b480      	push	{r7}
 8004176:	b087      	sub	sp, #28
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
 800417c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6a1b      	ldr	r3, [r3, #32]
 8004182:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	6a1b      	ldr	r3, [r3, #32]
 8004188:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	685b      	ldr	r3, [r3, #4]
 8004194:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	69db      	ldr	r3, [r3, #28]
 800419a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80041a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80041a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	f023 0303 	bic.w	r3, r3, #3
 80041ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80041b0:	683b      	ldr	r3, [r7, #0]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	68fa      	ldr	r2, [r7, #12]
 80041b6:	4313      	orrs	r3, r2
 80041b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80041ba:	697b      	ldr	r3, [r7, #20]
 80041bc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80041c0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80041c2:	683b      	ldr	r3, [r7, #0]
 80041c4:	689b      	ldr	r3, [r3, #8]
 80041c6:	021b      	lsls	r3, r3, #8
 80041c8:	697a      	ldr	r2, [r7, #20]
 80041ca:	4313      	orrs	r3, r2
 80041cc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	4a23      	ldr	r2, [pc, #140]	@ (8004260 <TIM_OC3_SetConfig+0xec>)
 80041d2:	4293      	cmp	r3, r2
 80041d4:	d10d      	bne.n	80041f2 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80041d6:	697b      	ldr	r3, [r7, #20]
 80041d8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80041dc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80041de:	683b      	ldr	r3, [r7, #0]
 80041e0:	68db      	ldr	r3, [r3, #12]
 80041e2:	021b      	lsls	r3, r3, #8
 80041e4:	697a      	ldr	r2, [r7, #20]
 80041e6:	4313      	orrs	r3, r2
 80041e8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80041ea:	697b      	ldr	r3, [r7, #20]
 80041ec:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80041f0:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	4a1a      	ldr	r2, [pc, #104]	@ (8004260 <TIM_OC3_SetConfig+0xec>)
 80041f6:	4293      	cmp	r3, r2
 80041f8:	d00b      	beq.n	8004212 <TIM_OC3_SetConfig+0x9e>
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	4a19      	ldr	r2, [pc, #100]	@ (8004264 <TIM_OC3_SetConfig+0xf0>)
 80041fe:	4293      	cmp	r3, r2
 8004200:	d007      	beq.n	8004212 <TIM_OC3_SetConfig+0x9e>
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	4a18      	ldr	r2, [pc, #96]	@ (8004268 <TIM_OC3_SetConfig+0xf4>)
 8004206:	4293      	cmp	r3, r2
 8004208:	d003      	beq.n	8004212 <TIM_OC3_SetConfig+0x9e>
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	4a17      	ldr	r2, [pc, #92]	@ (800426c <TIM_OC3_SetConfig+0xf8>)
 800420e:	4293      	cmp	r3, r2
 8004210:	d113      	bne.n	800423a <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004212:	693b      	ldr	r3, [r7, #16]
 8004214:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004218:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800421a:	693b      	ldr	r3, [r7, #16]
 800421c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004220:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004222:	683b      	ldr	r3, [r7, #0]
 8004224:	695b      	ldr	r3, [r3, #20]
 8004226:	011b      	lsls	r3, r3, #4
 8004228:	693a      	ldr	r2, [r7, #16]
 800422a:	4313      	orrs	r3, r2
 800422c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800422e:	683b      	ldr	r3, [r7, #0]
 8004230:	699b      	ldr	r3, [r3, #24]
 8004232:	011b      	lsls	r3, r3, #4
 8004234:	693a      	ldr	r2, [r7, #16]
 8004236:	4313      	orrs	r3, r2
 8004238:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	693a      	ldr	r2, [r7, #16]
 800423e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	68fa      	ldr	r2, [r7, #12]
 8004244:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004246:	683b      	ldr	r3, [r7, #0]
 8004248:	685a      	ldr	r2, [r3, #4]
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	697a      	ldr	r2, [r7, #20]
 8004252:	621a      	str	r2, [r3, #32]
}
 8004254:	bf00      	nop
 8004256:	371c      	adds	r7, #28
 8004258:	46bd      	mov	sp, r7
 800425a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425e:	4770      	bx	lr
 8004260:	40012c00 	.word	0x40012c00
 8004264:	40014000 	.word	0x40014000
 8004268:	40014400 	.word	0x40014400
 800426c:	40014800 	.word	0x40014800

08004270 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004270:	b480      	push	{r7}
 8004272:	b087      	sub	sp, #28
 8004274:	af00      	add	r7, sp, #0
 8004276:	6078      	str	r0, [r7, #4]
 8004278:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	6a1b      	ldr	r3, [r3, #32]
 800427e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	6a1b      	ldr	r3, [r3, #32]
 8004284:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	685b      	ldr	r3, [r3, #4]
 8004290:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	69db      	ldr	r3, [r3, #28]
 8004296:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800429e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80042a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80042aa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80042ac:	683b      	ldr	r3, [r7, #0]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	021b      	lsls	r3, r3, #8
 80042b2:	68fa      	ldr	r2, [r7, #12]
 80042b4:	4313      	orrs	r3, r2
 80042b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80042b8:	693b      	ldr	r3, [r7, #16]
 80042ba:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80042be:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80042c0:	683b      	ldr	r3, [r7, #0]
 80042c2:	689b      	ldr	r3, [r3, #8]
 80042c4:	031b      	lsls	r3, r3, #12
 80042c6:	693a      	ldr	r2, [r7, #16]
 80042c8:	4313      	orrs	r3, r2
 80042ca:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	4a16      	ldr	r2, [pc, #88]	@ (8004328 <TIM_OC4_SetConfig+0xb8>)
 80042d0:	4293      	cmp	r3, r2
 80042d2:	d00b      	beq.n	80042ec <TIM_OC4_SetConfig+0x7c>
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	4a15      	ldr	r2, [pc, #84]	@ (800432c <TIM_OC4_SetConfig+0xbc>)
 80042d8:	4293      	cmp	r3, r2
 80042da:	d007      	beq.n	80042ec <TIM_OC4_SetConfig+0x7c>
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	4a14      	ldr	r2, [pc, #80]	@ (8004330 <TIM_OC4_SetConfig+0xc0>)
 80042e0:	4293      	cmp	r3, r2
 80042e2:	d003      	beq.n	80042ec <TIM_OC4_SetConfig+0x7c>
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	4a13      	ldr	r2, [pc, #76]	@ (8004334 <TIM_OC4_SetConfig+0xc4>)
 80042e8:	4293      	cmp	r3, r2
 80042ea:	d109      	bne.n	8004300 <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80042ec:	697b      	ldr	r3, [r7, #20]
 80042ee:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80042f2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80042f4:	683b      	ldr	r3, [r7, #0]
 80042f6:	695b      	ldr	r3, [r3, #20]
 80042f8:	019b      	lsls	r3, r3, #6
 80042fa:	697a      	ldr	r2, [r7, #20]
 80042fc:	4313      	orrs	r3, r2
 80042fe:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	697a      	ldr	r2, [r7, #20]
 8004304:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	68fa      	ldr	r2, [r7, #12]
 800430a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800430c:	683b      	ldr	r3, [r7, #0]
 800430e:	685a      	ldr	r2, [r3, #4]
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	693a      	ldr	r2, [r7, #16]
 8004318:	621a      	str	r2, [r3, #32]
}
 800431a:	bf00      	nop
 800431c:	371c      	adds	r7, #28
 800431e:	46bd      	mov	sp, r7
 8004320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004324:	4770      	bx	lr
 8004326:	bf00      	nop
 8004328:	40012c00 	.word	0x40012c00
 800432c:	40014000 	.word	0x40014000
 8004330:	40014400 	.word	0x40014400
 8004334:	40014800 	.word	0x40014800

08004338 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004338:	b480      	push	{r7}
 800433a:	b087      	sub	sp, #28
 800433c:	af00      	add	r7, sp, #0
 800433e:	6078      	str	r0, [r7, #4]
 8004340:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	6a1b      	ldr	r3, [r3, #32]
 8004346:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	6a1b      	ldr	r3, [r3, #32]
 800434c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	685b      	ldr	r3, [r3, #4]
 8004358:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800435e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004366:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800436a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800436c:	683b      	ldr	r3, [r7, #0]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	68fa      	ldr	r2, [r7, #12]
 8004372:	4313      	orrs	r3, r2
 8004374:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004376:	693b      	ldr	r3, [r7, #16]
 8004378:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800437c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800437e:	683b      	ldr	r3, [r7, #0]
 8004380:	689b      	ldr	r3, [r3, #8]
 8004382:	041b      	lsls	r3, r3, #16
 8004384:	693a      	ldr	r2, [r7, #16]
 8004386:	4313      	orrs	r3, r2
 8004388:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	4a15      	ldr	r2, [pc, #84]	@ (80043e4 <TIM_OC5_SetConfig+0xac>)
 800438e:	4293      	cmp	r3, r2
 8004390:	d00b      	beq.n	80043aa <TIM_OC5_SetConfig+0x72>
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	4a14      	ldr	r2, [pc, #80]	@ (80043e8 <TIM_OC5_SetConfig+0xb0>)
 8004396:	4293      	cmp	r3, r2
 8004398:	d007      	beq.n	80043aa <TIM_OC5_SetConfig+0x72>
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	4a13      	ldr	r2, [pc, #76]	@ (80043ec <TIM_OC5_SetConfig+0xb4>)
 800439e:	4293      	cmp	r3, r2
 80043a0:	d003      	beq.n	80043aa <TIM_OC5_SetConfig+0x72>
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	4a12      	ldr	r2, [pc, #72]	@ (80043f0 <TIM_OC5_SetConfig+0xb8>)
 80043a6:	4293      	cmp	r3, r2
 80043a8:	d109      	bne.n	80043be <TIM_OC5_SetConfig+0x86>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80043aa:	697b      	ldr	r3, [r7, #20]
 80043ac:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80043b0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80043b2:	683b      	ldr	r3, [r7, #0]
 80043b4:	695b      	ldr	r3, [r3, #20]
 80043b6:	021b      	lsls	r3, r3, #8
 80043b8:	697a      	ldr	r2, [r7, #20]
 80043ba:	4313      	orrs	r3, r2
 80043bc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	697a      	ldr	r2, [r7, #20]
 80043c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	68fa      	ldr	r2, [r7, #12]
 80043c8:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80043ca:	683b      	ldr	r3, [r7, #0]
 80043cc:	685a      	ldr	r2, [r3, #4]
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	693a      	ldr	r2, [r7, #16]
 80043d6:	621a      	str	r2, [r3, #32]
}
 80043d8:	bf00      	nop
 80043da:	371c      	adds	r7, #28
 80043dc:	46bd      	mov	sp, r7
 80043de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e2:	4770      	bx	lr
 80043e4:	40012c00 	.word	0x40012c00
 80043e8:	40014000 	.word	0x40014000
 80043ec:	40014400 	.word	0x40014400
 80043f0:	40014800 	.word	0x40014800

080043f4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80043f4:	b480      	push	{r7}
 80043f6:	b087      	sub	sp, #28
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	6078      	str	r0, [r7, #4]
 80043fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	6a1b      	ldr	r3, [r3, #32]
 8004402:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	6a1b      	ldr	r3, [r3, #32]
 8004408:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	685b      	ldr	r3, [r3, #4]
 8004414:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800441a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004422:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004426:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004428:	683b      	ldr	r3, [r7, #0]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	021b      	lsls	r3, r3, #8
 800442e:	68fa      	ldr	r2, [r7, #12]
 8004430:	4313      	orrs	r3, r2
 8004432:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004434:	693b      	ldr	r3, [r7, #16]
 8004436:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800443a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800443c:	683b      	ldr	r3, [r7, #0]
 800443e:	689b      	ldr	r3, [r3, #8]
 8004440:	051b      	lsls	r3, r3, #20
 8004442:	693a      	ldr	r2, [r7, #16]
 8004444:	4313      	orrs	r3, r2
 8004446:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	4a16      	ldr	r2, [pc, #88]	@ (80044a4 <TIM_OC6_SetConfig+0xb0>)
 800444c:	4293      	cmp	r3, r2
 800444e:	d00b      	beq.n	8004468 <TIM_OC6_SetConfig+0x74>
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	4a15      	ldr	r2, [pc, #84]	@ (80044a8 <TIM_OC6_SetConfig+0xb4>)
 8004454:	4293      	cmp	r3, r2
 8004456:	d007      	beq.n	8004468 <TIM_OC6_SetConfig+0x74>
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	4a14      	ldr	r2, [pc, #80]	@ (80044ac <TIM_OC6_SetConfig+0xb8>)
 800445c:	4293      	cmp	r3, r2
 800445e:	d003      	beq.n	8004468 <TIM_OC6_SetConfig+0x74>
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	4a13      	ldr	r2, [pc, #76]	@ (80044b0 <TIM_OC6_SetConfig+0xbc>)
 8004464:	4293      	cmp	r3, r2
 8004466:	d109      	bne.n	800447c <TIM_OC6_SetConfig+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004468:	697b      	ldr	r3, [r7, #20]
 800446a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800446e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004470:	683b      	ldr	r3, [r7, #0]
 8004472:	695b      	ldr	r3, [r3, #20]
 8004474:	029b      	lsls	r3, r3, #10
 8004476:	697a      	ldr	r2, [r7, #20]
 8004478:	4313      	orrs	r3, r2
 800447a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	697a      	ldr	r2, [r7, #20]
 8004480:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	68fa      	ldr	r2, [r7, #12]
 8004486:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004488:	683b      	ldr	r3, [r7, #0]
 800448a:	685a      	ldr	r2, [r3, #4]
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	693a      	ldr	r2, [r7, #16]
 8004494:	621a      	str	r2, [r3, #32]
}
 8004496:	bf00      	nop
 8004498:	371c      	adds	r7, #28
 800449a:	46bd      	mov	sp, r7
 800449c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a0:	4770      	bx	lr
 80044a2:	bf00      	nop
 80044a4:	40012c00 	.word	0x40012c00
 80044a8:	40014000 	.word	0x40014000
 80044ac:	40014400 	.word	0x40014400
 80044b0:	40014800 	.word	0x40014800

080044b4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80044b4:	b480      	push	{r7}
 80044b6:	b087      	sub	sp, #28
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	60f8      	str	r0, [r7, #12]
 80044bc:	60b9      	str	r1, [r7, #8]
 80044be:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	6a1b      	ldr	r3, [r3, #32]
 80044c4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	6a1b      	ldr	r3, [r3, #32]
 80044ca:	f023 0201 	bic.w	r2, r3, #1
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	699b      	ldr	r3, [r3, #24]
 80044d6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80044d8:	693b      	ldr	r3, [r7, #16]
 80044da:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80044de:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	011b      	lsls	r3, r3, #4
 80044e4:	693a      	ldr	r2, [r7, #16]
 80044e6:	4313      	orrs	r3, r2
 80044e8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80044ea:	697b      	ldr	r3, [r7, #20]
 80044ec:	f023 030a 	bic.w	r3, r3, #10
 80044f0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80044f2:	697a      	ldr	r2, [r7, #20]
 80044f4:	68bb      	ldr	r3, [r7, #8]
 80044f6:	4313      	orrs	r3, r2
 80044f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	693a      	ldr	r2, [r7, #16]
 80044fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	697a      	ldr	r2, [r7, #20]
 8004504:	621a      	str	r2, [r3, #32]
}
 8004506:	bf00      	nop
 8004508:	371c      	adds	r7, #28
 800450a:	46bd      	mov	sp, r7
 800450c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004510:	4770      	bx	lr

08004512 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004512:	b480      	push	{r7}
 8004514:	b087      	sub	sp, #28
 8004516:	af00      	add	r7, sp, #0
 8004518:	60f8      	str	r0, [r7, #12]
 800451a:	60b9      	str	r1, [r7, #8]
 800451c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	6a1b      	ldr	r3, [r3, #32]
 8004522:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	6a1b      	ldr	r3, [r3, #32]
 8004528:	f023 0210 	bic.w	r2, r3, #16
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	699b      	ldr	r3, [r3, #24]
 8004534:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004536:	693b      	ldr	r3, [r7, #16]
 8004538:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800453c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	031b      	lsls	r3, r3, #12
 8004542:	693a      	ldr	r2, [r7, #16]
 8004544:	4313      	orrs	r3, r2
 8004546:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004548:	697b      	ldr	r3, [r7, #20]
 800454a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800454e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004550:	68bb      	ldr	r3, [r7, #8]
 8004552:	011b      	lsls	r3, r3, #4
 8004554:	697a      	ldr	r2, [r7, #20]
 8004556:	4313      	orrs	r3, r2
 8004558:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	693a      	ldr	r2, [r7, #16]
 800455e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	697a      	ldr	r2, [r7, #20]
 8004564:	621a      	str	r2, [r3, #32]
}
 8004566:	bf00      	nop
 8004568:	371c      	adds	r7, #28
 800456a:	46bd      	mov	sp, r7
 800456c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004570:	4770      	bx	lr

08004572 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004572:	b480      	push	{r7}
 8004574:	b085      	sub	sp, #20
 8004576:	af00      	add	r7, sp, #0
 8004578:	6078      	str	r0, [r7, #4]
 800457a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	689b      	ldr	r3, [r3, #8]
 8004580:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004588:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800458a:	683a      	ldr	r2, [r7, #0]
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	4313      	orrs	r3, r2
 8004590:	f043 0307 	orr.w	r3, r3, #7
 8004594:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	68fa      	ldr	r2, [r7, #12]
 800459a:	609a      	str	r2, [r3, #8]
}
 800459c:	bf00      	nop
 800459e:	3714      	adds	r7, #20
 80045a0:	46bd      	mov	sp, r7
 80045a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a6:	4770      	bx	lr

080045a8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80045a8:	b480      	push	{r7}
 80045aa:	b087      	sub	sp, #28
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	60f8      	str	r0, [r7, #12]
 80045b0:	60b9      	str	r1, [r7, #8]
 80045b2:	607a      	str	r2, [r7, #4]
 80045b4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	689b      	ldr	r3, [r3, #8]
 80045ba:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80045bc:	697b      	ldr	r3, [r7, #20]
 80045be:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80045c2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80045c4:	683b      	ldr	r3, [r7, #0]
 80045c6:	021a      	lsls	r2, r3, #8
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	431a      	orrs	r2, r3
 80045cc:	68bb      	ldr	r3, [r7, #8]
 80045ce:	4313      	orrs	r3, r2
 80045d0:	697a      	ldr	r2, [r7, #20]
 80045d2:	4313      	orrs	r3, r2
 80045d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	697a      	ldr	r2, [r7, #20]
 80045da:	609a      	str	r2, [r3, #8]
}
 80045dc:	bf00      	nop
 80045de:	371c      	adds	r7, #28
 80045e0:	46bd      	mov	sp, r7
 80045e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e6:	4770      	bx	lr

080045e8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80045e8:	b480      	push	{r7}
 80045ea:	b087      	sub	sp, #28
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	60f8      	str	r0, [r7, #12]
 80045f0:	60b9      	str	r1, [r7, #8]
 80045f2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80045f4:	68bb      	ldr	r3, [r7, #8]
 80045f6:	f003 031f 	and.w	r3, r3, #31
 80045fa:	2201      	movs	r2, #1
 80045fc:	fa02 f303 	lsl.w	r3, r2, r3
 8004600:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	6a1a      	ldr	r2, [r3, #32]
 8004606:	697b      	ldr	r3, [r7, #20]
 8004608:	43db      	mvns	r3, r3
 800460a:	401a      	ands	r2, r3
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	6a1a      	ldr	r2, [r3, #32]
 8004614:	68bb      	ldr	r3, [r7, #8]
 8004616:	f003 031f 	and.w	r3, r3, #31
 800461a:	6879      	ldr	r1, [r7, #4]
 800461c:	fa01 f303 	lsl.w	r3, r1, r3
 8004620:	431a      	orrs	r2, r3
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	621a      	str	r2, [r3, #32]
}
 8004626:	bf00      	nop
 8004628:	371c      	adds	r7, #28
 800462a:	46bd      	mov	sp, r7
 800462c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004630:	4770      	bx	lr
	...

08004634 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004634:	b480      	push	{r7}
 8004636:	b085      	sub	sp, #20
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]
 800463c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004644:	2b01      	cmp	r3, #1
 8004646:	d101      	bne.n	800464c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004648:	2302      	movs	r3, #2
 800464a:	e054      	b.n	80046f6 <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2201      	movs	r2, #1
 8004650:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2202      	movs	r2, #2
 8004658:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	685b      	ldr	r3, [r3, #4]
 8004662:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	689b      	ldr	r3, [r3, #8]
 800466a:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	4a24      	ldr	r2, [pc, #144]	@ (8004704 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004672:	4293      	cmp	r3, r2
 8004674:	d108      	bne.n	8004688 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800467c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800467e:	683b      	ldr	r3, [r7, #0]
 8004680:	685b      	ldr	r3, [r3, #4]
 8004682:	68fa      	ldr	r2, [r7, #12]
 8004684:	4313      	orrs	r3, r2
 8004686:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800468e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004690:	683b      	ldr	r3, [r7, #0]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	68fa      	ldr	r2, [r7, #12]
 8004696:	4313      	orrs	r3, r2
 8004698:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	68fa      	ldr	r2, [r7, #12]
 80046a0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	4a17      	ldr	r2, [pc, #92]	@ (8004704 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80046a8:	4293      	cmp	r3, r2
 80046aa:	d00e      	beq.n	80046ca <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80046b4:	d009      	beq.n	80046ca <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	4a13      	ldr	r2, [pc, #76]	@ (8004708 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80046bc:	4293      	cmp	r3, r2
 80046be:	d004      	beq.n	80046ca <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	4a11      	ldr	r2, [pc, #68]	@ (800470c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80046c6:	4293      	cmp	r3, r2
 80046c8:	d10c      	bne.n	80046e4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80046ca:	68bb      	ldr	r3, [r7, #8]
 80046cc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80046d0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80046d2:	683b      	ldr	r3, [r7, #0]
 80046d4:	689b      	ldr	r3, [r3, #8]
 80046d6:	68ba      	ldr	r2, [r7, #8]
 80046d8:	4313      	orrs	r3, r2
 80046da:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	68ba      	ldr	r2, [r7, #8]
 80046e2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2201      	movs	r2, #1
 80046e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2200      	movs	r2, #0
 80046f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80046f4:	2300      	movs	r3, #0
}
 80046f6:	4618      	mov	r0, r3
 80046f8:	3714      	adds	r7, #20
 80046fa:	46bd      	mov	sp, r7
 80046fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004700:	4770      	bx	lr
 8004702:	bf00      	nop
 8004704:	40012c00 	.word	0x40012c00
 8004708:	40000400 	.word	0x40000400
 800470c:	40014000 	.word	0x40014000

08004710 <HAL_MultiProcessor_Init>:
  *        HAL_MultiProcessorEx_AddressLength_Set() must be called after
  *        HAL_MultiProcessor_Init().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MultiProcessor_Init(UART_HandleTypeDef *huart, uint8_t Address, uint32_t WakeUpMethod)
{
 8004710:	b580      	push	{r7, lr}
 8004712:	b084      	sub	sp, #16
 8004714:	af00      	add	r7, sp, #0
 8004716:	60f8      	str	r0, [r7, #12]
 8004718:	460b      	mov	r3, r1
 800471a:	607a      	str	r2, [r7, #4]
 800471c:	72fb      	strb	r3, [r7, #11]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	2b00      	cmp	r3, #0
 8004722:	d101      	bne.n	8004728 <HAL_MultiProcessor_Init+0x18>
  {
    return HAL_ERROR;
 8004724:	2301      	movs	r3, #1
 8004726:	e059      	b.n	80047dc <HAL_MultiProcessor_Init+0xcc>
  }

  /* Check the wake up method parameter */
  assert_param(IS_UART_WAKEUPMETHOD(WakeUpMethod));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800472c:	2b00      	cmp	r3, #0
 800472e:	d106      	bne.n	800473e <HAL_MultiProcessor_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	2200      	movs	r2, #0
 8004734:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004738:	68f8      	ldr	r0, [r7, #12]
 800473a:	f7fc fda1 	bl	8001280 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	2224      	movs	r2, #36	@ 0x24
 8004742:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	681a      	ldr	r2, [r3, #0]
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f022 0201 	bic.w	r2, r2, #1
 8004752:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004758:	2b00      	cmp	r3, #0
 800475a:	d002      	beq.n	8004762 <HAL_MultiProcessor_Init+0x52>
  {
    UART_AdvFeatureConfig(huart);
 800475c:	68f8      	ldr	r0, [r7, #12]
 800475e:	f000 fd07 	bl	8005170 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004762:	68f8      	ldr	r0, [r7, #12]
 8004764:	f000 fbce 	bl	8004f04 <UART_SetConfig>
 8004768:	4603      	mov	r3, r0
 800476a:	2b01      	cmp	r3, #1
 800476c:	d101      	bne.n	8004772 <HAL_MultiProcessor_Init+0x62>
  {
    return HAL_ERROR;
 800476e:	2301      	movs	r3, #1
 8004770:	e034      	b.n	80047dc <HAL_MultiProcessor_Init+0xcc>
  }

  /* In multiprocessor mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register. */
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	685a      	ldr	r2, [r3, #4]
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004780:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	689a      	ldr	r2, [r3, #8]
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004790:	609a      	str	r2, [r3, #8]

  if (WakeUpMethod == UART_WAKEUPMETHOD_ADDRESSMARK)
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004798:	d10a      	bne.n	80047b0 <HAL_MultiProcessor_Init+0xa0>
  {
    /* If address mark wake up method is chosen, set the USART address node */
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ADD, ((uint32_t)Address << UART_CR2_ADDRESS_LSB_POS));
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	685b      	ldr	r3, [r3, #4]
 80047a0:	f023 417f 	bic.w	r1, r3, #4278190080	@ 0xff000000
 80047a4:	7afb      	ldrb	r3, [r7, #11]
 80047a6:	061a      	lsls	r2, r3, #24
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	430a      	orrs	r2, r1
 80047ae:	605a      	str	r2, [r3, #4]
  }

  /* Set the wake up method by setting the WAKE bit in the CR1 register */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_WAKE, WakeUpMethod);
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f423 6100 	bic.w	r1, r3, #2048	@ 0x800
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	687a      	ldr	r2, [r7, #4]
 80047c0:	430a      	orrs	r2, r1
 80047c2:	601a      	str	r2, [r3, #0]

  __HAL_UART_ENABLE(huart);
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	681a      	ldr	r2, [r3, #0]
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f042 0201 	orr.w	r2, r2, #1
 80047d2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80047d4:	68f8      	ldr	r0, [r7, #12]
 80047d6:	f000 fd6d 	bl	80052b4 <UART_CheckIdleState>
 80047da:	4603      	mov	r3, r0
}
 80047dc:	4618      	mov	r0, r3
 80047de:	3710      	adds	r7, #16
 80047e0:	46bd      	mov	sp, r7
 80047e2:	bd80      	pop	{r7, pc}

080047e4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80047e4:	b580      	push	{r7, lr}
 80047e6:	b08a      	sub	sp, #40	@ 0x28
 80047e8:	af02      	add	r7, sp, #8
 80047ea:	60f8      	str	r0, [r7, #12]
 80047ec:	60b9      	str	r1, [r7, #8]
 80047ee:	603b      	str	r3, [r7, #0]
 80047f0:	4613      	mov	r3, r2
 80047f2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80047f8:	2b20      	cmp	r3, #32
 80047fa:	d177      	bne.n	80048ec <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 80047fc:	68bb      	ldr	r3, [r7, #8]
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d002      	beq.n	8004808 <HAL_UART_Transmit+0x24>
 8004802:	88fb      	ldrh	r3, [r7, #6]
 8004804:	2b00      	cmp	r3, #0
 8004806:	d101      	bne.n	800480c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004808:	2301      	movs	r3, #1
 800480a:	e070      	b.n	80048ee <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	2200      	movs	r2, #0
 8004810:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	2221      	movs	r2, #33	@ 0x21
 8004818:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800481a:	f7fc feb3 	bl	8001584 <HAL_GetTick>
 800481e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	88fa      	ldrh	r2, [r7, #6]
 8004824:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	88fa      	ldrh	r2, [r7, #6]
 800482c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	689b      	ldr	r3, [r3, #8]
 8004834:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004838:	d108      	bne.n	800484c <HAL_UART_Transmit+0x68>
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	691b      	ldr	r3, [r3, #16]
 800483e:	2b00      	cmp	r3, #0
 8004840:	d104      	bne.n	800484c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8004842:	2300      	movs	r3, #0
 8004844:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004846:	68bb      	ldr	r3, [r7, #8]
 8004848:	61bb      	str	r3, [r7, #24]
 800484a:	e003      	b.n	8004854 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800484c:	68bb      	ldr	r3, [r7, #8]
 800484e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004850:	2300      	movs	r3, #0
 8004852:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004854:	e02f      	b.n	80048b6 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004856:	683b      	ldr	r3, [r7, #0]
 8004858:	9300      	str	r3, [sp, #0]
 800485a:	697b      	ldr	r3, [r7, #20]
 800485c:	2200      	movs	r2, #0
 800485e:	2180      	movs	r1, #128	@ 0x80
 8004860:	68f8      	ldr	r0, [r7, #12]
 8004862:	f000 fdcf 	bl	8005404 <UART_WaitOnFlagUntilTimeout>
 8004866:	4603      	mov	r3, r0
 8004868:	2b00      	cmp	r3, #0
 800486a:	d004      	beq.n	8004876 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	2220      	movs	r2, #32
 8004870:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8004872:	2303      	movs	r3, #3
 8004874:	e03b      	b.n	80048ee <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8004876:	69fb      	ldr	r3, [r7, #28]
 8004878:	2b00      	cmp	r3, #0
 800487a:	d10b      	bne.n	8004894 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800487c:	69bb      	ldr	r3, [r7, #24]
 800487e:	881a      	ldrh	r2, [r3, #0]
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004888:	b292      	uxth	r2, r2
 800488a:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800488c:	69bb      	ldr	r3, [r7, #24]
 800488e:	3302      	adds	r3, #2
 8004890:	61bb      	str	r3, [r7, #24]
 8004892:	e007      	b.n	80048a4 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004894:	69fb      	ldr	r3, [r7, #28]
 8004896:	781a      	ldrb	r2, [r3, #0]
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800489e:	69fb      	ldr	r3, [r7, #28]
 80048a0:	3301      	adds	r3, #1
 80048a2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80048aa:	b29b      	uxth	r3, r3
 80048ac:	3b01      	subs	r3, #1
 80048ae:	b29a      	uxth	r2, r3
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80048bc:	b29b      	uxth	r3, r3
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d1c9      	bne.n	8004856 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80048c2:	683b      	ldr	r3, [r7, #0]
 80048c4:	9300      	str	r3, [sp, #0]
 80048c6:	697b      	ldr	r3, [r7, #20]
 80048c8:	2200      	movs	r2, #0
 80048ca:	2140      	movs	r1, #64	@ 0x40
 80048cc:	68f8      	ldr	r0, [r7, #12]
 80048ce:	f000 fd99 	bl	8005404 <UART_WaitOnFlagUntilTimeout>
 80048d2:	4603      	mov	r3, r0
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d004      	beq.n	80048e2 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	2220      	movs	r2, #32
 80048dc:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80048de:	2303      	movs	r3, #3
 80048e0:	e005      	b.n	80048ee <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	2220      	movs	r2, #32
 80048e6:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80048e8:	2300      	movs	r3, #0
 80048ea:	e000      	b.n	80048ee <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 80048ec:	2302      	movs	r3, #2
  }
}
 80048ee:	4618      	mov	r0, r3
 80048f0:	3720      	adds	r7, #32
 80048f2:	46bd      	mov	sp, r7
 80048f4:	bd80      	pop	{r7, pc}
	...

080048f8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80048f8:	b580      	push	{r7, lr}
 80048fa:	b0ba      	sub	sp, #232	@ 0xe8
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	69db      	ldr	r3, [r3, #28]
 8004906:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	689b      	ldr	r3, [r3, #8]
 800491a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800491e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8004922:	f640 030f 	movw	r3, #2063	@ 0x80f
 8004926:	4013      	ands	r3, r2
 8004928:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800492c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004930:	2b00      	cmp	r3, #0
 8004932:	d115      	bne.n	8004960 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004934:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004938:	f003 0320 	and.w	r3, r3, #32
 800493c:	2b00      	cmp	r3, #0
 800493e:	d00f      	beq.n	8004960 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004940:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004944:	f003 0320 	and.w	r3, r3, #32
 8004948:	2b00      	cmp	r3, #0
 800494a:	d009      	beq.n	8004960 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004950:	2b00      	cmp	r3, #0
 8004952:	f000 82ab 	beq.w	8004eac <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800495a:	6878      	ldr	r0, [r7, #4]
 800495c:	4798      	blx	r3
      }
      return;
 800495e:	e2a5      	b.n	8004eac <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004960:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004964:	2b00      	cmp	r3, #0
 8004966:	f000 8117 	beq.w	8004b98 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800496a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800496e:	f003 0301 	and.w	r3, r3, #1
 8004972:	2b00      	cmp	r3, #0
 8004974:	d106      	bne.n	8004984 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004976:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800497a:	4b85      	ldr	r3, [pc, #532]	@ (8004b90 <HAL_UART_IRQHandler+0x298>)
 800497c:	4013      	ands	r3, r2
 800497e:	2b00      	cmp	r3, #0
 8004980:	f000 810a 	beq.w	8004b98 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004984:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004988:	f003 0301 	and.w	r3, r3, #1
 800498c:	2b00      	cmp	r3, #0
 800498e:	d011      	beq.n	80049b4 <HAL_UART_IRQHandler+0xbc>
 8004990:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004994:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004998:	2b00      	cmp	r3, #0
 800499a:	d00b      	beq.n	80049b4 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	2201      	movs	r2, #1
 80049a2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80049aa:	f043 0201 	orr.w	r2, r3, #1
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80049b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80049b8:	f003 0302 	and.w	r3, r3, #2
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d011      	beq.n	80049e4 <HAL_UART_IRQHandler+0xec>
 80049c0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80049c4:	f003 0301 	and.w	r3, r3, #1
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d00b      	beq.n	80049e4 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	2202      	movs	r2, #2
 80049d2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80049da:	f043 0204 	orr.w	r2, r3, #4
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80049e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80049e8:	f003 0304 	and.w	r3, r3, #4
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d011      	beq.n	8004a14 <HAL_UART_IRQHandler+0x11c>
 80049f0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80049f4:	f003 0301 	and.w	r3, r3, #1
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d00b      	beq.n	8004a14 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	2204      	movs	r2, #4
 8004a02:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004a0a:	f043 0202 	orr.w	r2, r3, #2
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004a14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004a18:	f003 0308 	and.w	r3, r3, #8
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d017      	beq.n	8004a50 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004a20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004a24:	f003 0320 	and.w	r3, r3, #32
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d105      	bne.n	8004a38 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004a2c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004a30:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d00b      	beq.n	8004a50 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	2208      	movs	r2, #8
 8004a3e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004a46:	f043 0208 	orr.w	r2, r3, #8
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004a50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004a54:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d012      	beq.n	8004a82 <HAL_UART_IRQHandler+0x18a>
 8004a5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004a60:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d00c      	beq.n	8004a82 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004a70:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004a78:	f043 0220 	orr.w	r2, r3, #32
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	f000 8211 	beq.w	8004eb0 <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004a8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004a92:	f003 0320 	and.w	r3, r3, #32
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d00d      	beq.n	8004ab6 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004a9a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004a9e:	f003 0320 	and.w	r3, r3, #32
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d007      	beq.n	8004ab6 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d003      	beq.n	8004ab6 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004ab2:	6878      	ldr	r0, [r7, #4]
 8004ab4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004abc:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	689b      	ldr	r3, [r3, #8]
 8004ac6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004aca:	2b40      	cmp	r3, #64	@ 0x40
 8004acc:	d005      	beq.n	8004ada <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004ace:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004ad2:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d04f      	beq.n	8004b7a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004ada:	6878      	ldr	r0, [r7, #4]
 8004adc:	f000 fcff 	bl	80054de <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	689b      	ldr	r3, [r3, #8]
 8004ae6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004aea:	2b40      	cmp	r3, #64	@ 0x40
 8004aec:	d141      	bne.n	8004b72 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	3308      	adds	r3, #8
 8004af4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004af8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004afc:	e853 3f00 	ldrex	r3, [r3]
 8004b00:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004b04:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004b08:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004b0c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	3308      	adds	r3, #8
 8004b16:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004b1a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004b1e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b22:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004b26:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004b2a:	e841 2300 	strex	r3, r2, [r1]
 8004b2e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004b32:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d1d9      	bne.n	8004aee <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d013      	beq.n	8004b6a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004b46:	4a13      	ldr	r2, [pc, #76]	@ (8004b94 <HAL_UART_IRQHandler+0x29c>)
 8004b48:	635a      	str	r2, [r3, #52]	@ 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004b4e:	4618      	mov	r0, r3
 8004b50:	f7fc ff6f 	bl	8001a32 <HAL_DMA_Abort_IT>
 8004b54:	4603      	mov	r3, r0
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d017      	beq.n	8004b8a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004b5e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b60:	687a      	ldr	r2, [r7, #4]
 8004b62:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8004b64:	4610      	mov	r0, r2
 8004b66:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b68:	e00f      	b.n	8004b8a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004b6a:	6878      	ldr	r0, [r7, #4]
 8004b6c:	f000 f9b4 	bl	8004ed8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b70:	e00b      	b.n	8004b8a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004b72:	6878      	ldr	r0, [r7, #4]
 8004b74:	f000 f9b0 	bl	8004ed8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b78:	e007      	b.n	8004b8a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004b7a:	6878      	ldr	r0, [r7, #4]
 8004b7c:	f000 f9ac 	bl	8004ed8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	2200      	movs	r2, #0
 8004b84:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8004b88:	e192      	b.n	8004eb0 <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b8a:	bf00      	nop
    return;
 8004b8c:	e190      	b.n	8004eb0 <HAL_UART_IRQHandler+0x5b8>
 8004b8e:	bf00      	nop
 8004b90:	04000120 	.word	0x04000120
 8004b94:	080055a7 	.word	0x080055a7

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004b9c:	2b01      	cmp	r3, #1
 8004b9e:	f040 814b 	bne.w	8004e38 <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004ba2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004ba6:	f003 0310 	and.w	r3, r3, #16
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	f000 8144 	beq.w	8004e38 <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004bb0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004bb4:	f003 0310 	and.w	r3, r3, #16
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	f000 813d 	beq.w	8004e38 <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	2210      	movs	r2, #16
 8004bc4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	689b      	ldr	r3, [r3, #8]
 8004bcc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004bd0:	2b40      	cmp	r3, #64	@ 0x40
 8004bd2:	f040 80b5 	bne.w	8004d40 <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	685b      	ldr	r3, [r3, #4]
 8004bde:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004be2:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	f000 8164 	beq.w	8004eb4 <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8004bf2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004bf6:	429a      	cmp	r2, r3
 8004bf8:	f080 815c 	bcs.w	8004eb4 <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004c02:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004c0a:	699b      	ldr	r3, [r3, #24]
 8004c0c:	2b20      	cmp	r3, #32
 8004c0e:	f000 8086 	beq.w	8004d1e <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c1a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004c1e:	e853 3f00 	ldrex	r3, [r3]
 8004c22:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004c26:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004c2a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004c2e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	461a      	mov	r2, r3
 8004c38:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8004c3c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004c40:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c44:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004c48:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004c4c:	e841 2300 	strex	r3, r2, [r1]
 8004c50:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004c54:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d1da      	bne.n	8004c12 <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	3308      	adds	r3, #8
 8004c62:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c64:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004c66:	e853 3f00 	ldrex	r3, [r3]
 8004c6a:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004c6c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004c6e:	f023 0301 	bic.w	r3, r3, #1
 8004c72:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	3308      	adds	r3, #8
 8004c7c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004c80:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004c84:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c86:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004c88:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004c8c:	e841 2300 	strex	r3, r2, [r1]
 8004c90:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004c92:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d1e1      	bne.n	8004c5c <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	3308      	adds	r3, #8
 8004c9e:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ca0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004ca2:	e853 3f00 	ldrex	r3, [r3]
 8004ca6:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004ca8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004caa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004cae:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	3308      	adds	r3, #8
 8004cb8:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004cbc:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004cbe:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cc0:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004cc2:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004cc4:	e841 2300 	strex	r3, r2, [r1]
 8004cc8:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004cca:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d1e3      	bne.n	8004c98 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	2220      	movs	r2, #32
 8004cd4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	2200      	movs	r2, #0
 8004cdc:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ce4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004ce6:	e853 3f00 	ldrex	r3, [r3]
 8004cea:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004cec:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004cee:	f023 0310 	bic.w	r3, r3, #16
 8004cf2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	461a      	mov	r2, r3
 8004cfc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004d00:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004d02:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d04:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004d06:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004d08:	e841 2300 	strex	r3, r2, [r1]
 8004d0c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004d0e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d1e4      	bne.n	8004cde <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004d18:	4618      	mov	r0, r3
 8004d1a:	f7fc fe4c 	bl	80019b6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	2202      	movs	r2, #2
 8004d22:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004d30:	b29b      	uxth	r3, r3
 8004d32:	1ad3      	subs	r3, r2, r3
 8004d34:	b29b      	uxth	r3, r3
 8004d36:	4619      	mov	r1, r3
 8004d38:	6878      	ldr	r0, [r7, #4]
 8004d3a:	f000 f8d7 	bl	8004eec <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004d3e:	e0b9      	b.n	8004eb4 <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004d4c:	b29b      	uxth	r3, r3
 8004d4e:	1ad3      	subs	r3, r2, r3
 8004d50:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004d5a:	b29b      	uxth	r3, r3
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	f000 80ab 	beq.w	8004eb8 <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 8004d62:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	f000 80a6 	beq.w	8004eb8 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d74:	e853 3f00 	ldrex	r3, [r3]
 8004d78:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004d7a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d7c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004d80:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	461a      	mov	r2, r3
 8004d8a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8004d8e:	647b      	str	r3, [r7, #68]	@ 0x44
 8004d90:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d92:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004d94:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004d96:	e841 2300 	strex	r3, r2, [r1]
 8004d9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004d9c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d1e4      	bne.n	8004d6c <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	3308      	adds	r3, #8
 8004da8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004daa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dac:	e853 3f00 	ldrex	r3, [r3]
 8004db0:	623b      	str	r3, [r7, #32]
   return(result);
 8004db2:	6a3b      	ldr	r3, [r7, #32]
 8004db4:	f023 0301 	bic.w	r3, r3, #1
 8004db8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	3308      	adds	r3, #8
 8004dc2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004dc6:	633a      	str	r2, [r7, #48]	@ 0x30
 8004dc8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dca:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004dcc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004dce:	e841 2300 	strex	r3, r2, [r1]
 8004dd2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004dd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d1e3      	bne.n	8004da2 <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	2220      	movs	r2, #32
 8004dde:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	2200      	movs	r2, #0
 8004de6:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2200      	movs	r2, #0
 8004dec:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004df4:	693b      	ldr	r3, [r7, #16]
 8004df6:	e853 3f00 	ldrex	r3, [r3]
 8004dfa:	60fb      	str	r3, [r7, #12]
   return(result);
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	f023 0310 	bic.w	r3, r3, #16
 8004e02:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	461a      	mov	r2, r3
 8004e0c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004e10:	61fb      	str	r3, [r7, #28]
 8004e12:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e14:	69b9      	ldr	r1, [r7, #24]
 8004e16:	69fa      	ldr	r2, [r7, #28]
 8004e18:	e841 2300 	strex	r3, r2, [r1]
 8004e1c:	617b      	str	r3, [r7, #20]
   return(result);
 8004e1e:	697b      	ldr	r3, [r7, #20]
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d1e4      	bne.n	8004dee <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2202      	movs	r2, #2
 8004e28:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004e2a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004e2e:	4619      	mov	r1, r3
 8004e30:	6878      	ldr	r0, [r7, #4]
 8004e32:	f000 f85b 	bl	8004eec <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004e36:	e03f      	b.n	8004eb8 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004e38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004e3c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d00e      	beq.n	8004e62 <HAL_UART_IRQHandler+0x56a>
 8004e44:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004e48:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d008      	beq.n	8004e62 <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8004e58:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004e5a:	6878      	ldr	r0, [r7, #4]
 8004e5c:	f000 fbe3 	bl	8005626 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004e60:	e02d      	b.n	8004ebe <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004e62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004e66:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d00e      	beq.n	8004e8c <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004e6e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004e72:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d008      	beq.n	8004e8c <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d01c      	beq.n	8004ebc <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004e86:	6878      	ldr	r0, [r7, #4]
 8004e88:	4798      	blx	r3
    }
    return;
 8004e8a:	e017      	b.n	8004ebc <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004e8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004e90:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d012      	beq.n	8004ebe <HAL_UART_IRQHandler+0x5c6>
 8004e98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004e9c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d00c      	beq.n	8004ebe <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 8004ea4:	6878      	ldr	r0, [r7, #4]
 8004ea6:	f000 fb94 	bl	80055d2 <UART_EndTransmit_IT>
    return;
 8004eaa:	e008      	b.n	8004ebe <HAL_UART_IRQHandler+0x5c6>
      return;
 8004eac:	bf00      	nop
 8004eae:	e006      	b.n	8004ebe <HAL_UART_IRQHandler+0x5c6>
    return;
 8004eb0:	bf00      	nop
 8004eb2:	e004      	b.n	8004ebe <HAL_UART_IRQHandler+0x5c6>
      return;
 8004eb4:	bf00      	nop
 8004eb6:	e002      	b.n	8004ebe <HAL_UART_IRQHandler+0x5c6>
      return;
 8004eb8:	bf00      	nop
 8004eba:	e000      	b.n	8004ebe <HAL_UART_IRQHandler+0x5c6>
    return;
 8004ebc:	bf00      	nop
  }

}
 8004ebe:	37e8      	adds	r7, #232	@ 0xe8
 8004ec0:	46bd      	mov	sp, r7
 8004ec2:	bd80      	pop	{r7, pc}

08004ec4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004ec4:	b480      	push	{r7}
 8004ec6:	b083      	sub	sp, #12
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004ecc:	bf00      	nop
 8004ece:	370c      	adds	r7, #12
 8004ed0:	46bd      	mov	sp, r7
 8004ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed6:	4770      	bx	lr

08004ed8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004ed8:	b480      	push	{r7}
 8004eda:	b083      	sub	sp, #12
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004ee0:	bf00      	nop
 8004ee2:	370c      	adds	r7, #12
 8004ee4:	46bd      	mov	sp, r7
 8004ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eea:	4770      	bx	lr

08004eec <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004eec:	b480      	push	{r7}
 8004eee:	b083      	sub	sp, #12
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	6078      	str	r0, [r7, #4]
 8004ef4:	460b      	mov	r3, r1
 8004ef6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004ef8:	bf00      	nop
 8004efa:	370c      	adds	r7, #12
 8004efc:	46bd      	mov	sp, r7
 8004efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f02:	4770      	bx	lr

08004f04 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004f04:	b580      	push	{r7, lr}
 8004f06:	b088      	sub	sp, #32
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004f0c:	2300      	movs	r3, #0
 8004f0e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	689a      	ldr	r2, [r3, #8]
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	691b      	ldr	r3, [r3, #16]
 8004f18:	431a      	orrs	r2, r3
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	695b      	ldr	r3, [r3, #20]
 8004f1e:	431a      	orrs	r2, r3
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	69db      	ldr	r3, [r3, #28]
 8004f24:	4313      	orrs	r3, r2
 8004f26:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	681a      	ldr	r2, [r3, #0]
 8004f2e:	4b8a      	ldr	r3, [pc, #552]	@ (8005158 <UART_SetConfig+0x254>)
 8004f30:	4013      	ands	r3, r2
 8004f32:	687a      	ldr	r2, [r7, #4]
 8004f34:	6812      	ldr	r2, [r2, #0]
 8004f36:	6979      	ldr	r1, [r7, #20]
 8004f38:	430b      	orrs	r3, r1
 8004f3a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	685b      	ldr	r3, [r3, #4]
 8004f42:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	68da      	ldr	r2, [r3, #12]
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	430a      	orrs	r2, r1
 8004f50:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	699b      	ldr	r3, [r3, #24]
 8004f56:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	6a1b      	ldr	r3, [r3, #32]
 8004f5c:	697a      	ldr	r2, [r7, #20]
 8004f5e:	4313      	orrs	r3, r2
 8004f60:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	689b      	ldr	r3, [r3, #8]
 8004f68:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	697a      	ldr	r2, [r7, #20]
 8004f72:	430a      	orrs	r2, r1
 8004f74:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	4a78      	ldr	r2, [pc, #480]	@ (800515c <UART_SetConfig+0x258>)
 8004f7c:	4293      	cmp	r3, r2
 8004f7e:	d120      	bne.n	8004fc2 <UART_SetConfig+0xbe>
 8004f80:	4b77      	ldr	r3, [pc, #476]	@ (8005160 <UART_SetConfig+0x25c>)
 8004f82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f84:	f003 0303 	and.w	r3, r3, #3
 8004f88:	2b03      	cmp	r3, #3
 8004f8a:	d817      	bhi.n	8004fbc <UART_SetConfig+0xb8>
 8004f8c:	a201      	add	r2, pc, #4	@ (adr r2, 8004f94 <UART_SetConfig+0x90>)
 8004f8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f92:	bf00      	nop
 8004f94:	08004fa5 	.word	0x08004fa5
 8004f98:	08004fb1 	.word	0x08004fb1
 8004f9c:	08004fb7 	.word	0x08004fb7
 8004fa0:	08004fab 	.word	0x08004fab
 8004fa4:	2300      	movs	r3, #0
 8004fa6:	77fb      	strb	r3, [r7, #31]
 8004fa8:	e01d      	b.n	8004fe6 <UART_SetConfig+0xe2>
 8004faa:	2302      	movs	r3, #2
 8004fac:	77fb      	strb	r3, [r7, #31]
 8004fae:	e01a      	b.n	8004fe6 <UART_SetConfig+0xe2>
 8004fb0:	2304      	movs	r3, #4
 8004fb2:	77fb      	strb	r3, [r7, #31]
 8004fb4:	e017      	b.n	8004fe6 <UART_SetConfig+0xe2>
 8004fb6:	2308      	movs	r3, #8
 8004fb8:	77fb      	strb	r3, [r7, #31]
 8004fba:	e014      	b.n	8004fe6 <UART_SetConfig+0xe2>
 8004fbc:	2310      	movs	r3, #16
 8004fbe:	77fb      	strb	r3, [r7, #31]
 8004fc0:	e011      	b.n	8004fe6 <UART_SetConfig+0xe2>
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	4a67      	ldr	r2, [pc, #412]	@ (8005164 <UART_SetConfig+0x260>)
 8004fc8:	4293      	cmp	r3, r2
 8004fca:	d102      	bne.n	8004fd2 <UART_SetConfig+0xce>
 8004fcc:	2300      	movs	r3, #0
 8004fce:	77fb      	strb	r3, [r7, #31]
 8004fd0:	e009      	b.n	8004fe6 <UART_SetConfig+0xe2>
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	4a64      	ldr	r2, [pc, #400]	@ (8005168 <UART_SetConfig+0x264>)
 8004fd8:	4293      	cmp	r3, r2
 8004fda:	d102      	bne.n	8004fe2 <UART_SetConfig+0xde>
 8004fdc:	2300      	movs	r3, #0
 8004fde:	77fb      	strb	r3, [r7, #31]
 8004fe0:	e001      	b.n	8004fe6 <UART_SetConfig+0xe2>
 8004fe2:	2310      	movs	r3, #16
 8004fe4:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	69db      	ldr	r3, [r3, #28]
 8004fea:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004fee:	d15a      	bne.n	80050a6 <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 8004ff0:	7ffb      	ldrb	r3, [r7, #31]
 8004ff2:	2b08      	cmp	r3, #8
 8004ff4:	d827      	bhi.n	8005046 <UART_SetConfig+0x142>
 8004ff6:	a201      	add	r2, pc, #4	@ (adr r2, 8004ffc <UART_SetConfig+0xf8>)
 8004ff8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ffc:	08005021 	.word	0x08005021
 8005000:	08005029 	.word	0x08005029
 8005004:	08005031 	.word	0x08005031
 8005008:	08005047 	.word	0x08005047
 800500c:	08005037 	.word	0x08005037
 8005010:	08005047 	.word	0x08005047
 8005014:	08005047 	.word	0x08005047
 8005018:	08005047 	.word	0x08005047
 800501c:	0800503f 	.word	0x0800503f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005020:	f7fe f902 	bl	8003228 <HAL_RCC_GetPCLK1Freq>
 8005024:	61b8      	str	r0, [r7, #24]
        break;
 8005026:	e013      	b.n	8005050 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005028:	f7fe f920 	bl	800326c <HAL_RCC_GetPCLK2Freq>
 800502c:	61b8      	str	r0, [r7, #24]
        break;
 800502e:	e00f      	b.n	8005050 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005030:	4b4e      	ldr	r3, [pc, #312]	@ (800516c <UART_SetConfig+0x268>)
 8005032:	61bb      	str	r3, [r7, #24]
        break;
 8005034:	e00c      	b.n	8005050 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005036:	f7fe f897 	bl	8003168 <HAL_RCC_GetSysClockFreq>
 800503a:	61b8      	str	r0, [r7, #24]
        break;
 800503c:	e008      	b.n	8005050 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800503e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005042:	61bb      	str	r3, [r7, #24]
        break;
 8005044:	e004      	b.n	8005050 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8005046:	2300      	movs	r3, #0
 8005048:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800504a:	2301      	movs	r3, #1
 800504c:	77bb      	strb	r3, [r7, #30]
        break;
 800504e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005050:	69bb      	ldr	r3, [r7, #24]
 8005052:	2b00      	cmp	r3, #0
 8005054:	d074      	beq.n	8005140 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005056:	69bb      	ldr	r3, [r7, #24]
 8005058:	005a      	lsls	r2, r3, #1
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	685b      	ldr	r3, [r3, #4]
 800505e:	085b      	lsrs	r3, r3, #1
 8005060:	441a      	add	r2, r3
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	685b      	ldr	r3, [r3, #4]
 8005066:	fbb2 f3f3 	udiv	r3, r2, r3
 800506a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800506c:	693b      	ldr	r3, [r7, #16]
 800506e:	2b0f      	cmp	r3, #15
 8005070:	d916      	bls.n	80050a0 <UART_SetConfig+0x19c>
 8005072:	693b      	ldr	r3, [r7, #16]
 8005074:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005078:	d212      	bcs.n	80050a0 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800507a:	693b      	ldr	r3, [r7, #16]
 800507c:	b29b      	uxth	r3, r3
 800507e:	f023 030f 	bic.w	r3, r3, #15
 8005082:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005084:	693b      	ldr	r3, [r7, #16]
 8005086:	085b      	lsrs	r3, r3, #1
 8005088:	b29b      	uxth	r3, r3
 800508a:	f003 0307 	and.w	r3, r3, #7
 800508e:	b29a      	uxth	r2, r3
 8005090:	89fb      	ldrh	r3, [r7, #14]
 8005092:	4313      	orrs	r3, r2
 8005094:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	89fa      	ldrh	r2, [r7, #14]
 800509c:	60da      	str	r2, [r3, #12]
 800509e:	e04f      	b.n	8005140 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 80050a0:	2301      	movs	r3, #1
 80050a2:	77bb      	strb	r3, [r7, #30]
 80050a4:	e04c      	b.n	8005140 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80050a6:	7ffb      	ldrb	r3, [r7, #31]
 80050a8:	2b08      	cmp	r3, #8
 80050aa:	d828      	bhi.n	80050fe <UART_SetConfig+0x1fa>
 80050ac:	a201      	add	r2, pc, #4	@ (adr r2, 80050b4 <UART_SetConfig+0x1b0>)
 80050ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050b2:	bf00      	nop
 80050b4:	080050d9 	.word	0x080050d9
 80050b8:	080050e1 	.word	0x080050e1
 80050bc:	080050e9 	.word	0x080050e9
 80050c0:	080050ff 	.word	0x080050ff
 80050c4:	080050ef 	.word	0x080050ef
 80050c8:	080050ff 	.word	0x080050ff
 80050cc:	080050ff 	.word	0x080050ff
 80050d0:	080050ff 	.word	0x080050ff
 80050d4:	080050f7 	.word	0x080050f7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80050d8:	f7fe f8a6 	bl	8003228 <HAL_RCC_GetPCLK1Freq>
 80050dc:	61b8      	str	r0, [r7, #24]
        break;
 80050de:	e013      	b.n	8005108 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80050e0:	f7fe f8c4 	bl	800326c <HAL_RCC_GetPCLK2Freq>
 80050e4:	61b8      	str	r0, [r7, #24]
        break;
 80050e6:	e00f      	b.n	8005108 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80050e8:	4b20      	ldr	r3, [pc, #128]	@ (800516c <UART_SetConfig+0x268>)
 80050ea:	61bb      	str	r3, [r7, #24]
        break;
 80050ec:	e00c      	b.n	8005108 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80050ee:	f7fe f83b 	bl	8003168 <HAL_RCC_GetSysClockFreq>
 80050f2:	61b8      	str	r0, [r7, #24]
        break;
 80050f4:	e008      	b.n	8005108 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80050f6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80050fa:	61bb      	str	r3, [r7, #24]
        break;
 80050fc:	e004      	b.n	8005108 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 80050fe:	2300      	movs	r3, #0
 8005100:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005102:	2301      	movs	r3, #1
 8005104:	77bb      	strb	r3, [r7, #30]
        break;
 8005106:	bf00      	nop
    }

    if (pclk != 0U)
 8005108:	69bb      	ldr	r3, [r7, #24]
 800510a:	2b00      	cmp	r3, #0
 800510c:	d018      	beq.n	8005140 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	685b      	ldr	r3, [r3, #4]
 8005112:	085a      	lsrs	r2, r3, #1
 8005114:	69bb      	ldr	r3, [r7, #24]
 8005116:	441a      	add	r2, r3
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	685b      	ldr	r3, [r3, #4]
 800511c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005120:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005122:	693b      	ldr	r3, [r7, #16]
 8005124:	2b0f      	cmp	r3, #15
 8005126:	d909      	bls.n	800513c <UART_SetConfig+0x238>
 8005128:	693b      	ldr	r3, [r7, #16]
 800512a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800512e:	d205      	bcs.n	800513c <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005130:	693b      	ldr	r3, [r7, #16]
 8005132:	b29a      	uxth	r2, r3
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	60da      	str	r2, [r3, #12]
 800513a:	e001      	b.n	8005140 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 800513c:	2301      	movs	r3, #1
 800513e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	2200      	movs	r2, #0
 8005144:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	2200      	movs	r2, #0
 800514a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800514c:	7fbb      	ldrb	r3, [r7, #30]
}
 800514e:	4618      	mov	r0, r3
 8005150:	3720      	adds	r7, #32
 8005152:	46bd      	mov	sp, r7
 8005154:	bd80      	pop	{r7, pc}
 8005156:	bf00      	nop
 8005158:	efff69f3 	.word	0xefff69f3
 800515c:	40013800 	.word	0x40013800
 8005160:	40021000 	.word	0x40021000
 8005164:	40004400 	.word	0x40004400
 8005168:	40004800 	.word	0x40004800
 800516c:	007a1200 	.word	0x007a1200

08005170 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005170:	b480      	push	{r7}
 8005172:	b083      	sub	sp, #12
 8005174:	af00      	add	r7, sp, #0
 8005176:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800517c:	f003 0308 	and.w	r3, r3, #8
 8005180:	2b00      	cmp	r3, #0
 8005182:	d00a      	beq.n	800519a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	685b      	ldr	r3, [r3, #4]
 800518a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	430a      	orrs	r2, r1
 8005198:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800519e:	f003 0301 	and.w	r3, r3, #1
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d00a      	beq.n	80051bc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	685b      	ldr	r3, [r3, #4]
 80051ac:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	430a      	orrs	r2, r1
 80051ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051c0:	f003 0302 	and.w	r3, r3, #2
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d00a      	beq.n	80051de <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	685b      	ldr	r3, [r3, #4]
 80051ce:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	430a      	orrs	r2, r1
 80051dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051e2:	f003 0304 	and.w	r3, r3, #4
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d00a      	beq.n	8005200 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	685b      	ldr	r3, [r3, #4]
 80051f0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	430a      	orrs	r2, r1
 80051fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005204:	f003 0310 	and.w	r3, r3, #16
 8005208:	2b00      	cmp	r3, #0
 800520a:	d00a      	beq.n	8005222 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	689b      	ldr	r3, [r3, #8]
 8005212:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	430a      	orrs	r2, r1
 8005220:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005226:	f003 0320 	and.w	r3, r3, #32
 800522a:	2b00      	cmp	r3, #0
 800522c:	d00a      	beq.n	8005244 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	689b      	ldr	r3, [r3, #8]
 8005234:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	430a      	orrs	r2, r1
 8005242:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005248:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800524c:	2b00      	cmp	r3, #0
 800524e:	d01a      	beq.n	8005286 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	685b      	ldr	r3, [r3, #4]
 8005256:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	430a      	orrs	r2, r1
 8005264:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800526a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800526e:	d10a      	bne.n	8005286 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	685b      	ldr	r3, [r3, #4]
 8005276:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	430a      	orrs	r2, r1
 8005284:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800528a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800528e:	2b00      	cmp	r3, #0
 8005290:	d00a      	beq.n	80052a8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	685b      	ldr	r3, [r3, #4]
 8005298:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	430a      	orrs	r2, r1
 80052a6:	605a      	str	r2, [r3, #4]
  }
}
 80052a8:	bf00      	nop
 80052aa:	370c      	adds	r7, #12
 80052ac:	46bd      	mov	sp, r7
 80052ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b2:	4770      	bx	lr

080052b4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80052b4:	b580      	push	{r7, lr}
 80052b6:	b098      	sub	sp, #96	@ 0x60
 80052b8:	af02      	add	r7, sp, #8
 80052ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	2200      	movs	r2, #0
 80052c0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80052c4:	f7fc f95e 	bl	8001584 <HAL_GetTick>
 80052c8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f003 0308 	and.w	r3, r3, #8
 80052d4:	2b08      	cmp	r3, #8
 80052d6:	d12e      	bne.n	8005336 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80052d8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80052dc:	9300      	str	r3, [sp, #0]
 80052de:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80052e0:	2200      	movs	r2, #0
 80052e2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80052e6:	6878      	ldr	r0, [r7, #4]
 80052e8:	f000 f88c 	bl	8005404 <UART_WaitOnFlagUntilTimeout>
 80052ec:	4603      	mov	r3, r0
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d021      	beq.n	8005336 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80052fa:	e853 3f00 	ldrex	r3, [r3]
 80052fe:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005300:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005302:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005306:	653b      	str	r3, [r7, #80]	@ 0x50
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	461a      	mov	r2, r3
 800530e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005310:	647b      	str	r3, [r7, #68]	@ 0x44
 8005312:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005314:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005316:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005318:	e841 2300 	strex	r3, r2, [r1]
 800531c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800531e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005320:	2b00      	cmp	r3, #0
 8005322:	d1e6      	bne.n	80052f2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	2220      	movs	r2, #32
 8005328:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	2200      	movs	r2, #0
 800532e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005332:	2303      	movs	r3, #3
 8005334:	e062      	b.n	80053fc <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	f003 0304 	and.w	r3, r3, #4
 8005340:	2b04      	cmp	r3, #4
 8005342:	d149      	bne.n	80053d8 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005344:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005348:	9300      	str	r3, [sp, #0]
 800534a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800534c:	2200      	movs	r2, #0
 800534e:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005352:	6878      	ldr	r0, [r7, #4]
 8005354:	f000 f856 	bl	8005404 <UART_WaitOnFlagUntilTimeout>
 8005358:	4603      	mov	r3, r0
 800535a:	2b00      	cmp	r3, #0
 800535c:	d03c      	beq.n	80053d8 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005364:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005366:	e853 3f00 	ldrex	r3, [r3]
 800536a:	623b      	str	r3, [r7, #32]
   return(result);
 800536c:	6a3b      	ldr	r3, [r7, #32]
 800536e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005372:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	461a      	mov	r2, r3
 800537a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800537c:	633b      	str	r3, [r7, #48]	@ 0x30
 800537e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005380:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005382:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005384:	e841 2300 	strex	r3, r2, [r1]
 8005388:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800538a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800538c:	2b00      	cmp	r3, #0
 800538e:	d1e6      	bne.n	800535e <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	3308      	adds	r3, #8
 8005396:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005398:	693b      	ldr	r3, [r7, #16]
 800539a:	e853 3f00 	ldrex	r3, [r3]
 800539e:	60fb      	str	r3, [r7, #12]
   return(result);
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	f023 0301 	bic.w	r3, r3, #1
 80053a6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	3308      	adds	r3, #8
 80053ae:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80053b0:	61fa      	str	r2, [r7, #28]
 80053b2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053b4:	69b9      	ldr	r1, [r7, #24]
 80053b6:	69fa      	ldr	r2, [r7, #28]
 80053b8:	e841 2300 	strex	r3, r2, [r1]
 80053bc:	617b      	str	r3, [r7, #20]
   return(result);
 80053be:	697b      	ldr	r3, [r7, #20]
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d1e5      	bne.n	8005390 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	2220      	movs	r2, #32
 80053c8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	2200      	movs	r2, #0
 80053d0:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80053d4:	2303      	movs	r3, #3
 80053d6:	e011      	b.n	80053fc <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	2220      	movs	r2, #32
 80053dc:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	2220      	movs	r2, #32
 80053e2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	2200      	movs	r2, #0
 80053ea:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	2200      	movs	r2, #0
 80053f0:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	2200      	movs	r2, #0
 80053f6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80053fa:	2300      	movs	r3, #0
}
 80053fc:	4618      	mov	r0, r3
 80053fe:	3758      	adds	r7, #88	@ 0x58
 8005400:	46bd      	mov	sp, r7
 8005402:	bd80      	pop	{r7, pc}

08005404 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005404:	b580      	push	{r7, lr}
 8005406:	b084      	sub	sp, #16
 8005408:	af00      	add	r7, sp, #0
 800540a:	60f8      	str	r0, [r7, #12]
 800540c:	60b9      	str	r1, [r7, #8]
 800540e:	603b      	str	r3, [r7, #0]
 8005410:	4613      	mov	r3, r2
 8005412:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005414:	e04f      	b.n	80054b6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005416:	69bb      	ldr	r3, [r7, #24]
 8005418:	f1b3 3fff 	cmp.w	r3, #4294967295
 800541c:	d04b      	beq.n	80054b6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800541e:	f7fc f8b1 	bl	8001584 <HAL_GetTick>
 8005422:	4602      	mov	r2, r0
 8005424:	683b      	ldr	r3, [r7, #0]
 8005426:	1ad3      	subs	r3, r2, r3
 8005428:	69ba      	ldr	r2, [r7, #24]
 800542a:	429a      	cmp	r2, r3
 800542c:	d302      	bcc.n	8005434 <UART_WaitOnFlagUntilTimeout+0x30>
 800542e:	69bb      	ldr	r3, [r7, #24]
 8005430:	2b00      	cmp	r3, #0
 8005432:	d101      	bne.n	8005438 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005434:	2303      	movs	r3, #3
 8005436:	e04e      	b.n	80054d6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	f003 0304 	and.w	r3, r3, #4
 8005442:	2b00      	cmp	r3, #0
 8005444:	d037      	beq.n	80054b6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005446:	68bb      	ldr	r3, [r7, #8]
 8005448:	2b80      	cmp	r3, #128	@ 0x80
 800544a:	d034      	beq.n	80054b6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800544c:	68bb      	ldr	r3, [r7, #8]
 800544e:	2b40      	cmp	r3, #64	@ 0x40
 8005450:	d031      	beq.n	80054b6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	69db      	ldr	r3, [r3, #28]
 8005458:	f003 0308 	and.w	r3, r3, #8
 800545c:	2b08      	cmp	r3, #8
 800545e:	d110      	bne.n	8005482 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	2208      	movs	r2, #8
 8005466:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005468:	68f8      	ldr	r0, [r7, #12]
 800546a:	f000 f838 	bl	80054de <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	2208      	movs	r2, #8
 8005472:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	2200      	movs	r2, #0
 800547a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800547e:	2301      	movs	r3, #1
 8005480:	e029      	b.n	80054d6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	69db      	ldr	r3, [r3, #28]
 8005488:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800548c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005490:	d111      	bne.n	80054b6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800549a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800549c:	68f8      	ldr	r0, [r7, #12]
 800549e:	f000 f81e 	bl	80054de <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	2220      	movs	r2, #32
 80054a6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	2200      	movs	r2, #0
 80054ae:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80054b2:	2303      	movs	r3, #3
 80054b4:	e00f      	b.n	80054d6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	69da      	ldr	r2, [r3, #28]
 80054bc:	68bb      	ldr	r3, [r7, #8]
 80054be:	4013      	ands	r3, r2
 80054c0:	68ba      	ldr	r2, [r7, #8]
 80054c2:	429a      	cmp	r2, r3
 80054c4:	bf0c      	ite	eq
 80054c6:	2301      	moveq	r3, #1
 80054c8:	2300      	movne	r3, #0
 80054ca:	b2db      	uxtb	r3, r3
 80054cc:	461a      	mov	r2, r3
 80054ce:	79fb      	ldrb	r3, [r7, #7]
 80054d0:	429a      	cmp	r2, r3
 80054d2:	d0a0      	beq.n	8005416 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80054d4:	2300      	movs	r3, #0
}
 80054d6:	4618      	mov	r0, r3
 80054d8:	3710      	adds	r7, #16
 80054da:	46bd      	mov	sp, r7
 80054dc:	bd80      	pop	{r7, pc}

080054de <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80054de:	b480      	push	{r7}
 80054e0:	b095      	sub	sp, #84	@ 0x54
 80054e2:	af00      	add	r7, sp, #0
 80054e4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80054ee:	e853 3f00 	ldrex	r3, [r3]
 80054f2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80054f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054f6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80054fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	461a      	mov	r2, r3
 8005502:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005504:	643b      	str	r3, [r7, #64]	@ 0x40
 8005506:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005508:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800550a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800550c:	e841 2300 	strex	r3, r2, [r1]
 8005510:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005512:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005514:	2b00      	cmp	r3, #0
 8005516:	d1e6      	bne.n	80054e6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	3308      	adds	r3, #8
 800551e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005520:	6a3b      	ldr	r3, [r7, #32]
 8005522:	e853 3f00 	ldrex	r3, [r3]
 8005526:	61fb      	str	r3, [r7, #28]
   return(result);
 8005528:	69fb      	ldr	r3, [r7, #28]
 800552a:	f023 0301 	bic.w	r3, r3, #1
 800552e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	3308      	adds	r3, #8
 8005536:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005538:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800553a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800553c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800553e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005540:	e841 2300 	strex	r3, r2, [r1]
 8005544:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005546:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005548:	2b00      	cmp	r3, #0
 800554a:	d1e5      	bne.n	8005518 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005550:	2b01      	cmp	r3, #1
 8005552:	d118      	bne.n	8005586 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	e853 3f00 	ldrex	r3, [r3]
 8005560:	60bb      	str	r3, [r7, #8]
   return(result);
 8005562:	68bb      	ldr	r3, [r7, #8]
 8005564:	f023 0310 	bic.w	r3, r3, #16
 8005568:	647b      	str	r3, [r7, #68]	@ 0x44
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	461a      	mov	r2, r3
 8005570:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005572:	61bb      	str	r3, [r7, #24]
 8005574:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005576:	6979      	ldr	r1, [r7, #20]
 8005578:	69ba      	ldr	r2, [r7, #24]
 800557a:	e841 2300 	strex	r3, r2, [r1]
 800557e:	613b      	str	r3, [r7, #16]
   return(result);
 8005580:	693b      	ldr	r3, [r7, #16]
 8005582:	2b00      	cmp	r3, #0
 8005584:	d1e6      	bne.n	8005554 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	2220      	movs	r2, #32
 800558a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	2200      	movs	r2, #0
 8005592:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	2200      	movs	r2, #0
 8005598:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800559a:	bf00      	nop
 800559c:	3754      	adds	r7, #84	@ 0x54
 800559e:	46bd      	mov	sp, r7
 80055a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a4:	4770      	bx	lr

080055a6 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80055a6:	b580      	push	{r7, lr}
 80055a8:	b084      	sub	sp, #16
 80055aa:	af00      	add	r7, sp, #0
 80055ac:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055b2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	2200      	movs	r2, #0
 80055b8:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	2200      	movs	r2, #0
 80055c0:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80055c4:	68f8      	ldr	r0, [r7, #12]
 80055c6:	f7ff fc87 	bl	8004ed8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80055ca:	bf00      	nop
 80055cc:	3710      	adds	r7, #16
 80055ce:	46bd      	mov	sp, r7
 80055d0:	bd80      	pop	{r7, pc}

080055d2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80055d2:	b580      	push	{r7, lr}
 80055d4:	b088      	sub	sp, #32
 80055d6:	af00      	add	r7, sp, #0
 80055d8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	e853 3f00 	ldrex	r3, [r3]
 80055e6:	60bb      	str	r3, [r7, #8]
   return(result);
 80055e8:	68bb      	ldr	r3, [r7, #8]
 80055ea:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80055ee:	61fb      	str	r3, [r7, #28]
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	461a      	mov	r2, r3
 80055f6:	69fb      	ldr	r3, [r7, #28]
 80055f8:	61bb      	str	r3, [r7, #24]
 80055fa:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055fc:	6979      	ldr	r1, [r7, #20]
 80055fe:	69ba      	ldr	r2, [r7, #24]
 8005600:	e841 2300 	strex	r3, r2, [r1]
 8005604:	613b      	str	r3, [r7, #16]
   return(result);
 8005606:	693b      	ldr	r3, [r7, #16]
 8005608:	2b00      	cmp	r3, #0
 800560a:	d1e6      	bne.n	80055da <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	2220      	movs	r2, #32
 8005610:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	2200      	movs	r2, #0
 8005616:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005618:	6878      	ldr	r0, [r7, #4]
 800561a:	f7ff fc53 	bl	8004ec4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800561e:	bf00      	nop
 8005620:	3720      	adds	r7, #32
 8005622:	46bd      	mov	sp, r7
 8005624:	bd80      	pop	{r7, pc}

08005626 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005626:	b480      	push	{r7}
 8005628:	b083      	sub	sp, #12
 800562a:	af00      	add	r7, sp, #0
 800562c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800562e:	bf00      	nop
 8005630:	370c      	adds	r7, #12
 8005632:	46bd      	mov	sp, r7
 8005634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005638:	4770      	bx	lr
	...

0800563c <siprintf>:
 800563c:	b40e      	push	{r1, r2, r3}
 800563e:	b500      	push	{lr}
 8005640:	b09c      	sub	sp, #112	@ 0x70
 8005642:	ab1d      	add	r3, sp, #116	@ 0x74
 8005644:	9002      	str	r0, [sp, #8]
 8005646:	9006      	str	r0, [sp, #24]
 8005648:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800564c:	4809      	ldr	r0, [pc, #36]	@ (8005674 <siprintf+0x38>)
 800564e:	9107      	str	r1, [sp, #28]
 8005650:	9104      	str	r1, [sp, #16]
 8005652:	4909      	ldr	r1, [pc, #36]	@ (8005678 <siprintf+0x3c>)
 8005654:	f853 2b04 	ldr.w	r2, [r3], #4
 8005658:	9105      	str	r1, [sp, #20]
 800565a:	6800      	ldr	r0, [r0, #0]
 800565c:	9301      	str	r3, [sp, #4]
 800565e:	a902      	add	r1, sp, #8
 8005660:	f000 f994 	bl	800598c <_svfiprintf_r>
 8005664:	9b02      	ldr	r3, [sp, #8]
 8005666:	2200      	movs	r2, #0
 8005668:	701a      	strb	r2, [r3, #0]
 800566a:	b01c      	add	sp, #112	@ 0x70
 800566c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005670:	b003      	add	sp, #12
 8005672:	4770      	bx	lr
 8005674:	2000000c 	.word	0x2000000c
 8005678:	ffff0208 	.word	0xffff0208

0800567c <memset>:
 800567c:	4402      	add	r2, r0
 800567e:	4603      	mov	r3, r0
 8005680:	4293      	cmp	r3, r2
 8005682:	d100      	bne.n	8005686 <memset+0xa>
 8005684:	4770      	bx	lr
 8005686:	f803 1b01 	strb.w	r1, [r3], #1
 800568a:	e7f9      	b.n	8005680 <memset+0x4>

0800568c <__errno>:
 800568c:	4b01      	ldr	r3, [pc, #4]	@ (8005694 <__errno+0x8>)
 800568e:	6818      	ldr	r0, [r3, #0]
 8005690:	4770      	bx	lr
 8005692:	bf00      	nop
 8005694:	2000000c 	.word	0x2000000c

08005698 <__libc_init_array>:
 8005698:	b570      	push	{r4, r5, r6, lr}
 800569a:	4d0d      	ldr	r5, [pc, #52]	@ (80056d0 <__libc_init_array+0x38>)
 800569c:	4c0d      	ldr	r4, [pc, #52]	@ (80056d4 <__libc_init_array+0x3c>)
 800569e:	1b64      	subs	r4, r4, r5
 80056a0:	10a4      	asrs	r4, r4, #2
 80056a2:	2600      	movs	r6, #0
 80056a4:	42a6      	cmp	r6, r4
 80056a6:	d109      	bne.n	80056bc <__libc_init_array+0x24>
 80056a8:	4d0b      	ldr	r5, [pc, #44]	@ (80056d8 <__libc_init_array+0x40>)
 80056aa:	4c0c      	ldr	r4, [pc, #48]	@ (80056dc <__libc_init_array+0x44>)
 80056ac:	f000 fc66 	bl	8005f7c <_init>
 80056b0:	1b64      	subs	r4, r4, r5
 80056b2:	10a4      	asrs	r4, r4, #2
 80056b4:	2600      	movs	r6, #0
 80056b6:	42a6      	cmp	r6, r4
 80056b8:	d105      	bne.n	80056c6 <__libc_init_array+0x2e>
 80056ba:	bd70      	pop	{r4, r5, r6, pc}
 80056bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80056c0:	4798      	blx	r3
 80056c2:	3601      	adds	r6, #1
 80056c4:	e7ee      	b.n	80056a4 <__libc_init_array+0xc>
 80056c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80056ca:	4798      	blx	r3
 80056cc:	3601      	adds	r6, #1
 80056ce:	e7f2      	b.n	80056b6 <__libc_init_array+0x1e>
 80056d0:	0800601c 	.word	0x0800601c
 80056d4:	0800601c 	.word	0x0800601c
 80056d8:	0800601c 	.word	0x0800601c
 80056dc:	08006020 	.word	0x08006020

080056e0 <__retarget_lock_acquire_recursive>:
 80056e0:	4770      	bx	lr

080056e2 <__retarget_lock_release_recursive>:
 80056e2:	4770      	bx	lr

080056e4 <_free_r>:
 80056e4:	b538      	push	{r3, r4, r5, lr}
 80056e6:	4605      	mov	r5, r0
 80056e8:	2900      	cmp	r1, #0
 80056ea:	d041      	beq.n	8005770 <_free_r+0x8c>
 80056ec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80056f0:	1f0c      	subs	r4, r1, #4
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	bfb8      	it	lt
 80056f6:	18e4      	addlt	r4, r4, r3
 80056f8:	f000 f8e0 	bl	80058bc <__malloc_lock>
 80056fc:	4a1d      	ldr	r2, [pc, #116]	@ (8005774 <_free_r+0x90>)
 80056fe:	6813      	ldr	r3, [r2, #0]
 8005700:	b933      	cbnz	r3, 8005710 <_free_r+0x2c>
 8005702:	6063      	str	r3, [r4, #4]
 8005704:	6014      	str	r4, [r2, #0]
 8005706:	4628      	mov	r0, r5
 8005708:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800570c:	f000 b8dc 	b.w	80058c8 <__malloc_unlock>
 8005710:	42a3      	cmp	r3, r4
 8005712:	d908      	bls.n	8005726 <_free_r+0x42>
 8005714:	6820      	ldr	r0, [r4, #0]
 8005716:	1821      	adds	r1, r4, r0
 8005718:	428b      	cmp	r3, r1
 800571a:	bf01      	itttt	eq
 800571c:	6819      	ldreq	r1, [r3, #0]
 800571e:	685b      	ldreq	r3, [r3, #4]
 8005720:	1809      	addeq	r1, r1, r0
 8005722:	6021      	streq	r1, [r4, #0]
 8005724:	e7ed      	b.n	8005702 <_free_r+0x1e>
 8005726:	461a      	mov	r2, r3
 8005728:	685b      	ldr	r3, [r3, #4]
 800572a:	b10b      	cbz	r3, 8005730 <_free_r+0x4c>
 800572c:	42a3      	cmp	r3, r4
 800572e:	d9fa      	bls.n	8005726 <_free_r+0x42>
 8005730:	6811      	ldr	r1, [r2, #0]
 8005732:	1850      	adds	r0, r2, r1
 8005734:	42a0      	cmp	r0, r4
 8005736:	d10b      	bne.n	8005750 <_free_r+0x6c>
 8005738:	6820      	ldr	r0, [r4, #0]
 800573a:	4401      	add	r1, r0
 800573c:	1850      	adds	r0, r2, r1
 800573e:	4283      	cmp	r3, r0
 8005740:	6011      	str	r1, [r2, #0]
 8005742:	d1e0      	bne.n	8005706 <_free_r+0x22>
 8005744:	6818      	ldr	r0, [r3, #0]
 8005746:	685b      	ldr	r3, [r3, #4]
 8005748:	6053      	str	r3, [r2, #4]
 800574a:	4408      	add	r0, r1
 800574c:	6010      	str	r0, [r2, #0]
 800574e:	e7da      	b.n	8005706 <_free_r+0x22>
 8005750:	d902      	bls.n	8005758 <_free_r+0x74>
 8005752:	230c      	movs	r3, #12
 8005754:	602b      	str	r3, [r5, #0]
 8005756:	e7d6      	b.n	8005706 <_free_r+0x22>
 8005758:	6820      	ldr	r0, [r4, #0]
 800575a:	1821      	adds	r1, r4, r0
 800575c:	428b      	cmp	r3, r1
 800575e:	bf04      	itt	eq
 8005760:	6819      	ldreq	r1, [r3, #0]
 8005762:	685b      	ldreq	r3, [r3, #4]
 8005764:	6063      	str	r3, [r4, #4]
 8005766:	bf04      	itt	eq
 8005768:	1809      	addeq	r1, r1, r0
 800576a:	6021      	streq	r1, [r4, #0]
 800576c:	6054      	str	r4, [r2, #4]
 800576e:	e7ca      	b.n	8005706 <_free_r+0x22>
 8005770:	bd38      	pop	{r3, r4, r5, pc}
 8005772:	bf00      	nop
 8005774:	200004d8 	.word	0x200004d8

08005778 <sbrk_aligned>:
 8005778:	b570      	push	{r4, r5, r6, lr}
 800577a:	4e0f      	ldr	r6, [pc, #60]	@ (80057b8 <sbrk_aligned+0x40>)
 800577c:	460c      	mov	r4, r1
 800577e:	6831      	ldr	r1, [r6, #0]
 8005780:	4605      	mov	r5, r0
 8005782:	b911      	cbnz	r1, 800578a <sbrk_aligned+0x12>
 8005784:	f000 fba6 	bl	8005ed4 <_sbrk_r>
 8005788:	6030      	str	r0, [r6, #0]
 800578a:	4621      	mov	r1, r4
 800578c:	4628      	mov	r0, r5
 800578e:	f000 fba1 	bl	8005ed4 <_sbrk_r>
 8005792:	1c43      	adds	r3, r0, #1
 8005794:	d103      	bne.n	800579e <sbrk_aligned+0x26>
 8005796:	f04f 34ff 	mov.w	r4, #4294967295
 800579a:	4620      	mov	r0, r4
 800579c:	bd70      	pop	{r4, r5, r6, pc}
 800579e:	1cc4      	adds	r4, r0, #3
 80057a0:	f024 0403 	bic.w	r4, r4, #3
 80057a4:	42a0      	cmp	r0, r4
 80057a6:	d0f8      	beq.n	800579a <sbrk_aligned+0x22>
 80057a8:	1a21      	subs	r1, r4, r0
 80057aa:	4628      	mov	r0, r5
 80057ac:	f000 fb92 	bl	8005ed4 <_sbrk_r>
 80057b0:	3001      	adds	r0, #1
 80057b2:	d1f2      	bne.n	800579a <sbrk_aligned+0x22>
 80057b4:	e7ef      	b.n	8005796 <sbrk_aligned+0x1e>
 80057b6:	bf00      	nop
 80057b8:	200004d4 	.word	0x200004d4

080057bc <_malloc_r>:
 80057bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80057c0:	1ccd      	adds	r5, r1, #3
 80057c2:	f025 0503 	bic.w	r5, r5, #3
 80057c6:	3508      	adds	r5, #8
 80057c8:	2d0c      	cmp	r5, #12
 80057ca:	bf38      	it	cc
 80057cc:	250c      	movcc	r5, #12
 80057ce:	2d00      	cmp	r5, #0
 80057d0:	4606      	mov	r6, r0
 80057d2:	db01      	blt.n	80057d8 <_malloc_r+0x1c>
 80057d4:	42a9      	cmp	r1, r5
 80057d6:	d904      	bls.n	80057e2 <_malloc_r+0x26>
 80057d8:	230c      	movs	r3, #12
 80057da:	6033      	str	r3, [r6, #0]
 80057dc:	2000      	movs	r0, #0
 80057de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80057e2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80058b8 <_malloc_r+0xfc>
 80057e6:	f000 f869 	bl	80058bc <__malloc_lock>
 80057ea:	f8d8 3000 	ldr.w	r3, [r8]
 80057ee:	461c      	mov	r4, r3
 80057f0:	bb44      	cbnz	r4, 8005844 <_malloc_r+0x88>
 80057f2:	4629      	mov	r1, r5
 80057f4:	4630      	mov	r0, r6
 80057f6:	f7ff ffbf 	bl	8005778 <sbrk_aligned>
 80057fa:	1c43      	adds	r3, r0, #1
 80057fc:	4604      	mov	r4, r0
 80057fe:	d158      	bne.n	80058b2 <_malloc_r+0xf6>
 8005800:	f8d8 4000 	ldr.w	r4, [r8]
 8005804:	4627      	mov	r7, r4
 8005806:	2f00      	cmp	r7, #0
 8005808:	d143      	bne.n	8005892 <_malloc_r+0xd6>
 800580a:	2c00      	cmp	r4, #0
 800580c:	d04b      	beq.n	80058a6 <_malloc_r+0xea>
 800580e:	6823      	ldr	r3, [r4, #0]
 8005810:	4639      	mov	r1, r7
 8005812:	4630      	mov	r0, r6
 8005814:	eb04 0903 	add.w	r9, r4, r3
 8005818:	f000 fb5c 	bl	8005ed4 <_sbrk_r>
 800581c:	4581      	cmp	r9, r0
 800581e:	d142      	bne.n	80058a6 <_malloc_r+0xea>
 8005820:	6821      	ldr	r1, [r4, #0]
 8005822:	1a6d      	subs	r5, r5, r1
 8005824:	4629      	mov	r1, r5
 8005826:	4630      	mov	r0, r6
 8005828:	f7ff ffa6 	bl	8005778 <sbrk_aligned>
 800582c:	3001      	adds	r0, #1
 800582e:	d03a      	beq.n	80058a6 <_malloc_r+0xea>
 8005830:	6823      	ldr	r3, [r4, #0]
 8005832:	442b      	add	r3, r5
 8005834:	6023      	str	r3, [r4, #0]
 8005836:	f8d8 3000 	ldr.w	r3, [r8]
 800583a:	685a      	ldr	r2, [r3, #4]
 800583c:	bb62      	cbnz	r2, 8005898 <_malloc_r+0xdc>
 800583e:	f8c8 7000 	str.w	r7, [r8]
 8005842:	e00f      	b.n	8005864 <_malloc_r+0xa8>
 8005844:	6822      	ldr	r2, [r4, #0]
 8005846:	1b52      	subs	r2, r2, r5
 8005848:	d420      	bmi.n	800588c <_malloc_r+0xd0>
 800584a:	2a0b      	cmp	r2, #11
 800584c:	d917      	bls.n	800587e <_malloc_r+0xc2>
 800584e:	1961      	adds	r1, r4, r5
 8005850:	42a3      	cmp	r3, r4
 8005852:	6025      	str	r5, [r4, #0]
 8005854:	bf18      	it	ne
 8005856:	6059      	strne	r1, [r3, #4]
 8005858:	6863      	ldr	r3, [r4, #4]
 800585a:	bf08      	it	eq
 800585c:	f8c8 1000 	streq.w	r1, [r8]
 8005860:	5162      	str	r2, [r4, r5]
 8005862:	604b      	str	r3, [r1, #4]
 8005864:	4630      	mov	r0, r6
 8005866:	f000 f82f 	bl	80058c8 <__malloc_unlock>
 800586a:	f104 000b 	add.w	r0, r4, #11
 800586e:	1d23      	adds	r3, r4, #4
 8005870:	f020 0007 	bic.w	r0, r0, #7
 8005874:	1ac2      	subs	r2, r0, r3
 8005876:	bf1c      	itt	ne
 8005878:	1a1b      	subne	r3, r3, r0
 800587a:	50a3      	strne	r3, [r4, r2]
 800587c:	e7af      	b.n	80057de <_malloc_r+0x22>
 800587e:	6862      	ldr	r2, [r4, #4]
 8005880:	42a3      	cmp	r3, r4
 8005882:	bf0c      	ite	eq
 8005884:	f8c8 2000 	streq.w	r2, [r8]
 8005888:	605a      	strne	r2, [r3, #4]
 800588a:	e7eb      	b.n	8005864 <_malloc_r+0xa8>
 800588c:	4623      	mov	r3, r4
 800588e:	6864      	ldr	r4, [r4, #4]
 8005890:	e7ae      	b.n	80057f0 <_malloc_r+0x34>
 8005892:	463c      	mov	r4, r7
 8005894:	687f      	ldr	r7, [r7, #4]
 8005896:	e7b6      	b.n	8005806 <_malloc_r+0x4a>
 8005898:	461a      	mov	r2, r3
 800589a:	685b      	ldr	r3, [r3, #4]
 800589c:	42a3      	cmp	r3, r4
 800589e:	d1fb      	bne.n	8005898 <_malloc_r+0xdc>
 80058a0:	2300      	movs	r3, #0
 80058a2:	6053      	str	r3, [r2, #4]
 80058a4:	e7de      	b.n	8005864 <_malloc_r+0xa8>
 80058a6:	230c      	movs	r3, #12
 80058a8:	6033      	str	r3, [r6, #0]
 80058aa:	4630      	mov	r0, r6
 80058ac:	f000 f80c 	bl	80058c8 <__malloc_unlock>
 80058b0:	e794      	b.n	80057dc <_malloc_r+0x20>
 80058b2:	6005      	str	r5, [r0, #0]
 80058b4:	e7d6      	b.n	8005864 <_malloc_r+0xa8>
 80058b6:	bf00      	nop
 80058b8:	200004d8 	.word	0x200004d8

080058bc <__malloc_lock>:
 80058bc:	4801      	ldr	r0, [pc, #4]	@ (80058c4 <__malloc_lock+0x8>)
 80058be:	f7ff bf0f 	b.w	80056e0 <__retarget_lock_acquire_recursive>
 80058c2:	bf00      	nop
 80058c4:	200004d0 	.word	0x200004d0

080058c8 <__malloc_unlock>:
 80058c8:	4801      	ldr	r0, [pc, #4]	@ (80058d0 <__malloc_unlock+0x8>)
 80058ca:	f7ff bf0a 	b.w	80056e2 <__retarget_lock_release_recursive>
 80058ce:	bf00      	nop
 80058d0:	200004d0 	.word	0x200004d0

080058d4 <__ssputs_r>:
 80058d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80058d8:	688e      	ldr	r6, [r1, #8]
 80058da:	461f      	mov	r7, r3
 80058dc:	42be      	cmp	r6, r7
 80058de:	680b      	ldr	r3, [r1, #0]
 80058e0:	4682      	mov	sl, r0
 80058e2:	460c      	mov	r4, r1
 80058e4:	4690      	mov	r8, r2
 80058e6:	d82d      	bhi.n	8005944 <__ssputs_r+0x70>
 80058e8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80058ec:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80058f0:	d026      	beq.n	8005940 <__ssputs_r+0x6c>
 80058f2:	6965      	ldr	r5, [r4, #20]
 80058f4:	6909      	ldr	r1, [r1, #16]
 80058f6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80058fa:	eba3 0901 	sub.w	r9, r3, r1
 80058fe:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005902:	1c7b      	adds	r3, r7, #1
 8005904:	444b      	add	r3, r9
 8005906:	106d      	asrs	r5, r5, #1
 8005908:	429d      	cmp	r5, r3
 800590a:	bf38      	it	cc
 800590c:	461d      	movcc	r5, r3
 800590e:	0553      	lsls	r3, r2, #21
 8005910:	d527      	bpl.n	8005962 <__ssputs_r+0x8e>
 8005912:	4629      	mov	r1, r5
 8005914:	f7ff ff52 	bl	80057bc <_malloc_r>
 8005918:	4606      	mov	r6, r0
 800591a:	b360      	cbz	r0, 8005976 <__ssputs_r+0xa2>
 800591c:	6921      	ldr	r1, [r4, #16]
 800591e:	464a      	mov	r2, r9
 8005920:	f000 fae8 	bl	8005ef4 <memcpy>
 8005924:	89a3      	ldrh	r3, [r4, #12]
 8005926:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800592a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800592e:	81a3      	strh	r3, [r4, #12]
 8005930:	6126      	str	r6, [r4, #16]
 8005932:	6165      	str	r5, [r4, #20]
 8005934:	444e      	add	r6, r9
 8005936:	eba5 0509 	sub.w	r5, r5, r9
 800593a:	6026      	str	r6, [r4, #0]
 800593c:	60a5      	str	r5, [r4, #8]
 800593e:	463e      	mov	r6, r7
 8005940:	42be      	cmp	r6, r7
 8005942:	d900      	bls.n	8005946 <__ssputs_r+0x72>
 8005944:	463e      	mov	r6, r7
 8005946:	6820      	ldr	r0, [r4, #0]
 8005948:	4632      	mov	r2, r6
 800594a:	4641      	mov	r1, r8
 800594c:	f000 faa8 	bl	8005ea0 <memmove>
 8005950:	68a3      	ldr	r3, [r4, #8]
 8005952:	1b9b      	subs	r3, r3, r6
 8005954:	60a3      	str	r3, [r4, #8]
 8005956:	6823      	ldr	r3, [r4, #0]
 8005958:	4433      	add	r3, r6
 800595a:	6023      	str	r3, [r4, #0]
 800595c:	2000      	movs	r0, #0
 800595e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005962:	462a      	mov	r2, r5
 8005964:	f000 fad4 	bl	8005f10 <_realloc_r>
 8005968:	4606      	mov	r6, r0
 800596a:	2800      	cmp	r0, #0
 800596c:	d1e0      	bne.n	8005930 <__ssputs_r+0x5c>
 800596e:	6921      	ldr	r1, [r4, #16]
 8005970:	4650      	mov	r0, sl
 8005972:	f7ff feb7 	bl	80056e4 <_free_r>
 8005976:	230c      	movs	r3, #12
 8005978:	f8ca 3000 	str.w	r3, [sl]
 800597c:	89a3      	ldrh	r3, [r4, #12]
 800597e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005982:	81a3      	strh	r3, [r4, #12]
 8005984:	f04f 30ff 	mov.w	r0, #4294967295
 8005988:	e7e9      	b.n	800595e <__ssputs_r+0x8a>
	...

0800598c <_svfiprintf_r>:
 800598c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005990:	4698      	mov	r8, r3
 8005992:	898b      	ldrh	r3, [r1, #12]
 8005994:	061b      	lsls	r3, r3, #24
 8005996:	b09d      	sub	sp, #116	@ 0x74
 8005998:	4607      	mov	r7, r0
 800599a:	460d      	mov	r5, r1
 800599c:	4614      	mov	r4, r2
 800599e:	d510      	bpl.n	80059c2 <_svfiprintf_r+0x36>
 80059a0:	690b      	ldr	r3, [r1, #16]
 80059a2:	b973      	cbnz	r3, 80059c2 <_svfiprintf_r+0x36>
 80059a4:	2140      	movs	r1, #64	@ 0x40
 80059a6:	f7ff ff09 	bl	80057bc <_malloc_r>
 80059aa:	6028      	str	r0, [r5, #0]
 80059ac:	6128      	str	r0, [r5, #16]
 80059ae:	b930      	cbnz	r0, 80059be <_svfiprintf_r+0x32>
 80059b0:	230c      	movs	r3, #12
 80059b2:	603b      	str	r3, [r7, #0]
 80059b4:	f04f 30ff 	mov.w	r0, #4294967295
 80059b8:	b01d      	add	sp, #116	@ 0x74
 80059ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80059be:	2340      	movs	r3, #64	@ 0x40
 80059c0:	616b      	str	r3, [r5, #20]
 80059c2:	2300      	movs	r3, #0
 80059c4:	9309      	str	r3, [sp, #36]	@ 0x24
 80059c6:	2320      	movs	r3, #32
 80059c8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80059cc:	f8cd 800c 	str.w	r8, [sp, #12]
 80059d0:	2330      	movs	r3, #48	@ 0x30
 80059d2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8005b70 <_svfiprintf_r+0x1e4>
 80059d6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80059da:	f04f 0901 	mov.w	r9, #1
 80059de:	4623      	mov	r3, r4
 80059e0:	469a      	mov	sl, r3
 80059e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80059e6:	b10a      	cbz	r2, 80059ec <_svfiprintf_r+0x60>
 80059e8:	2a25      	cmp	r2, #37	@ 0x25
 80059ea:	d1f9      	bne.n	80059e0 <_svfiprintf_r+0x54>
 80059ec:	ebba 0b04 	subs.w	fp, sl, r4
 80059f0:	d00b      	beq.n	8005a0a <_svfiprintf_r+0x7e>
 80059f2:	465b      	mov	r3, fp
 80059f4:	4622      	mov	r2, r4
 80059f6:	4629      	mov	r1, r5
 80059f8:	4638      	mov	r0, r7
 80059fa:	f7ff ff6b 	bl	80058d4 <__ssputs_r>
 80059fe:	3001      	adds	r0, #1
 8005a00:	f000 80a7 	beq.w	8005b52 <_svfiprintf_r+0x1c6>
 8005a04:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005a06:	445a      	add	r2, fp
 8005a08:	9209      	str	r2, [sp, #36]	@ 0x24
 8005a0a:	f89a 3000 	ldrb.w	r3, [sl]
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	f000 809f 	beq.w	8005b52 <_svfiprintf_r+0x1c6>
 8005a14:	2300      	movs	r3, #0
 8005a16:	f04f 32ff 	mov.w	r2, #4294967295
 8005a1a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005a1e:	f10a 0a01 	add.w	sl, sl, #1
 8005a22:	9304      	str	r3, [sp, #16]
 8005a24:	9307      	str	r3, [sp, #28]
 8005a26:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005a2a:	931a      	str	r3, [sp, #104]	@ 0x68
 8005a2c:	4654      	mov	r4, sl
 8005a2e:	2205      	movs	r2, #5
 8005a30:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005a34:	484e      	ldr	r0, [pc, #312]	@ (8005b70 <_svfiprintf_r+0x1e4>)
 8005a36:	f7fa fbcb 	bl	80001d0 <memchr>
 8005a3a:	9a04      	ldr	r2, [sp, #16]
 8005a3c:	b9d8      	cbnz	r0, 8005a76 <_svfiprintf_r+0xea>
 8005a3e:	06d0      	lsls	r0, r2, #27
 8005a40:	bf44      	itt	mi
 8005a42:	2320      	movmi	r3, #32
 8005a44:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005a48:	0711      	lsls	r1, r2, #28
 8005a4a:	bf44      	itt	mi
 8005a4c:	232b      	movmi	r3, #43	@ 0x2b
 8005a4e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005a52:	f89a 3000 	ldrb.w	r3, [sl]
 8005a56:	2b2a      	cmp	r3, #42	@ 0x2a
 8005a58:	d015      	beq.n	8005a86 <_svfiprintf_r+0xfa>
 8005a5a:	9a07      	ldr	r2, [sp, #28]
 8005a5c:	4654      	mov	r4, sl
 8005a5e:	2000      	movs	r0, #0
 8005a60:	f04f 0c0a 	mov.w	ip, #10
 8005a64:	4621      	mov	r1, r4
 8005a66:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005a6a:	3b30      	subs	r3, #48	@ 0x30
 8005a6c:	2b09      	cmp	r3, #9
 8005a6e:	d94b      	bls.n	8005b08 <_svfiprintf_r+0x17c>
 8005a70:	b1b0      	cbz	r0, 8005aa0 <_svfiprintf_r+0x114>
 8005a72:	9207      	str	r2, [sp, #28]
 8005a74:	e014      	b.n	8005aa0 <_svfiprintf_r+0x114>
 8005a76:	eba0 0308 	sub.w	r3, r0, r8
 8005a7a:	fa09 f303 	lsl.w	r3, r9, r3
 8005a7e:	4313      	orrs	r3, r2
 8005a80:	9304      	str	r3, [sp, #16]
 8005a82:	46a2      	mov	sl, r4
 8005a84:	e7d2      	b.n	8005a2c <_svfiprintf_r+0xa0>
 8005a86:	9b03      	ldr	r3, [sp, #12]
 8005a88:	1d19      	adds	r1, r3, #4
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	9103      	str	r1, [sp, #12]
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	bfbb      	ittet	lt
 8005a92:	425b      	neglt	r3, r3
 8005a94:	f042 0202 	orrlt.w	r2, r2, #2
 8005a98:	9307      	strge	r3, [sp, #28]
 8005a9a:	9307      	strlt	r3, [sp, #28]
 8005a9c:	bfb8      	it	lt
 8005a9e:	9204      	strlt	r2, [sp, #16]
 8005aa0:	7823      	ldrb	r3, [r4, #0]
 8005aa2:	2b2e      	cmp	r3, #46	@ 0x2e
 8005aa4:	d10a      	bne.n	8005abc <_svfiprintf_r+0x130>
 8005aa6:	7863      	ldrb	r3, [r4, #1]
 8005aa8:	2b2a      	cmp	r3, #42	@ 0x2a
 8005aaa:	d132      	bne.n	8005b12 <_svfiprintf_r+0x186>
 8005aac:	9b03      	ldr	r3, [sp, #12]
 8005aae:	1d1a      	adds	r2, r3, #4
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	9203      	str	r2, [sp, #12]
 8005ab4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005ab8:	3402      	adds	r4, #2
 8005aba:	9305      	str	r3, [sp, #20]
 8005abc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8005b80 <_svfiprintf_r+0x1f4>
 8005ac0:	7821      	ldrb	r1, [r4, #0]
 8005ac2:	2203      	movs	r2, #3
 8005ac4:	4650      	mov	r0, sl
 8005ac6:	f7fa fb83 	bl	80001d0 <memchr>
 8005aca:	b138      	cbz	r0, 8005adc <_svfiprintf_r+0x150>
 8005acc:	9b04      	ldr	r3, [sp, #16]
 8005ace:	eba0 000a 	sub.w	r0, r0, sl
 8005ad2:	2240      	movs	r2, #64	@ 0x40
 8005ad4:	4082      	lsls	r2, r0
 8005ad6:	4313      	orrs	r3, r2
 8005ad8:	3401      	adds	r4, #1
 8005ada:	9304      	str	r3, [sp, #16]
 8005adc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005ae0:	4824      	ldr	r0, [pc, #144]	@ (8005b74 <_svfiprintf_r+0x1e8>)
 8005ae2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005ae6:	2206      	movs	r2, #6
 8005ae8:	f7fa fb72 	bl	80001d0 <memchr>
 8005aec:	2800      	cmp	r0, #0
 8005aee:	d036      	beq.n	8005b5e <_svfiprintf_r+0x1d2>
 8005af0:	4b21      	ldr	r3, [pc, #132]	@ (8005b78 <_svfiprintf_r+0x1ec>)
 8005af2:	bb1b      	cbnz	r3, 8005b3c <_svfiprintf_r+0x1b0>
 8005af4:	9b03      	ldr	r3, [sp, #12]
 8005af6:	3307      	adds	r3, #7
 8005af8:	f023 0307 	bic.w	r3, r3, #7
 8005afc:	3308      	adds	r3, #8
 8005afe:	9303      	str	r3, [sp, #12]
 8005b00:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005b02:	4433      	add	r3, r6
 8005b04:	9309      	str	r3, [sp, #36]	@ 0x24
 8005b06:	e76a      	b.n	80059de <_svfiprintf_r+0x52>
 8005b08:	fb0c 3202 	mla	r2, ip, r2, r3
 8005b0c:	460c      	mov	r4, r1
 8005b0e:	2001      	movs	r0, #1
 8005b10:	e7a8      	b.n	8005a64 <_svfiprintf_r+0xd8>
 8005b12:	2300      	movs	r3, #0
 8005b14:	3401      	adds	r4, #1
 8005b16:	9305      	str	r3, [sp, #20]
 8005b18:	4619      	mov	r1, r3
 8005b1a:	f04f 0c0a 	mov.w	ip, #10
 8005b1e:	4620      	mov	r0, r4
 8005b20:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005b24:	3a30      	subs	r2, #48	@ 0x30
 8005b26:	2a09      	cmp	r2, #9
 8005b28:	d903      	bls.n	8005b32 <_svfiprintf_r+0x1a6>
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d0c6      	beq.n	8005abc <_svfiprintf_r+0x130>
 8005b2e:	9105      	str	r1, [sp, #20]
 8005b30:	e7c4      	b.n	8005abc <_svfiprintf_r+0x130>
 8005b32:	fb0c 2101 	mla	r1, ip, r1, r2
 8005b36:	4604      	mov	r4, r0
 8005b38:	2301      	movs	r3, #1
 8005b3a:	e7f0      	b.n	8005b1e <_svfiprintf_r+0x192>
 8005b3c:	ab03      	add	r3, sp, #12
 8005b3e:	9300      	str	r3, [sp, #0]
 8005b40:	462a      	mov	r2, r5
 8005b42:	4b0e      	ldr	r3, [pc, #56]	@ (8005b7c <_svfiprintf_r+0x1f0>)
 8005b44:	a904      	add	r1, sp, #16
 8005b46:	4638      	mov	r0, r7
 8005b48:	f3af 8000 	nop.w
 8005b4c:	1c42      	adds	r2, r0, #1
 8005b4e:	4606      	mov	r6, r0
 8005b50:	d1d6      	bne.n	8005b00 <_svfiprintf_r+0x174>
 8005b52:	89ab      	ldrh	r3, [r5, #12]
 8005b54:	065b      	lsls	r3, r3, #25
 8005b56:	f53f af2d 	bmi.w	80059b4 <_svfiprintf_r+0x28>
 8005b5a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005b5c:	e72c      	b.n	80059b8 <_svfiprintf_r+0x2c>
 8005b5e:	ab03      	add	r3, sp, #12
 8005b60:	9300      	str	r3, [sp, #0]
 8005b62:	462a      	mov	r2, r5
 8005b64:	4b05      	ldr	r3, [pc, #20]	@ (8005b7c <_svfiprintf_r+0x1f0>)
 8005b66:	a904      	add	r1, sp, #16
 8005b68:	4638      	mov	r0, r7
 8005b6a:	f000 f879 	bl	8005c60 <_printf_i>
 8005b6e:	e7ed      	b.n	8005b4c <_svfiprintf_r+0x1c0>
 8005b70:	08005fe0 	.word	0x08005fe0
 8005b74:	08005fea 	.word	0x08005fea
 8005b78:	00000000 	.word	0x00000000
 8005b7c:	080058d5 	.word	0x080058d5
 8005b80:	08005fe6 	.word	0x08005fe6

08005b84 <_printf_common>:
 8005b84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005b88:	4616      	mov	r6, r2
 8005b8a:	4698      	mov	r8, r3
 8005b8c:	688a      	ldr	r2, [r1, #8]
 8005b8e:	690b      	ldr	r3, [r1, #16]
 8005b90:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005b94:	4293      	cmp	r3, r2
 8005b96:	bfb8      	it	lt
 8005b98:	4613      	movlt	r3, r2
 8005b9a:	6033      	str	r3, [r6, #0]
 8005b9c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005ba0:	4607      	mov	r7, r0
 8005ba2:	460c      	mov	r4, r1
 8005ba4:	b10a      	cbz	r2, 8005baa <_printf_common+0x26>
 8005ba6:	3301      	adds	r3, #1
 8005ba8:	6033      	str	r3, [r6, #0]
 8005baa:	6823      	ldr	r3, [r4, #0]
 8005bac:	0699      	lsls	r1, r3, #26
 8005bae:	bf42      	ittt	mi
 8005bb0:	6833      	ldrmi	r3, [r6, #0]
 8005bb2:	3302      	addmi	r3, #2
 8005bb4:	6033      	strmi	r3, [r6, #0]
 8005bb6:	6825      	ldr	r5, [r4, #0]
 8005bb8:	f015 0506 	ands.w	r5, r5, #6
 8005bbc:	d106      	bne.n	8005bcc <_printf_common+0x48>
 8005bbe:	f104 0a19 	add.w	sl, r4, #25
 8005bc2:	68e3      	ldr	r3, [r4, #12]
 8005bc4:	6832      	ldr	r2, [r6, #0]
 8005bc6:	1a9b      	subs	r3, r3, r2
 8005bc8:	42ab      	cmp	r3, r5
 8005bca:	dc26      	bgt.n	8005c1a <_printf_common+0x96>
 8005bcc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005bd0:	6822      	ldr	r2, [r4, #0]
 8005bd2:	3b00      	subs	r3, #0
 8005bd4:	bf18      	it	ne
 8005bd6:	2301      	movne	r3, #1
 8005bd8:	0692      	lsls	r2, r2, #26
 8005bda:	d42b      	bmi.n	8005c34 <_printf_common+0xb0>
 8005bdc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005be0:	4641      	mov	r1, r8
 8005be2:	4638      	mov	r0, r7
 8005be4:	47c8      	blx	r9
 8005be6:	3001      	adds	r0, #1
 8005be8:	d01e      	beq.n	8005c28 <_printf_common+0xa4>
 8005bea:	6823      	ldr	r3, [r4, #0]
 8005bec:	6922      	ldr	r2, [r4, #16]
 8005bee:	f003 0306 	and.w	r3, r3, #6
 8005bf2:	2b04      	cmp	r3, #4
 8005bf4:	bf02      	ittt	eq
 8005bf6:	68e5      	ldreq	r5, [r4, #12]
 8005bf8:	6833      	ldreq	r3, [r6, #0]
 8005bfa:	1aed      	subeq	r5, r5, r3
 8005bfc:	68a3      	ldr	r3, [r4, #8]
 8005bfe:	bf0c      	ite	eq
 8005c00:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005c04:	2500      	movne	r5, #0
 8005c06:	4293      	cmp	r3, r2
 8005c08:	bfc4      	itt	gt
 8005c0a:	1a9b      	subgt	r3, r3, r2
 8005c0c:	18ed      	addgt	r5, r5, r3
 8005c0e:	2600      	movs	r6, #0
 8005c10:	341a      	adds	r4, #26
 8005c12:	42b5      	cmp	r5, r6
 8005c14:	d11a      	bne.n	8005c4c <_printf_common+0xc8>
 8005c16:	2000      	movs	r0, #0
 8005c18:	e008      	b.n	8005c2c <_printf_common+0xa8>
 8005c1a:	2301      	movs	r3, #1
 8005c1c:	4652      	mov	r2, sl
 8005c1e:	4641      	mov	r1, r8
 8005c20:	4638      	mov	r0, r7
 8005c22:	47c8      	blx	r9
 8005c24:	3001      	adds	r0, #1
 8005c26:	d103      	bne.n	8005c30 <_printf_common+0xac>
 8005c28:	f04f 30ff 	mov.w	r0, #4294967295
 8005c2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c30:	3501      	adds	r5, #1
 8005c32:	e7c6      	b.n	8005bc2 <_printf_common+0x3e>
 8005c34:	18e1      	adds	r1, r4, r3
 8005c36:	1c5a      	adds	r2, r3, #1
 8005c38:	2030      	movs	r0, #48	@ 0x30
 8005c3a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005c3e:	4422      	add	r2, r4
 8005c40:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005c44:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005c48:	3302      	adds	r3, #2
 8005c4a:	e7c7      	b.n	8005bdc <_printf_common+0x58>
 8005c4c:	2301      	movs	r3, #1
 8005c4e:	4622      	mov	r2, r4
 8005c50:	4641      	mov	r1, r8
 8005c52:	4638      	mov	r0, r7
 8005c54:	47c8      	blx	r9
 8005c56:	3001      	adds	r0, #1
 8005c58:	d0e6      	beq.n	8005c28 <_printf_common+0xa4>
 8005c5a:	3601      	adds	r6, #1
 8005c5c:	e7d9      	b.n	8005c12 <_printf_common+0x8e>
	...

08005c60 <_printf_i>:
 8005c60:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005c64:	7e0f      	ldrb	r7, [r1, #24]
 8005c66:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005c68:	2f78      	cmp	r7, #120	@ 0x78
 8005c6a:	4691      	mov	r9, r2
 8005c6c:	4680      	mov	r8, r0
 8005c6e:	460c      	mov	r4, r1
 8005c70:	469a      	mov	sl, r3
 8005c72:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005c76:	d807      	bhi.n	8005c88 <_printf_i+0x28>
 8005c78:	2f62      	cmp	r7, #98	@ 0x62
 8005c7a:	d80a      	bhi.n	8005c92 <_printf_i+0x32>
 8005c7c:	2f00      	cmp	r7, #0
 8005c7e:	f000 80d2 	beq.w	8005e26 <_printf_i+0x1c6>
 8005c82:	2f58      	cmp	r7, #88	@ 0x58
 8005c84:	f000 80b9 	beq.w	8005dfa <_printf_i+0x19a>
 8005c88:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005c8c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005c90:	e03a      	b.n	8005d08 <_printf_i+0xa8>
 8005c92:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005c96:	2b15      	cmp	r3, #21
 8005c98:	d8f6      	bhi.n	8005c88 <_printf_i+0x28>
 8005c9a:	a101      	add	r1, pc, #4	@ (adr r1, 8005ca0 <_printf_i+0x40>)
 8005c9c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005ca0:	08005cf9 	.word	0x08005cf9
 8005ca4:	08005d0d 	.word	0x08005d0d
 8005ca8:	08005c89 	.word	0x08005c89
 8005cac:	08005c89 	.word	0x08005c89
 8005cb0:	08005c89 	.word	0x08005c89
 8005cb4:	08005c89 	.word	0x08005c89
 8005cb8:	08005d0d 	.word	0x08005d0d
 8005cbc:	08005c89 	.word	0x08005c89
 8005cc0:	08005c89 	.word	0x08005c89
 8005cc4:	08005c89 	.word	0x08005c89
 8005cc8:	08005c89 	.word	0x08005c89
 8005ccc:	08005e0d 	.word	0x08005e0d
 8005cd0:	08005d37 	.word	0x08005d37
 8005cd4:	08005dc7 	.word	0x08005dc7
 8005cd8:	08005c89 	.word	0x08005c89
 8005cdc:	08005c89 	.word	0x08005c89
 8005ce0:	08005e2f 	.word	0x08005e2f
 8005ce4:	08005c89 	.word	0x08005c89
 8005ce8:	08005d37 	.word	0x08005d37
 8005cec:	08005c89 	.word	0x08005c89
 8005cf0:	08005c89 	.word	0x08005c89
 8005cf4:	08005dcf 	.word	0x08005dcf
 8005cf8:	6833      	ldr	r3, [r6, #0]
 8005cfa:	1d1a      	adds	r2, r3, #4
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	6032      	str	r2, [r6, #0]
 8005d00:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005d04:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005d08:	2301      	movs	r3, #1
 8005d0a:	e09d      	b.n	8005e48 <_printf_i+0x1e8>
 8005d0c:	6833      	ldr	r3, [r6, #0]
 8005d0e:	6820      	ldr	r0, [r4, #0]
 8005d10:	1d19      	adds	r1, r3, #4
 8005d12:	6031      	str	r1, [r6, #0]
 8005d14:	0606      	lsls	r6, r0, #24
 8005d16:	d501      	bpl.n	8005d1c <_printf_i+0xbc>
 8005d18:	681d      	ldr	r5, [r3, #0]
 8005d1a:	e003      	b.n	8005d24 <_printf_i+0xc4>
 8005d1c:	0645      	lsls	r5, r0, #25
 8005d1e:	d5fb      	bpl.n	8005d18 <_printf_i+0xb8>
 8005d20:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005d24:	2d00      	cmp	r5, #0
 8005d26:	da03      	bge.n	8005d30 <_printf_i+0xd0>
 8005d28:	232d      	movs	r3, #45	@ 0x2d
 8005d2a:	426d      	negs	r5, r5
 8005d2c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005d30:	4859      	ldr	r0, [pc, #356]	@ (8005e98 <_printf_i+0x238>)
 8005d32:	230a      	movs	r3, #10
 8005d34:	e011      	b.n	8005d5a <_printf_i+0xfa>
 8005d36:	6821      	ldr	r1, [r4, #0]
 8005d38:	6833      	ldr	r3, [r6, #0]
 8005d3a:	0608      	lsls	r0, r1, #24
 8005d3c:	f853 5b04 	ldr.w	r5, [r3], #4
 8005d40:	d402      	bmi.n	8005d48 <_printf_i+0xe8>
 8005d42:	0649      	lsls	r1, r1, #25
 8005d44:	bf48      	it	mi
 8005d46:	b2ad      	uxthmi	r5, r5
 8005d48:	2f6f      	cmp	r7, #111	@ 0x6f
 8005d4a:	4853      	ldr	r0, [pc, #332]	@ (8005e98 <_printf_i+0x238>)
 8005d4c:	6033      	str	r3, [r6, #0]
 8005d4e:	bf14      	ite	ne
 8005d50:	230a      	movne	r3, #10
 8005d52:	2308      	moveq	r3, #8
 8005d54:	2100      	movs	r1, #0
 8005d56:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005d5a:	6866      	ldr	r6, [r4, #4]
 8005d5c:	60a6      	str	r6, [r4, #8]
 8005d5e:	2e00      	cmp	r6, #0
 8005d60:	bfa2      	ittt	ge
 8005d62:	6821      	ldrge	r1, [r4, #0]
 8005d64:	f021 0104 	bicge.w	r1, r1, #4
 8005d68:	6021      	strge	r1, [r4, #0]
 8005d6a:	b90d      	cbnz	r5, 8005d70 <_printf_i+0x110>
 8005d6c:	2e00      	cmp	r6, #0
 8005d6e:	d04b      	beq.n	8005e08 <_printf_i+0x1a8>
 8005d70:	4616      	mov	r6, r2
 8005d72:	fbb5 f1f3 	udiv	r1, r5, r3
 8005d76:	fb03 5711 	mls	r7, r3, r1, r5
 8005d7a:	5dc7      	ldrb	r7, [r0, r7]
 8005d7c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005d80:	462f      	mov	r7, r5
 8005d82:	42bb      	cmp	r3, r7
 8005d84:	460d      	mov	r5, r1
 8005d86:	d9f4      	bls.n	8005d72 <_printf_i+0x112>
 8005d88:	2b08      	cmp	r3, #8
 8005d8a:	d10b      	bne.n	8005da4 <_printf_i+0x144>
 8005d8c:	6823      	ldr	r3, [r4, #0]
 8005d8e:	07df      	lsls	r7, r3, #31
 8005d90:	d508      	bpl.n	8005da4 <_printf_i+0x144>
 8005d92:	6923      	ldr	r3, [r4, #16]
 8005d94:	6861      	ldr	r1, [r4, #4]
 8005d96:	4299      	cmp	r1, r3
 8005d98:	bfde      	ittt	le
 8005d9a:	2330      	movle	r3, #48	@ 0x30
 8005d9c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005da0:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005da4:	1b92      	subs	r2, r2, r6
 8005da6:	6122      	str	r2, [r4, #16]
 8005da8:	f8cd a000 	str.w	sl, [sp]
 8005dac:	464b      	mov	r3, r9
 8005dae:	aa03      	add	r2, sp, #12
 8005db0:	4621      	mov	r1, r4
 8005db2:	4640      	mov	r0, r8
 8005db4:	f7ff fee6 	bl	8005b84 <_printf_common>
 8005db8:	3001      	adds	r0, #1
 8005dba:	d14a      	bne.n	8005e52 <_printf_i+0x1f2>
 8005dbc:	f04f 30ff 	mov.w	r0, #4294967295
 8005dc0:	b004      	add	sp, #16
 8005dc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005dc6:	6823      	ldr	r3, [r4, #0]
 8005dc8:	f043 0320 	orr.w	r3, r3, #32
 8005dcc:	6023      	str	r3, [r4, #0]
 8005dce:	4833      	ldr	r0, [pc, #204]	@ (8005e9c <_printf_i+0x23c>)
 8005dd0:	2778      	movs	r7, #120	@ 0x78
 8005dd2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005dd6:	6823      	ldr	r3, [r4, #0]
 8005dd8:	6831      	ldr	r1, [r6, #0]
 8005dda:	061f      	lsls	r7, r3, #24
 8005ddc:	f851 5b04 	ldr.w	r5, [r1], #4
 8005de0:	d402      	bmi.n	8005de8 <_printf_i+0x188>
 8005de2:	065f      	lsls	r7, r3, #25
 8005de4:	bf48      	it	mi
 8005de6:	b2ad      	uxthmi	r5, r5
 8005de8:	6031      	str	r1, [r6, #0]
 8005dea:	07d9      	lsls	r1, r3, #31
 8005dec:	bf44      	itt	mi
 8005dee:	f043 0320 	orrmi.w	r3, r3, #32
 8005df2:	6023      	strmi	r3, [r4, #0]
 8005df4:	b11d      	cbz	r5, 8005dfe <_printf_i+0x19e>
 8005df6:	2310      	movs	r3, #16
 8005df8:	e7ac      	b.n	8005d54 <_printf_i+0xf4>
 8005dfa:	4827      	ldr	r0, [pc, #156]	@ (8005e98 <_printf_i+0x238>)
 8005dfc:	e7e9      	b.n	8005dd2 <_printf_i+0x172>
 8005dfe:	6823      	ldr	r3, [r4, #0]
 8005e00:	f023 0320 	bic.w	r3, r3, #32
 8005e04:	6023      	str	r3, [r4, #0]
 8005e06:	e7f6      	b.n	8005df6 <_printf_i+0x196>
 8005e08:	4616      	mov	r6, r2
 8005e0a:	e7bd      	b.n	8005d88 <_printf_i+0x128>
 8005e0c:	6833      	ldr	r3, [r6, #0]
 8005e0e:	6825      	ldr	r5, [r4, #0]
 8005e10:	6961      	ldr	r1, [r4, #20]
 8005e12:	1d18      	adds	r0, r3, #4
 8005e14:	6030      	str	r0, [r6, #0]
 8005e16:	062e      	lsls	r6, r5, #24
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	d501      	bpl.n	8005e20 <_printf_i+0x1c0>
 8005e1c:	6019      	str	r1, [r3, #0]
 8005e1e:	e002      	b.n	8005e26 <_printf_i+0x1c6>
 8005e20:	0668      	lsls	r0, r5, #25
 8005e22:	d5fb      	bpl.n	8005e1c <_printf_i+0x1bc>
 8005e24:	8019      	strh	r1, [r3, #0]
 8005e26:	2300      	movs	r3, #0
 8005e28:	6123      	str	r3, [r4, #16]
 8005e2a:	4616      	mov	r6, r2
 8005e2c:	e7bc      	b.n	8005da8 <_printf_i+0x148>
 8005e2e:	6833      	ldr	r3, [r6, #0]
 8005e30:	1d1a      	adds	r2, r3, #4
 8005e32:	6032      	str	r2, [r6, #0]
 8005e34:	681e      	ldr	r6, [r3, #0]
 8005e36:	6862      	ldr	r2, [r4, #4]
 8005e38:	2100      	movs	r1, #0
 8005e3a:	4630      	mov	r0, r6
 8005e3c:	f7fa f9c8 	bl	80001d0 <memchr>
 8005e40:	b108      	cbz	r0, 8005e46 <_printf_i+0x1e6>
 8005e42:	1b80      	subs	r0, r0, r6
 8005e44:	6060      	str	r0, [r4, #4]
 8005e46:	6863      	ldr	r3, [r4, #4]
 8005e48:	6123      	str	r3, [r4, #16]
 8005e4a:	2300      	movs	r3, #0
 8005e4c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005e50:	e7aa      	b.n	8005da8 <_printf_i+0x148>
 8005e52:	6923      	ldr	r3, [r4, #16]
 8005e54:	4632      	mov	r2, r6
 8005e56:	4649      	mov	r1, r9
 8005e58:	4640      	mov	r0, r8
 8005e5a:	47d0      	blx	sl
 8005e5c:	3001      	adds	r0, #1
 8005e5e:	d0ad      	beq.n	8005dbc <_printf_i+0x15c>
 8005e60:	6823      	ldr	r3, [r4, #0]
 8005e62:	079b      	lsls	r3, r3, #30
 8005e64:	d413      	bmi.n	8005e8e <_printf_i+0x22e>
 8005e66:	68e0      	ldr	r0, [r4, #12]
 8005e68:	9b03      	ldr	r3, [sp, #12]
 8005e6a:	4298      	cmp	r0, r3
 8005e6c:	bfb8      	it	lt
 8005e6e:	4618      	movlt	r0, r3
 8005e70:	e7a6      	b.n	8005dc0 <_printf_i+0x160>
 8005e72:	2301      	movs	r3, #1
 8005e74:	4632      	mov	r2, r6
 8005e76:	4649      	mov	r1, r9
 8005e78:	4640      	mov	r0, r8
 8005e7a:	47d0      	blx	sl
 8005e7c:	3001      	adds	r0, #1
 8005e7e:	d09d      	beq.n	8005dbc <_printf_i+0x15c>
 8005e80:	3501      	adds	r5, #1
 8005e82:	68e3      	ldr	r3, [r4, #12]
 8005e84:	9903      	ldr	r1, [sp, #12]
 8005e86:	1a5b      	subs	r3, r3, r1
 8005e88:	42ab      	cmp	r3, r5
 8005e8a:	dcf2      	bgt.n	8005e72 <_printf_i+0x212>
 8005e8c:	e7eb      	b.n	8005e66 <_printf_i+0x206>
 8005e8e:	2500      	movs	r5, #0
 8005e90:	f104 0619 	add.w	r6, r4, #25
 8005e94:	e7f5      	b.n	8005e82 <_printf_i+0x222>
 8005e96:	bf00      	nop
 8005e98:	08005ff1 	.word	0x08005ff1
 8005e9c:	08006002 	.word	0x08006002

08005ea0 <memmove>:
 8005ea0:	4288      	cmp	r0, r1
 8005ea2:	b510      	push	{r4, lr}
 8005ea4:	eb01 0402 	add.w	r4, r1, r2
 8005ea8:	d902      	bls.n	8005eb0 <memmove+0x10>
 8005eaa:	4284      	cmp	r4, r0
 8005eac:	4623      	mov	r3, r4
 8005eae:	d807      	bhi.n	8005ec0 <memmove+0x20>
 8005eb0:	1e43      	subs	r3, r0, #1
 8005eb2:	42a1      	cmp	r1, r4
 8005eb4:	d008      	beq.n	8005ec8 <memmove+0x28>
 8005eb6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005eba:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005ebe:	e7f8      	b.n	8005eb2 <memmove+0x12>
 8005ec0:	4402      	add	r2, r0
 8005ec2:	4601      	mov	r1, r0
 8005ec4:	428a      	cmp	r2, r1
 8005ec6:	d100      	bne.n	8005eca <memmove+0x2a>
 8005ec8:	bd10      	pop	{r4, pc}
 8005eca:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005ece:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005ed2:	e7f7      	b.n	8005ec4 <memmove+0x24>

08005ed4 <_sbrk_r>:
 8005ed4:	b538      	push	{r3, r4, r5, lr}
 8005ed6:	4d06      	ldr	r5, [pc, #24]	@ (8005ef0 <_sbrk_r+0x1c>)
 8005ed8:	2300      	movs	r3, #0
 8005eda:	4604      	mov	r4, r0
 8005edc:	4608      	mov	r0, r1
 8005ede:	602b      	str	r3, [r5, #0]
 8005ee0:	f7fb fa84 	bl	80013ec <_sbrk>
 8005ee4:	1c43      	adds	r3, r0, #1
 8005ee6:	d102      	bne.n	8005eee <_sbrk_r+0x1a>
 8005ee8:	682b      	ldr	r3, [r5, #0]
 8005eea:	b103      	cbz	r3, 8005eee <_sbrk_r+0x1a>
 8005eec:	6023      	str	r3, [r4, #0]
 8005eee:	bd38      	pop	{r3, r4, r5, pc}
 8005ef0:	200004cc 	.word	0x200004cc

08005ef4 <memcpy>:
 8005ef4:	440a      	add	r2, r1
 8005ef6:	4291      	cmp	r1, r2
 8005ef8:	f100 33ff 	add.w	r3, r0, #4294967295
 8005efc:	d100      	bne.n	8005f00 <memcpy+0xc>
 8005efe:	4770      	bx	lr
 8005f00:	b510      	push	{r4, lr}
 8005f02:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005f06:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005f0a:	4291      	cmp	r1, r2
 8005f0c:	d1f9      	bne.n	8005f02 <memcpy+0xe>
 8005f0e:	bd10      	pop	{r4, pc}

08005f10 <_realloc_r>:
 8005f10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005f14:	4680      	mov	r8, r0
 8005f16:	4615      	mov	r5, r2
 8005f18:	460c      	mov	r4, r1
 8005f1a:	b921      	cbnz	r1, 8005f26 <_realloc_r+0x16>
 8005f1c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005f20:	4611      	mov	r1, r2
 8005f22:	f7ff bc4b 	b.w	80057bc <_malloc_r>
 8005f26:	b92a      	cbnz	r2, 8005f34 <_realloc_r+0x24>
 8005f28:	f7ff fbdc 	bl	80056e4 <_free_r>
 8005f2c:	2400      	movs	r4, #0
 8005f2e:	4620      	mov	r0, r4
 8005f30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005f34:	f000 f81a 	bl	8005f6c <_malloc_usable_size_r>
 8005f38:	4285      	cmp	r5, r0
 8005f3a:	4606      	mov	r6, r0
 8005f3c:	d802      	bhi.n	8005f44 <_realloc_r+0x34>
 8005f3e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8005f42:	d8f4      	bhi.n	8005f2e <_realloc_r+0x1e>
 8005f44:	4629      	mov	r1, r5
 8005f46:	4640      	mov	r0, r8
 8005f48:	f7ff fc38 	bl	80057bc <_malloc_r>
 8005f4c:	4607      	mov	r7, r0
 8005f4e:	2800      	cmp	r0, #0
 8005f50:	d0ec      	beq.n	8005f2c <_realloc_r+0x1c>
 8005f52:	42b5      	cmp	r5, r6
 8005f54:	462a      	mov	r2, r5
 8005f56:	4621      	mov	r1, r4
 8005f58:	bf28      	it	cs
 8005f5a:	4632      	movcs	r2, r6
 8005f5c:	f7ff ffca 	bl	8005ef4 <memcpy>
 8005f60:	4621      	mov	r1, r4
 8005f62:	4640      	mov	r0, r8
 8005f64:	f7ff fbbe 	bl	80056e4 <_free_r>
 8005f68:	463c      	mov	r4, r7
 8005f6a:	e7e0      	b.n	8005f2e <_realloc_r+0x1e>

08005f6c <_malloc_usable_size_r>:
 8005f6c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005f70:	1f18      	subs	r0, r3, #4
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	bfbc      	itt	lt
 8005f76:	580b      	ldrlt	r3, [r1, r0]
 8005f78:	18c0      	addlt	r0, r0, r3
 8005f7a:	4770      	bx	lr

08005f7c <_init>:
 8005f7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f7e:	bf00      	nop
 8005f80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f82:	bc08      	pop	{r3}
 8005f84:	469e      	mov	lr, r3
 8005f86:	4770      	bx	lr

08005f88 <_fini>:
 8005f88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f8a:	bf00      	nop
 8005f8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f8e:	bc08      	pop	{r3}
 8005f90:	469e      	mov	lr, r3
 8005f92:	4770      	bx	lr
