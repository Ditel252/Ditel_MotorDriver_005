
Ditel_MotorDriver_005.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004c74  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08004dfc  08004dfc  00005dfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004e34  08004e34  0000600c  2**0
                  CONTENTS
  4 .ARM          00000000  08004e34  08004e34  0000600c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004e34  08004e34  0000600c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004e34  08004e34  00005e34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004e38  08004e38  00005e38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08004e3c  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000600c  2**0
                  CONTENTS
 10 .bss          00000300  2000000c  2000000c  0000600c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000030c  2000030c  0000600c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000600c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f69c  00000000  00000000  0000603c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001fe5  00000000  00000000  000156d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000da8  00000000  00000000  000176c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ab5  00000000  00000000  00018468  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001b3c8  00000000  00000000  00018f1d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001163b  00000000  00000000  000342e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a3d8a  00000000  00000000  00045920  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000e96aa  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003954  00000000  00000000  000e96f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006a  00000000  00000000  000ed044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004de4 	.word	0x08004de4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08004de4 	.word	0x08004de4

080001c8 <_7SegInit>:

#include <D-M-005/7Seg.h>

_7SEG_SETTING _7SegSetting;

void _7SegInit(_7SEG_SETTING *__7SegSetting){
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b082      	sub	sp, #8
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
	_7SegSetting.__7SegSi_GpioPort = __7SegSetting->__7SegSi_GpioPort;
 80001d0:	687b      	ldr	r3, [r7, #4]
 80001d2:	681b      	ldr	r3, [r3, #0]
 80001d4:	4a18      	ldr	r2, [pc, #96]	@ (8000238 <_7SegInit+0x70>)
 80001d6:	6013      	str	r3, [r2, #0]
	_7SegSetting.__7SegSi_Pin = __7SegSetting->__7SegSi_Pin;
 80001d8:	687b      	ldr	r3, [r7, #4]
 80001da:	889a      	ldrh	r2, [r3, #4]
 80001dc:	4b16      	ldr	r3, [pc, #88]	@ (8000238 <_7SegInit+0x70>)
 80001de:	809a      	strh	r2, [r3, #4]
	_7SegSetting.__7SegRck_GpioPort = __7SegSetting->__7SegRck_GpioPort;
 80001e0:	687b      	ldr	r3, [r7, #4]
 80001e2:	689b      	ldr	r3, [r3, #8]
 80001e4:	4a14      	ldr	r2, [pc, #80]	@ (8000238 <_7SegInit+0x70>)
 80001e6:	6093      	str	r3, [r2, #8]
	_7SegSetting.__7SegRck_Pin = __7SegSetting->__7SegRck_Pin;
 80001e8:	687b      	ldr	r3, [r7, #4]
 80001ea:	899a      	ldrh	r2, [r3, #12]
 80001ec:	4b12      	ldr	r3, [pc, #72]	@ (8000238 <_7SegInit+0x70>)
 80001ee:	819a      	strh	r2, [r3, #12]
	_7SegSetting.__7SegSck_GpioPort = __7SegSetting->__7SegSck_GpioPort;
 80001f0:	687b      	ldr	r3, [r7, #4]
 80001f2:	691b      	ldr	r3, [r3, #16]
 80001f4:	4a10      	ldr	r2, [pc, #64]	@ (8000238 <_7SegInit+0x70>)
 80001f6:	6113      	str	r3, [r2, #16]
	_7SegSetting.__7SegSck_Pin = __7SegSetting->__7SegSck_Pin;
 80001f8:	687b      	ldr	r3, [r7, #4]
 80001fa:	8a9a      	ldrh	r2, [r3, #20]
 80001fc:	4b0e      	ldr	r3, [pc, #56]	@ (8000238 <_7SegInit+0x70>)
 80001fe:	829a      	strh	r2, [r3, #20]

	HAL_GPIO_WritePin(_7SegSetting.__7SegSi_GpioPort, _7SegSetting.__7SegSi_Pin, GPIO_PIN_RESET);
 8000200:	4b0d      	ldr	r3, [pc, #52]	@ (8000238 <_7SegInit+0x70>)
 8000202:	681b      	ldr	r3, [r3, #0]
 8000204:	4a0c      	ldr	r2, [pc, #48]	@ (8000238 <_7SegInit+0x70>)
 8000206:	8891      	ldrh	r1, [r2, #4]
 8000208:	2200      	movs	r2, #0
 800020a:	4618      	mov	r0, r3
 800020c:	f001 fd5c 	bl	8001cc8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(_7SegSetting.__7SegRck_GpioPort, _7SegSetting.__7SegRck_Pin, GPIO_PIN_RESET);
 8000210:	4b09      	ldr	r3, [pc, #36]	@ (8000238 <_7SegInit+0x70>)
 8000212:	689b      	ldr	r3, [r3, #8]
 8000214:	4a08      	ldr	r2, [pc, #32]	@ (8000238 <_7SegInit+0x70>)
 8000216:	8991      	ldrh	r1, [r2, #12]
 8000218:	2200      	movs	r2, #0
 800021a:	4618      	mov	r0, r3
 800021c:	f001 fd54 	bl	8001cc8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(_7SegSetting.__7SegSck_GpioPort, _7SegSetting.__7SegSck_Pin, GPIO_PIN_RESET);
 8000220:	4b05      	ldr	r3, [pc, #20]	@ (8000238 <_7SegInit+0x70>)
 8000222:	691b      	ldr	r3, [r3, #16]
 8000224:	4a04      	ldr	r2, [pc, #16]	@ (8000238 <_7SegInit+0x70>)
 8000226:	8a91      	ldrh	r1, [r2, #20]
 8000228:	2200      	movs	r2, #0
 800022a:	4618      	mov	r0, r3
 800022c:	f001 fd4c 	bl	8001cc8 <HAL_GPIO_WritePin>
}
 8000230:	bf00      	nop
 8000232:	3708      	adds	r7, #8
 8000234:	46bd      	mov	sp, r7
 8000236:	bd80      	pop	{r7, pc}
 8000238:	20000028 	.word	0x20000028

0800023c <_7SegReset>:
            __7Seg1byteDisplay(~(0b00011110 | (isDisplayDp ? 0b10000000 : 0b00000000)));
            break;
    }
}

void _7SegReset(){
 800023c:	b580      	push	{r7, lr}
 800023e:	af00      	add	r7, sp, #0
    __7Seg1byteDisplay(~(0b00000000));
 8000240:	f04f 30ff 	mov.w	r0, #4294967295
 8000244:	f000 f878 	bl	8000338 <__7Seg1byteDisplay>
    __7Seg1byteDisplay(~(0b00000000));
 8000248:	f04f 30ff 	mov.w	r0, #4294967295
 800024c:	f000 f874 	bl	8000338 <__7Seg1byteDisplay>
}
 8000250:	bf00      	nop
 8000252:	bd80      	pop	{r7, pc}

08000254 <_7SegSetUpAnimation>:

void _7SegSetUpAnimation(_SETUP_STEP_FOR_7SEG __SetupStep){
 8000254:	b580      	push	{r7, lr}
 8000256:	b082      	sub	sp, #8
 8000258:	af00      	add	r7, sp, #0
 800025a:	4603      	mov	r3, r0
 800025c:	71fb      	strb	r3, [r7, #7]
	switch (__SetupStep) {
 800025e:	79fb      	ldrb	r3, [r7, #7]
 8000260:	3b01      	subs	r3, #1
 8000262:	2b08      	cmp	r3, #8
 8000264:	d863      	bhi.n	800032e <_7SegSetUpAnimation+0xda>
 8000266:	a201      	add	r2, pc, #4	@ (adr r2, 800026c <_7SegSetUpAnimation+0x18>)
 8000268:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800026c:	08000291 	.word	0x08000291
 8000270:	080002a3 	.word	0x080002a3
 8000274:	080002b5 	.word	0x080002b5
 8000278:	080002c7 	.word	0x080002c7
 800027c:	080002d9 	.word	0x080002d9
 8000280:	080002eb 	.word	0x080002eb
 8000284:	080002fd 	.word	0x080002fd
 8000288:	0800030f 	.word	0x0800030f
 800028c:	08000321 	.word	0x08000321
		case _SETUP_STEP_START_PROGRAM:
			__7Seg1byteDisplay(__7SEG_NULL_1Byte);
 8000290:	f04f 30ff 	mov.w	r0, #4294967295
 8000294:	f000 f850 	bl	8000338 <__7Seg1byteDisplay>
			__7Seg1byteDisplay(__7SEG_ONLY_A_1Byte);
 8000298:	f06f 0002 	mvn.w	r0, #2
 800029c:	f000 f84c 	bl	8000338 <__7Seg1byteDisplay>
			break;
 80002a0:	e045      	b.n	800032e <_7SegSetUpAnimation+0xda>
		case _SETUP_STEP_SETUP_MOTOR:
			__7Seg1byteDisplay(__7SEG_ONLY_A_1Byte);
 80002a2:	f06f 0002 	mvn.w	r0, #2
 80002a6:	f000 f847 	bl	8000338 <__7Seg1byteDisplay>
			__7Seg1byteDisplay(__7SEG_NULL_1Byte);
 80002aa:	f04f 30ff 	mov.w	r0, #4294967295
 80002ae:	f000 f843 	bl	8000338 <__7Seg1byteDisplay>
			break;
 80002b2:	e03c      	b.n	800032e <_7SegSetUpAnimation+0xda>
		case _SETUP_STEP_NULL1:
			__7Seg1byteDisplay(__7SEG_ONLY_B_1Byte);
 80002b4:	f06f 0001 	mvn.w	r0, #1
 80002b8:	f000 f83e 	bl	8000338 <__7Seg1byteDisplay>
			__7Seg1byteDisplay(__7SEG_NULL_1Byte);
 80002bc:	f04f 30ff 	mov.w	r0, #4294967295
 80002c0:	f000 f83a 	bl	8000338 <__7Seg1byteDisplay>
			break;
 80002c4:	e033      	b.n	800032e <_7SegSetUpAnimation+0xda>
		case _SETUP_STEP_NULL2:
			__7Seg1byteDisplay(__7SEG_ONLY_C_1Byte);
 80002c6:	f06f 0040 	mvn.w	r0, #64	@ 0x40
 80002ca:	f000 f835 	bl	8000338 <__7Seg1byteDisplay>
			__7Seg1byteDisplay(__7SEG_NULL_1Byte);
 80002ce:	f04f 30ff 	mov.w	r0, #4294967295
 80002d2:	f000 f831 	bl	8000338 <__7Seg1byteDisplay>
			break;
 80002d6:	e02a      	b.n	800032e <_7SegSetUpAnimation+0xda>
		case _SETUP_STEP_NULL3:
			__7Seg1byteDisplay(__7SEG_ONLY_D_1Byte);
 80002d8:	f06f 0020 	mvn.w	r0, #32
 80002dc:	f000 f82c 	bl	8000338 <__7Seg1byteDisplay>
			__7Seg1byteDisplay(__7SEG_NULL_1Byte);
 80002e0:	f04f 30ff 	mov.w	r0, #4294967295
 80002e4:	f000 f828 	bl	8000338 <__7Seg1byteDisplay>
			break;
 80002e8:	e021      	b.n	800032e <_7SegSetUpAnimation+0xda>
		case _SETUP_STEP_NULL4:
			__7Seg1byteDisplay(__7SEG_NULL_1Byte);
 80002ea:	f04f 30ff 	mov.w	r0, #4294967295
 80002ee:	f000 f823 	bl	8000338 <__7Seg1byteDisplay>
			__7Seg1byteDisplay(__7SEG_ONLY_D_1Byte);
 80002f2:	f06f 0020 	mvn.w	r0, #32
 80002f6:	f000 f81f 	bl	8000338 <__7Seg1byteDisplay>
			break;
 80002fa:	e018      	b.n	800032e <_7SegSetUpAnimation+0xda>
		case _SETUP_STEP_NULL5:
			__7Seg1byteDisplay(__7SEG_NULL_1Byte);
 80002fc:	f04f 30ff 	mov.w	r0, #4294967295
 8000300:	f000 f81a 	bl	8000338 <__7Seg1byteDisplay>
			__7Seg1byteDisplay(__7SEG_ONLY_E_1Byte);
 8000304:	f06f 0010 	mvn.w	r0, #16
 8000308:	f000 f816 	bl	8000338 <__7Seg1byteDisplay>
			break;
 800030c:	e00f      	b.n	800032e <_7SegSetUpAnimation+0xda>
		case _SETUP_STEP_NULL6:
			__7Seg1byteDisplay(__7SEG_NULL_1Byte);
 800030e:	f04f 30ff 	mov.w	r0, #4294967295
 8000312:	f000 f811 	bl	8000338 <__7Seg1byteDisplay>
			__7Seg1byteDisplay(__7SEG_ONLY_F_1Byte);
 8000316:	f06f 0004 	mvn.w	r0, #4
 800031a:	f000 f80d 	bl	8000338 <__7Seg1byteDisplay>
			break;
 800031e:	e006      	b.n	800032e <_7SegSetUpAnimation+0xda>
		case _SETUP_STEP_FINISH:
			__7Seg1byteDisplay(~__7SEG_ONLY_G_1Byte | ~__7SEG_ONLY_DP_1Byte);
 8000320:	2088      	movs	r0, #136	@ 0x88
 8000322:	f000 f809 	bl	8000338 <__7Seg1byteDisplay>
			__7Seg1byteDisplay(~__7SEG_ONLY_G_1Byte | ~__7SEG_ONLY_DP_1Byte);
 8000326:	2088      	movs	r0, #136	@ 0x88
 8000328:	f000 f806 	bl	8000338 <__7Seg1byteDisplay>
			break;
 800032c:	bf00      	nop
	}
}
 800032e:	bf00      	nop
 8000330:	3708      	adds	r7, #8
 8000332:	46bd      	mov	sp, r7
 8000334:	bd80      	pop	{r7, pc}
 8000336:	bf00      	nop

08000338 <__7Seg1byteDisplay>:

void __7Seg1byteDisplay(uint8_t _displayContent){
 8000338:	b580      	push	{r7, lr}
 800033a:	b084      	sub	sp, #16
 800033c:	af00      	add	r7, sp, #0
 800033e:	4603      	mov	r3, r0
 8000340:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(_7SegSetting.__7SegRck_GpioPort, _7SegSetting.__7SegRck_Pin, GPIO_PIN_RESET);
 8000342:	4b1e      	ldr	r3, [pc, #120]	@ (80003bc <__7Seg1byteDisplay+0x84>)
 8000344:	689b      	ldr	r3, [r3, #8]
 8000346:	4a1d      	ldr	r2, [pc, #116]	@ (80003bc <__7Seg1byteDisplay+0x84>)
 8000348:	8991      	ldrh	r1, [r2, #12]
 800034a:	2200      	movs	r2, #0
 800034c:	4618      	mov	r0, r3
 800034e:	f001 fcbb 	bl	8001cc8 <HAL_GPIO_WritePin>
    for (int i = 0; i < 8; i++){
 8000352:	2300      	movs	r3, #0
 8000354:	60fb      	str	r3, [r7, #12]
 8000356:	e021      	b.n	800039c <__7Seg1byteDisplay+0x64>
        HAL_GPIO_WritePin(_7SegSetting.__7SegSi_GpioPort, _7SegSetting.__7SegSi_Pin, (_displayContent & (1U << i)) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000358:	4b18      	ldr	r3, [pc, #96]	@ (80003bc <__7Seg1byteDisplay+0x84>)
 800035a:	6818      	ldr	r0, [r3, #0]
 800035c:	4b17      	ldr	r3, [pc, #92]	@ (80003bc <__7Seg1byteDisplay+0x84>)
 800035e:	8899      	ldrh	r1, [r3, #4]
 8000360:	79fa      	ldrb	r2, [r7, #7]
 8000362:	68fb      	ldr	r3, [r7, #12]
 8000364:	fa22 f303 	lsr.w	r3, r2, r3
 8000368:	b2db      	uxtb	r3, r3
 800036a:	f003 0301 	and.w	r3, r3, #1
 800036e:	b2db      	uxtb	r3, r3
 8000370:	461a      	mov	r2, r3
 8000372:	f001 fca9 	bl	8001cc8 <HAL_GPIO_WritePin>

        HAL_GPIO_WritePin(_7SegSetting.__7SegSck_GpioPort, _7SegSetting.__7SegSck_Pin, GPIO_PIN_SET);
 8000376:	4b11      	ldr	r3, [pc, #68]	@ (80003bc <__7Seg1byteDisplay+0x84>)
 8000378:	691b      	ldr	r3, [r3, #16]
 800037a:	4a10      	ldr	r2, [pc, #64]	@ (80003bc <__7Seg1byteDisplay+0x84>)
 800037c:	8a91      	ldrh	r1, [r2, #20]
 800037e:	2201      	movs	r2, #1
 8000380:	4618      	mov	r0, r3
 8000382:	f001 fca1 	bl	8001cc8 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(_7SegSetting.__7SegSck_GpioPort, _7SegSetting.__7SegSck_Pin, GPIO_PIN_RESET);
 8000386:	4b0d      	ldr	r3, [pc, #52]	@ (80003bc <__7Seg1byteDisplay+0x84>)
 8000388:	691b      	ldr	r3, [r3, #16]
 800038a:	4a0c      	ldr	r2, [pc, #48]	@ (80003bc <__7Seg1byteDisplay+0x84>)
 800038c:	8a91      	ldrh	r1, [r2, #20]
 800038e:	2200      	movs	r2, #0
 8000390:	4618      	mov	r0, r3
 8000392:	f001 fc99 	bl	8001cc8 <HAL_GPIO_WritePin>
    for (int i = 0; i < 8; i++){
 8000396:	68fb      	ldr	r3, [r7, #12]
 8000398:	3301      	adds	r3, #1
 800039a:	60fb      	str	r3, [r7, #12]
 800039c:	68fb      	ldr	r3, [r7, #12]
 800039e:	2b07      	cmp	r3, #7
 80003a0:	ddda      	ble.n	8000358 <__7Seg1byteDisplay+0x20>
    }

    HAL_GPIO_WritePin(_7SegSetting.__7SegRck_GpioPort, _7SegSetting.__7SegRck_Pin, GPIO_PIN_SET);
 80003a2:	4b06      	ldr	r3, [pc, #24]	@ (80003bc <__7Seg1byteDisplay+0x84>)
 80003a4:	689b      	ldr	r3, [r3, #8]
 80003a6:	4a05      	ldr	r2, [pc, #20]	@ (80003bc <__7Seg1byteDisplay+0x84>)
 80003a8:	8991      	ldrh	r1, [r2, #12]
 80003aa:	2201      	movs	r2, #1
 80003ac:	4618      	mov	r0, r3
 80003ae:	f001 fc8b 	bl	8001cc8 <HAL_GPIO_WritePin>
}
 80003b2:	bf00      	nop
 80003b4:	3710      	adds	r7, #16
 80003b6:	46bd      	mov	sp, r7
 80003b8:	bd80      	pop	{r7, pc}
 80003ba:	bf00      	nop
 80003bc:	20000028 	.word	0x20000028

080003c0 <_MotorInit>:

#include "D-M-005/Motor.h"

_MOTOR_SETTING _MotorSetting;

void _MotorInit(_MOTOR_SETTING *__MotorSetting){
 80003c0:	b580      	push	{r7, lr}
 80003c2:	b082      	sub	sp, #8
 80003c4:	af00      	add	r7, sp, #0
 80003c6:	6078      	str	r0, [r7, #4]
	_MotorSetting.__MotorN1_Tim = __MotorSetting->__MotorN1_Tim;
 80003c8:	687b      	ldr	r3, [r7, #4]
 80003ca:	681b      	ldr	r3, [r3, #0]
 80003cc:	4a5c      	ldr	r2, [pc, #368]	@ (8000540 <_MotorInit+0x180>)
 80003ce:	6013      	str	r3, [r2, #0]
	_MotorSetting.__MotorN1_TimChannel = __MotorSetting->__MotorN1_TimChannel;
 80003d0:	687b      	ldr	r3, [r7, #4]
 80003d2:	685b      	ldr	r3, [r3, #4]
 80003d4:	4a5a      	ldr	r2, [pc, #360]	@ (8000540 <_MotorInit+0x180>)
 80003d6:	6053      	str	r3, [r2, #4]
	_MotorSetting.__MotorN2_Tim = __MotorSetting->__MotorN2_Tim;
 80003d8:	687b      	ldr	r3, [r7, #4]
 80003da:	689b      	ldr	r3, [r3, #8]
 80003dc:	4a58      	ldr	r2, [pc, #352]	@ (8000540 <_MotorInit+0x180>)
 80003de:	6093      	str	r3, [r2, #8]
	_MotorSetting.__MotorN2_TimChannel = __MotorSetting->__MotorN2_TimChannel;
 80003e0:	687b      	ldr	r3, [r7, #4]
 80003e2:	68db      	ldr	r3, [r3, #12]
 80003e4:	4a56      	ldr	r2, [pc, #344]	@ (8000540 <_MotorInit+0x180>)
 80003e6:	60d3      	str	r3, [r2, #12]

	_MotorSetting.__MotorP1_GpioPort = __MotorSetting->__MotorP1_GpioPort;
 80003e8:	687b      	ldr	r3, [r7, #4]
 80003ea:	691b      	ldr	r3, [r3, #16]
 80003ec:	4a54      	ldr	r2, [pc, #336]	@ (8000540 <_MotorInit+0x180>)
 80003ee:	6113      	str	r3, [r2, #16]
	_MotorSetting.__MotorP1_Pin = __MotorSetting->__MotorP1_Pin;
 80003f0:	687b      	ldr	r3, [r7, #4]
 80003f2:	8a9a      	ldrh	r2, [r3, #20]
 80003f4:	4b52      	ldr	r3, [pc, #328]	@ (8000540 <_MotorInit+0x180>)
 80003f6:	829a      	strh	r2, [r3, #20]
	_MotorSetting.__MotorP2_GpioPort = __MotorSetting->__MotorP2_GpioPort;
 80003f8:	687b      	ldr	r3, [r7, #4]
 80003fa:	699b      	ldr	r3, [r3, #24]
 80003fc:	4a50      	ldr	r2, [pc, #320]	@ (8000540 <_MotorInit+0x180>)
 80003fe:	6193      	str	r3, [r2, #24]
	_MotorSetting.__MotorP2_Pin = __MotorSetting->__MotorP2_Pin;
 8000400:	687b      	ldr	r3, [r7, #4]
 8000402:	8b9a      	ldrh	r2, [r3, #28]
 8000404:	4b4e      	ldr	r3, [pc, #312]	@ (8000540 <_MotorInit+0x180>)
 8000406:	839a      	strh	r2, [r3, #28]

	_MotorSetting.__DeadTime_TIM = __MotorSetting->__DeadTime_TIM;
 8000408:	687b      	ldr	r3, [r7, #4]
 800040a:	6a1b      	ldr	r3, [r3, #32]
 800040c:	4a4c      	ldr	r2, [pc, #304]	@ (8000540 <_MotorInit+0x180>)
 800040e:	6213      	str	r3, [r2, #32]

	HAL_GPIO_WritePin(_MotorSetting.__MotorP1_GpioPort, _MotorSetting.__MotorP1_Pin, GPIO_PIN_RESET);
 8000410:	4b4b      	ldr	r3, [pc, #300]	@ (8000540 <_MotorInit+0x180>)
 8000412:	691b      	ldr	r3, [r3, #16]
 8000414:	4a4a      	ldr	r2, [pc, #296]	@ (8000540 <_MotorInit+0x180>)
 8000416:	8a91      	ldrh	r1, [r2, #20]
 8000418:	2200      	movs	r2, #0
 800041a:	4618      	mov	r0, r3
 800041c:	f001 fc54 	bl	8001cc8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(_MotorSetting.__MotorP2_GpioPort, _MotorSetting.__MotorP2_Pin, GPIO_PIN_RESET);
 8000420:	4b47      	ldr	r3, [pc, #284]	@ (8000540 <_MotorInit+0x180>)
 8000422:	699b      	ldr	r3, [r3, #24]
 8000424:	4a46      	ldr	r2, [pc, #280]	@ (8000540 <_MotorInit+0x180>)
 8000426:	8b91      	ldrh	r1, [r2, #28]
 8000428:	2200      	movs	r2, #0
 800042a:	4618      	mov	r0, r3
 800042c:	f001 fc4c 	bl	8001cc8 <HAL_GPIO_WritePin>

	HAL_TIM_PWM_Start(_MotorSetting.__MotorN1_Tim, _MotorSetting.__MotorN1_TimChannel);
 8000430:	4b43      	ldr	r3, [pc, #268]	@ (8000540 <_MotorInit+0x180>)
 8000432:	681b      	ldr	r3, [r3, #0]
 8000434:	4a42      	ldr	r2, [pc, #264]	@ (8000540 <_MotorInit+0x180>)
 8000436:	6852      	ldr	r2, [r2, #4]
 8000438:	4611      	mov	r1, r2
 800043a:	4618      	mov	r0, r3
 800043c:	f003 f94e 	bl	80036dc <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(_MotorSetting.__MotorN2_Tim, _MotorSetting.__MotorN2_TimChannel);
 8000440:	4b3f      	ldr	r3, [pc, #252]	@ (8000540 <_MotorInit+0x180>)
 8000442:	689b      	ldr	r3, [r3, #8]
 8000444:	4a3e      	ldr	r2, [pc, #248]	@ (8000540 <_MotorInit+0x180>)
 8000446:	68d2      	ldr	r2, [r2, #12]
 8000448:	4611      	mov	r1, r2
 800044a:	4618      	mov	r0, r3
 800044c:	f003 f946 	bl	80036dc <HAL_TIM_PWM_Start>

	HAL_TIM_Base_Start(_MotorSetting.__DeadTime_TIM);
 8000450:	4b3b      	ldr	r3, [pc, #236]	@ (8000540 <_MotorInit+0x180>)
 8000452:	6a1b      	ldr	r3, [r3, #32]
 8000454:	4618      	mov	r0, r3
 8000456:	f003 f82b 	bl	80034b0 <HAL_TIM_Base_Start>

	__HAL_TIM_SET_COMPARE(_MotorSetting.__MotorN1_Tim, _MotorSetting.__MotorN1_TimChannel, 0);
 800045a:	4b39      	ldr	r3, [pc, #228]	@ (8000540 <_MotorInit+0x180>)
 800045c:	685b      	ldr	r3, [r3, #4]
 800045e:	2b00      	cmp	r3, #0
 8000460:	d105      	bne.n	800046e <_MotorInit+0xae>
 8000462:	4b37      	ldr	r3, [pc, #220]	@ (8000540 <_MotorInit+0x180>)
 8000464:	681b      	ldr	r3, [r3, #0]
 8000466:	681b      	ldr	r3, [r3, #0]
 8000468:	2200      	movs	r2, #0
 800046a:	635a      	str	r2, [r3, #52]	@ 0x34
 800046c:	e02c      	b.n	80004c8 <_MotorInit+0x108>
 800046e:	4b34      	ldr	r3, [pc, #208]	@ (8000540 <_MotorInit+0x180>)
 8000470:	685b      	ldr	r3, [r3, #4]
 8000472:	2b04      	cmp	r3, #4
 8000474:	d105      	bne.n	8000482 <_MotorInit+0xc2>
 8000476:	4b32      	ldr	r3, [pc, #200]	@ (8000540 <_MotorInit+0x180>)
 8000478:	681b      	ldr	r3, [r3, #0]
 800047a:	681a      	ldr	r2, [r3, #0]
 800047c:	2300      	movs	r3, #0
 800047e:	6393      	str	r3, [r2, #56]	@ 0x38
 8000480:	e022      	b.n	80004c8 <_MotorInit+0x108>
 8000482:	4b2f      	ldr	r3, [pc, #188]	@ (8000540 <_MotorInit+0x180>)
 8000484:	685b      	ldr	r3, [r3, #4]
 8000486:	2b08      	cmp	r3, #8
 8000488:	d105      	bne.n	8000496 <_MotorInit+0xd6>
 800048a:	4b2d      	ldr	r3, [pc, #180]	@ (8000540 <_MotorInit+0x180>)
 800048c:	681b      	ldr	r3, [r3, #0]
 800048e:	681a      	ldr	r2, [r3, #0]
 8000490:	2300      	movs	r3, #0
 8000492:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8000494:	e018      	b.n	80004c8 <_MotorInit+0x108>
 8000496:	4b2a      	ldr	r3, [pc, #168]	@ (8000540 <_MotorInit+0x180>)
 8000498:	685b      	ldr	r3, [r3, #4]
 800049a:	2b0c      	cmp	r3, #12
 800049c:	d105      	bne.n	80004aa <_MotorInit+0xea>
 800049e:	4b28      	ldr	r3, [pc, #160]	@ (8000540 <_MotorInit+0x180>)
 80004a0:	681b      	ldr	r3, [r3, #0]
 80004a2:	681a      	ldr	r2, [r3, #0]
 80004a4:	2300      	movs	r3, #0
 80004a6:	6413      	str	r3, [r2, #64]	@ 0x40
 80004a8:	e00e      	b.n	80004c8 <_MotorInit+0x108>
 80004aa:	4b25      	ldr	r3, [pc, #148]	@ (8000540 <_MotorInit+0x180>)
 80004ac:	685b      	ldr	r3, [r3, #4]
 80004ae:	2b10      	cmp	r3, #16
 80004b0:	d105      	bne.n	80004be <_MotorInit+0xfe>
 80004b2:	4b23      	ldr	r3, [pc, #140]	@ (8000540 <_MotorInit+0x180>)
 80004b4:	681b      	ldr	r3, [r3, #0]
 80004b6:	681a      	ldr	r2, [r3, #0]
 80004b8:	2300      	movs	r3, #0
 80004ba:	6593      	str	r3, [r2, #88]	@ 0x58
 80004bc:	e004      	b.n	80004c8 <_MotorInit+0x108>
 80004be:	4b20      	ldr	r3, [pc, #128]	@ (8000540 <_MotorInit+0x180>)
 80004c0:	681b      	ldr	r3, [r3, #0]
 80004c2:	681a      	ldr	r2, [r3, #0]
 80004c4:	2300      	movs	r3, #0
 80004c6:	65d3      	str	r3, [r2, #92]	@ 0x5c
	__HAL_TIM_SET_COMPARE(_MotorSetting.__MotorN2_Tim, _MotorSetting.__MotorN2_TimChannel, 0);
 80004c8:	4b1d      	ldr	r3, [pc, #116]	@ (8000540 <_MotorInit+0x180>)
 80004ca:	68db      	ldr	r3, [r3, #12]
 80004cc:	2b00      	cmp	r3, #0
 80004ce:	d105      	bne.n	80004dc <_MotorInit+0x11c>
 80004d0:	4b1b      	ldr	r3, [pc, #108]	@ (8000540 <_MotorInit+0x180>)
 80004d2:	689b      	ldr	r3, [r3, #8]
 80004d4:	681b      	ldr	r3, [r3, #0]
 80004d6:	2200      	movs	r2, #0
 80004d8:	635a      	str	r2, [r3, #52]	@ 0x34
}
 80004da:	e02c      	b.n	8000536 <_MotorInit+0x176>
	__HAL_TIM_SET_COMPARE(_MotorSetting.__MotorN2_Tim, _MotorSetting.__MotorN2_TimChannel, 0);
 80004dc:	4b18      	ldr	r3, [pc, #96]	@ (8000540 <_MotorInit+0x180>)
 80004de:	68db      	ldr	r3, [r3, #12]
 80004e0:	2b04      	cmp	r3, #4
 80004e2:	d105      	bne.n	80004f0 <_MotorInit+0x130>
 80004e4:	4b16      	ldr	r3, [pc, #88]	@ (8000540 <_MotorInit+0x180>)
 80004e6:	689b      	ldr	r3, [r3, #8]
 80004e8:	681a      	ldr	r2, [r3, #0]
 80004ea:	2300      	movs	r3, #0
 80004ec:	6393      	str	r3, [r2, #56]	@ 0x38
}
 80004ee:	e022      	b.n	8000536 <_MotorInit+0x176>
	__HAL_TIM_SET_COMPARE(_MotorSetting.__MotorN2_Tim, _MotorSetting.__MotorN2_TimChannel, 0);
 80004f0:	4b13      	ldr	r3, [pc, #76]	@ (8000540 <_MotorInit+0x180>)
 80004f2:	68db      	ldr	r3, [r3, #12]
 80004f4:	2b08      	cmp	r3, #8
 80004f6:	d105      	bne.n	8000504 <_MotorInit+0x144>
 80004f8:	4b11      	ldr	r3, [pc, #68]	@ (8000540 <_MotorInit+0x180>)
 80004fa:	689b      	ldr	r3, [r3, #8]
 80004fc:	681a      	ldr	r2, [r3, #0]
 80004fe:	2300      	movs	r3, #0
 8000500:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 8000502:	e018      	b.n	8000536 <_MotorInit+0x176>
	__HAL_TIM_SET_COMPARE(_MotorSetting.__MotorN2_Tim, _MotorSetting.__MotorN2_TimChannel, 0);
 8000504:	4b0e      	ldr	r3, [pc, #56]	@ (8000540 <_MotorInit+0x180>)
 8000506:	68db      	ldr	r3, [r3, #12]
 8000508:	2b0c      	cmp	r3, #12
 800050a:	d105      	bne.n	8000518 <_MotorInit+0x158>
 800050c:	4b0c      	ldr	r3, [pc, #48]	@ (8000540 <_MotorInit+0x180>)
 800050e:	689b      	ldr	r3, [r3, #8]
 8000510:	681a      	ldr	r2, [r3, #0]
 8000512:	2300      	movs	r3, #0
 8000514:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000516:	e00e      	b.n	8000536 <_MotorInit+0x176>
	__HAL_TIM_SET_COMPARE(_MotorSetting.__MotorN2_Tim, _MotorSetting.__MotorN2_TimChannel, 0);
 8000518:	4b09      	ldr	r3, [pc, #36]	@ (8000540 <_MotorInit+0x180>)
 800051a:	68db      	ldr	r3, [r3, #12]
 800051c:	2b10      	cmp	r3, #16
 800051e:	d105      	bne.n	800052c <_MotorInit+0x16c>
 8000520:	4b07      	ldr	r3, [pc, #28]	@ (8000540 <_MotorInit+0x180>)
 8000522:	689b      	ldr	r3, [r3, #8]
 8000524:	681a      	ldr	r2, [r3, #0]
 8000526:	2300      	movs	r3, #0
 8000528:	6593      	str	r3, [r2, #88]	@ 0x58
}
 800052a:	e004      	b.n	8000536 <_MotorInit+0x176>
	__HAL_TIM_SET_COMPARE(_MotorSetting.__MotorN2_Tim, _MotorSetting.__MotorN2_TimChannel, 0);
 800052c:	4b04      	ldr	r3, [pc, #16]	@ (8000540 <_MotorInit+0x180>)
 800052e:	689b      	ldr	r3, [r3, #8]
 8000530:	681a      	ldr	r2, [r3, #0]
 8000532:	2300      	movs	r3, #0
 8000534:	65d3      	str	r3, [r2, #92]	@ 0x5c
}
 8000536:	bf00      	nop
 8000538:	3708      	adds	r7, #8
 800053a:	46bd      	mov	sp, r7
 800053c:	bd80      	pop	{r7, pc}
 800053e:	bf00      	nop
 8000540:	20000040 	.word	0x20000040

08000544 <_MotorSetSpeed>:

uint8_t _lastMode;
void _MotorSetSpeed(uint8_t _mode, uint16_t _speed){
 8000544:	b580      	push	{r7, lr}
 8000546:	b082      	sub	sp, #8
 8000548:	af00      	add	r7, sp, #0
 800054a:	4603      	mov	r3, r0
 800054c:	460a      	mov	r2, r1
 800054e:	71fb      	strb	r3, [r7, #7]
 8000550:	4613      	mov	r3, r2
 8000552:	80bb      	strh	r3, [r7, #4]
//	if(_mode != _MOTOR_MODE_NEUTRAL && _mode != _lastMode){
//		_MotorSetSpeed(_MOTOR_MODE_NEUTRAL);
//	}

	switch(_mode){
 8000554:	79fb      	ldrb	r3, [r7, #7]
 8000556:	2b03      	cmp	r3, #3
 8000558:	f200 820a 	bhi.w	8000970 <_MotorSetSpeed+0x42c>
 800055c:	a201      	add	r2, pc, #4	@ (adr r2, 8000564 <_MotorSetSpeed+0x20>)
 800055e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000562:	bf00      	nop
 8000564:	08000575 	.word	0x08000575
 8000568:	08000673 	.word	0x08000673
 800056c:	08000771 	.word	0x08000771
 8000570:	08000873 	.word	0x08000873
	case _MOTOR_MODE_NEUTRAL:
		__HAL_TIM_SET_COMPARE(_MotorSetting.__MotorN1_Tim, _MotorSetting.__MotorN1_TimChannel, 0);
 8000574:	4b88      	ldr	r3, [pc, #544]	@ (8000798 <_MotorSetSpeed+0x254>)
 8000576:	685b      	ldr	r3, [r3, #4]
 8000578:	2b00      	cmp	r3, #0
 800057a:	d105      	bne.n	8000588 <_MotorSetSpeed+0x44>
 800057c:	4b86      	ldr	r3, [pc, #536]	@ (8000798 <_MotorSetSpeed+0x254>)
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	681b      	ldr	r3, [r3, #0]
 8000582:	2200      	movs	r2, #0
 8000584:	635a      	str	r2, [r3, #52]	@ 0x34
 8000586:	e02c      	b.n	80005e2 <_MotorSetSpeed+0x9e>
 8000588:	4b83      	ldr	r3, [pc, #524]	@ (8000798 <_MotorSetSpeed+0x254>)
 800058a:	685b      	ldr	r3, [r3, #4]
 800058c:	2b04      	cmp	r3, #4
 800058e:	d105      	bne.n	800059c <_MotorSetSpeed+0x58>
 8000590:	4b81      	ldr	r3, [pc, #516]	@ (8000798 <_MotorSetSpeed+0x254>)
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	681a      	ldr	r2, [r3, #0]
 8000596:	2300      	movs	r3, #0
 8000598:	6393      	str	r3, [r2, #56]	@ 0x38
 800059a:	e022      	b.n	80005e2 <_MotorSetSpeed+0x9e>
 800059c:	4b7e      	ldr	r3, [pc, #504]	@ (8000798 <_MotorSetSpeed+0x254>)
 800059e:	685b      	ldr	r3, [r3, #4]
 80005a0:	2b08      	cmp	r3, #8
 80005a2:	d105      	bne.n	80005b0 <_MotorSetSpeed+0x6c>
 80005a4:	4b7c      	ldr	r3, [pc, #496]	@ (8000798 <_MotorSetSpeed+0x254>)
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	681a      	ldr	r2, [r3, #0]
 80005aa:	2300      	movs	r3, #0
 80005ac:	63d3      	str	r3, [r2, #60]	@ 0x3c
 80005ae:	e018      	b.n	80005e2 <_MotorSetSpeed+0x9e>
 80005b0:	4b79      	ldr	r3, [pc, #484]	@ (8000798 <_MotorSetSpeed+0x254>)
 80005b2:	685b      	ldr	r3, [r3, #4]
 80005b4:	2b0c      	cmp	r3, #12
 80005b6:	d105      	bne.n	80005c4 <_MotorSetSpeed+0x80>
 80005b8:	4b77      	ldr	r3, [pc, #476]	@ (8000798 <_MotorSetSpeed+0x254>)
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	681a      	ldr	r2, [r3, #0]
 80005be:	2300      	movs	r3, #0
 80005c0:	6413      	str	r3, [r2, #64]	@ 0x40
 80005c2:	e00e      	b.n	80005e2 <_MotorSetSpeed+0x9e>
 80005c4:	4b74      	ldr	r3, [pc, #464]	@ (8000798 <_MotorSetSpeed+0x254>)
 80005c6:	685b      	ldr	r3, [r3, #4]
 80005c8:	2b10      	cmp	r3, #16
 80005ca:	d105      	bne.n	80005d8 <_MotorSetSpeed+0x94>
 80005cc:	4b72      	ldr	r3, [pc, #456]	@ (8000798 <_MotorSetSpeed+0x254>)
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	681a      	ldr	r2, [r3, #0]
 80005d2:	2300      	movs	r3, #0
 80005d4:	6593      	str	r3, [r2, #88]	@ 0x58
 80005d6:	e004      	b.n	80005e2 <_MotorSetSpeed+0x9e>
 80005d8:	4b6f      	ldr	r3, [pc, #444]	@ (8000798 <_MotorSetSpeed+0x254>)
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	681a      	ldr	r2, [r3, #0]
 80005de:	2300      	movs	r3, #0
 80005e0:	65d3      	str	r3, [r2, #92]	@ 0x5c
		HAL_GPIO_WritePin(_MotorSetting.__MotorP2_GpioPort, _MotorSetting.__MotorP2_Pin, GPIO_PIN_RESET);
 80005e2:	4b6d      	ldr	r3, [pc, #436]	@ (8000798 <_MotorSetSpeed+0x254>)
 80005e4:	699b      	ldr	r3, [r3, #24]
 80005e6:	4a6c      	ldr	r2, [pc, #432]	@ (8000798 <_MotorSetSpeed+0x254>)
 80005e8:	8b91      	ldrh	r1, [r2, #28]
 80005ea:	2200      	movs	r2, #0
 80005ec:	4618      	mov	r0, r3
 80005ee:	f001 fb6b 	bl	8001cc8 <HAL_GPIO_WritePin>

		__HAL_TIM_SET_COMPARE(_MotorSetting.__MotorN2_Tim, _MotorSetting.__MotorN2_TimChannel, 0);
 80005f2:	4b69      	ldr	r3, [pc, #420]	@ (8000798 <_MotorSetSpeed+0x254>)
 80005f4:	68db      	ldr	r3, [r3, #12]
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d105      	bne.n	8000606 <_MotorSetSpeed+0xc2>
 80005fa:	4b67      	ldr	r3, [pc, #412]	@ (8000798 <_MotorSetSpeed+0x254>)
 80005fc:	689b      	ldr	r3, [r3, #8]
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	2200      	movs	r2, #0
 8000602:	635a      	str	r2, [r3, #52]	@ 0x34
 8000604:	e02c      	b.n	8000660 <_MotorSetSpeed+0x11c>
 8000606:	4b64      	ldr	r3, [pc, #400]	@ (8000798 <_MotorSetSpeed+0x254>)
 8000608:	68db      	ldr	r3, [r3, #12]
 800060a:	2b04      	cmp	r3, #4
 800060c:	d105      	bne.n	800061a <_MotorSetSpeed+0xd6>
 800060e:	4b62      	ldr	r3, [pc, #392]	@ (8000798 <_MotorSetSpeed+0x254>)
 8000610:	689b      	ldr	r3, [r3, #8]
 8000612:	681a      	ldr	r2, [r3, #0]
 8000614:	2300      	movs	r3, #0
 8000616:	6393      	str	r3, [r2, #56]	@ 0x38
 8000618:	e022      	b.n	8000660 <_MotorSetSpeed+0x11c>
 800061a:	4b5f      	ldr	r3, [pc, #380]	@ (8000798 <_MotorSetSpeed+0x254>)
 800061c:	68db      	ldr	r3, [r3, #12]
 800061e:	2b08      	cmp	r3, #8
 8000620:	d105      	bne.n	800062e <_MotorSetSpeed+0xea>
 8000622:	4b5d      	ldr	r3, [pc, #372]	@ (8000798 <_MotorSetSpeed+0x254>)
 8000624:	689b      	ldr	r3, [r3, #8]
 8000626:	681a      	ldr	r2, [r3, #0]
 8000628:	2300      	movs	r3, #0
 800062a:	63d3      	str	r3, [r2, #60]	@ 0x3c
 800062c:	e018      	b.n	8000660 <_MotorSetSpeed+0x11c>
 800062e:	4b5a      	ldr	r3, [pc, #360]	@ (8000798 <_MotorSetSpeed+0x254>)
 8000630:	68db      	ldr	r3, [r3, #12]
 8000632:	2b0c      	cmp	r3, #12
 8000634:	d105      	bne.n	8000642 <_MotorSetSpeed+0xfe>
 8000636:	4b58      	ldr	r3, [pc, #352]	@ (8000798 <_MotorSetSpeed+0x254>)
 8000638:	689b      	ldr	r3, [r3, #8]
 800063a:	681a      	ldr	r2, [r3, #0]
 800063c:	2300      	movs	r3, #0
 800063e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000640:	e00e      	b.n	8000660 <_MotorSetSpeed+0x11c>
 8000642:	4b55      	ldr	r3, [pc, #340]	@ (8000798 <_MotorSetSpeed+0x254>)
 8000644:	68db      	ldr	r3, [r3, #12]
 8000646:	2b10      	cmp	r3, #16
 8000648:	d105      	bne.n	8000656 <_MotorSetSpeed+0x112>
 800064a:	4b53      	ldr	r3, [pc, #332]	@ (8000798 <_MotorSetSpeed+0x254>)
 800064c:	689b      	ldr	r3, [r3, #8]
 800064e:	681a      	ldr	r2, [r3, #0]
 8000650:	2300      	movs	r3, #0
 8000652:	6593      	str	r3, [r2, #88]	@ 0x58
 8000654:	e004      	b.n	8000660 <_MotorSetSpeed+0x11c>
 8000656:	4b50      	ldr	r3, [pc, #320]	@ (8000798 <_MotorSetSpeed+0x254>)
 8000658:	689b      	ldr	r3, [r3, #8]
 800065a:	681a      	ldr	r2, [r3, #0]
 800065c:	2300      	movs	r3, #0
 800065e:	65d3      	str	r3, [r2, #92]	@ 0x5c
		HAL_GPIO_WritePin(_MotorSetting.__MotorP1_GpioPort, _MotorSetting.__MotorP1_Pin, GPIO_PIN_RESET);
 8000660:	4b4d      	ldr	r3, [pc, #308]	@ (8000798 <_MotorSetSpeed+0x254>)
 8000662:	691b      	ldr	r3, [r3, #16]
 8000664:	4a4c      	ldr	r2, [pc, #304]	@ (8000798 <_MotorSetSpeed+0x254>)
 8000666:	8a91      	ldrh	r1, [r2, #20]
 8000668:	2200      	movs	r2, #0
 800066a:	4618      	mov	r0, r3
 800066c:	f001 fb2c 	bl	8001cc8 <HAL_GPIO_WritePin>
		break;
 8000670:	e17e      	b.n	8000970 <_MotorSetSpeed+0x42c>
	case _MOTOR_MODE_BREAK:
		__HAL_TIM_SET_COMPARE(_MotorSetting.__MotorN1_Tim, _MotorSetting.__MotorN1_TimChannel, 0);
 8000672:	4b49      	ldr	r3, [pc, #292]	@ (8000798 <_MotorSetSpeed+0x254>)
 8000674:	685b      	ldr	r3, [r3, #4]
 8000676:	2b00      	cmp	r3, #0
 8000678:	d105      	bne.n	8000686 <_MotorSetSpeed+0x142>
 800067a:	4b47      	ldr	r3, [pc, #284]	@ (8000798 <_MotorSetSpeed+0x254>)
 800067c:	681b      	ldr	r3, [r3, #0]
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	2200      	movs	r2, #0
 8000682:	635a      	str	r2, [r3, #52]	@ 0x34
 8000684:	e02c      	b.n	80006e0 <_MotorSetSpeed+0x19c>
 8000686:	4b44      	ldr	r3, [pc, #272]	@ (8000798 <_MotorSetSpeed+0x254>)
 8000688:	685b      	ldr	r3, [r3, #4]
 800068a:	2b04      	cmp	r3, #4
 800068c:	d105      	bne.n	800069a <_MotorSetSpeed+0x156>
 800068e:	4b42      	ldr	r3, [pc, #264]	@ (8000798 <_MotorSetSpeed+0x254>)
 8000690:	681b      	ldr	r3, [r3, #0]
 8000692:	681a      	ldr	r2, [r3, #0]
 8000694:	2300      	movs	r3, #0
 8000696:	6393      	str	r3, [r2, #56]	@ 0x38
 8000698:	e022      	b.n	80006e0 <_MotorSetSpeed+0x19c>
 800069a:	4b3f      	ldr	r3, [pc, #252]	@ (8000798 <_MotorSetSpeed+0x254>)
 800069c:	685b      	ldr	r3, [r3, #4]
 800069e:	2b08      	cmp	r3, #8
 80006a0:	d105      	bne.n	80006ae <_MotorSetSpeed+0x16a>
 80006a2:	4b3d      	ldr	r3, [pc, #244]	@ (8000798 <_MotorSetSpeed+0x254>)
 80006a4:	681b      	ldr	r3, [r3, #0]
 80006a6:	681a      	ldr	r2, [r3, #0]
 80006a8:	2300      	movs	r3, #0
 80006aa:	63d3      	str	r3, [r2, #60]	@ 0x3c
 80006ac:	e018      	b.n	80006e0 <_MotorSetSpeed+0x19c>
 80006ae:	4b3a      	ldr	r3, [pc, #232]	@ (8000798 <_MotorSetSpeed+0x254>)
 80006b0:	685b      	ldr	r3, [r3, #4]
 80006b2:	2b0c      	cmp	r3, #12
 80006b4:	d105      	bne.n	80006c2 <_MotorSetSpeed+0x17e>
 80006b6:	4b38      	ldr	r3, [pc, #224]	@ (8000798 <_MotorSetSpeed+0x254>)
 80006b8:	681b      	ldr	r3, [r3, #0]
 80006ba:	681a      	ldr	r2, [r3, #0]
 80006bc:	2300      	movs	r3, #0
 80006be:	6413      	str	r3, [r2, #64]	@ 0x40
 80006c0:	e00e      	b.n	80006e0 <_MotorSetSpeed+0x19c>
 80006c2:	4b35      	ldr	r3, [pc, #212]	@ (8000798 <_MotorSetSpeed+0x254>)
 80006c4:	685b      	ldr	r3, [r3, #4]
 80006c6:	2b10      	cmp	r3, #16
 80006c8:	d105      	bne.n	80006d6 <_MotorSetSpeed+0x192>
 80006ca:	4b33      	ldr	r3, [pc, #204]	@ (8000798 <_MotorSetSpeed+0x254>)
 80006cc:	681b      	ldr	r3, [r3, #0]
 80006ce:	681a      	ldr	r2, [r3, #0]
 80006d0:	2300      	movs	r3, #0
 80006d2:	6593      	str	r3, [r2, #88]	@ 0x58
 80006d4:	e004      	b.n	80006e0 <_MotorSetSpeed+0x19c>
 80006d6:	4b30      	ldr	r3, [pc, #192]	@ (8000798 <_MotorSetSpeed+0x254>)
 80006d8:	681b      	ldr	r3, [r3, #0]
 80006da:	681a      	ldr	r2, [r3, #0]
 80006dc:	2300      	movs	r3, #0
 80006de:	65d3      	str	r3, [r2, #92]	@ 0x5c
		HAL_GPIO_WritePin(_MotorSetting.__MotorP2_GpioPort, _MotorSetting.__MotorP2_Pin, GPIO_PIN_SET);
 80006e0:	4b2d      	ldr	r3, [pc, #180]	@ (8000798 <_MotorSetSpeed+0x254>)
 80006e2:	699b      	ldr	r3, [r3, #24]
 80006e4:	4a2c      	ldr	r2, [pc, #176]	@ (8000798 <_MotorSetSpeed+0x254>)
 80006e6:	8b91      	ldrh	r1, [r2, #28]
 80006e8:	2201      	movs	r2, #1
 80006ea:	4618      	mov	r0, r3
 80006ec:	f001 faec 	bl	8001cc8 <HAL_GPIO_WritePin>

		__HAL_TIM_SET_COMPARE(_MotorSetting.__MotorN2_Tim, _MotorSetting.__MotorN2_TimChannel, 0);
 80006f0:	4b29      	ldr	r3, [pc, #164]	@ (8000798 <_MotorSetSpeed+0x254>)
 80006f2:	68db      	ldr	r3, [r3, #12]
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d105      	bne.n	8000704 <_MotorSetSpeed+0x1c0>
 80006f8:	4b27      	ldr	r3, [pc, #156]	@ (8000798 <_MotorSetSpeed+0x254>)
 80006fa:	689b      	ldr	r3, [r3, #8]
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	2200      	movs	r2, #0
 8000700:	635a      	str	r2, [r3, #52]	@ 0x34
 8000702:	e02c      	b.n	800075e <_MotorSetSpeed+0x21a>
 8000704:	4b24      	ldr	r3, [pc, #144]	@ (8000798 <_MotorSetSpeed+0x254>)
 8000706:	68db      	ldr	r3, [r3, #12]
 8000708:	2b04      	cmp	r3, #4
 800070a:	d105      	bne.n	8000718 <_MotorSetSpeed+0x1d4>
 800070c:	4b22      	ldr	r3, [pc, #136]	@ (8000798 <_MotorSetSpeed+0x254>)
 800070e:	689b      	ldr	r3, [r3, #8]
 8000710:	681a      	ldr	r2, [r3, #0]
 8000712:	2300      	movs	r3, #0
 8000714:	6393      	str	r3, [r2, #56]	@ 0x38
 8000716:	e022      	b.n	800075e <_MotorSetSpeed+0x21a>
 8000718:	4b1f      	ldr	r3, [pc, #124]	@ (8000798 <_MotorSetSpeed+0x254>)
 800071a:	68db      	ldr	r3, [r3, #12]
 800071c:	2b08      	cmp	r3, #8
 800071e:	d105      	bne.n	800072c <_MotorSetSpeed+0x1e8>
 8000720:	4b1d      	ldr	r3, [pc, #116]	@ (8000798 <_MotorSetSpeed+0x254>)
 8000722:	689b      	ldr	r3, [r3, #8]
 8000724:	681a      	ldr	r2, [r3, #0]
 8000726:	2300      	movs	r3, #0
 8000728:	63d3      	str	r3, [r2, #60]	@ 0x3c
 800072a:	e018      	b.n	800075e <_MotorSetSpeed+0x21a>
 800072c:	4b1a      	ldr	r3, [pc, #104]	@ (8000798 <_MotorSetSpeed+0x254>)
 800072e:	68db      	ldr	r3, [r3, #12]
 8000730:	2b0c      	cmp	r3, #12
 8000732:	d105      	bne.n	8000740 <_MotorSetSpeed+0x1fc>
 8000734:	4b18      	ldr	r3, [pc, #96]	@ (8000798 <_MotorSetSpeed+0x254>)
 8000736:	689b      	ldr	r3, [r3, #8]
 8000738:	681a      	ldr	r2, [r3, #0]
 800073a:	2300      	movs	r3, #0
 800073c:	6413      	str	r3, [r2, #64]	@ 0x40
 800073e:	e00e      	b.n	800075e <_MotorSetSpeed+0x21a>
 8000740:	4b15      	ldr	r3, [pc, #84]	@ (8000798 <_MotorSetSpeed+0x254>)
 8000742:	68db      	ldr	r3, [r3, #12]
 8000744:	2b10      	cmp	r3, #16
 8000746:	d105      	bne.n	8000754 <_MotorSetSpeed+0x210>
 8000748:	4b13      	ldr	r3, [pc, #76]	@ (8000798 <_MotorSetSpeed+0x254>)
 800074a:	689b      	ldr	r3, [r3, #8]
 800074c:	681a      	ldr	r2, [r3, #0]
 800074e:	2300      	movs	r3, #0
 8000750:	6593      	str	r3, [r2, #88]	@ 0x58
 8000752:	e004      	b.n	800075e <_MotorSetSpeed+0x21a>
 8000754:	4b10      	ldr	r3, [pc, #64]	@ (8000798 <_MotorSetSpeed+0x254>)
 8000756:	689b      	ldr	r3, [r3, #8]
 8000758:	681a      	ldr	r2, [r3, #0]
 800075a:	2300      	movs	r3, #0
 800075c:	65d3      	str	r3, [r2, #92]	@ 0x5c
		HAL_GPIO_WritePin(_MotorSetting.__MotorP1_GpioPort, _MotorSetting.__MotorP1_Pin, GPIO_PIN_SET);
 800075e:	4b0e      	ldr	r3, [pc, #56]	@ (8000798 <_MotorSetSpeed+0x254>)
 8000760:	691b      	ldr	r3, [r3, #16]
 8000762:	4a0d      	ldr	r2, [pc, #52]	@ (8000798 <_MotorSetSpeed+0x254>)
 8000764:	8a91      	ldrh	r1, [r2, #20]
 8000766:	2201      	movs	r2, #1
 8000768:	4618      	mov	r0, r3
 800076a:	f001 faad 	bl	8001cc8 <HAL_GPIO_WritePin>
		break;
 800076e:	e0ff      	b.n	8000970 <_MotorSetSpeed+0x42c>
	case _MOTOR_MODE_FORWARD:
		__HAL_TIM_SET_COMPARE(_MotorSetting.__MotorN1_Tim, _MotorSetting.__MotorN1_TimChannel, _speed);
 8000770:	4b09      	ldr	r3, [pc, #36]	@ (8000798 <_MotorSetSpeed+0x254>)
 8000772:	685b      	ldr	r3, [r3, #4]
 8000774:	2b00      	cmp	r3, #0
 8000776:	d105      	bne.n	8000784 <_MotorSetSpeed+0x240>
 8000778:	4b07      	ldr	r3, [pc, #28]	@ (8000798 <_MotorSetSpeed+0x254>)
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	681b      	ldr	r3, [r3, #0]
 800077e:	88ba      	ldrh	r2, [r7, #4]
 8000780:	635a      	str	r2, [r3, #52]	@ 0x34
 8000782:	e02e      	b.n	80007e2 <_MotorSetSpeed+0x29e>
 8000784:	4b04      	ldr	r3, [pc, #16]	@ (8000798 <_MotorSetSpeed+0x254>)
 8000786:	685b      	ldr	r3, [r3, #4]
 8000788:	2b04      	cmp	r3, #4
 800078a:	d107      	bne.n	800079c <_MotorSetSpeed+0x258>
 800078c:	4b02      	ldr	r3, [pc, #8]	@ (8000798 <_MotorSetSpeed+0x254>)
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	681a      	ldr	r2, [r3, #0]
 8000792:	88bb      	ldrh	r3, [r7, #4]
 8000794:	6393      	str	r3, [r2, #56]	@ 0x38
 8000796:	e024      	b.n	80007e2 <_MotorSetSpeed+0x29e>
 8000798:	20000040 	.word	0x20000040
 800079c:	4b76      	ldr	r3, [pc, #472]	@ (8000978 <_MotorSetSpeed+0x434>)
 800079e:	685b      	ldr	r3, [r3, #4]
 80007a0:	2b08      	cmp	r3, #8
 80007a2:	d105      	bne.n	80007b0 <_MotorSetSpeed+0x26c>
 80007a4:	4b74      	ldr	r3, [pc, #464]	@ (8000978 <_MotorSetSpeed+0x434>)
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	681a      	ldr	r2, [r3, #0]
 80007aa:	88bb      	ldrh	r3, [r7, #4]
 80007ac:	63d3      	str	r3, [r2, #60]	@ 0x3c
 80007ae:	e018      	b.n	80007e2 <_MotorSetSpeed+0x29e>
 80007b0:	4b71      	ldr	r3, [pc, #452]	@ (8000978 <_MotorSetSpeed+0x434>)
 80007b2:	685b      	ldr	r3, [r3, #4]
 80007b4:	2b0c      	cmp	r3, #12
 80007b6:	d105      	bne.n	80007c4 <_MotorSetSpeed+0x280>
 80007b8:	4b6f      	ldr	r3, [pc, #444]	@ (8000978 <_MotorSetSpeed+0x434>)
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	681a      	ldr	r2, [r3, #0]
 80007be:	88bb      	ldrh	r3, [r7, #4]
 80007c0:	6413      	str	r3, [r2, #64]	@ 0x40
 80007c2:	e00e      	b.n	80007e2 <_MotorSetSpeed+0x29e>
 80007c4:	4b6c      	ldr	r3, [pc, #432]	@ (8000978 <_MotorSetSpeed+0x434>)
 80007c6:	685b      	ldr	r3, [r3, #4]
 80007c8:	2b10      	cmp	r3, #16
 80007ca:	d105      	bne.n	80007d8 <_MotorSetSpeed+0x294>
 80007cc:	4b6a      	ldr	r3, [pc, #424]	@ (8000978 <_MotorSetSpeed+0x434>)
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	681a      	ldr	r2, [r3, #0]
 80007d2:	88bb      	ldrh	r3, [r7, #4]
 80007d4:	6593      	str	r3, [r2, #88]	@ 0x58
 80007d6:	e004      	b.n	80007e2 <_MotorSetSpeed+0x29e>
 80007d8:	4b67      	ldr	r3, [pc, #412]	@ (8000978 <_MotorSetSpeed+0x434>)
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	681a      	ldr	r2, [r3, #0]
 80007de:	88bb      	ldrh	r3, [r7, #4]
 80007e0:	65d3      	str	r3, [r2, #92]	@ 0x5c
		HAL_GPIO_WritePin(_MotorSetting.__MotorP2_GpioPort, _MotorSetting.__MotorP2_Pin, GPIO_PIN_SET);
 80007e2:	4b65      	ldr	r3, [pc, #404]	@ (8000978 <_MotorSetSpeed+0x434>)
 80007e4:	699b      	ldr	r3, [r3, #24]
 80007e6:	4a64      	ldr	r2, [pc, #400]	@ (8000978 <_MotorSetSpeed+0x434>)
 80007e8:	8b91      	ldrh	r1, [r2, #28]
 80007ea:	2201      	movs	r2, #1
 80007ec:	4618      	mov	r0, r3
 80007ee:	f001 fa6b 	bl	8001cc8 <HAL_GPIO_WritePin>

		__HAL_TIM_SET_COMPARE(_MotorSetting.__MotorN2_Tim, _MotorSetting.__MotorN2_TimChannel, 0);
 80007f2:	4b61      	ldr	r3, [pc, #388]	@ (8000978 <_MotorSetSpeed+0x434>)
 80007f4:	68db      	ldr	r3, [r3, #12]
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d105      	bne.n	8000806 <_MotorSetSpeed+0x2c2>
 80007fa:	4b5f      	ldr	r3, [pc, #380]	@ (8000978 <_MotorSetSpeed+0x434>)
 80007fc:	689b      	ldr	r3, [r3, #8]
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	2200      	movs	r2, #0
 8000802:	635a      	str	r2, [r3, #52]	@ 0x34
 8000804:	e02c      	b.n	8000860 <_MotorSetSpeed+0x31c>
 8000806:	4b5c      	ldr	r3, [pc, #368]	@ (8000978 <_MotorSetSpeed+0x434>)
 8000808:	68db      	ldr	r3, [r3, #12]
 800080a:	2b04      	cmp	r3, #4
 800080c:	d105      	bne.n	800081a <_MotorSetSpeed+0x2d6>
 800080e:	4b5a      	ldr	r3, [pc, #360]	@ (8000978 <_MotorSetSpeed+0x434>)
 8000810:	689b      	ldr	r3, [r3, #8]
 8000812:	681a      	ldr	r2, [r3, #0]
 8000814:	2300      	movs	r3, #0
 8000816:	6393      	str	r3, [r2, #56]	@ 0x38
 8000818:	e022      	b.n	8000860 <_MotorSetSpeed+0x31c>
 800081a:	4b57      	ldr	r3, [pc, #348]	@ (8000978 <_MotorSetSpeed+0x434>)
 800081c:	68db      	ldr	r3, [r3, #12]
 800081e:	2b08      	cmp	r3, #8
 8000820:	d105      	bne.n	800082e <_MotorSetSpeed+0x2ea>
 8000822:	4b55      	ldr	r3, [pc, #340]	@ (8000978 <_MotorSetSpeed+0x434>)
 8000824:	689b      	ldr	r3, [r3, #8]
 8000826:	681a      	ldr	r2, [r3, #0]
 8000828:	2300      	movs	r3, #0
 800082a:	63d3      	str	r3, [r2, #60]	@ 0x3c
 800082c:	e018      	b.n	8000860 <_MotorSetSpeed+0x31c>
 800082e:	4b52      	ldr	r3, [pc, #328]	@ (8000978 <_MotorSetSpeed+0x434>)
 8000830:	68db      	ldr	r3, [r3, #12]
 8000832:	2b0c      	cmp	r3, #12
 8000834:	d105      	bne.n	8000842 <_MotorSetSpeed+0x2fe>
 8000836:	4b50      	ldr	r3, [pc, #320]	@ (8000978 <_MotorSetSpeed+0x434>)
 8000838:	689b      	ldr	r3, [r3, #8]
 800083a:	681a      	ldr	r2, [r3, #0]
 800083c:	2300      	movs	r3, #0
 800083e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000840:	e00e      	b.n	8000860 <_MotorSetSpeed+0x31c>
 8000842:	4b4d      	ldr	r3, [pc, #308]	@ (8000978 <_MotorSetSpeed+0x434>)
 8000844:	68db      	ldr	r3, [r3, #12]
 8000846:	2b10      	cmp	r3, #16
 8000848:	d105      	bne.n	8000856 <_MotorSetSpeed+0x312>
 800084a:	4b4b      	ldr	r3, [pc, #300]	@ (8000978 <_MotorSetSpeed+0x434>)
 800084c:	689b      	ldr	r3, [r3, #8]
 800084e:	681a      	ldr	r2, [r3, #0]
 8000850:	2300      	movs	r3, #0
 8000852:	6593      	str	r3, [r2, #88]	@ 0x58
 8000854:	e004      	b.n	8000860 <_MotorSetSpeed+0x31c>
 8000856:	4b48      	ldr	r3, [pc, #288]	@ (8000978 <_MotorSetSpeed+0x434>)
 8000858:	689b      	ldr	r3, [r3, #8]
 800085a:	681a      	ldr	r2, [r3, #0]
 800085c:	2300      	movs	r3, #0
 800085e:	65d3      	str	r3, [r2, #92]	@ 0x5c
		HAL_GPIO_WritePin(_MotorSetting.__MotorP1_GpioPort, _MotorSetting.__MotorP1_Pin, GPIO_PIN_RESET);
 8000860:	4b45      	ldr	r3, [pc, #276]	@ (8000978 <_MotorSetSpeed+0x434>)
 8000862:	691b      	ldr	r3, [r3, #16]
 8000864:	4a44      	ldr	r2, [pc, #272]	@ (8000978 <_MotorSetSpeed+0x434>)
 8000866:	8a91      	ldrh	r1, [r2, #20]
 8000868:	2200      	movs	r2, #0
 800086a:	4618      	mov	r0, r3
 800086c:	f001 fa2c 	bl	8001cc8 <HAL_GPIO_WritePin>
		break;
 8000870:	e07e      	b.n	8000970 <_MotorSetSpeed+0x42c>
	case _MOTOR_MODE_REVARCE:
		__HAL_TIM_SET_COMPARE(_MotorSetting.__MotorN1_Tim, _MotorSetting.__MotorN1_TimChannel, 0);
 8000872:	4b41      	ldr	r3, [pc, #260]	@ (8000978 <_MotorSetSpeed+0x434>)
 8000874:	685b      	ldr	r3, [r3, #4]
 8000876:	2b00      	cmp	r3, #0
 8000878:	d105      	bne.n	8000886 <_MotorSetSpeed+0x342>
 800087a:	4b3f      	ldr	r3, [pc, #252]	@ (8000978 <_MotorSetSpeed+0x434>)
 800087c:	681b      	ldr	r3, [r3, #0]
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	2200      	movs	r2, #0
 8000882:	635a      	str	r2, [r3, #52]	@ 0x34
 8000884:	e02c      	b.n	80008e0 <_MotorSetSpeed+0x39c>
 8000886:	4b3c      	ldr	r3, [pc, #240]	@ (8000978 <_MotorSetSpeed+0x434>)
 8000888:	685b      	ldr	r3, [r3, #4]
 800088a:	2b04      	cmp	r3, #4
 800088c:	d105      	bne.n	800089a <_MotorSetSpeed+0x356>
 800088e:	4b3a      	ldr	r3, [pc, #232]	@ (8000978 <_MotorSetSpeed+0x434>)
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	681a      	ldr	r2, [r3, #0]
 8000894:	2300      	movs	r3, #0
 8000896:	6393      	str	r3, [r2, #56]	@ 0x38
 8000898:	e022      	b.n	80008e0 <_MotorSetSpeed+0x39c>
 800089a:	4b37      	ldr	r3, [pc, #220]	@ (8000978 <_MotorSetSpeed+0x434>)
 800089c:	685b      	ldr	r3, [r3, #4]
 800089e:	2b08      	cmp	r3, #8
 80008a0:	d105      	bne.n	80008ae <_MotorSetSpeed+0x36a>
 80008a2:	4b35      	ldr	r3, [pc, #212]	@ (8000978 <_MotorSetSpeed+0x434>)
 80008a4:	681b      	ldr	r3, [r3, #0]
 80008a6:	681a      	ldr	r2, [r3, #0]
 80008a8:	2300      	movs	r3, #0
 80008aa:	63d3      	str	r3, [r2, #60]	@ 0x3c
 80008ac:	e018      	b.n	80008e0 <_MotorSetSpeed+0x39c>
 80008ae:	4b32      	ldr	r3, [pc, #200]	@ (8000978 <_MotorSetSpeed+0x434>)
 80008b0:	685b      	ldr	r3, [r3, #4]
 80008b2:	2b0c      	cmp	r3, #12
 80008b4:	d105      	bne.n	80008c2 <_MotorSetSpeed+0x37e>
 80008b6:	4b30      	ldr	r3, [pc, #192]	@ (8000978 <_MotorSetSpeed+0x434>)
 80008b8:	681b      	ldr	r3, [r3, #0]
 80008ba:	681a      	ldr	r2, [r3, #0]
 80008bc:	2300      	movs	r3, #0
 80008be:	6413      	str	r3, [r2, #64]	@ 0x40
 80008c0:	e00e      	b.n	80008e0 <_MotorSetSpeed+0x39c>
 80008c2:	4b2d      	ldr	r3, [pc, #180]	@ (8000978 <_MotorSetSpeed+0x434>)
 80008c4:	685b      	ldr	r3, [r3, #4]
 80008c6:	2b10      	cmp	r3, #16
 80008c8:	d105      	bne.n	80008d6 <_MotorSetSpeed+0x392>
 80008ca:	4b2b      	ldr	r3, [pc, #172]	@ (8000978 <_MotorSetSpeed+0x434>)
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	681a      	ldr	r2, [r3, #0]
 80008d0:	2300      	movs	r3, #0
 80008d2:	6593      	str	r3, [r2, #88]	@ 0x58
 80008d4:	e004      	b.n	80008e0 <_MotorSetSpeed+0x39c>
 80008d6:	4b28      	ldr	r3, [pc, #160]	@ (8000978 <_MotorSetSpeed+0x434>)
 80008d8:	681b      	ldr	r3, [r3, #0]
 80008da:	681a      	ldr	r2, [r3, #0]
 80008dc:	2300      	movs	r3, #0
 80008de:	65d3      	str	r3, [r2, #92]	@ 0x5c
		HAL_GPIO_WritePin(_MotorSetting.__MotorP2_GpioPort, _MotorSetting.__MotorP2_Pin, GPIO_PIN_RESET);
 80008e0:	4b25      	ldr	r3, [pc, #148]	@ (8000978 <_MotorSetSpeed+0x434>)
 80008e2:	699b      	ldr	r3, [r3, #24]
 80008e4:	4a24      	ldr	r2, [pc, #144]	@ (8000978 <_MotorSetSpeed+0x434>)
 80008e6:	8b91      	ldrh	r1, [r2, #28]
 80008e8:	2200      	movs	r2, #0
 80008ea:	4618      	mov	r0, r3
 80008ec:	f001 f9ec 	bl	8001cc8 <HAL_GPIO_WritePin>

		__HAL_TIM_SET_COMPARE(_MotorSetting.__MotorN2_Tim, _MotorSetting.__MotorN2_TimChannel, _speed);
 80008f0:	4b21      	ldr	r3, [pc, #132]	@ (8000978 <_MotorSetSpeed+0x434>)
 80008f2:	68db      	ldr	r3, [r3, #12]
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d105      	bne.n	8000904 <_MotorSetSpeed+0x3c0>
 80008f8:	4b1f      	ldr	r3, [pc, #124]	@ (8000978 <_MotorSetSpeed+0x434>)
 80008fa:	689b      	ldr	r3, [r3, #8]
 80008fc:	681b      	ldr	r3, [r3, #0]
 80008fe:	88ba      	ldrh	r2, [r7, #4]
 8000900:	635a      	str	r2, [r3, #52]	@ 0x34
 8000902:	e02c      	b.n	800095e <_MotorSetSpeed+0x41a>
 8000904:	4b1c      	ldr	r3, [pc, #112]	@ (8000978 <_MotorSetSpeed+0x434>)
 8000906:	68db      	ldr	r3, [r3, #12]
 8000908:	2b04      	cmp	r3, #4
 800090a:	d105      	bne.n	8000918 <_MotorSetSpeed+0x3d4>
 800090c:	4b1a      	ldr	r3, [pc, #104]	@ (8000978 <_MotorSetSpeed+0x434>)
 800090e:	689b      	ldr	r3, [r3, #8]
 8000910:	681a      	ldr	r2, [r3, #0]
 8000912:	88bb      	ldrh	r3, [r7, #4]
 8000914:	6393      	str	r3, [r2, #56]	@ 0x38
 8000916:	e022      	b.n	800095e <_MotorSetSpeed+0x41a>
 8000918:	4b17      	ldr	r3, [pc, #92]	@ (8000978 <_MotorSetSpeed+0x434>)
 800091a:	68db      	ldr	r3, [r3, #12]
 800091c:	2b08      	cmp	r3, #8
 800091e:	d105      	bne.n	800092c <_MotorSetSpeed+0x3e8>
 8000920:	4b15      	ldr	r3, [pc, #84]	@ (8000978 <_MotorSetSpeed+0x434>)
 8000922:	689b      	ldr	r3, [r3, #8]
 8000924:	681a      	ldr	r2, [r3, #0]
 8000926:	88bb      	ldrh	r3, [r7, #4]
 8000928:	63d3      	str	r3, [r2, #60]	@ 0x3c
 800092a:	e018      	b.n	800095e <_MotorSetSpeed+0x41a>
 800092c:	4b12      	ldr	r3, [pc, #72]	@ (8000978 <_MotorSetSpeed+0x434>)
 800092e:	68db      	ldr	r3, [r3, #12]
 8000930:	2b0c      	cmp	r3, #12
 8000932:	d105      	bne.n	8000940 <_MotorSetSpeed+0x3fc>
 8000934:	4b10      	ldr	r3, [pc, #64]	@ (8000978 <_MotorSetSpeed+0x434>)
 8000936:	689b      	ldr	r3, [r3, #8]
 8000938:	681a      	ldr	r2, [r3, #0]
 800093a:	88bb      	ldrh	r3, [r7, #4]
 800093c:	6413      	str	r3, [r2, #64]	@ 0x40
 800093e:	e00e      	b.n	800095e <_MotorSetSpeed+0x41a>
 8000940:	4b0d      	ldr	r3, [pc, #52]	@ (8000978 <_MotorSetSpeed+0x434>)
 8000942:	68db      	ldr	r3, [r3, #12]
 8000944:	2b10      	cmp	r3, #16
 8000946:	d105      	bne.n	8000954 <_MotorSetSpeed+0x410>
 8000948:	4b0b      	ldr	r3, [pc, #44]	@ (8000978 <_MotorSetSpeed+0x434>)
 800094a:	689b      	ldr	r3, [r3, #8]
 800094c:	681a      	ldr	r2, [r3, #0]
 800094e:	88bb      	ldrh	r3, [r7, #4]
 8000950:	6593      	str	r3, [r2, #88]	@ 0x58
 8000952:	e004      	b.n	800095e <_MotorSetSpeed+0x41a>
 8000954:	4b08      	ldr	r3, [pc, #32]	@ (8000978 <_MotorSetSpeed+0x434>)
 8000956:	689b      	ldr	r3, [r3, #8]
 8000958:	681a      	ldr	r2, [r3, #0]
 800095a:	88bb      	ldrh	r3, [r7, #4]
 800095c:	65d3      	str	r3, [r2, #92]	@ 0x5c
		HAL_GPIO_WritePin(_MotorSetting.__MotorP1_GpioPort, _MotorSetting.__MotorP1_Pin, GPIO_PIN_SET);
 800095e:	4b06      	ldr	r3, [pc, #24]	@ (8000978 <_MotorSetSpeed+0x434>)
 8000960:	691b      	ldr	r3, [r3, #16]
 8000962:	4a05      	ldr	r2, [pc, #20]	@ (8000978 <_MotorSetSpeed+0x434>)
 8000964:	8a91      	ldrh	r1, [r2, #20]
 8000966:	2201      	movs	r2, #1
 8000968:	4618      	mov	r0, r3
 800096a:	f001 f9ad 	bl	8001cc8 <HAL_GPIO_WritePin>
		break;
 800096e:	bf00      	nop
	}
}
 8000970:	bf00      	nop
 8000972:	3708      	adds	r7, #8
 8000974:	46bd      	mov	sp, r7
 8000976:	bd80      	pop	{r7, pc}
 8000978:	20000040 	.word	0x20000040

0800097c <Init>:
static void MX_TIM2_Init(void);
static void MX_TIM3_Init(void);
static void MX_TIM1_Init(void);
static void MX_TIM15_Init(void);
/* USER CODE BEGIN PFP */
void Init(){
 800097c:	b580      	push	{r7, lr}
 800097e:	af00      	add	r7, sp, #0
	_Init_7Seg();
 8000980:	f000 f83e 	bl	8000a00 <_Init_7Seg>
	_7SegReset();
 8000984:	f7ff fc5a 	bl	800023c <_7SegReset>

	_7SegSetUpAnimation(_SETUP_STEP_START_PROGRAM);
 8000988:	2001      	movs	r0, #1
 800098a:	f7ff fc63 	bl	8000254 <_7SegSetUpAnimation>
	HAL_Delay(200);
 800098e:	20c8      	movs	r0, #200	@ 0xc8
 8000990:	f000 fe22 	bl	80015d8 <HAL_Delay>
	_7SegSetUpAnimation(_SETUP_STEP_SETUP_MOTOR);
 8000994:	2002      	movs	r0, #2
 8000996:	f7ff fc5d 	bl	8000254 <_7SegSetUpAnimation>
	HAL_Delay(200);
 800099a:	20c8      	movs	r0, #200	@ 0xc8
 800099c:	f000 fe1c 	bl	80015d8 <HAL_Delay>
	_7SegSetUpAnimation(_SETUP_STEP_NULL1);
 80009a0:	2003      	movs	r0, #3
 80009a2:	f7ff fc57 	bl	8000254 <_7SegSetUpAnimation>
	HAL_Delay(200);
 80009a6:	20c8      	movs	r0, #200	@ 0xc8
 80009a8:	f000 fe16 	bl	80015d8 <HAL_Delay>
	_7SegSetUpAnimation(_SETUP_STEP_NULL2);
 80009ac:	2004      	movs	r0, #4
 80009ae:	f7ff fc51 	bl	8000254 <_7SegSetUpAnimation>
	HAL_Delay(200);
 80009b2:	20c8      	movs	r0, #200	@ 0xc8
 80009b4:	f000 fe10 	bl	80015d8 <HAL_Delay>
	_7SegSetUpAnimation(_SETUP_STEP_NULL3);
 80009b8:	2005      	movs	r0, #5
 80009ba:	f7ff fc4b 	bl	8000254 <_7SegSetUpAnimation>
	HAL_Delay(200);
 80009be:	20c8      	movs	r0, #200	@ 0xc8
 80009c0:	f000 fe0a 	bl	80015d8 <HAL_Delay>
	_7SegSetUpAnimation(_SETUP_STEP_NULL4);
 80009c4:	2006      	movs	r0, #6
 80009c6:	f7ff fc45 	bl	8000254 <_7SegSetUpAnimation>
	HAL_Delay(200);
 80009ca:	20c8      	movs	r0, #200	@ 0xc8
 80009cc:	f000 fe04 	bl	80015d8 <HAL_Delay>
	_7SegSetUpAnimation(_SETUP_STEP_NULL5);
 80009d0:	2007      	movs	r0, #7
 80009d2:	f7ff fc3f 	bl	8000254 <_7SegSetUpAnimation>
	HAL_Delay(200);
 80009d6:	20c8      	movs	r0, #200	@ 0xc8
 80009d8:	f000 fdfe 	bl	80015d8 <HAL_Delay>
	_7SegSetUpAnimation(_SETUP_STEP_NULL6);
 80009dc:	2008      	movs	r0, #8
 80009de:	f7ff fc39 	bl	8000254 <_7SegSetUpAnimation>
	HAL_Delay(200);
 80009e2:	20c8      	movs	r0, #200	@ 0xc8
 80009e4:	f000 fdf8 	bl	80015d8 <HAL_Delay>
	_7SegSetUpAnimation(_SETUP_STEP_FINISH);
 80009e8:	2009      	movs	r0, #9
 80009ea:	f7ff fc33 	bl	8000254 <_7SegSetUpAnimation>
	HAL_Delay(200);
 80009ee:	20c8      	movs	r0, #200	@ 0xc8
 80009f0:	f000 fdf2 	bl	80015d8 <HAL_Delay>
	_7SegReset();
 80009f4:	f7ff fc22 	bl	800023c <_7SegReset>

	_Init_Motor();
 80009f8:	f000 f822 	bl	8000a40 <_Init_Motor>

}
 80009fc:	bf00      	nop
 80009fe:	bd80      	pop	{r7, pc}

08000a00 <_Init_7Seg>:

void _Init_7Seg(){
 8000a00:	b580      	push	{r7, lr}
 8000a02:	af00      	add	r7, sp, #0
	Setting_7Seg.__7SegSi_GpioPort = _7SEG_SI_GPIO_Port;
 8000a04:	4b0c      	ldr	r3, [pc, #48]	@ (8000a38 <_Init_7Seg+0x38>)
 8000a06:	4a0d      	ldr	r2, [pc, #52]	@ (8000a3c <_Init_7Seg+0x3c>)
 8000a08:	601a      	str	r2, [r3, #0]
	Setting_7Seg.__7SegSi_Pin = _7SEG_SI_Pin;
 8000a0a:	4b0b      	ldr	r3, [pc, #44]	@ (8000a38 <_Init_7Seg+0x38>)
 8000a0c:	2240      	movs	r2, #64	@ 0x40
 8000a0e:	809a      	strh	r2, [r3, #4]
	Setting_7Seg.__7SegRck_GpioPort = _7SEG_RCK_GPIO_Port;
 8000a10:	4b09      	ldr	r3, [pc, #36]	@ (8000a38 <_Init_7Seg+0x38>)
 8000a12:	4a0a      	ldr	r2, [pc, #40]	@ (8000a3c <_Init_7Seg+0x3c>)
 8000a14:	609a      	str	r2, [r3, #8]
	Setting_7Seg.__7SegRck_Pin = _7SEG_RCK_Pin;
 8000a16:	4b08      	ldr	r3, [pc, #32]	@ (8000a38 <_Init_7Seg+0x38>)
 8000a18:	2220      	movs	r2, #32
 8000a1a:	819a      	strh	r2, [r3, #12]
	Setting_7Seg.__7SegSck_GpioPort = _7SEG_SCK_GPIO_Port;
 8000a1c:	4b06      	ldr	r3, [pc, #24]	@ (8000a38 <_Init_7Seg+0x38>)
 8000a1e:	4a07      	ldr	r2, [pc, #28]	@ (8000a3c <_Init_7Seg+0x3c>)
 8000a20:	611a      	str	r2, [r3, #16]
	Setting_7Seg.__7SegSck_Pin = _7SEG_SCK_Pin;
 8000a22:	4b05      	ldr	r3, [pc, #20]	@ (8000a38 <_Init_7Seg+0x38>)
 8000a24:	2210      	movs	r2, #16
 8000a26:	829a      	strh	r2, [r3, #20]

	_7SegInit(&Setting_7Seg);
 8000a28:	4803      	ldr	r0, [pc, #12]	@ (8000a38 <_Init_7Seg+0x38>)
 8000a2a:	f7ff fbcd 	bl	80001c8 <_7SegInit>
	_7SegReset();
 8000a2e:	f7ff fc05 	bl	800023c <_7SegReset>
}
 8000a32:	bf00      	nop
 8000a34:	bd80      	pop	{r7, pc}
 8000a36:	bf00      	nop
 8000a38:	200002cc 	.word	0x200002cc
 8000a3c:	48000400 	.word	0x48000400

08000a40 <_Init_Motor>:

void _Init_Motor(){
 8000a40:	b580      	push	{r7, lr}
 8000a42:	af00      	add	r7, sp, #0
	Setting_Motor.__MotorN1_Tim = &htim2;
 8000a44:	4b10      	ldr	r3, [pc, #64]	@ (8000a88 <_Init_Motor+0x48>)
 8000a46:	4a11      	ldr	r2, [pc, #68]	@ (8000a8c <_Init_Motor+0x4c>)
 8000a48:	601a      	str	r2, [r3, #0]
	Setting_Motor.__MotorN1_TimChannel = TIM_CHANNEL_2;
 8000a4a:	4b0f      	ldr	r3, [pc, #60]	@ (8000a88 <_Init_Motor+0x48>)
 8000a4c:	2204      	movs	r2, #4
 8000a4e:	605a      	str	r2, [r3, #4]
	Setting_Motor.__MotorN2_Tim = &htim3;
 8000a50:	4b0d      	ldr	r3, [pc, #52]	@ (8000a88 <_Init_Motor+0x48>)
 8000a52:	4a0f      	ldr	r2, [pc, #60]	@ (8000a90 <_Init_Motor+0x50>)
 8000a54:	609a      	str	r2, [r3, #8]
	Setting_Motor.__MotorN2_TimChannel = TIM_CHANNEL_3;
 8000a56:	4b0c      	ldr	r3, [pc, #48]	@ (8000a88 <_Init_Motor+0x48>)
 8000a58:	2208      	movs	r2, #8
 8000a5a:	60da      	str	r2, [r3, #12]

	Setting_Motor.__MotorP1_GpioPort = SIG_P1_GPIO_Port;
 8000a5c:	4b0a      	ldr	r3, [pc, #40]	@ (8000a88 <_Init_Motor+0x48>)
 8000a5e:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000a62:	611a      	str	r2, [r3, #16]
	Setting_Motor.__MotorP1_Pin = SIG_P1_Pin;
 8000a64:	4b08      	ldr	r3, [pc, #32]	@ (8000a88 <_Init_Motor+0x48>)
 8000a66:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000a6a:	829a      	strh	r2, [r3, #20]
	Setting_Motor.__MotorP2_GpioPort = SIG_P2_GPIO_Port;
 8000a6c:	4b06      	ldr	r3, [pc, #24]	@ (8000a88 <_Init_Motor+0x48>)
 8000a6e:	4a09      	ldr	r2, [pc, #36]	@ (8000a94 <_Init_Motor+0x54>)
 8000a70:	619a      	str	r2, [r3, #24]
	Setting_Motor.__MotorP2_Pin = SIG_P2_Pin;
 8000a72:	4b05      	ldr	r3, [pc, #20]	@ (8000a88 <_Init_Motor+0x48>)
 8000a74:	2202      	movs	r2, #2
 8000a76:	839a      	strh	r2, [r3, #28]

	Setting_Motor.__DeadTime_TIM = &htim1;
 8000a78:	4b03      	ldr	r3, [pc, #12]	@ (8000a88 <_Init_Motor+0x48>)
 8000a7a:	4a07      	ldr	r2, [pc, #28]	@ (8000a98 <_Init_Motor+0x58>)
 8000a7c:	621a      	str	r2, [r3, #32]

	_MotorInit(&Setting_Motor);
 8000a7e:	4802      	ldr	r0, [pc, #8]	@ (8000a88 <_Init_Motor+0x48>)
 8000a80:	f7ff fc9e 	bl	80003c0 <_MotorInit>
}
 8000a84:	bf00      	nop
 8000a86:	bd80      	pop	{r7, pc}
 8000a88:	200002e4 	.word	0x200002e4
 8000a8c:	200000d8 	.word	0x200000d8
 8000a90:	20000124 	.word	0x20000124
 8000a94:	48000400 	.word	0x48000400
 8000a98:	2000008c 	.word	0x2000008c

08000a9c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000aa0:	f000 fd34 	bl	800150c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000aa4:	f000 f844 	bl	8000b30 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000aa8:	f000 facc 	bl	8001044 <MX_GPIO_Init>
  MX_CAN_Init();
 8000aac:	f000 f89c 	bl	8000be8 <MX_CAN_Init>
  MX_USART1_UART_Init();
 8000ab0:	f000 fa64 	bl	8000f7c <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000ab4:	f000 fa94 	bl	8000fe0 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000ab8:	f000 f920 	bl	8000cfc <MX_TIM2_Init>
  MX_TIM3_Init();
 8000abc:	f000 f994 	bl	8000de8 <MX_TIM3_Init>
  MX_TIM1_Init();
 8000ac0:	f000 f8c8 	bl	8000c54 <MX_TIM1_Init>
  MX_TIM15_Init();
 8000ac4:	f000 fa08 	bl	8000ed8 <MX_TIM15_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(LED_POWER_GPIO_Port, LED_POWER_Pin, GPIO_PIN_SET); //Power Led ON
 8000ac8:	2201      	movs	r2, #1
 8000aca:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000ace:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ad2:	f001 f8f9 	bl	8001cc8 <HAL_GPIO_WritePin>

  Init(); //Init
 8000ad6:	f7ff ff51 	bl	800097c <Init>

  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET);
 8000ada:	2201      	movs	r2, #1
 8000adc:	2180      	movs	r1, #128	@ 0x80
 8000ade:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ae2:	f001 f8f1 	bl	8001cc8 <HAL_GPIO_WritePin>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  _MotorSetSpeed(_MOTOR_MODE_FORWARD, __MOTOR_MAX_SPEED);
 8000ae6:	f64e 2160 	movw	r1, #60000	@ 0xea60
 8000aea:	2002      	movs	r0, #2
 8000aec:	f7ff fd2a 	bl	8000544 <_MotorSetSpeed>
	  HAL_Delay(100);
 8000af0:	2064      	movs	r0, #100	@ 0x64
 8000af2:	f000 fd71 	bl	80015d8 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 8000af6:	2200      	movs	r2, #0
 8000af8:	2180      	movs	r1, #128	@ 0x80
 8000afa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000afe:	f001 f8e3 	bl	8001cc8 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(Setting_Motor.__MotorP2_GpioPort, Setting_Motor.__MotorP2_Pin, GPIO_PIN_RESET);
 8000b02:	4b0a      	ldr	r3, [pc, #40]	@ (8000b2c <main+0x90>)
 8000b04:	699b      	ldr	r3, [r3, #24]
 8000b06:	4a09      	ldr	r2, [pc, #36]	@ (8000b2c <main+0x90>)
 8000b08:	8b91      	ldrh	r1, [r2, #28]
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	4618      	mov	r0, r3
 8000b0e:	f001 f8db 	bl	8001cc8 <HAL_GPIO_WritePin>

	  HAL_Delay(1000);
 8000b12:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000b16:	f000 fd5f 	bl	80015d8 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET);
 8000b1a:	2201      	movs	r2, #1
 8000b1c:	2180      	movs	r1, #128	@ 0x80
 8000b1e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b22:	f001 f8d1 	bl	8001cc8 <HAL_GPIO_WritePin>
	  _MotorSetSpeed(_MOTOR_MODE_FORWARD, __MOTOR_MAX_SPEED);
 8000b26:	bf00      	nop
 8000b28:	e7dd      	b.n	8000ae6 <main+0x4a>
 8000b2a:	bf00      	nop
 8000b2c:	200002e4 	.word	0x200002e4

08000b30 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b096      	sub	sp, #88	@ 0x58
 8000b34:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b36:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000b3a:	2228      	movs	r2, #40	@ 0x28
 8000b3c:	2100      	movs	r1, #0
 8000b3e:	4618      	mov	r0, r3
 8000b40:	f004 f923 	bl	8004d8a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b44:	f107 031c 	add.w	r3, r7, #28
 8000b48:	2200      	movs	r2, #0
 8000b4a:	601a      	str	r2, [r3, #0]
 8000b4c:	605a      	str	r2, [r3, #4]
 8000b4e:	609a      	str	r2, [r3, #8]
 8000b50:	60da      	str	r2, [r3, #12]
 8000b52:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b54:	1d3b      	adds	r3, r7, #4
 8000b56:	2200      	movs	r2, #0
 8000b58:	601a      	str	r2, [r3, #0]
 8000b5a:	605a      	str	r2, [r3, #4]
 8000b5c:	609a      	str	r2, [r3, #8]
 8000b5e:	60da      	str	r2, [r3, #12]
 8000b60:	611a      	str	r2, [r3, #16]
 8000b62:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b64:	2302      	movs	r3, #2
 8000b66:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b68:	2301      	movs	r3, #1
 8000b6a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b6c:	2310      	movs	r3, #16
 8000b6e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b70:	2302      	movs	r3, #2
 8000b72:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000b74:	2300      	movs	r3, #0
 8000b76:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL15;
 8000b78:	f44f 1350 	mov.w	r3, #3407872	@ 0x340000
 8000b7c:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b7e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000b82:	4618      	mov	r0, r3
 8000b84:	f001 f8b8 	bl	8001cf8 <HAL_RCC_OscConfig>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d001      	beq.n	8000b92 <SystemClock_Config+0x62>
  {
    Error_Handler();
 8000b8e:	f000 fabb 	bl	8001108 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b92:	230f      	movs	r3, #15
 8000b94:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b96:	2302      	movs	r3, #2
 8000b98:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b9e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000ba2:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000ba8:	f107 031c 	add.w	r3, r7, #28
 8000bac:	2102      	movs	r1, #2
 8000bae:	4618      	mov	r0, r3
 8000bb0:	f002 f8e0 	bl	8002d74 <HAL_RCC_ClockConfig>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d001      	beq.n	8000bbe <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000bba:	f000 faa5 	bl	8001108 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_TIM1;
 8000bbe:	f241 0301 	movw	r3, #4097	@ 0x1001
 8000bc2:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000bcc:	1d3b      	adds	r3, r7, #4
 8000bce:	4618      	mov	r0, r3
 8000bd0:	f002 faf0 	bl	80031b4 <HAL_RCCEx_PeriphCLKConfig>
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d001      	beq.n	8000bde <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000bda:	f000 fa95 	bl	8001108 <Error_Handler>
  }
}
 8000bde:	bf00      	nop
 8000be0:	3758      	adds	r7, #88	@ 0x58
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bd80      	pop	{r7, pc}
	...

08000be8 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 8000bec:	4b17      	ldr	r3, [pc, #92]	@ (8000c4c <MX_CAN_Init+0x64>)
 8000bee:	4a18      	ldr	r2, [pc, #96]	@ (8000c50 <MX_CAN_Init+0x68>)
 8000bf0:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 3;
 8000bf2:	4b16      	ldr	r3, [pc, #88]	@ (8000c4c <MX_CAN_Init+0x64>)
 8000bf4:	2203      	movs	r2, #3
 8000bf6:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000bf8:	4b14      	ldr	r3, [pc, #80]	@ (8000c4c <MX_CAN_Init+0x64>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000bfe:	4b13      	ldr	r3, [pc, #76]	@ (8000c4c <MX_CAN_Init+0x64>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_7TQ;
 8000c04:	4b11      	ldr	r3, [pc, #68]	@ (8000c4c <MX_CAN_Init+0x64>)
 8000c06:	f44f 22c0 	mov.w	r2, #393216	@ 0x60000
 8000c0a:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000c0c:	4b0f      	ldr	r3, [pc, #60]	@ (8000c4c <MX_CAN_Init+0x64>)
 8000c0e:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8000c12:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000c14:	4b0d      	ldr	r3, [pc, #52]	@ (8000c4c <MX_CAN_Init+0x64>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8000c1a:	4b0c      	ldr	r3, [pc, #48]	@ (8000c4c <MX_CAN_Init+0x64>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000c20:	4b0a      	ldr	r3, [pc, #40]	@ (8000c4c <MX_CAN_Init+0x64>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8000c26:	4b09      	ldr	r3, [pc, #36]	@ (8000c4c <MX_CAN_Init+0x64>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000c2c:	4b07      	ldr	r3, [pc, #28]	@ (8000c4c <MX_CAN_Init+0x64>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8000c32:	4b06      	ldr	r3, [pc, #24]	@ (8000c4c <MX_CAN_Init+0x64>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000c38:	4804      	ldr	r0, [pc, #16]	@ (8000c4c <MX_CAN_Init+0x64>)
 8000c3a:	f000 fcf1 	bl	8001620 <HAL_CAN_Init>
 8000c3e:	4603      	mov	r3, r0
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d001      	beq.n	8000c48 <MX_CAN_Init+0x60>
  {
    Error_Handler();
 8000c44:	f000 fa60 	bl	8001108 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8000c48:	bf00      	nop
 8000c4a:	bd80      	pop	{r7, pc}
 8000c4c:	20000064 	.word	0x20000064
 8000c50:	40006400 	.word	0x40006400

08000c54 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b088      	sub	sp, #32
 8000c58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c5a:	f107 0310 	add.w	r3, r7, #16
 8000c5e:	2200      	movs	r2, #0
 8000c60:	601a      	str	r2, [r3, #0]
 8000c62:	605a      	str	r2, [r3, #4]
 8000c64:	609a      	str	r2, [r3, #8]
 8000c66:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c68:	1d3b      	adds	r3, r7, #4
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	601a      	str	r2, [r3, #0]
 8000c6e:	605a      	str	r2, [r3, #4]
 8000c70:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000c72:	4b20      	ldr	r3, [pc, #128]	@ (8000cf4 <MX_TIM1_Init+0xa0>)
 8000c74:	4a20      	ldr	r2, [pc, #128]	@ (8000cf8 <MX_TIM1_Init+0xa4>)
 8000c76:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 6-1;
 8000c78:	4b1e      	ldr	r3, [pc, #120]	@ (8000cf4 <MX_TIM1_Init+0xa0>)
 8000c7a:	2205      	movs	r2, #5
 8000c7c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c7e:	4b1d      	ldr	r3, [pc, #116]	@ (8000cf4 <MX_TIM1_Init+0xa0>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xffff-1;
 8000c84:	4b1b      	ldr	r3, [pc, #108]	@ (8000cf4 <MX_TIM1_Init+0xa0>)
 8000c86:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8000c8a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c8c:	4b19      	ldr	r3, [pc, #100]	@ (8000cf4 <MX_TIM1_Init+0xa0>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000c92:	4b18      	ldr	r3, [pc, #96]	@ (8000cf4 <MX_TIM1_Init+0xa0>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c98:	4b16      	ldr	r3, [pc, #88]	@ (8000cf4 <MX_TIM1_Init+0xa0>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000c9e:	4815      	ldr	r0, [pc, #84]	@ (8000cf4 <MX_TIM1_Init+0xa0>)
 8000ca0:	f002 fbae 	bl	8003400 <HAL_TIM_Base_Init>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d001      	beq.n	8000cae <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8000caa:	f000 fa2d 	bl	8001108 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000cae:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000cb2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000cb4:	f107 0310 	add.w	r3, r7, #16
 8000cb8:	4619      	mov	r1, r3
 8000cba:	480e      	ldr	r0, [pc, #56]	@ (8000cf4 <MX_TIM1_Init+0xa0>)
 8000cbc:	f002 ff88 	bl	8003bd0 <HAL_TIM_ConfigClockSource>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d001      	beq.n	8000cca <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8000cc6:	f000 fa1f 	bl	8001108 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000cd6:	1d3b      	adds	r3, r7, #4
 8000cd8:	4619      	mov	r1, r3
 8000cda:	4806      	ldr	r0, [pc, #24]	@ (8000cf4 <MX_TIM1_Init+0xa0>)
 8000cdc:	f003 fc2c 	bl	8004538 <HAL_TIMEx_MasterConfigSynchronization>
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d001      	beq.n	8000cea <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000ce6:	f000 fa0f 	bl	8001108 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000cea:	bf00      	nop
 8000cec:	3720      	adds	r7, #32
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	bf00      	nop
 8000cf4:	2000008c 	.word	0x2000008c
 8000cf8:	40012c00 	.word	0x40012c00

08000cfc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b08e      	sub	sp, #56	@ 0x38
 8000d00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d02:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000d06:	2200      	movs	r2, #0
 8000d08:	601a      	str	r2, [r3, #0]
 8000d0a:	605a      	str	r2, [r3, #4]
 8000d0c:	609a      	str	r2, [r3, #8]
 8000d0e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d10:	f107 031c 	add.w	r3, r7, #28
 8000d14:	2200      	movs	r2, #0
 8000d16:	601a      	str	r2, [r3, #0]
 8000d18:	605a      	str	r2, [r3, #4]
 8000d1a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d1c:	463b      	mov	r3, r7
 8000d1e:	2200      	movs	r2, #0
 8000d20:	601a      	str	r2, [r3, #0]
 8000d22:	605a      	str	r2, [r3, #4]
 8000d24:	609a      	str	r2, [r3, #8]
 8000d26:	60da      	str	r2, [r3, #12]
 8000d28:	611a      	str	r2, [r3, #16]
 8000d2a:	615a      	str	r2, [r3, #20]
 8000d2c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000d2e:	4b2d      	ldr	r3, [pc, #180]	@ (8000de4 <MX_TIM2_Init+0xe8>)
 8000d30:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000d34:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000d36:	4b2b      	ldr	r3, [pc, #172]	@ (8000de4 <MX_TIM2_Init+0xe8>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d3c:	4b29      	ldr	r3, [pc, #164]	@ (8000de4 <MX_TIM2_Init+0xe8>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 60000-1;
 8000d42:	4b28      	ldr	r3, [pc, #160]	@ (8000de4 <MX_TIM2_Init+0xe8>)
 8000d44:	f64e 225f 	movw	r2, #59999	@ 0xea5f
 8000d48:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d4a:	4b26      	ldr	r3, [pc, #152]	@ (8000de4 <MX_TIM2_Init+0xe8>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d50:	4b24      	ldr	r3, [pc, #144]	@ (8000de4 <MX_TIM2_Init+0xe8>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000d56:	4823      	ldr	r0, [pc, #140]	@ (8000de4 <MX_TIM2_Init+0xe8>)
 8000d58:	f002 fb52 	bl	8003400 <HAL_TIM_Base_Init>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d001      	beq.n	8000d66 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8000d62:	f000 f9d1 	bl	8001108 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d66:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000d6a:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000d6c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000d70:	4619      	mov	r1, r3
 8000d72:	481c      	ldr	r0, [pc, #112]	@ (8000de4 <MX_TIM2_Init+0xe8>)
 8000d74:	f002 ff2c 	bl	8003bd0 <HAL_TIM_ConfigClockSource>
 8000d78:	4603      	mov	r3, r0
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d001      	beq.n	8000d82 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8000d7e:	f000 f9c3 	bl	8001108 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000d82:	4818      	ldr	r0, [pc, #96]	@ (8000de4 <MX_TIM2_Init+0xe8>)
 8000d84:	f002 fc49 	bl	800361a <HAL_TIM_PWM_Init>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d001      	beq.n	8000d92 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8000d8e:	f000 f9bb 	bl	8001108 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d92:	2300      	movs	r3, #0
 8000d94:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d96:	2300      	movs	r3, #0
 8000d98:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000d9a:	f107 031c 	add.w	r3, r7, #28
 8000d9e:	4619      	mov	r1, r3
 8000da0:	4810      	ldr	r0, [pc, #64]	@ (8000de4 <MX_TIM2_Init+0xe8>)
 8000da2:	f003 fbc9 	bl	8004538 <HAL_TIMEx_MasterConfigSynchronization>
 8000da6:	4603      	mov	r3, r0
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d001      	beq.n	8000db0 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8000dac:	f000 f9ac 	bl	8001108 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000db0:	2360      	movs	r3, #96	@ 0x60
 8000db2:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000db4:	2300      	movs	r3, #0
 8000db6:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000db8:	2300      	movs	r3, #0
 8000dba:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000dc0:	463b      	mov	r3, r7
 8000dc2:	2204      	movs	r2, #4
 8000dc4:	4619      	mov	r1, r3
 8000dc6:	4807      	ldr	r0, [pc, #28]	@ (8000de4 <MX_TIM2_Init+0xe8>)
 8000dc8:	f002 fdee 	bl	80039a8 <HAL_TIM_PWM_ConfigChannel>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d001      	beq.n	8000dd6 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8000dd2:	f000 f999 	bl	8001108 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000dd6:	4803      	ldr	r0, [pc, #12]	@ (8000de4 <MX_TIM2_Init+0xe8>)
 8000dd8:	f000 fa5e 	bl	8001298 <HAL_TIM_MspPostInit>

}
 8000ddc:	bf00      	nop
 8000dde:	3738      	adds	r7, #56	@ 0x38
 8000de0:	46bd      	mov	sp, r7
 8000de2:	bd80      	pop	{r7, pc}
 8000de4:	200000d8 	.word	0x200000d8

08000de8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b08e      	sub	sp, #56	@ 0x38
 8000dec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000dee:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000df2:	2200      	movs	r2, #0
 8000df4:	601a      	str	r2, [r3, #0]
 8000df6:	605a      	str	r2, [r3, #4]
 8000df8:	609a      	str	r2, [r3, #8]
 8000dfa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000dfc:	f107 031c 	add.w	r3, r7, #28
 8000e00:	2200      	movs	r2, #0
 8000e02:	601a      	str	r2, [r3, #0]
 8000e04:	605a      	str	r2, [r3, #4]
 8000e06:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e08:	463b      	mov	r3, r7
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	601a      	str	r2, [r3, #0]
 8000e0e:	605a      	str	r2, [r3, #4]
 8000e10:	609a      	str	r2, [r3, #8]
 8000e12:	60da      	str	r2, [r3, #12]
 8000e14:	611a      	str	r2, [r3, #16]
 8000e16:	615a      	str	r2, [r3, #20]
 8000e18:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000e1a:	4b2d      	ldr	r3, [pc, #180]	@ (8000ed0 <MX_TIM3_Init+0xe8>)
 8000e1c:	4a2d      	ldr	r2, [pc, #180]	@ (8000ed4 <MX_TIM3_Init+0xec>)
 8000e1e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000e20:	4b2b      	ldr	r3, [pc, #172]	@ (8000ed0 <MX_TIM3_Init+0xe8>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e26:	4b2a      	ldr	r3, [pc, #168]	@ (8000ed0 <MX_TIM3_Init+0xe8>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 60000-1;
 8000e2c:	4b28      	ldr	r3, [pc, #160]	@ (8000ed0 <MX_TIM3_Init+0xe8>)
 8000e2e:	f64e 225f 	movw	r2, #59999	@ 0xea5f
 8000e32:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e34:	4b26      	ldr	r3, [pc, #152]	@ (8000ed0 <MX_TIM3_Init+0xe8>)
 8000e36:	2200      	movs	r2, #0
 8000e38:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e3a:	4b25      	ldr	r3, [pc, #148]	@ (8000ed0 <MX_TIM3_Init+0xe8>)
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000e40:	4823      	ldr	r0, [pc, #140]	@ (8000ed0 <MX_TIM3_Init+0xe8>)
 8000e42:	f002 fadd 	bl	8003400 <HAL_TIM_Base_Init>
 8000e46:	4603      	mov	r3, r0
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d001      	beq.n	8000e50 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8000e4c:	f000 f95c 	bl	8001108 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e50:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e54:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000e56:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000e5a:	4619      	mov	r1, r3
 8000e5c:	481c      	ldr	r0, [pc, #112]	@ (8000ed0 <MX_TIM3_Init+0xe8>)
 8000e5e:	f002 feb7 	bl	8003bd0 <HAL_TIM_ConfigClockSource>
 8000e62:	4603      	mov	r3, r0
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d001      	beq.n	8000e6c <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8000e68:	f000 f94e 	bl	8001108 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 8000e6c:	4818      	ldr	r0, [pc, #96]	@ (8000ed0 <MX_TIM3_Init+0xe8>)
 8000e6e:	f002 fb73 	bl	8003558 <HAL_TIM_OC_Init>
 8000e72:	4603      	mov	r3, r0
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d001      	beq.n	8000e7c <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8000e78:	f000 f946 	bl	8001108 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e80:	2300      	movs	r3, #0
 8000e82:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000e84:	f107 031c 	add.w	r3, r7, #28
 8000e88:	4619      	mov	r1, r3
 8000e8a:	4811      	ldr	r0, [pc, #68]	@ (8000ed0 <MX_TIM3_Init+0xe8>)
 8000e8c:	f003 fb54 	bl	8004538 <HAL_TIMEx_MasterConfigSynchronization>
 8000e90:	4603      	mov	r3, r0
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d001      	beq.n	8000e9a <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8000e96:	f000 f937 	bl	8001108 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000eaa:	463b      	mov	r3, r7
 8000eac:	2208      	movs	r2, #8
 8000eae:	4619      	mov	r1, r3
 8000eb0:	4807      	ldr	r0, [pc, #28]	@ (8000ed0 <MX_TIM3_Init+0xe8>)
 8000eb2:	f002 fcff 	bl	80038b4 <HAL_TIM_OC_ConfigChannel>
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d001      	beq.n	8000ec0 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8000ebc:	f000 f924 	bl	8001108 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000ec0:	4803      	ldr	r0, [pc, #12]	@ (8000ed0 <MX_TIM3_Init+0xe8>)
 8000ec2:	f000 f9e9 	bl	8001298 <HAL_TIM_MspPostInit>

}
 8000ec6:	bf00      	nop
 8000ec8:	3738      	adds	r7, #56	@ 0x38
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bd80      	pop	{r7, pc}
 8000ece:	bf00      	nop
 8000ed0:	20000124 	.word	0x20000124
 8000ed4:	40000400 	.word	0x40000400

08000ed8 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b088      	sub	sp, #32
 8000edc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ede:	f107 0310 	add.w	r3, r7, #16
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	601a      	str	r2, [r3, #0]
 8000ee6:	605a      	str	r2, [r3, #4]
 8000ee8:	609a      	str	r2, [r3, #8]
 8000eea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000eec:	1d3b      	adds	r3, r7, #4
 8000eee:	2200      	movs	r2, #0
 8000ef0:	601a      	str	r2, [r3, #0]
 8000ef2:	605a      	str	r2, [r3, #4]
 8000ef4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8000ef6:	4b1f      	ldr	r3, [pc, #124]	@ (8000f74 <MX_TIM15_Init+0x9c>)
 8000ef8:	4a1f      	ldr	r2, [pc, #124]	@ (8000f78 <MX_TIM15_Init+0xa0>)
 8000efa:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 8000efc:	4b1d      	ldr	r3, [pc, #116]	@ (8000f74 <MX_TIM15_Init+0x9c>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f02:	4b1c      	ldr	r3, [pc, #112]	@ (8000f74 <MX_TIM15_Init+0x9c>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 8000f08:	4b1a      	ldr	r3, [pc, #104]	@ (8000f74 <MX_TIM15_Init+0x9c>)
 8000f0a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000f0e:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f10:	4b18      	ldr	r3, [pc, #96]	@ (8000f74 <MX_TIM15_Init+0x9c>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8000f16:	4b17      	ldr	r3, [pc, #92]	@ (8000f74 <MX_TIM15_Init+0x9c>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f1c:	4b15      	ldr	r3, [pc, #84]	@ (8000f74 <MX_TIM15_Init+0x9c>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8000f22:	4814      	ldr	r0, [pc, #80]	@ (8000f74 <MX_TIM15_Init+0x9c>)
 8000f24:	f002 fa6c 	bl	8003400 <HAL_TIM_Base_Init>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d001      	beq.n	8000f32 <MX_TIM15_Init+0x5a>
  {
    Error_Handler();
 8000f2e:	f000 f8eb 	bl	8001108 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f32:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f36:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8000f38:	f107 0310 	add.w	r3, r7, #16
 8000f3c:	4619      	mov	r1, r3
 8000f3e:	480d      	ldr	r0, [pc, #52]	@ (8000f74 <MX_TIM15_Init+0x9c>)
 8000f40:	f002 fe46 	bl	8003bd0 <HAL_TIM_ConfigClockSource>
 8000f44:	4603      	mov	r3, r0
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d001      	beq.n	8000f4e <MX_TIM15_Init+0x76>
  {
    Error_Handler();
 8000f4a:	f000 f8dd 	bl	8001108 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f52:	2300      	movs	r3, #0
 8000f54:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8000f56:	1d3b      	adds	r3, r7, #4
 8000f58:	4619      	mov	r1, r3
 8000f5a:	4806      	ldr	r0, [pc, #24]	@ (8000f74 <MX_TIM15_Init+0x9c>)
 8000f5c:	f003 faec 	bl	8004538 <HAL_TIMEx_MasterConfigSynchronization>
 8000f60:	4603      	mov	r3, r0
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d001      	beq.n	8000f6a <MX_TIM15_Init+0x92>
  {
    Error_Handler();
 8000f66:	f000 f8cf 	bl	8001108 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 8000f6a:	bf00      	nop
 8000f6c:	3720      	adds	r7, #32
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}
 8000f72:	bf00      	nop
 8000f74:	20000170 	.word	0x20000170
 8000f78:	40014000 	.word	0x40014000

08000f7c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000f80:	4b15      	ldr	r3, [pc, #84]	@ (8000fd8 <MX_USART1_UART_Init+0x5c>)
 8000f82:	4a16      	ldr	r2, [pc, #88]	@ (8000fdc <MX_USART1_UART_Init+0x60>)
 8000f84:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 38400;
 8000f86:	4b14      	ldr	r3, [pc, #80]	@ (8000fd8 <MX_USART1_UART_Init+0x5c>)
 8000f88:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 8000f8c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000f8e:	4b12      	ldr	r3, [pc, #72]	@ (8000fd8 <MX_USART1_UART_Init+0x5c>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000f94:	4b10      	ldr	r3, [pc, #64]	@ (8000fd8 <MX_USART1_UART_Init+0x5c>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000f9a:	4b0f      	ldr	r3, [pc, #60]	@ (8000fd8 <MX_USART1_UART_Init+0x5c>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000fa0:	4b0d      	ldr	r3, [pc, #52]	@ (8000fd8 <MX_USART1_UART_Init+0x5c>)
 8000fa2:	220c      	movs	r2, #12
 8000fa4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fa6:	4b0c      	ldr	r3, [pc, #48]	@ (8000fd8 <MX_USART1_UART_Init+0x5c>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fac:	4b0a      	ldr	r3, [pc, #40]	@ (8000fd8 <MX_USART1_UART_Init+0x5c>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000fb2:	4b09      	ldr	r3, [pc, #36]	@ (8000fd8 <MX_USART1_UART_Init+0x5c>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000fb8:	4b07      	ldr	r3, [pc, #28]	@ (8000fd8 <MX_USART1_UART_Init+0x5c>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_MultiProcessor_Init(&huart1, 0, UART_WAKEUPMETHOD_IDLELINE) != HAL_OK)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	2100      	movs	r1, #0
 8000fc2:	4805      	ldr	r0, [pc, #20]	@ (8000fd8 <MX_USART1_UART_Init+0x5c>)
 8000fc4:	f003 fb26 	bl	8004614 <HAL_MultiProcessor_Init>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d001      	beq.n	8000fd2 <MX_USART1_UART_Init+0x56>
  {
    Error_Handler();
 8000fce:	f000 f89b 	bl	8001108 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000fd2:	bf00      	nop
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	200001bc 	.word	0x200001bc
 8000fdc:	40013800 	.word	0x40013800

08000fe0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000fe4:	4b15      	ldr	r3, [pc, #84]	@ (800103c <MX_USART2_UART_Init+0x5c>)
 8000fe6:	4a16      	ldr	r2, [pc, #88]	@ (8001040 <MX_USART2_UART_Init+0x60>)
 8000fe8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8000fea:	4b14      	ldr	r3, [pc, #80]	@ (800103c <MX_USART2_UART_Init+0x5c>)
 8000fec:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 8000ff0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000ff2:	4b12      	ldr	r3, [pc, #72]	@ (800103c <MX_USART2_UART_Init+0x5c>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000ff8:	4b10      	ldr	r3, [pc, #64]	@ (800103c <MX_USART2_UART_Init+0x5c>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000ffe:	4b0f      	ldr	r3, [pc, #60]	@ (800103c <MX_USART2_UART_Init+0x5c>)
 8001000:	2200      	movs	r2, #0
 8001002:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001004:	4b0d      	ldr	r3, [pc, #52]	@ (800103c <MX_USART2_UART_Init+0x5c>)
 8001006:	220c      	movs	r2, #12
 8001008:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800100a:	4b0c      	ldr	r3, [pc, #48]	@ (800103c <MX_USART2_UART_Init+0x5c>)
 800100c:	2200      	movs	r2, #0
 800100e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001010:	4b0a      	ldr	r3, [pc, #40]	@ (800103c <MX_USART2_UART_Init+0x5c>)
 8001012:	2200      	movs	r2, #0
 8001014:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001016:	4b09      	ldr	r3, [pc, #36]	@ (800103c <MX_USART2_UART_Init+0x5c>)
 8001018:	2200      	movs	r2, #0
 800101a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800101c:	4b07      	ldr	r3, [pc, #28]	@ (800103c <MX_USART2_UART_Init+0x5c>)
 800101e:	2200      	movs	r2, #0
 8001020:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_MultiProcessor_Init(&huart2, 0, UART_WAKEUPMETHOD_IDLELINE) != HAL_OK)
 8001022:	2200      	movs	r2, #0
 8001024:	2100      	movs	r1, #0
 8001026:	4805      	ldr	r0, [pc, #20]	@ (800103c <MX_USART2_UART_Init+0x5c>)
 8001028:	f003 faf4 	bl	8004614 <HAL_MultiProcessor_Init>
 800102c:	4603      	mov	r3, r0
 800102e:	2b00      	cmp	r3, #0
 8001030:	d001      	beq.n	8001036 <MX_USART2_UART_Init+0x56>
  {
    Error_Handler();
 8001032:	f000 f869 	bl	8001108 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001036:	bf00      	nop
 8001038:	bd80      	pop	{r7, pc}
 800103a:	bf00      	nop
 800103c:	20000244 	.word	0x20000244
 8001040:	40004400 	.word	0x40004400

08001044 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b088      	sub	sp, #32
 8001048:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800104a:	f107 030c 	add.w	r3, r7, #12
 800104e:	2200      	movs	r2, #0
 8001050:	601a      	str	r2, [r3, #0]
 8001052:	605a      	str	r2, [r3, #4]
 8001054:	609a      	str	r2, [r3, #8]
 8001056:	60da      	str	r2, [r3, #12]
 8001058:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800105a:	4b29      	ldr	r3, [pc, #164]	@ (8001100 <MX_GPIO_Init+0xbc>)
 800105c:	695b      	ldr	r3, [r3, #20]
 800105e:	4a28      	ldr	r2, [pc, #160]	@ (8001100 <MX_GPIO_Init+0xbc>)
 8001060:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001064:	6153      	str	r3, [r2, #20]
 8001066:	4b26      	ldr	r3, [pc, #152]	@ (8001100 <MX_GPIO_Init+0xbc>)
 8001068:	695b      	ldr	r3, [r3, #20]
 800106a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800106e:	60bb      	str	r3, [r7, #8]
 8001070:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001072:	4b23      	ldr	r3, [pc, #140]	@ (8001100 <MX_GPIO_Init+0xbc>)
 8001074:	695b      	ldr	r3, [r3, #20]
 8001076:	4a22      	ldr	r2, [pc, #136]	@ (8001100 <MX_GPIO_Init+0xbc>)
 8001078:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800107c:	6153      	str	r3, [r2, #20]
 800107e:	4b20      	ldr	r3, [pc, #128]	@ (8001100 <MX_GPIO_Init+0xbc>)
 8001080:	695b      	ldr	r3, [r3, #20]
 8001082:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001086:	607b      	str	r3, [r7, #4]
 8001088:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SW_SH_LD_Pin|SW_CLK_Pin|GPIO_PIN_7|LED_POWER_Pin
 800108a:	2200      	movs	r2, #0
 800108c:	f248 1192 	movw	r1, #33170	@ 0x8192
 8001090:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001094:	f000 fe18 	bl	8001cc8 <HAL_GPIO_WritePin>
                          |SIG_P1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SIG_P2_Pin|_7SEG_SCK_Pin|_7SEG_RCK_Pin|_7SEG_SI_Pin
 8001098:	2200      	movs	r2, #0
 800109a:	21f2      	movs	r1, #242	@ 0xf2
 800109c:	4819      	ldr	r0, [pc, #100]	@ (8001104 <MX_GPIO_Init+0xc0>)
 800109e:	f000 fe13 	bl	8001cc8 <HAL_GPIO_WritePin>
                          |LED_UART_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : SW_QH_Pin ROTARY_ENCODER_Z_Pin ROTARY_ENCODER_B_Pin */
  GPIO_InitStruct.Pin = SW_QH_Pin|ROTARY_ENCODER_Z_Pin|ROTARY_ENCODER_B_Pin;
 80010a2:	2361      	movs	r3, #97	@ 0x61
 80010a4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010a6:	2300      	movs	r3, #0
 80010a8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010aa:	2300      	movs	r3, #0
 80010ac:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010ae:	f107 030c 	add.w	r3, r7, #12
 80010b2:	4619      	mov	r1, r3
 80010b4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80010b8:	f000 fc94 	bl	80019e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : SW_SH_LD_Pin SW_CLK_Pin PA7 LED_POWER_Pin
                           SIG_P1_Pin */
  GPIO_InitStruct.Pin = SW_SH_LD_Pin|SW_CLK_Pin|GPIO_PIN_7|LED_POWER_Pin
 80010bc:	f248 1392 	movw	r3, #33170	@ 0x8192
 80010c0:	60fb      	str	r3, [r7, #12]
                          |SIG_P1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010c2:	2301      	movs	r3, #1
 80010c4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c6:	2300      	movs	r3, #0
 80010c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ca:	2300      	movs	r3, #0
 80010cc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010ce:	f107 030c 	add.w	r3, r7, #12
 80010d2:	4619      	mov	r1, r3
 80010d4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80010d8:	f000 fc84 	bl	80019e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : SIG_P2_Pin _7SEG_SCK_Pin _7SEG_RCK_Pin _7SEG_SI_Pin
                           LED_UART_Pin */
  GPIO_InitStruct.Pin = SIG_P2_Pin|_7SEG_SCK_Pin|_7SEG_RCK_Pin|_7SEG_SI_Pin
 80010dc:	23f2      	movs	r3, #242	@ 0xf2
 80010de:	60fb      	str	r3, [r7, #12]
                          |LED_UART_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010e0:	2301      	movs	r3, #1
 80010e2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e4:	2300      	movs	r3, #0
 80010e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010e8:	2300      	movs	r3, #0
 80010ea:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010ec:	f107 030c 	add.w	r3, r7, #12
 80010f0:	4619      	mov	r1, r3
 80010f2:	4804      	ldr	r0, [pc, #16]	@ (8001104 <MX_GPIO_Init+0xc0>)
 80010f4:	f000 fc76 	bl	80019e4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80010f8:	bf00      	nop
 80010fa:	3720      	adds	r7, #32
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bd80      	pop	{r7, pc}
 8001100:	40021000 	.word	0x40021000
 8001104:	48000400 	.word	0x48000400

08001108 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001108:	b480      	push	{r7}
 800110a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800110c:	b672      	cpsid	i
}
 800110e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001110:	bf00      	nop
 8001112:	e7fd      	b.n	8001110 <Error_Handler+0x8>

08001114 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001114:	b480      	push	{r7}
 8001116:	b083      	sub	sp, #12
 8001118:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800111a:	4b0f      	ldr	r3, [pc, #60]	@ (8001158 <HAL_MspInit+0x44>)
 800111c:	699b      	ldr	r3, [r3, #24]
 800111e:	4a0e      	ldr	r2, [pc, #56]	@ (8001158 <HAL_MspInit+0x44>)
 8001120:	f043 0301 	orr.w	r3, r3, #1
 8001124:	6193      	str	r3, [r2, #24]
 8001126:	4b0c      	ldr	r3, [pc, #48]	@ (8001158 <HAL_MspInit+0x44>)
 8001128:	699b      	ldr	r3, [r3, #24]
 800112a:	f003 0301 	and.w	r3, r3, #1
 800112e:	607b      	str	r3, [r7, #4]
 8001130:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001132:	4b09      	ldr	r3, [pc, #36]	@ (8001158 <HAL_MspInit+0x44>)
 8001134:	69db      	ldr	r3, [r3, #28]
 8001136:	4a08      	ldr	r2, [pc, #32]	@ (8001158 <HAL_MspInit+0x44>)
 8001138:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800113c:	61d3      	str	r3, [r2, #28]
 800113e:	4b06      	ldr	r3, [pc, #24]	@ (8001158 <HAL_MspInit+0x44>)
 8001140:	69db      	ldr	r3, [r3, #28]
 8001142:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001146:	603b      	str	r3, [r7, #0]
 8001148:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800114a:	bf00      	nop
 800114c:	370c      	adds	r7, #12
 800114e:	46bd      	mov	sp, r7
 8001150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001154:	4770      	bx	lr
 8001156:	bf00      	nop
 8001158:	40021000 	.word	0x40021000

0800115c <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b08a      	sub	sp, #40	@ 0x28
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001164:	f107 0314 	add.w	r3, r7, #20
 8001168:	2200      	movs	r2, #0
 800116a:	601a      	str	r2, [r3, #0]
 800116c:	605a      	str	r2, [r3, #4]
 800116e:	609a      	str	r2, [r3, #8]
 8001170:	60da      	str	r2, [r3, #12]
 8001172:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN)
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	4a18      	ldr	r2, [pc, #96]	@ (80011dc <HAL_CAN_MspInit+0x80>)
 800117a:	4293      	cmp	r3, r2
 800117c:	d129      	bne.n	80011d2 <HAL_CAN_MspInit+0x76>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800117e:	4b18      	ldr	r3, [pc, #96]	@ (80011e0 <HAL_CAN_MspInit+0x84>)
 8001180:	69db      	ldr	r3, [r3, #28]
 8001182:	4a17      	ldr	r2, [pc, #92]	@ (80011e0 <HAL_CAN_MspInit+0x84>)
 8001184:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001188:	61d3      	str	r3, [r2, #28]
 800118a:	4b15      	ldr	r3, [pc, #84]	@ (80011e0 <HAL_CAN_MspInit+0x84>)
 800118c:	69db      	ldr	r3, [r3, #28]
 800118e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001192:	613b      	str	r3, [r7, #16]
 8001194:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001196:	4b12      	ldr	r3, [pc, #72]	@ (80011e0 <HAL_CAN_MspInit+0x84>)
 8001198:	695b      	ldr	r3, [r3, #20]
 800119a:	4a11      	ldr	r2, [pc, #68]	@ (80011e0 <HAL_CAN_MspInit+0x84>)
 800119c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80011a0:	6153      	str	r3, [r2, #20]
 80011a2:	4b0f      	ldr	r3, [pc, #60]	@ (80011e0 <HAL_CAN_MspInit+0x84>)
 80011a4:	695b      	ldr	r3, [r3, #20]
 80011a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011aa:	60fb      	str	r3, [r7, #12]
 80011ac:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = CAN_RXD_Pin|CAN_TXD_Pin;
 80011ae:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80011b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011b4:	2302      	movs	r3, #2
 80011b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b8:	2300      	movs	r3, #0
 80011ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80011bc:	2303      	movs	r3, #3
 80011be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN;
 80011c0:	2309      	movs	r3, #9
 80011c2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011c4:	f107 0314 	add.w	r3, r7, #20
 80011c8:	4619      	mov	r1, r3
 80011ca:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80011ce:	f000 fc09 	bl	80019e4 <HAL_GPIO_Init>

  /* USER CODE END CAN_MspInit 1 */

  }

}
 80011d2:	bf00      	nop
 80011d4:	3728      	adds	r7, #40	@ 0x28
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}
 80011da:	bf00      	nop
 80011dc:	40006400 	.word	0x40006400
 80011e0:	40021000 	.word	0x40021000

080011e4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80011e4:	b480      	push	{r7}
 80011e6:	b087      	sub	sp, #28
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	4a25      	ldr	r2, [pc, #148]	@ (8001288 <HAL_TIM_Base_MspInit+0xa4>)
 80011f2:	4293      	cmp	r3, r2
 80011f4:	d10c      	bne.n	8001210 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80011f6:	4b25      	ldr	r3, [pc, #148]	@ (800128c <HAL_TIM_Base_MspInit+0xa8>)
 80011f8:	699b      	ldr	r3, [r3, #24]
 80011fa:	4a24      	ldr	r2, [pc, #144]	@ (800128c <HAL_TIM_Base_MspInit+0xa8>)
 80011fc:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001200:	6193      	str	r3, [r2, #24]
 8001202:	4b22      	ldr	r3, [pc, #136]	@ (800128c <HAL_TIM_Base_MspInit+0xa8>)
 8001204:	699b      	ldr	r3, [r3, #24]
 8001206:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800120a:	617b      	str	r3, [r7, #20]
 800120c:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 800120e:	e034      	b.n	800127a <HAL_TIM_Base_MspInit+0x96>
  else if(htim_base->Instance==TIM2)
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001218:	d10c      	bne.n	8001234 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800121a:	4b1c      	ldr	r3, [pc, #112]	@ (800128c <HAL_TIM_Base_MspInit+0xa8>)
 800121c:	69db      	ldr	r3, [r3, #28]
 800121e:	4a1b      	ldr	r2, [pc, #108]	@ (800128c <HAL_TIM_Base_MspInit+0xa8>)
 8001220:	f043 0301 	orr.w	r3, r3, #1
 8001224:	61d3      	str	r3, [r2, #28]
 8001226:	4b19      	ldr	r3, [pc, #100]	@ (800128c <HAL_TIM_Base_MspInit+0xa8>)
 8001228:	69db      	ldr	r3, [r3, #28]
 800122a:	f003 0301 	and.w	r3, r3, #1
 800122e:	613b      	str	r3, [r7, #16]
 8001230:	693b      	ldr	r3, [r7, #16]
}
 8001232:	e022      	b.n	800127a <HAL_TIM_Base_MspInit+0x96>
  else if(htim_base->Instance==TIM3)
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	4a15      	ldr	r2, [pc, #84]	@ (8001290 <HAL_TIM_Base_MspInit+0xac>)
 800123a:	4293      	cmp	r3, r2
 800123c:	d10c      	bne.n	8001258 <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800123e:	4b13      	ldr	r3, [pc, #76]	@ (800128c <HAL_TIM_Base_MspInit+0xa8>)
 8001240:	69db      	ldr	r3, [r3, #28]
 8001242:	4a12      	ldr	r2, [pc, #72]	@ (800128c <HAL_TIM_Base_MspInit+0xa8>)
 8001244:	f043 0302 	orr.w	r3, r3, #2
 8001248:	61d3      	str	r3, [r2, #28]
 800124a:	4b10      	ldr	r3, [pc, #64]	@ (800128c <HAL_TIM_Base_MspInit+0xa8>)
 800124c:	69db      	ldr	r3, [r3, #28]
 800124e:	f003 0302 	and.w	r3, r3, #2
 8001252:	60fb      	str	r3, [r7, #12]
 8001254:	68fb      	ldr	r3, [r7, #12]
}
 8001256:	e010      	b.n	800127a <HAL_TIM_Base_MspInit+0x96>
  else if(htim_base->Instance==TIM15)
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	4a0d      	ldr	r2, [pc, #52]	@ (8001294 <HAL_TIM_Base_MspInit+0xb0>)
 800125e:	4293      	cmp	r3, r2
 8001260:	d10b      	bne.n	800127a <HAL_TIM_Base_MspInit+0x96>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8001262:	4b0a      	ldr	r3, [pc, #40]	@ (800128c <HAL_TIM_Base_MspInit+0xa8>)
 8001264:	699b      	ldr	r3, [r3, #24]
 8001266:	4a09      	ldr	r2, [pc, #36]	@ (800128c <HAL_TIM_Base_MspInit+0xa8>)
 8001268:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800126c:	6193      	str	r3, [r2, #24]
 800126e:	4b07      	ldr	r3, [pc, #28]	@ (800128c <HAL_TIM_Base_MspInit+0xa8>)
 8001270:	699b      	ldr	r3, [r3, #24]
 8001272:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001276:	60bb      	str	r3, [r7, #8]
 8001278:	68bb      	ldr	r3, [r7, #8]
}
 800127a:	bf00      	nop
 800127c:	371c      	adds	r7, #28
 800127e:	46bd      	mov	sp, r7
 8001280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001284:	4770      	bx	lr
 8001286:	bf00      	nop
 8001288:	40012c00 	.word	0x40012c00
 800128c:	40021000 	.word	0x40021000
 8001290:	40000400 	.word	0x40000400
 8001294:	40014000 	.word	0x40014000

08001298 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b08a      	sub	sp, #40	@ 0x28
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012a0:	f107 0314 	add.w	r3, r7, #20
 80012a4:	2200      	movs	r2, #0
 80012a6:	601a      	str	r2, [r3, #0]
 80012a8:	605a      	str	r2, [r3, #4]
 80012aa:	609a      	str	r2, [r3, #8]
 80012ac:	60da      	str	r2, [r3, #12]
 80012ae:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80012b8:	d11c      	bne.n	80012f4 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012ba:	4b21      	ldr	r3, [pc, #132]	@ (8001340 <HAL_TIM_MspPostInit+0xa8>)
 80012bc:	695b      	ldr	r3, [r3, #20]
 80012be:	4a20      	ldr	r2, [pc, #128]	@ (8001340 <HAL_TIM_MspPostInit+0xa8>)
 80012c0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80012c4:	6153      	str	r3, [r2, #20]
 80012c6:	4b1e      	ldr	r3, [pc, #120]	@ (8001340 <HAL_TIM_MspPostInit+0xa8>)
 80012c8:	695b      	ldr	r3, [r3, #20]
 80012ca:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80012ce:	613b      	str	r3, [r7, #16]
 80012d0:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = SIG_N1_Pin;
 80012d2:	2308      	movs	r3, #8
 80012d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012d6:	2302      	movs	r3, #2
 80012d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012da:	2300      	movs	r3, #0
 80012dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012de:	2300      	movs	r3, #0
 80012e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80012e2:	2301      	movs	r3, #1
 80012e4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(SIG_N1_GPIO_Port, &GPIO_InitStruct);
 80012e6:	f107 0314 	add.w	r3, r7, #20
 80012ea:	4619      	mov	r1, r3
 80012ec:	4815      	ldr	r0, [pc, #84]	@ (8001344 <HAL_TIM_MspPostInit+0xac>)
 80012ee:	f000 fb79 	bl	80019e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80012f2:	e020      	b.n	8001336 <HAL_TIM_MspPostInit+0x9e>
  else if(htim->Instance==TIM3)
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	4a13      	ldr	r2, [pc, #76]	@ (8001348 <HAL_TIM_MspPostInit+0xb0>)
 80012fa:	4293      	cmp	r3, r2
 80012fc:	d11b      	bne.n	8001336 <HAL_TIM_MspPostInit+0x9e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012fe:	4b10      	ldr	r3, [pc, #64]	@ (8001340 <HAL_TIM_MspPostInit+0xa8>)
 8001300:	695b      	ldr	r3, [r3, #20]
 8001302:	4a0f      	ldr	r2, [pc, #60]	@ (8001340 <HAL_TIM_MspPostInit+0xa8>)
 8001304:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001308:	6153      	str	r3, [r2, #20]
 800130a:	4b0d      	ldr	r3, [pc, #52]	@ (8001340 <HAL_TIM_MspPostInit+0xa8>)
 800130c:	695b      	ldr	r3, [r3, #20]
 800130e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001312:	60fb      	str	r3, [r7, #12]
 8001314:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = SIG_N2_Pin;
 8001316:	2301      	movs	r3, #1
 8001318:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800131a:	2302      	movs	r3, #2
 800131c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800131e:	2300      	movs	r3, #0
 8001320:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001322:	2300      	movs	r3, #0
 8001324:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001326:	2302      	movs	r3, #2
 8001328:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(SIG_N2_GPIO_Port, &GPIO_InitStruct);
 800132a:	f107 0314 	add.w	r3, r7, #20
 800132e:	4619      	mov	r1, r3
 8001330:	4804      	ldr	r0, [pc, #16]	@ (8001344 <HAL_TIM_MspPostInit+0xac>)
 8001332:	f000 fb57 	bl	80019e4 <HAL_GPIO_Init>
}
 8001336:	bf00      	nop
 8001338:	3728      	adds	r7, #40	@ 0x28
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}
 800133e:	bf00      	nop
 8001340:	40021000 	.word	0x40021000
 8001344:	48000400 	.word	0x48000400
 8001348:	40000400 	.word	0x40000400

0800134c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b08c      	sub	sp, #48	@ 0x30
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001354:	f107 031c 	add.w	r3, r7, #28
 8001358:	2200      	movs	r2, #0
 800135a:	601a      	str	r2, [r3, #0]
 800135c:	605a      	str	r2, [r3, #4]
 800135e:	609a      	str	r2, [r3, #8]
 8001360:	60da      	str	r2, [r3, #12]
 8001362:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	4a2f      	ldr	r2, [pc, #188]	@ (8001428 <HAL_UART_MspInit+0xdc>)
 800136a:	4293      	cmp	r3, r2
 800136c:	d12a      	bne.n	80013c4 <HAL_UART_MspInit+0x78>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800136e:	4b2f      	ldr	r3, [pc, #188]	@ (800142c <HAL_UART_MspInit+0xe0>)
 8001370:	699b      	ldr	r3, [r3, #24]
 8001372:	4a2e      	ldr	r2, [pc, #184]	@ (800142c <HAL_UART_MspInit+0xe0>)
 8001374:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001378:	6193      	str	r3, [r2, #24]
 800137a:	4b2c      	ldr	r3, [pc, #176]	@ (800142c <HAL_UART_MspInit+0xe0>)
 800137c:	699b      	ldr	r3, [r3, #24]
 800137e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001382:	61bb      	str	r3, [r7, #24]
 8001384:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001386:	4b29      	ldr	r3, [pc, #164]	@ (800142c <HAL_UART_MspInit+0xe0>)
 8001388:	695b      	ldr	r3, [r3, #20]
 800138a:	4a28      	ldr	r2, [pc, #160]	@ (800142c <HAL_UART_MspInit+0xe0>)
 800138c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001390:	6153      	str	r3, [r2, #20]
 8001392:	4b26      	ldr	r3, [pc, #152]	@ (800142c <HAL_UART_MspInit+0xe0>)
 8001394:	695b      	ldr	r3, [r3, #20]
 8001396:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800139a:	617b      	str	r3, [r7, #20]
 800139c:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = PC_UART_TXD_Pin|PC_UART_RXD_Pin;
 800139e:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80013a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80013a4:	2312      	movs	r3, #18
 80013a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a8:	2300      	movs	r3, #0
 80013aa:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80013ac:	2303      	movs	r3, #3
 80013ae:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80013b0:	2307      	movs	r3, #7
 80013b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013b4:	f107 031c 	add.w	r3, r7, #28
 80013b8:	4619      	mov	r1, r3
 80013ba:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80013be:	f000 fb11 	bl	80019e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80013c2:	e02d      	b.n	8001420 <HAL_UART_MspInit+0xd4>
  else if(huart->Instance==USART2)
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	4a19      	ldr	r2, [pc, #100]	@ (8001430 <HAL_UART_MspInit+0xe4>)
 80013ca:	4293      	cmp	r3, r2
 80013cc:	d128      	bne.n	8001420 <HAL_UART_MspInit+0xd4>
    __HAL_RCC_USART2_CLK_ENABLE();
 80013ce:	4b17      	ldr	r3, [pc, #92]	@ (800142c <HAL_UART_MspInit+0xe0>)
 80013d0:	69db      	ldr	r3, [r3, #28]
 80013d2:	4a16      	ldr	r2, [pc, #88]	@ (800142c <HAL_UART_MspInit+0xe0>)
 80013d4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80013d8:	61d3      	str	r3, [r2, #28]
 80013da:	4b14      	ldr	r3, [pc, #80]	@ (800142c <HAL_UART_MspInit+0xe0>)
 80013dc:	69db      	ldr	r3, [r3, #28]
 80013de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013e2:	613b      	str	r3, [r7, #16]
 80013e4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013e6:	4b11      	ldr	r3, [pc, #68]	@ (800142c <HAL_UART_MspInit+0xe0>)
 80013e8:	695b      	ldr	r3, [r3, #20]
 80013ea:	4a10      	ldr	r2, [pc, #64]	@ (800142c <HAL_UART_MspInit+0xe0>)
 80013ec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80013f0:	6153      	str	r3, [r2, #20]
 80013f2:	4b0e      	ldr	r3, [pc, #56]	@ (800142c <HAL_UART_MspInit+0xe0>)
 80013f4:	695b      	ldr	r3, [r3, #20]
 80013f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013fa:	60fb      	str	r3, [r7, #12]
 80013fc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = N_C__Pin|UART_RX_Pin;
 80013fe:	230c      	movs	r3, #12
 8001400:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001402:	2312      	movs	r3, #18
 8001404:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001406:	2300      	movs	r3, #0
 8001408:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800140a:	2303      	movs	r3, #3
 800140c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800140e:	2307      	movs	r3, #7
 8001410:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001412:	f107 031c 	add.w	r3, r7, #28
 8001416:	4619      	mov	r1, r3
 8001418:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800141c:	f000 fae2 	bl	80019e4 <HAL_GPIO_Init>
}
 8001420:	bf00      	nop
 8001422:	3730      	adds	r7, #48	@ 0x30
 8001424:	46bd      	mov	sp, r7
 8001426:	bd80      	pop	{r7, pc}
 8001428:	40013800 	.word	0x40013800
 800142c:	40021000 	.word	0x40021000
 8001430:	40004400 	.word	0x40004400

08001434 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001434:	b480      	push	{r7}
 8001436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001438:	bf00      	nop
 800143a:	e7fd      	b.n	8001438 <NMI_Handler+0x4>

0800143c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800143c:	b480      	push	{r7}
 800143e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001440:	bf00      	nop
 8001442:	e7fd      	b.n	8001440 <HardFault_Handler+0x4>

08001444 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001444:	b480      	push	{r7}
 8001446:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001448:	bf00      	nop
 800144a:	e7fd      	b.n	8001448 <MemManage_Handler+0x4>

0800144c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800144c:	b480      	push	{r7}
 800144e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001450:	bf00      	nop
 8001452:	e7fd      	b.n	8001450 <BusFault_Handler+0x4>

08001454 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001454:	b480      	push	{r7}
 8001456:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001458:	bf00      	nop
 800145a:	e7fd      	b.n	8001458 <UsageFault_Handler+0x4>

0800145c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800145c:	b480      	push	{r7}
 800145e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001460:	bf00      	nop
 8001462:	46bd      	mov	sp, r7
 8001464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001468:	4770      	bx	lr

0800146a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800146a:	b480      	push	{r7}
 800146c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800146e:	bf00      	nop
 8001470:	46bd      	mov	sp, r7
 8001472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001476:	4770      	bx	lr

08001478 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001478:	b480      	push	{r7}
 800147a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800147c:	bf00      	nop
 800147e:	46bd      	mov	sp, r7
 8001480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001484:	4770      	bx	lr

08001486 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001486:	b580      	push	{r7, lr}
 8001488:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800148a:	f000 f885 	bl	8001598 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800148e:	bf00      	nop
 8001490:	bd80      	pop	{r7, pc}
	...

08001494 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001494:	b480      	push	{r7}
 8001496:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001498:	4b06      	ldr	r3, [pc, #24]	@ (80014b4 <SystemInit+0x20>)
 800149a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800149e:	4a05      	ldr	r2, [pc, #20]	@ (80014b4 <SystemInit+0x20>)
 80014a0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80014a4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80014a8:	bf00      	nop
 80014aa:	46bd      	mov	sp, r7
 80014ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b0:	4770      	bx	lr
 80014b2:	bf00      	nop
 80014b4:	e000ed00 	.word	0xe000ed00

080014b8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80014b8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80014f0 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80014bc:	f7ff ffea 	bl	8001494 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80014c0:	480c      	ldr	r0, [pc, #48]	@ (80014f4 <LoopForever+0x6>)
  ldr r1, =_edata
 80014c2:	490d      	ldr	r1, [pc, #52]	@ (80014f8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80014c4:	4a0d      	ldr	r2, [pc, #52]	@ (80014fc <LoopForever+0xe>)
  movs r3, #0
 80014c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014c8:	e002      	b.n	80014d0 <LoopCopyDataInit>

080014ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014ce:	3304      	adds	r3, #4

080014d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014d4:	d3f9      	bcc.n	80014ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014d6:	4a0a      	ldr	r2, [pc, #40]	@ (8001500 <LoopForever+0x12>)
  ldr r4, =_ebss
 80014d8:	4c0a      	ldr	r4, [pc, #40]	@ (8001504 <LoopForever+0x16>)
  movs r3, #0
 80014da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014dc:	e001      	b.n	80014e2 <LoopFillZerobss>

080014de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014e0:	3204      	adds	r2, #4

080014e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014e4:	d3fb      	bcc.n	80014de <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80014e6:	f003 fc59 	bl	8004d9c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80014ea:	f7ff fad7 	bl	8000a9c <main>

080014ee <LoopForever>:

LoopForever:
    b LoopForever
 80014ee:	e7fe      	b.n	80014ee <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80014f0:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 80014f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014f8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80014fc:	08004e3c 	.word	0x08004e3c
  ldr r2, =_sbss
 8001500:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001504:	2000030c 	.word	0x2000030c

08001508 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001508:	e7fe      	b.n	8001508 <ADC1_2_IRQHandler>
	...

0800150c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001510:	4b08      	ldr	r3, [pc, #32]	@ (8001534 <HAL_Init+0x28>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	4a07      	ldr	r2, [pc, #28]	@ (8001534 <HAL_Init+0x28>)
 8001516:	f043 0310 	orr.w	r3, r3, #16
 800151a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800151c:	2003      	movs	r0, #3
 800151e:	f000 fa2d 	bl	800197c <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001522:	200f      	movs	r0, #15
 8001524:	f000 f808 	bl	8001538 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001528:	f7ff fdf4 	bl	8001114 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800152c:	2300      	movs	r3, #0
}
 800152e:	4618      	mov	r0, r3
 8001530:	bd80      	pop	{r7, pc}
 8001532:	bf00      	nop
 8001534:	40022000 	.word	0x40022000

08001538 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b082      	sub	sp, #8
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001540:	4b12      	ldr	r3, [pc, #72]	@ (800158c <HAL_InitTick+0x54>)
 8001542:	681a      	ldr	r2, [r3, #0]
 8001544:	4b12      	ldr	r3, [pc, #72]	@ (8001590 <HAL_InitTick+0x58>)
 8001546:	781b      	ldrb	r3, [r3, #0]
 8001548:	4619      	mov	r1, r3
 800154a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800154e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001552:	fbb2 f3f3 	udiv	r3, r2, r3
 8001556:	4618      	mov	r0, r3
 8001558:	f000 fa37 	bl	80019ca <HAL_SYSTICK_Config>
 800155c:	4603      	mov	r3, r0
 800155e:	2b00      	cmp	r3, #0
 8001560:	d001      	beq.n	8001566 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001562:	2301      	movs	r3, #1
 8001564:	e00e      	b.n	8001584 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	2b0f      	cmp	r3, #15
 800156a:	d80a      	bhi.n	8001582 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800156c:	2200      	movs	r2, #0
 800156e:	6879      	ldr	r1, [r7, #4]
 8001570:	f04f 30ff 	mov.w	r0, #4294967295
 8001574:	f000 fa0d 	bl	8001992 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001578:	4a06      	ldr	r2, [pc, #24]	@ (8001594 <HAL_InitTick+0x5c>)
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800157e:	2300      	movs	r3, #0
 8001580:	e000      	b.n	8001584 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001582:	2301      	movs	r3, #1
}
 8001584:	4618      	mov	r0, r3
 8001586:	3708      	adds	r7, #8
 8001588:	46bd      	mov	sp, r7
 800158a:	bd80      	pop	{r7, pc}
 800158c:	20000000 	.word	0x20000000
 8001590:	20000008 	.word	0x20000008
 8001594:	20000004 	.word	0x20000004

08001598 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001598:	b480      	push	{r7}
 800159a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800159c:	4b06      	ldr	r3, [pc, #24]	@ (80015b8 <HAL_IncTick+0x20>)
 800159e:	781b      	ldrb	r3, [r3, #0]
 80015a0:	461a      	mov	r2, r3
 80015a2:	4b06      	ldr	r3, [pc, #24]	@ (80015bc <HAL_IncTick+0x24>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	4413      	add	r3, r2
 80015a8:	4a04      	ldr	r2, [pc, #16]	@ (80015bc <HAL_IncTick+0x24>)
 80015aa:	6013      	str	r3, [r2, #0]
}
 80015ac:	bf00      	nop
 80015ae:	46bd      	mov	sp, r7
 80015b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b4:	4770      	bx	lr
 80015b6:	bf00      	nop
 80015b8:	20000008 	.word	0x20000008
 80015bc:	20000308 	.word	0x20000308

080015c0 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015c0:	b480      	push	{r7}
 80015c2:	af00      	add	r7, sp, #0
  return uwTick;  
 80015c4:	4b03      	ldr	r3, [pc, #12]	@ (80015d4 <HAL_GetTick+0x14>)
 80015c6:	681b      	ldr	r3, [r3, #0]
}
 80015c8:	4618      	mov	r0, r3
 80015ca:	46bd      	mov	sp, r7
 80015cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d0:	4770      	bx	lr
 80015d2:	bf00      	nop
 80015d4:	20000308 	.word	0x20000308

080015d8 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b084      	sub	sp, #16
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80015e0:	f7ff ffee 	bl	80015c0 <HAL_GetTick>
 80015e4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015f0:	d005      	beq.n	80015fe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80015f2:	4b0a      	ldr	r3, [pc, #40]	@ (800161c <HAL_Delay+0x44>)
 80015f4:	781b      	ldrb	r3, [r3, #0]
 80015f6:	461a      	mov	r2, r3
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	4413      	add	r3, r2
 80015fc:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80015fe:	bf00      	nop
 8001600:	f7ff ffde 	bl	80015c0 <HAL_GetTick>
 8001604:	4602      	mov	r2, r0
 8001606:	68bb      	ldr	r3, [r7, #8]
 8001608:	1ad3      	subs	r3, r2, r3
 800160a:	68fa      	ldr	r2, [r7, #12]
 800160c:	429a      	cmp	r2, r3
 800160e:	d8f7      	bhi.n	8001600 <HAL_Delay+0x28>
  {
  }
}
 8001610:	bf00      	nop
 8001612:	bf00      	nop
 8001614:	3710      	adds	r7, #16
 8001616:	46bd      	mov	sp, r7
 8001618:	bd80      	pop	{r7, pc}
 800161a:	bf00      	nop
 800161c:	20000008 	.word	0x20000008

08001620 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b084      	sub	sp, #16
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	2b00      	cmp	r3, #0
 800162c:	d101      	bne.n	8001632 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800162e:	2301      	movs	r3, #1
 8001630:	e0ed      	b.n	800180e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001638:	b2db      	uxtb	r3, r3
 800163a:	2b00      	cmp	r3, #0
 800163c:	d102      	bne.n	8001644 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800163e:	6878      	ldr	r0, [r7, #4]
 8001640:	f7ff fd8c 	bl	800115c <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	681a      	ldr	r2, [r3, #0]
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f042 0201 	orr.w	r2, r2, #1
 8001652:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001654:	f7ff ffb4 	bl	80015c0 <HAL_GetTick>
 8001658:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800165a:	e012      	b.n	8001682 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800165c:	f7ff ffb0 	bl	80015c0 <HAL_GetTick>
 8001660:	4602      	mov	r2, r0
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	1ad3      	subs	r3, r2, r3
 8001666:	2b0a      	cmp	r3, #10
 8001668:	d90b      	bls.n	8001682 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800166e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	2205      	movs	r2, #5
 800167a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800167e:	2301      	movs	r3, #1
 8001680:	e0c5      	b.n	800180e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	685b      	ldr	r3, [r3, #4]
 8001688:	f003 0301 	and.w	r3, r3, #1
 800168c:	2b00      	cmp	r3, #0
 800168e:	d0e5      	beq.n	800165c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	681a      	ldr	r2, [r3, #0]
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f022 0202 	bic.w	r2, r2, #2
 800169e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80016a0:	f7ff ff8e 	bl	80015c0 <HAL_GetTick>
 80016a4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80016a6:	e012      	b.n	80016ce <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80016a8:	f7ff ff8a 	bl	80015c0 <HAL_GetTick>
 80016ac:	4602      	mov	r2, r0
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	1ad3      	subs	r3, r2, r3
 80016b2:	2b0a      	cmp	r3, #10
 80016b4:	d90b      	bls.n	80016ce <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016ba:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	2205      	movs	r2, #5
 80016c6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80016ca:	2301      	movs	r3, #1
 80016cc:	e09f      	b.n	800180e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	685b      	ldr	r3, [r3, #4]
 80016d4:	f003 0302 	and.w	r3, r3, #2
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d1e5      	bne.n	80016a8 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	7e1b      	ldrb	r3, [r3, #24]
 80016e0:	2b01      	cmp	r3, #1
 80016e2:	d108      	bne.n	80016f6 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	681a      	ldr	r2, [r3, #0]
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80016f2:	601a      	str	r2, [r3, #0]
 80016f4:	e007      	b.n	8001706 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	681a      	ldr	r2, [r3, #0]
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001704:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	7e5b      	ldrb	r3, [r3, #25]
 800170a:	2b01      	cmp	r3, #1
 800170c:	d108      	bne.n	8001720 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	681a      	ldr	r2, [r3, #0]
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800171c:	601a      	str	r2, [r3, #0]
 800171e:	e007      	b.n	8001730 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	681a      	ldr	r2, [r3, #0]
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800172e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	7e9b      	ldrb	r3, [r3, #26]
 8001734:	2b01      	cmp	r3, #1
 8001736:	d108      	bne.n	800174a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	681a      	ldr	r2, [r3, #0]
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f042 0220 	orr.w	r2, r2, #32
 8001746:	601a      	str	r2, [r3, #0]
 8001748:	e007      	b.n	800175a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	681a      	ldr	r2, [r3, #0]
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f022 0220 	bic.w	r2, r2, #32
 8001758:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	7edb      	ldrb	r3, [r3, #27]
 800175e:	2b01      	cmp	r3, #1
 8001760:	d108      	bne.n	8001774 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	681a      	ldr	r2, [r3, #0]
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f022 0210 	bic.w	r2, r2, #16
 8001770:	601a      	str	r2, [r3, #0]
 8001772:	e007      	b.n	8001784 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	681a      	ldr	r2, [r3, #0]
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f042 0210 	orr.w	r2, r2, #16
 8001782:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	7f1b      	ldrb	r3, [r3, #28]
 8001788:	2b01      	cmp	r3, #1
 800178a:	d108      	bne.n	800179e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	681a      	ldr	r2, [r3, #0]
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f042 0208 	orr.w	r2, r2, #8
 800179a:	601a      	str	r2, [r3, #0]
 800179c:	e007      	b.n	80017ae <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	681a      	ldr	r2, [r3, #0]
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f022 0208 	bic.w	r2, r2, #8
 80017ac:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	7f5b      	ldrb	r3, [r3, #29]
 80017b2:	2b01      	cmp	r3, #1
 80017b4:	d108      	bne.n	80017c8 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	681a      	ldr	r2, [r3, #0]
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	f042 0204 	orr.w	r2, r2, #4
 80017c4:	601a      	str	r2, [r3, #0]
 80017c6:	e007      	b.n	80017d8 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	681a      	ldr	r2, [r3, #0]
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f022 0204 	bic.w	r2, r2, #4
 80017d6:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	689a      	ldr	r2, [r3, #8]
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	68db      	ldr	r3, [r3, #12]
 80017e0:	431a      	orrs	r2, r3
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	691b      	ldr	r3, [r3, #16]
 80017e6:	431a      	orrs	r2, r3
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	695b      	ldr	r3, [r3, #20]
 80017ec:	ea42 0103 	orr.w	r1, r2, r3
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	685b      	ldr	r3, [r3, #4]
 80017f4:	1e5a      	subs	r2, r3, #1
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	430a      	orrs	r2, r1
 80017fc:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	2200      	movs	r2, #0
 8001802:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	2201      	movs	r2, #1
 8001808:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800180c:	2300      	movs	r3, #0
}
 800180e:	4618      	mov	r0, r3
 8001810:	3710      	adds	r7, #16
 8001812:	46bd      	mov	sp, r7
 8001814:	bd80      	pop	{r7, pc}
	...

08001818 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001818:	b480      	push	{r7}
 800181a:	b085      	sub	sp, #20
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	f003 0307 	and.w	r3, r3, #7
 8001826:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001828:	4b0c      	ldr	r3, [pc, #48]	@ (800185c <__NVIC_SetPriorityGrouping+0x44>)
 800182a:	68db      	ldr	r3, [r3, #12]
 800182c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800182e:	68ba      	ldr	r2, [r7, #8]
 8001830:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001834:	4013      	ands	r3, r2
 8001836:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800183c:	68bb      	ldr	r3, [r7, #8]
 800183e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001840:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001844:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001848:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800184a:	4a04      	ldr	r2, [pc, #16]	@ (800185c <__NVIC_SetPriorityGrouping+0x44>)
 800184c:	68bb      	ldr	r3, [r7, #8]
 800184e:	60d3      	str	r3, [r2, #12]
}
 8001850:	bf00      	nop
 8001852:	3714      	adds	r7, #20
 8001854:	46bd      	mov	sp, r7
 8001856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185a:	4770      	bx	lr
 800185c:	e000ed00 	.word	0xe000ed00

08001860 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001860:	b480      	push	{r7}
 8001862:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001864:	4b04      	ldr	r3, [pc, #16]	@ (8001878 <__NVIC_GetPriorityGrouping+0x18>)
 8001866:	68db      	ldr	r3, [r3, #12]
 8001868:	0a1b      	lsrs	r3, r3, #8
 800186a:	f003 0307 	and.w	r3, r3, #7
}
 800186e:	4618      	mov	r0, r3
 8001870:	46bd      	mov	sp, r7
 8001872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001876:	4770      	bx	lr
 8001878:	e000ed00 	.word	0xe000ed00

0800187c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800187c:	b480      	push	{r7}
 800187e:	b083      	sub	sp, #12
 8001880:	af00      	add	r7, sp, #0
 8001882:	4603      	mov	r3, r0
 8001884:	6039      	str	r1, [r7, #0]
 8001886:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001888:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800188c:	2b00      	cmp	r3, #0
 800188e:	db0a      	blt.n	80018a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	b2da      	uxtb	r2, r3
 8001894:	490c      	ldr	r1, [pc, #48]	@ (80018c8 <__NVIC_SetPriority+0x4c>)
 8001896:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800189a:	0112      	lsls	r2, r2, #4
 800189c:	b2d2      	uxtb	r2, r2
 800189e:	440b      	add	r3, r1
 80018a0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018a4:	e00a      	b.n	80018bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018a6:	683b      	ldr	r3, [r7, #0]
 80018a8:	b2da      	uxtb	r2, r3
 80018aa:	4908      	ldr	r1, [pc, #32]	@ (80018cc <__NVIC_SetPriority+0x50>)
 80018ac:	79fb      	ldrb	r3, [r7, #7]
 80018ae:	f003 030f 	and.w	r3, r3, #15
 80018b2:	3b04      	subs	r3, #4
 80018b4:	0112      	lsls	r2, r2, #4
 80018b6:	b2d2      	uxtb	r2, r2
 80018b8:	440b      	add	r3, r1
 80018ba:	761a      	strb	r2, [r3, #24]
}
 80018bc:	bf00      	nop
 80018be:	370c      	adds	r7, #12
 80018c0:	46bd      	mov	sp, r7
 80018c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c6:	4770      	bx	lr
 80018c8:	e000e100 	.word	0xe000e100
 80018cc:	e000ed00 	.word	0xe000ed00

080018d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018d0:	b480      	push	{r7}
 80018d2:	b089      	sub	sp, #36	@ 0x24
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	60f8      	str	r0, [r7, #12]
 80018d8:	60b9      	str	r1, [r7, #8]
 80018da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	f003 0307 	and.w	r3, r3, #7
 80018e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018e4:	69fb      	ldr	r3, [r7, #28]
 80018e6:	f1c3 0307 	rsb	r3, r3, #7
 80018ea:	2b04      	cmp	r3, #4
 80018ec:	bf28      	it	cs
 80018ee:	2304      	movcs	r3, #4
 80018f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018f2:	69fb      	ldr	r3, [r7, #28]
 80018f4:	3304      	adds	r3, #4
 80018f6:	2b06      	cmp	r3, #6
 80018f8:	d902      	bls.n	8001900 <NVIC_EncodePriority+0x30>
 80018fa:	69fb      	ldr	r3, [r7, #28]
 80018fc:	3b03      	subs	r3, #3
 80018fe:	e000      	b.n	8001902 <NVIC_EncodePriority+0x32>
 8001900:	2300      	movs	r3, #0
 8001902:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001904:	f04f 32ff 	mov.w	r2, #4294967295
 8001908:	69bb      	ldr	r3, [r7, #24]
 800190a:	fa02 f303 	lsl.w	r3, r2, r3
 800190e:	43da      	mvns	r2, r3
 8001910:	68bb      	ldr	r3, [r7, #8]
 8001912:	401a      	ands	r2, r3
 8001914:	697b      	ldr	r3, [r7, #20]
 8001916:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001918:	f04f 31ff 	mov.w	r1, #4294967295
 800191c:	697b      	ldr	r3, [r7, #20]
 800191e:	fa01 f303 	lsl.w	r3, r1, r3
 8001922:	43d9      	mvns	r1, r3
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001928:	4313      	orrs	r3, r2
         );
}
 800192a:	4618      	mov	r0, r3
 800192c:	3724      	adds	r7, #36	@ 0x24
 800192e:	46bd      	mov	sp, r7
 8001930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001934:	4770      	bx	lr
	...

08001938 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b082      	sub	sp, #8
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	3b01      	subs	r3, #1
 8001944:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001948:	d301      	bcc.n	800194e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800194a:	2301      	movs	r3, #1
 800194c:	e00f      	b.n	800196e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800194e:	4a0a      	ldr	r2, [pc, #40]	@ (8001978 <SysTick_Config+0x40>)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	3b01      	subs	r3, #1
 8001954:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001956:	210f      	movs	r1, #15
 8001958:	f04f 30ff 	mov.w	r0, #4294967295
 800195c:	f7ff ff8e 	bl	800187c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001960:	4b05      	ldr	r3, [pc, #20]	@ (8001978 <SysTick_Config+0x40>)
 8001962:	2200      	movs	r2, #0
 8001964:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001966:	4b04      	ldr	r3, [pc, #16]	@ (8001978 <SysTick_Config+0x40>)
 8001968:	2207      	movs	r2, #7
 800196a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800196c:	2300      	movs	r3, #0
}
 800196e:	4618      	mov	r0, r3
 8001970:	3708      	adds	r7, #8
 8001972:	46bd      	mov	sp, r7
 8001974:	bd80      	pop	{r7, pc}
 8001976:	bf00      	nop
 8001978:	e000e010 	.word	0xe000e010

0800197c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b082      	sub	sp, #8
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001984:	6878      	ldr	r0, [r7, #4]
 8001986:	f7ff ff47 	bl	8001818 <__NVIC_SetPriorityGrouping>
}
 800198a:	bf00      	nop
 800198c:	3708      	adds	r7, #8
 800198e:	46bd      	mov	sp, r7
 8001990:	bd80      	pop	{r7, pc}

08001992 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001992:	b580      	push	{r7, lr}
 8001994:	b086      	sub	sp, #24
 8001996:	af00      	add	r7, sp, #0
 8001998:	4603      	mov	r3, r0
 800199a:	60b9      	str	r1, [r7, #8]
 800199c:	607a      	str	r2, [r7, #4]
 800199e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80019a0:	2300      	movs	r3, #0
 80019a2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80019a4:	f7ff ff5c 	bl	8001860 <__NVIC_GetPriorityGrouping>
 80019a8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019aa:	687a      	ldr	r2, [r7, #4]
 80019ac:	68b9      	ldr	r1, [r7, #8]
 80019ae:	6978      	ldr	r0, [r7, #20]
 80019b0:	f7ff ff8e 	bl	80018d0 <NVIC_EncodePriority>
 80019b4:	4602      	mov	r2, r0
 80019b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019ba:	4611      	mov	r1, r2
 80019bc:	4618      	mov	r0, r3
 80019be:	f7ff ff5d 	bl	800187c <__NVIC_SetPriority>
}
 80019c2:	bf00      	nop
 80019c4:	3718      	adds	r7, #24
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bd80      	pop	{r7, pc}

080019ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019ca:	b580      	push	{r7, lr}
 80019cc:	b082      	sub	sp, #8
 80019ce:	af00      	add	r7, sp, #0
 80019d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019d2:	6878      	ldr	r0, [r7, #4]
 80019d4:	f7ff ffb0 	bl	8001938 <SysTick_Config>
 80019d8:	4603      	mov	r3, r0
}
 80019da:	4618      	mov	r0, r3
 80019dc:	3708      	adds	r7, #8
 80019de:	46bd      	mov	sp, r7
 80019e0:	bd80      	pop	{r7, pc}
	...

080019e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019e4:	b480      	push	{r7}
 80019e6:	b087      	sub	sp, #28
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
 80019ec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80019ee:	2300      	movs	r3, #0
 80019f0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019f2:	e14e      	b.n	8001c92 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	681a      	ldr	r2, [r3, #0]
 80019f8:	2101      	movs	r1, #1
 80019fa:	697b      	ldr	r3, [r7, #20]
 80019fc:	fa01 f303 	lsl.w	r3, r1, r3
 8001a00:	4013      	ands	r3, r2
 8001a02:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	f000 8140 	beq.w	8001c8c <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	685b      	ldr	r3, [r3, #4]
 8001a10:	f003 0303 	and.w	r3, r3, #3
 8001a14:	2b01      	cmp	r3, #1
 8001a16:	d005      	beq.n	8001a24 <HAL_GPIO_Init+0x40>
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	685b      	ldr	r3, [r3, #4]
 8001a1c:	f003 0303 	and.w	r3, r3, #3
 8001a20:	2b02      	cmp	r3, #2
 8001a22:	d130      	bne.n	8001a86 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	689b      	ldr	r3, [r3, #8]
 8001a28:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001a2a:	697b      	ldr	r3, [r7, #20]
 8001a2c:	005b      	lsls	r3, r3, #1
 8001a2e:	2203      	movs	r2, #3
 8001a30:	fa02 f303 	lsl.w	r3, r2, r3
 8001a34:	43db      	mvns	r3, r3
 8001a36:	693a      	ldr	r2, [r7, #16]
 8001a38:	4013      	ands	r3, r2
 8001a3a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	68da      	ldr	r2, [r3, #12]
 8001a40:	697b      	ldr	r3, [r7, #20]
 8001a42:	005b      	lsls	r3, r3, #1
 8001a44:	fa02 f303 	lsl.w	r3, r2, r3
 8001a48:	693a      	ldr	r2, [r7, #16]
 8001a4a:	4313      	orrs	r3, r2
 8001a4c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	693a      	ldr	r2, [r7, #16]
 8001a52:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	685b      	ldr	r3, [r3, #4]
 8001a58:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a5a:	2201      	movs	r2, #1
 8001a5c:	697b      	ldr	r3, [r7, #20]
 8001a5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a62:	43db      	mvns	r3, r3
 8001a64:	693a      	ldr	r2, [r7, #16]
 8001a66:	4013      	ands	r3, r2
 8001a68:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a6a:	683b      	ldr	r3, [r7, #0]
 8001a6c:	685b      	ldr	r3, [r3, #4]
 8001a6e:	091b      	lsrs	r3, r3, #4
 8001a70:	f003 0201 	and.w	r2, r3, #1
 8001a74:	697b      	ldr	r3, [r7, #20]
 8001a76:	fa02 f303 	lsl.w	r3, r2, r3
 8001a7a:	693a      	ldr	r2, [r7, #16]
 8001a7c:	4313      	orrs	r3, r2
 8001a7e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	693a      	ldr	r2, [r7, #16]
 8001a84:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	685b      	ldr	r3, [r3, #4]
 8001a8a:	f003 0303 	and.w	r3, r3, #3
 8001a8e:	2b03      	cmp	r3, #3
 8001a90:	d017      	beq.n	8001ac2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	68db      	ldr	r3, [r3, #12]
 8001a96:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001a98:	697b      	ldr	r3, [r7, #20]
 8001a9a:	005b      	lsls	r3, r3, #1
 8001a9c:	2203      	movs	r2, #3
 8001a9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa2:	43db      	mvns	r3, r3
 8001aa4:	693a      	ldr	r2, [r7, #16]
 8001aa6:	4013      	ands	r3, r2
 8001aa8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	689a      	ldr	r2, [r3, #8]
 8001aae:	697b      	ldr	r3, [r7, #20]
 8001ab0:	005b      	lsls	r3, r3, #1
 8001ab2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab6:	693a      	ldr	r2, [r7, #16]
 8001ab8:	4313      	orrs	r3, r2
 8001aba:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	693a      	ldr	r2, [r7, #16]
 8001ac0:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ac2:	683b      	ldr	r3, [r7, #0]
 8001ac4:	685b      	ldr	r3, [r3, #4]
 8001ac6:	f003 0303 	and.w	r3, r3, #3
 8001aca:	2b02      	cmp	r3, #2
 8001acc:	d123      	bne.n	8001b16 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001ace:	697b      	ldr	r3, [r7, #20]
 8001ad0:	08da      	lsrs	r2, r3, #3
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	3208      	adds	r2, #8
 8001ad6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ada:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001adc:	697b      	ldr	r3, [r7, #20]
 8001ade:	f003 0307 	and.w	r3, r3, #7
 8001ae2:	009b      	lsls	r3, r3, #2
 8001ae4:	220f      	movs	r2, #15
 8001ae6:	fa02 f303 	lsl.w	r3, r2, r3
 8001aea:	43db      	mvns	r3, r3
 8001aec:	693a      	ldr	r2, [r7, #16]
 8001aee:	4013      	ands	r3, r2
 8001af0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001af2:	683b      	ldr	r3, [r7, #0]
 8001af4:	691a      	ldr	r2, [r3, #16]
 8001af6:	697b      	ldr	r3, [r7, #20]
 8001af8:	f003 0307 	and.w	r3, r3, #7
 8001afc:	009b      	lsls	r3, r3, #2
 8001afe:	fa02 f303 	lsl.w	r3, r2, r3
 8001b02:	693a      	ldr	r2, [r7, #16]
 8001b04:	4313      	orrs	r3, r2
 8001b06:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001b08:	697b      	ldr	r3, [r7, #20]
 8001b0a:	08da      	lsrs	r2, r3, #3
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	3208      	adds	r2, #8
 8001b10:	6939      	ldr	r1, [r7, #16]
 8001b12:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001b1c:	697b      	ldr	r3, [r7, #20]
 8001b1e:	005b      	lsls	r3, r3, #1
 8001b20:	2203      	movs	r2, #3
 8001b22:	fa02 f303 	lsl.w	r3, r2, r3
 8001b26:	43db      	mvns	r3, r3
 8001b28:	693a      	ldr	r2, [r7, #16]
 8001b2a:	4013      	ands	r3, r2
 8001b2c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	685b      	ldr	r3, [r3, #4]
 8001b32:	f003 0203 	and.w	r2, r3, #3
 8001b36:	697b      	ldr	r3, [r7, #20]
 8001b38:	005b      	lsls	r3, r3, #1
 8001b3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b3e:	693a      	ldr	r2, [r7, #16]
 8001b40:	4313      	orrs	r3, r2
 8001b42:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	693a      	ldr	r2, [r7, #16]
 8001b48:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001b4a:	683b      	ldr	r3, [r7, #0]
 8001b4c:	685b      	ldr	r3, [r3, #4]
 8001b4e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	f000 809a 	beq.w	8001c8c <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b58:	4b55      	ldr	r3, [pc, #340]	@ (8001cb0 <HAL_GPIO_Init+0x2cc>)
 8001b5a:	699b      	ldr	r3, [r3, #24]
 8001b5c:	4a54      	ldr	r2, [pc, #336]	@ (8001cb0 <HAL_GPIO_Init+0x2cc>)
 8001b5e:	f043 0301 	orr.w	r3, r3, #1
 8001b62:	6193      	str	r3, [r2, #24]
 8001b64:	4b52      	ldr	r3, [pc, #328]	@ (8001cb0 <HAL_GPIO_Init+0x2cc>)
 8001b66:	699b      	ldr	r3, [r3, #24]
 8001b68:	f003 0301 	and.w	r3, r3, #1
 8001b6c:	60bb      	str	r3, [r7, #8]
 8001b6e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001b70:	4a50      	ldr	r2, [pc, #320]	@ (8001cb4 <HAL_GPIO_Init+0x2d0>)
 8001b72:	697b      	ldr	r3, [r7, #20]
 8001b74:	089b      	lsrs	r3, r3, #2
 8001b76:	3302      	adds	r3, #2
 8001b78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b7c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001b7e:	697b      	ldr	r3, [r7, #20]
 8001b80:	f003 0303 	and.w	r3, r3, #3
 8001b84:	009b      	lsls	r3, r3, #2
 8001b86:	220f      	movs	r2, #15
 8001b88:	fa02 f303 	lsl.w	r3, r2, r3
 8001b8c:	43db      	mvns	r3, r3
 8001b8e:	693a      	ldr	r2, [r7, #16]
 8001b90:	4013      	ands	r3, r2
 8001b92:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001b9a:	d013      	beq.n	8001bc4 <HAL_GPIO_Init+0x1e0>
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	4a46      	ldr	r2, [pc, #280]	@ (8001cb8 <HAL_GPIO_Init+0x2d4>)
 8001ba0:	4293      	cmp	r3, r2
 8001ba2:	d00d      	beq.n	8001bc0 <HAL_GPIO_Init+0x1dc>
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	4a45      	ldr	r2, [pc, #276]	@ (8001cbc <HAL_GPIO_Init+0x2d8>)
 8001ba8:	4293      	cmp	r3, r2
 8001baa:	d007      	beq.n	8001bbc <HAL_GPIO_Init+0x1d8>
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	4a44      	ldr	r2, [pc, #272]	@ (8001cc0 <HAL_GPIO_Init+0x2dc>)
 8001bb0:	4293      	cmp	r3, r2
 8001bb2:	d101      	bne.n	8001bb8 <HAL_GPIO_Init+0x1d4>
 8001bb4:	2303      	movs	r3, #3
 8001bb6:	e006      	b.n	8001bc6 <HAL_GPIO_Init+0x1e2>
 8001bb8:	2305      	movs	r3, #5
 8001bba:	e004      	b.n	8001bc6 <HAL_GPIO_Init+0x1e2>
 8001bbc:	2302      	movs	r3, #2
 8001bbe:	e002      	b.n	8001bc6 <HAL_GPIO_Init+0x1e2>
 8001bc0:	2301      	movs	r3, #1
 8001bc2:	e000      	b.n	8001bc6 <HAL_GPIO_Init+0x1e2>
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	697a      	ldr	r2, [r7, #20]
 8001bc8:	f002 0203 	and.w	r2, r2, #3
 8001bcc:	0092      	lsls	r2, r2, #2
 8001bce:	4093      	lsls	r3, r2
 8001bd0:	693a      	ldr	r2, [r7, #16]
 8001bd2:	4313      	orrs	r3, r2
 8001bd4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001bd6:	4937      	ldr	r1, [pc, #220]	@ (8001cb4 <HAL_GPIO_Init+0x2d0>)
 8001bd8:	697b      	ldr	r3, [r7, #20]
 8001bda:	089b      	lsrs	r3, r3, #2
 8001bdc:	3302      	adds	r3, #2
 8001bde:	693a      	ldr	r2, [r7, #16]
 8001be0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001be4:	4b37      	ldr	r3, [pc, #220]	@ (8001cc4 <HAL_GPIO_Init+0x2e0>)
 8001be6:	689b      	ldr	r3, [r3, #8]
 8001be8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	43db      	mvns	r3, r3
 8001bee:	693a      	ldr	r2, [r7, #16]
 8001bf0:	4013      	ands	r3, r2
 8001bf2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	685b      	ldr	r3, [r3, #4]
 8001bf8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d003      	beq.n	8001c08 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8001c00:	693a      	ldr	r2, [r7, #16]
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	4313      	orrs	r3, r2
 8001c06:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001c08:	4a2e      	ldr	r2, [pc, #184]	@ (8001cc4 <HAL_GPIO_Init+0x2e0>)
 8001c0a:	693b      	ldr	r3, [r7, #16]
 8001c0c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001c0e:	4b2d      	ldr	r3, [pc, #180]	@ (8001cc4 <HAL_GPIO_Init+0x2e0>)
 8001c10:	68db      	ldr	r3, [r3, #12]
 8001c12:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	43db      	mvns	r3, r3
 8001c18:	693a      	ldr	r2, [r7, #16]
 8001c1a:	4013      	ands	r3, r2
 8001c1c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001c1e:	683b      	ldr	r3, [r7, #0]
 8001c20:	685b      	ldr	r3, [r3, #4]
 8001c22:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d003      	beq.n	8001c32 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8001c2a:	693a      	ldr	r2, [r7, #16]
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	4313      	orrs	r3, r2
 8001c30:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001c32:	4a24      	ldr	r2, [pc, #144]	@ (8001cc4 <HAL_GPIO_Init+0x2e0>)
 8001c34:	693b      	ldr	r3, [r7, #16]
 8001c36:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001c38:	4b22      	ldr	r3, [pc, #136]	@ (8001cc4 <HAL_GPIO_Init+0x2e0>)
 8001c3a:	685b      	ldr	r3, [r3, #4]
 8001c3c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	43db      	mvns	r3, r3
 8001c42:	693a      	ldr	r2, [r7, #16]
 8001c44:	4013      	ands	r3, r2
 8001c46:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	685b      	ldr	r3, [r3, #4]
 8001c4c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d003      	beq.n	8001c5c <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8001c54:	693a      	ldr	r2, [r7, #16]
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	4313      	orrs	r3, r2
 8001c5a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001c5c:	4a19      	ldr	r2, [pc, #100]	@ (8001cc4 <HAL_GPIO_Init+0x2e0>)
 8001c5e:	693b      	ldr	r3, [r7, #16]
 8001c60:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c62:	4b18      	ldr	r3, [pc, #96]	@ (8001cc4 <HAL_GPIO_Init+0x2e0>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	43db      	mvns	r3, r3
 8001c6c:	693a      	ldr	r2, [r7, #16]
 8001c6e:	4013      	ands	r3, r2
 8001c70:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	685b      	ldr	r3, [r3, #4]
 8001c76:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d003      	beq.n	8001c86 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8001c7e:	693a      	ldr	r2, [r7, #16]
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	4313      	orrs	r3, r2
 8001c84:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001c86:	4a0f      	ldr	r2, [pc, #60]	@ (8001cc4 <HAL_GPIO_Init+0x2e0>)
 8001c88:	693b      	ldr	r3, [r7, #16]
 8001c8a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001c8c:	697b      	ldr	r3, [r7, #20]
 8001c8e:	3301      	adds	r3, #1
 8001c90:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c92:	683b      	ldr	r3, [r7, #0]
 8001c94:	681a      	ldr	r2, [r3, #0]
 8001c96:	697b      	ldr	r3, [r7, #20]
 8001c98:	fa22 f303 	lsr.w	r3, r2, r3
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	f47f aea9 	bne.w	80019f4 <HAL_GPIO_Init+0x10>
  }
}
 8001ca2:	bf00      	nop
 8001ca4:	bf00      	nop
 8001ca6:	371c      	adds	r7, #28
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cae:	4770      	bx	lr
 8001cb0:	40021000 	.word	0x40021000
 8001cb4:	40010000 	.word	0x40010000
 8001cb8:	48000400 	.word	0x48000400
 8001cbc:	48000800 	.word	0x48000800
 8001cc0:	48000c00 	.word	0x48000c00
 8001cc4:	40010400 	.word	0x40010400

08001cc8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	b083      	sub	sp, #12
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
 8001cd0:	460b      	mov	r3, r1
 8001cd2:	807b      	strh	r3, [r7, #2]
 8001cd4:	4613      	mov	r3, r2
 8001cd6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001cd8:	787b      	ldrb	r3, [r7, #1]
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d003      	beq.n	8001ce6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001cde:	887a      	ldrh	r2, [r7, #2]
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001ce4:	e002      	b.n	8001cec <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001ce6:	887a      	ldrh	r2, [r7, #2]
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001cec:	bf00      	nop
 8001cee:	370c      	adds	r7, #12
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf6:	4770      	bx	lr

08001cf8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 8001cfe:	af00      	add	r7, sp, #0
 8001d00:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d04:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001d08:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001d0a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d0e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d102      	bne.n	8001d1e <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001d18:	2301      	movs	r3, #1
 8001d1a:	f001 b823 	b.w	8002d64 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d1e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d22:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f003 0301 	and.w	r3, r3, #1
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	f000 817d 	beq.w	800202e <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001d34:	4bbc      	ldr	r3, [pc, #752]	@ (8002028 <HAL_RCC_OscConfig+0x330>)
 8001d36:	685b      	ldr	r3, [r3, #4]
 8001d38:	f003 030c 	and.w	r3, r3, #12
 8001d3c:	2b04      	cmp	r3, #4
 8001d3e:	d00c      	beq.n	8001d5a <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001d40:	4bb9      	ldr	r3, [pc, #740]	@ (8002028 <HAL_RCC_OscConfig+0x330>)
 8001d42:	685b      	ldr	r3, [r3, #4]
 8001d44:	f003 030c 	and.w	r3, r3, #12
 8001d48:	2b08      	cmp	r3, #8
 8001d4a:	d15c      	bne.n	8001e06 <HAL_RCC_OscConfig+0x10e>
 8001d4c:	4bb6      	ldr	r3, [pc, #728]	@ (8002028 <HAL_RCC_OscConfig+0x330>)
 8001d4e:	685b      	ldr	r3, [r3, #4]
 8001d50:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001d54:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001d58:	d155      	bne.n	8001e06 <HAL_RCC_OscConfig+0x10e>
 8001d5a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001d5e:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d62:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 8001d66:	fa93 f3a3 	rbit	r3, r3
 8001d6a:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001d6e:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d72:	fab3 f383 	clz	r3, r3
 8001d76:	b2db      	uxtb	r3, r3
 8001d78:	095b      	lsrs	r3, r3, #5
 8001d7a:	b2db      	uxtb	r3, r3
 8001d7c:	f043 0301 	orr.w	r3, r3, #1
 8001d80:	b2db      	uxtb	r3, r3
 8001d82:	2b01      	cmp	r3, #1
 8001d84:	d102      	bne.n	8001d8c <HAL_RCC_OscConfig+0x94>
 8001d86:	4ba8      	ldr	r3, [pc, #672]	@ (8002028 <HAL_RCC_OscConfig+0x330>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	e015      	b.n	8001db8 <HAL_RCC_OscConfig+0xc0>
 8001d8c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001d90:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d94:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 8001d98:	fa93 f3a3 	rbit	r3, r3
 8001d9c:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8001da0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001da4:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8001da8:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 8001dac:	fa93 f3a3 	rbit	r3, r3
 8001db0:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 8001db4:	4b9c      	ldr	r3, [pc, #624]	@ (8002028 <HAL_RCC_OscConfig+0x330>)
 8001db6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001db8:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001dbc:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 8001dc0:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8001dc4:	fa92 f2a2 	rbit	r2, r2
 8001dc8:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 8001dcc:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 8001dd0:	fab2 f282 	clz	r2, r2
 8001dd4:	b2d2      	uxtb	r2, r2
 8001dd6:	f042 0220 	orr.w	r2, r2, #32
 8001dda:	b2d2      	uxtb	r2, r2
 8001ddc:	f002 021f 	and.w	r2, r2, #31
 8001de0:	2101      	movs	r1, #1
 8001de2:	fa01 f202 	lsl.w	r2, r1, r2
 8001de6:	4013      	ands	r3, r2
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	f000 811f 	beq.w	800202c <HAL_RCC_OscConfig+0x334>
 8001dee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001df2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	685b      	ldr	r3, [r3, #4]
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	f040 8116 	bne.w	800202c <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8001e00:	2301      	movs	r3, #1
 8001e02:	f000 bfaf 	b.w	8002d64 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e06:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e0a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	685b      	ldr	r3, [r3, #4]
 8001e12:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001e16:	d106      	bne.n	8001e26 <HAL_RCC_OscConfig+0x12e>
 8001e18:	4b83      	ldr	r3, [pc, #524]	@ (8002028 <HAL_RCC_OscConfig+0x330>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	4a82      	ldr	r2, [pc, #520]	@ (8002028 <HAL_RCC_OscConfig+0x330>)
 8001e1e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e22:	6013      	str	r3, [r2, #0]
 8001e24:	e036      	b.n	8001e94 <HAL_RCC_OscConfig+0x19c>
 8001e26:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e2a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	685b      	ldr	r3, [r3, #4]
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d10c      	bne.n	8001e50 <HAL_RCC_OscConfig+0x158>
 8001e36:	4b7c      	ldr	r3, [pc, #496]	@ (8002028 <HAL_RCC_OscConfig+0x330>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	4a7b      	ldr	r2, [pc, #492]	@ (8002028 <HAL_RCC_OscConfig+0x330>)
 8001e3c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001e40:	6013      	str	r3, [r2, #0]
 8001e42:	4b79      	ldr	r3, [pc, #484]	@ (8002028 <HAL_RCC_OscConfig+0x330>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	4a78      	ldr	r2, [pc, #480]	@ (8002028 <HAL_RCC_OscConfig+0x330>)
 8001e48:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001e4c:	6013      	str	r3, [r2, #0]
 8001e4e:	e021      	b.n	8001e94 <HAL_RCC_OscConfig+0x19c>
 8001e50:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e54:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	685b      	ldr	r3, [r3, #4]
 8001e5c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001e60:	d10c      	bne.n	8001e7c <HAL_RCC_OscConfig+0x184>
 8001e62:	4b71      	ldr	r3, [pc, #452]	@ (8002028 <HAL_RCC_OscConfig+0x330>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	4a70      	ldr	r2, [pc, #448]	@ (8002028 <HAL_RCC_OscConfig+0x330>)
 8001e68:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001e6c:	6013      	str	r3, [r2, #0]
 8001e6e:	4b6e      	ldr	r3, [pc, #440]	@ (8002028 <HAL_RCC_OscConfig+0x330>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	4a6d      	ldr	r2, [pc, #436]	@ (8002028 <HAL_RCC_OscConfig+0x330>)
 8001e74:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e78:	6013      	str	r3, [r2, #0]
 8001e7a:	e00b      	b.n	8001e94 <HAL_RCC_OscConfig+0x19c>
 8001e7c:	4b6a      	ldr	r3, [pc, #424]	@ (8002028 <HAL_RCC_OscConfig+0x330>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	4a69      	ldr	r2, [pc, #420]	@ (8002028 <HAL_RCC_OscConfig+0x330>)
 8001e82:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001e86:	6013      	str	r3, [r2, #0]
 8001e88:	4b67      	ldr	r3, [pc, #412]	@ (8002028 <HAL_RCC_OscConfig+0x330>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	4a66      	ldr	r2, [pc, #408]	@ (8002028 <HAL_RCC_OscConfig+0x330>)
 8001e8e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001e92:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001e94:	4b64      	ldr	r3, [pc, #400]	@ (8002028 <HAL_RCC_OscConfig+0x330>)
 8001e96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e98:	f023 020f 	bic.w	r2, r3, #15
 8001e9c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ea0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	689b      	ldr	r3, [r3, #8]
 8001ea8:	495f      	ldr	r1, [pc, #380]	@ (8002028 <HAL_RCC_OscConfig+0x330>)
 8001eaa:	4313      	orrs	r3, r2
 8001eac:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001eae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001eb2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	685b      	ldr	r3, [r3, #4]
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d059      	beq.n	8001f72 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ebe:	f7ff fb7f 	bl	80015c0 <HAL_GetTick>
 8001ec2:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ec6:	e00a      	b.n	8001ede <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ec8:	f7ff fb7a 	bl	80015c0 <HAL_GetTick>
 8001ecc:	4602      	mov	r2, r0
 8001ece:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001ed2:	1ad3      	subs	r3, r2, r3
 8001ed4:	2b64      	cmp	r3, #100	@ 0x64
 8001ed6:	d902      	bls.n	8001ede <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8001ed8:	2303      	movs	r3, #3
 8001eda:	f000 bf43 	b.w	8002d64 <HAL_RCC_OscConfig+0x106c>
 8001ede:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001ee2:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ee6:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8001eea:	fa93 f3a3 	rbit	r3, r3
 8001eee:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 8001ef2:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ef6:	fab3 f383 	clz	r3, r3
 8001efa:	b2db      	uxtb	r3, r3
 8001efc:	095b      	lsrs	r3, r3, #5
 8001efe:	b2db      	uxtb	r3, r3
 8001f00:	f043 0301 	orr.w	r3, r3, #1
 8001f04:	b2db      	uxtb	r3, r3
 8001f06:	2b01      	cmp	r3, #1
 8001f08:	d102      	bne.n	8001f10 <HAL_RCC_OscConfig+0x218>
 8001f0a:	4b47      	ldr	r3, [pc, #284]	@ (8002028 <HAL_RCC_OscConfig+0x330>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	e015      	b.n	8001f3c <HAL_RCC_OscConfig+0x244>
 8001f10:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001f14:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f18:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8001f1c:	fa93 f3a3 	rbit	r3, r3
 8001f20:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8001f24:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001f28:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8001f2c:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8001f30:	fa93 f3a3 	rbit	r3, r3
 8001f34:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8001f38:	4b3b      	ldr	r3, [pc, #236]	@ (8002028 <HAL_RCC_OscConfig+0x330>)
 8001f3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f3c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001f40:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 8001f44:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8001f48:	fa92 f2a2 	rbit	r2, r2
 8001f4c:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 8001f50:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8001f54:	fab2 f282 	clz	r2, r2
 8001f58:	b2d2      	uxtb	r2, r2
 8001f5a:	f042 0220 	orr.w	r2, r2, #32
 8001f5e:	b2d2      	uxtb	r2, r2
 8001f60:	f002 021f 	and.w	r2, r2, #31
 8001f64:	2101      	movs	r1, #1
 8001f66:	fa01 f202 	lsl.w	r2, r1, r2
 8001f6a:	4013      	ands	r3, r2
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d0ab      	beq.n	8001ec8 <HAL_RCC_OscConfig+0x1d0>
 8001f70:	e05d      	b.n	800202e <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f72:	f7ff fb25 	bl	80015c0 <HAL_GetTick>
 8001f76:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f7a:	e00a      	b.n	8001f92 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f7c:	f7ff fb20 	bl	80015c0 <HAL_GetTick>
 8001f80:	4602      	mov	r2, r0
 8001f82:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001f86:	1ad3      	subs	r3, r2, r3
 8001f88:	2b64      	cmp	r3, #100	@ 0x64
 8001f8a:	d902      	bls.n	8001f92 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8001f8c:	2303      	movs	r3, #3
 8001f8e:	f000 bee9 	b.w	8002d64 <HAL_RCC_OscConfig+0x106c>
 8001f92:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001f96:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f9a:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8001f9e:	fa93 f3a3 	rbit	r3, r3
 8001fa2:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 8001fa6:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001faa:	fab3 f383 	clz	r3, r3
 8001fae:	b2db      	uxtb	r3, r3
 8001fb0:	095b      	lsrs	r3, r3, #5
 8001fb2:	b2db      	uxtb	r3, r3
 8001fb4:	f043 0301 	orr.w	r3, r3, #1
 8001fb8:	b2db      	uxtb	r3, r3
 8001fba:	2b01      	cmp	r3, #1
 8001fbc:	d102      	bne.n	8001fc4 <HAL_RCC_OscConfig+0x2cc>
 8001fbe:	4b1a      	ldr	r3, [pc, #104]	@ (8002028 <HAL_RCC_OscConfig+0x330>)
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	e015      	b.n	8001ff0 <HAL_RCC_OscConfig+0x2f8>
 8001fc4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001fc8:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fcc:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8001fd0:	fa93 f3a3 	rbit	r3, r3
 8001fd4:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8001fd8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001fdc:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8001fe0:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8001fe4:	fa93 f3a3 	rbit	r3, r3
 8001fe8:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 8001fec:	4b0e      	ldr	r3, [pc, #56]	@ (8002028 <HAL_RCC_OscConfig+0x330>)
 8001fee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ff0:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001ff4:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 8001ff8:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8001ffc:	fa92 f2a2 	rbit	r2, r2
 8002000:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 8002004:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8002008:	fab2 f282 	clz	r2, r2
 800200c:	b2d2      	uxtb	r2, r2
 800200e:	f042 0220 	orr.w	r2, r2, #32
 8002012:	b2d2      	uxtb	r2, r2
 8002014:	f002 021f 	and.w	r2, r2, #31
 8002018:	2101      	movs	r1, #1
 800201a:	fa01 f202 	lsl.w	r2, r1, r2
 800201e:	4013      	ands	r3, r2
 8002020:	2b00      	cmp	r3, #0
 8002022:	d1ab      	bne.n	8001f7c <HAL_RCC_OscConfig+0x284>
 8002024:	e003      	b.n	800202e <HAL_RCC_OscConfig+0x336>
 8002026:	bf00      	nop
 8002028:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800202c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800202e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002032:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f003 0302 	and.w	r3, r3, #2
 800203e:	2b00      	cmp	r3, #0
 8002040:	f000 817d 	beq.w	800233e <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002044:	4ba6      	ldr	r3, [pc, #664]	@ (80022e0 <HAL_RCC_OscConfig+0x5e8>)
 8002046:	685b      	ldr	r3, [r3, #4]
 8002048:	f003 030c 	and.w	r3, r3, #12
 800204c:	2b00      	cmp	r3, #0
 800204e:	d00b      	beq.n	8002068 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002050:	4ba3      	ldr	r3, [pc, #652]	@ (80022e0 <HAL_RCC_OscConfig+0x5e8>)
 8002052:	685b      	ldr	r3, [r3, #4]
 8002054:	f003 030c 	and.w	r3, r3, #12
 8002058:	2b08      	cmp	r3, #8
 800205a:	d172      	bne.n	8002142 <HAL_RCC_OscConfig+0x44a>
 800205c:	4ba0      	ldr	r3, [pc, #640]	@ (80022e0 <HAL_RCC_OscConfig+0x5e8>)
 800205e:	685b      	ldr	r3, [r3, #4]
 8002060:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002064:	2b00      	cmp	r3, #0
 8002066:	d16c      	bne.n	8002142 <HAL_RCC_OscConfig+0x44a>
 8002068:	2302      	movs	r3, #2
 800206a:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800206e:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8002072:	fa93 f3a3 	rbit	r3, r3
 8002076:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 800207a:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800207e:	fab3 f383 	clz	r3, r3
 8002082:	b2db      	uxtb	r3, r3
 8002084:	095b      	lsrs	r3, r3, #5
 8002086:	b2db      	uxtb	r3, r3
 8002088:	f043 0301 	orr.w	r3, r3, #1
 800208c:	b2db      	uxtb	r3, r3
 800208e:	2b01      	cmp	r3, #1
 8002090:	d102      	bne.n	8002098 <HAL_RCC_OscConfig+0x3a0>
 8002092:	4b93      	ldr	r3, [pc, #588]	@ (80022e0 <HAL_RCC_OscConfig+0x5e8>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	e013      	b.n	80020c0 <HAL_RCC_OscConfig+0x3c8>
 8002098:	2302      	movs	r3, #2
 800209a:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800209e:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 80020a2:	fa93 f3a3 	rbit	r3, r3
 80020a6:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 80020aa:	2302      	movs	r3, #2
 80020ac:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 80020b0:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 80020b4:	fa93 f3a3 	rbit	r3, r3
 80020b8:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 80020bc:	4b88      	ldr	r3, [pc, #544]	@ (80022e0 <HAL_RCC_OscConfig+0x5e8>)
 80020be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020c0:	2202      	movs	r2, #2
 80020c2:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 80020c6:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 80020ca:	fa92 f2a2 	rbit	r2, r2
 80020ce:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 80020d2:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 80020d6:	fab2 f282 	clz	r2, r2
 80020da:	b2d2      	uxtb	r2, r2
 80020dc:	f042 0220 	orr.w	r2, r2, #32
 80020e0:	b2d2      	uxtb	r2, r2
 80020e2:	f002 021f 	and.w	r2, r2, #31
 80020e6:	2101      	movs	r1, #1
 80020e8:	fa01 f202 	lsl.w	r2, r1, r2
 80020ec:	4013      	ands	r3, r2
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d00a      	beq.n	8002108 <HAL_RCC_OscConfig+0x410>
 80020f2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020f6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	691b      	ldr	r3, [r3, #16]
 80020fe:	2b01      	cmp	r3, #1
 8002100:	d002      	beq.n	8002108 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8002102:	2301      	movs	r3, #1
 8002104:	f000 be2e 	b.w	8002d64 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002108:	4b75      	ldr	r3, [pc, #468]	@ (80022e0 <HAL_RCC_OscConfig+0x5e8>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002110:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002114:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	695b      	ldr	r3, [r3, #20]
 800211c:	21f8      	movs	r1, #248	@ 0xf8
 800211e:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002122:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8002126:	fa91 f1a1 	rbit	r1, r1
 800212a:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 800212e:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 8002132:	fab1 f181 	clz	r1, r1
 8002136:	b2c9      	uxtb	r1, r1
 8002138:	408b      	lsls	r3, r1
 800213a:	4969      	ldr	r1, [pc, #420]	@ (80022e0 <HAL_RCC_OscConfig+0x5e8>)
 800213c:	4313      	orrs	r3, r2
 800213e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002140:	e0fd      	b.n	800233e <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002142:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002146:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	691b      	ldr	r3, [r3, #16]
 800214e:	2b00      	cmp	r3, #0
 8002150:	f000 8088 	beq.w	8002264 <HAL_RCC_OscConfig+0x56c>
 8002154:	2301      	movs	r3, #1
 8002156:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800215a:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 800215e:	fa93 f3a3 	rbit	r3, r3
 8002162:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 8002166:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800216a:	fab3 f383 	clz	r3, r3
 800216e:	b2db      	uxtb	r3, r3
 8002170:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002174:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002178:	009b      	lsls	r3, r3, #2
 800217a:	461a      	mov	r2, r3
 800217c:	2301      	movs	r3, #1
 800217e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002180:	f7ff fa1e 	bl	80015c0 <HAL_GetTick>
 8002184:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002188:	e00a      	b.n	80021a0 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800218a:	f7ff fa19 	bl	80015c0 <HAL_GetTick>
 800218e:	4602      	mov	r2, r0
 8002190:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002194:	1ad3      	subs	r3, r2, r3
 8002196:	2b02      	cmp	r3, #2
 8002198:	d902      	bls.n	80021a0 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 800219a:	2303      	movs	r3, #3
 800219c:	f000 bde2 	b.w	8002d64 <HAL_RCC_OscConfig+0x106c>
 80021a0:	2302      	movs	r3, #2
 80021a2:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021a6:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 80021aa:	fa93 f3a3 	rbit	r3, r3
 80021ae:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 80021b2:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021b6:	fab3 f383 	clz	r3, r3
 80021ba:	b2db      	uxtb	r3, r3
 80021bc:	095b      	lsrs	r3, r3, #5
 80021be:	b2db      	uxtb	r3, r3
 80021c0:	f043 0301 	orr.w	r3, r3, #1
 80021c4:	b2db      	uxtb	r3, r3
 80021c6:	2b01      	cmp	r3, #1
 80021c8:	d102      	bne.n	80021d0 <HAL_RCC_OscConfig+0x4d8>
 80021ca:	4b45      	ldr	r3, [pc, #276]	@ (80022e0 <HAL_RCC_OscConfig+0x5e8>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	e013      	b.n	80021f8 <HAL_RCC_OscConfig+0x500>
 80021d0:	2302      	movs	r3, #2
 80021d2:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021d6:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 80021da:	fa93 f3a3 	rbit	r3, r3
 80021de:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 80021e2:	2302      	movs	r3, #2
 80021e4:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 80021e8:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 80021ec:	fa93 f3a3 	rbit	r3, r3
 80021f0:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 80021f4:	4b3a      	ldr	r3, [pc, #232]	@ (80022e0 <HAL_RCC_OscConfig+0x5e8>)
 80021f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021f8:	2202      	movs	r2, #2
 80021fa:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 80021fe:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8002202:	fa92 f2a2 	rbit	r2, r2
 8002206:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 800220a:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 800220e:	fab2 f282 	clz	r2, r2
 8002212:	b2d2      	uxtb	r2, r2
 8002214:	f042 0220 	orr.w	r2, r2, #32
 8002218:	b2d2      	uxtb	r2, r2
 800221a:	f002 021f 	and.w	r2, r2, #31
 800221e:	2101      	movs	r1, #1
 8002220:	fa01 f202 	lsl.w	r2, r1, r2
 8002224:	4013      	ands	r3, r2
 8002226:	2b00      	cmp	r3, #0
 8002228:	d0af      	beq.n	800218a <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800222a:	4b2d      	ldr	r3, [pc, #180]	@ (80022e0 <HAL_RCC_OscConfig+0x5e8>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002232:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002236:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	695b      	ldr	r3, [r3, #20]
 800223e:	21f8      	movs	r1, #248	@ 0xf8
 8002240:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002244:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8002248:	fa91 f1a1 	rbit	r1, r1
 800224c:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 8002250:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 8002254:	fab1 f181 	clz	r1, r1
 8002258:	b2c9      	uxtb	r1, r1
 800225a:	408b      	lsls	r3, r1
 800225c:	4920      	ldr	r1, [pc, #128]	@ (80022e0 <HAL_RCC_OscConfig+0x5e8>)
 800225e:	4313      	orrs	r3, r2
 8002260:	600b      	str	r3, [r1, #0]
 8002262:	e06c      	b.n	800233e <HAL_RCC_OscConfig+0x646>
 8002264:	2301      	movs	r3, #1
 8002266:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800226a:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800226e:	fa93 f3a3 	rbit	r3, r3
 8002272:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 8002276:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800227a:	fab3 f383 	clz	r3, r3
 800227e:	b2db      	uxtb	r3, r3
 8002280:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002284:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002288:	009b      	lsls	r3, r3, #2
 800228a:	461a      	mov	r2, r3
 800228c:	2300      	movs	r3, #0
 800228e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002290:	f7ff f996 	bl	80015c0 <HAL_GetTick>
 8002294:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002298:	e00a      	b.n	80022b0 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800229a:	f7ff f991 	bl	80015c0 <HAL_GetTick>
 800229e:	4602      	mov	r2, r0
 80022a0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80022a4:	1ad3      	subs	r3, r2, r3
 80022a6:	2b02      	cmp	r3, #2
 80022a8:	d902      	bls.n	80022b0 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 80022aa:	2303      	movs	r3, #3
 80022ac:	f000 bd5a 	b.w	8002d64 <HAL_RCC_OscConfig+0x106c>
 80022b0:	2302      	movs	r3, #2
 80022b2:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022b6:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80022ba:	fa93 f3a3 	rbit	r3, r3
 80022be:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 80022c2:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022c6:	fab3 f383 	clz	r3, r3
 80022ca:	b2db      	uxtb	r3, r3
 80022cc:	095b      	lsrs	r3, r3, #5
 80022ce:	b2db      	uxtb	r3, r3
 80022d0:	f043 0301 	orr.w	r3, r3, #1
 80022d4:	b2db      	uxtb	r3, r3
 80022d6:	2b01      	cmp	r3, #1
 80022d8:	d104      	bne.n	80022e4 <HAL_RCC_OscConfig+0x5ec>
 80022da:	4b01      	ldr	r3, [pc, #4]	@ (80022e0 <HAL_RCC_OscConfig+0x5e8>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	e015      	b.n	800230c <HAL_RCC_OscConfig+0x614>
 80022e0:	40021000 	.word	0x40021000
 80022e4:	2302      	movs	r3, #2
 80022e6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022ea:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80022ee:	fa93 f3a3 	rbit	r3, r3
 80022f2:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 80022f6:	2302      	movs	r3, #2
 80022f8:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 80022fc:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8002300:	fa93 f3a3 	rbit	r3, r3
 8002304:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8002308:	4bc8      	ldr	r3, [pc, #800]	@ (800262c <HAL_RCC_OscConfig+0x934>)
 800230a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800230c:	2202      	movs	r2, #2
 800230e:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 8002312:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8002316:	fa92 f2a2 	rbit	r2, r2
 800231a:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 800231e:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8002322:	fab2 f282 	clz	r2, r2
 8002326:	b2d2      	uxtb	r2, r2
 8002328:	f042 0220 	orr.w	r2, r2, #32
 800232c:	b2d2      	uxtb	r2, r2
 800232e:	f002 021f 	and.w	r2, r2, #31
 8002332:	2101      	movs	r1, #1
 8002334:	fa01 f202 	lsl.w	r2, r1, r2
 8002338:	4013      	ands	r3, r2
 800233a:	2b00      	cmp	r3, #0
 800233c:	d1ad      	bne.n	800229a <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800233e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002342:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f003 0308 	and.w	r3, r3, #8
 800234e:	2b00      	cmp	r3, #0
 8002350:	f000 8110 	beq.w	8002574 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002354:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002358:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	699b      	ldr	r3, [r3, #24]
 8002360:	2b00      	cmp	r3, #0
 8002362:	d079      	beq.n	8002458 <HAL_RCC_OscConfig+0x760>
 8002364:	2301      	movs	r3, #1
 8002366:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800236a:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800236e:	fa93 f3a3 	rbit	r3, r3
 8002372:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 8002376:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800237a:	fab3 f383 	clz	r3, r3
 800237e:	b2db      	uxtb	r3, r3
 8002380:	461a      	mov	r2, r3
 8002382:	4bab      	ldr	r3, [pc, #684]	@ (8002630 <HAL_RCC_OscConfig+0x938>)
 8002384:	4413      	add	r3, r2
 8002386:	009b      	lsls	r3, r3, #2
 8002388:	461a      	mov	r2, r3
 800238a:	2301      	movs	r3, #1
 800238c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800238e:	f7ff f917 	bl	80015c0 <HAL_GetTick>
 8002392:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002396:	e00a      	b.n	80023ae <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002398:	f7ff f912 	bl	80015c0 <HAL_GetTick>
 800239c:	4602      	mov	r2, r0
 800239e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80023a2:	1ad3      	subs	r3, r2, r3
 80023a4:	2b02      	cmp	r3, #2
 80023a6:	d902      	bls.n	80023ae <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 80023a8:	2303      	movs	r3, #3
 80023aa:	f000 bcdb 	b.w	8002d64 <HAL_RCC_OscConfig+0x106c>
 80023ae:	2302      	movs	r3, #2
 80023b0:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023b4:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 80023b8:	fa93 f3a3 	rbit	r3, r3
 80023bc:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80023c0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023c4:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80023c8:	2202      	movs	r2, #2
 80023ca:	601a      	str	r2, [r3, #0]
 80023cc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023d0:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	fa93 f2a3 	rbit	r2, r3
 80023da:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023de:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80023e2:	601a      	str	r2, [r3, #0]
 80023e4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023e8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80023ec:	2202      	movs	r2, #2
 80023ee:	601a      	str	r2, [r3, #0]
 80023f0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023f4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	fa93 f2a3 	rbit	r2, r3
 80023fe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002402:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002406:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002408:	4b88      	ldr	r3, [pc, #544]	@ (800262c <HAL_RCC_OscConfig+0x934>)
 800240a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800240c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002410:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002414:	2102      	movs	r1, #2
 8002416:	6019      	str	r1, [r3, #0]
 8002418:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800241c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	fa93 f1a3 	rbit	r1, r3
 8002426:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800242a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800242e:	6019      	str	r1, [r3, #0]
  return result;
 8002430:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002434:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	fab3 f383 	clz	r3, r3
 800243e:	b2db      	uxtb	r3, r3
 8002440:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8002444:	b2db      	uxtb	r3, r3
 8002446:	f003 031f 	and.w	r3, r3, #31
 800244a:	2101      	movs	r1, #1
 800244c:	fa01 f303 	lsl.w	r3, r1, r3
 8002450:	4013      	ands	r3, r2
 8002452:	2b00      	cmp	r3, #0
 8002454:	d0a0      	beq.n	8002398 <HAL_RCC_OscConfig+0x6a0>
 8002456:	e08d      	b.n	8002574 <HAL_RCC_OscConfig+0x87c>
 8002458:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800245c:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002460:	2201      	movs	r2, #1
 8002462:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002464:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002468:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	fa93 f2a3 	rbit	r2, r3
 8002472:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002476:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800247a:	601a      	str	r2, [r3, #0]
  return result;
 800247c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002480:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002484:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002486:	fab3 f383 	clz	r3, r3
 800248a:	b2db      	uxtb	r3, r3
 800248c:	461a      	mov	r2, r3
 800248e:	4b68      	ldr	r3, [pc, #416]	@ (8002630 <HAL_RCC_OscConfig+0x938>)
 8002490:	4413      	add	r3, r2
 8002492:	009b      	lsls	r3, r3, #2
 8002494:	461a      	mov	r2, r3
 8002496:	2300      	movs	r3, #0
 8002498:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800249a:	f7ff f891 	bl	80015c0 <HAL_GetTick>
 800249e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024a2:	e00a      	b.n	80024ba <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80024a4:	f7ff f88c 	bl	80015c0 <HAL_GetTick>
 80024a8:	4602      	mov	r2, r0
 80024aa:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80024ae:	1ad3      	subs	r3, r2, r3
 80024b0:	2b02      	cmp	r3, #2
 80024b2:	d902      	bls.n	80024ba <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 80024b4:	2303      	movs	r3, #3
 80024b6:	f000 bc55 	b.w	8002d64 <HAL_RCC_OscConfig+0x106c>
 80024ba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024be:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80024c2:	2202      	movs	r2, #2
 80024c4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024c6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024ca:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	fa93 f2a3 	rbit	r2, r3
 80024d4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024d8:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80024dc:	601a      	str	r2, [r3, #0]
 80024de:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024e2:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80024e6:	2202      	movs	r2, #2
 80024e8:	601a      	str	r2, [r3, #0]
 80024ea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024ee:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	fa93 f2a3 	rbit	r2, r3
 80024f8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024fc:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8002500:	601a      	str	r2, [r3, #0]
 8002502:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002506:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800250a:	2202      	movs	r2, #2
 800250c:	601a      	str	r2, [r3, #0]
 800250e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002512:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	fa93 f2a3 	rbit	r2, r3
 800251c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002520:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8002524:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002526:	4b41      	ldr	r3, [pc, #260]	@ (800262c <HAL_RCC_OscConfig+0x934>)
 8002528:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800252a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800252e:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8002532:	2102      	movs	r1, #2
 8002534:	6019      	str	r1, [r3, #0]
 8002536:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800253a:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	fa93 f1a3 	rbit	r1, r3
 8002544:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002548:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800254c:	6019      	str	r1, [r3, #0]
  return result;
 800254e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002552:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	fab3 f383 	clz	r3, r3
 800255c:	b2db      	uxtb	r3, r3
 800255e:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8002562:	b2db      	uxtb	r3, r3
 8002564:	f003 031f 	and.w	r3, r3, #31
 8002568:	2101      	movs	r1, #1
 800256a:	fa01 f303 	lsl.w	r3, r1, r3
 800256e:	4013      	ands	r3, r2
 8002570:	2b00      	cmp	r3, #0
 8002572:	d197      	bne.n	80024a4 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002574:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002578:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f003 0304 	and.w	r3, r3, #4
 8002584:	2b00      	cmp	r3, #0
 8002586:	f000 81a1 	beq.w	80028cc <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800258a:	2300      	movs	r3, #0
 800258c:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002590:	4b26      	ldr	r3, [pc, #152]	@ (800262c <HAL_RCC_OscConfig+0x934>)
 8002592:	69db      	ldr	r3, [r3, #28]
 8002594:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002598:	2b00      	cmp	r3, #0
 800259a:	d116      	bne.n	80025ca <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800259c:	4b23      	ldr	r3, [pc, #140]	@ (800262c <HAL_RCC_OscConfig+0x934>)
 800259e:	69db      	ldr	r3, [r3, #28]
 80025a0:	4a22      	ldr	r2, [pc, #136]	@ (800262c <HAL_RCC_OscConfig+0x934>)
 80025a2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80025a6:	61d3      	str	r3, [r2, #28]
 80025a8:	4b20      	ldr	r3, [pc, #128]	@ (800262c <HAL_RCC_OscConfig+0x934>)
 80025aa:	69db      	ldr	r3, [r3, #28]
 80025ac:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 80025b0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025b4:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 80025b8:	601a      	str	r2, [r3, #0]
 80025ba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025be:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 80025c2:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80025c4:	2301      	movs	r3, #1
 80025c6:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025ca:	4b1a      	ldr	r3, [pc, #104]	@ (8002634 <HAL_RCC_OscConfig+0x93c>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d11a      	bne.n	800260c <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80025d6:	4b17      	ldr	r3, [pc, #92]	@ (8002634 <HAL_RCC_OscConfig+0x93c>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	4a16      	ldr	r2, [pc, #88]	@ (8002634 <HAL_RCC_OscConfig+0x93c>)
 80025dc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80025e0:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80025e2:	f7fe ffed 	bl	80015c0 <HAL_GetTick>
 80025e6:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025ea:	e009      	b.n	8002600 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025ec:	f7fe ffe8 	bl	80015c0 <HAL_GetTick>
 80025f0:	4602      	mov	r2, r0
 80025f2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80025f6:	1ad3      	subs	r3, r2, r3
 80025f8:	2b64      	cmp	r3, #100	@ 0x64
 80025fa:	d901      	bls.n	8002600 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 80025fc:	2303      	movs	r3, #3
 80025fe:	e3b1      	b.n	8002d64 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002600:	4b0c      	ldr	r3, [pc, #48]	@ (8002634 <HAL_RCC_OscConfig+0x93c>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002608:	2b00      	cmp	r3, #0
 800260a:	d0ef      	beq.n	80025ec <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800260c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002610:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	68db      	ldr	r3, [r3, #12]
 8002618:	2b01      	cmp	r3, #1
 800261a:	d10d      	bne.n	8002638 <HAL_RCC_OscConfig+0x940>
 800261c:	4b03      	ldr	r3, [pc, #12]	@ (800262c <HAL_RCC_OscConfig+0x934>)
 800261e:	6a1b      	ldr	r3, [r3, #32]
 8002620:	4a02      	ldr	r2, [pc, #8]	@ (800262c <HAL_RCC_OscConfig+0x934>)
 8002622:	f043 0301 	orr.w	r3, r3, #1
 8002626:	6213      	str	r3, [r2, #32]
 8002628:	e03c      	b.n	80026a4 <HAL_RCC_OscConfig+0x9ac>
 800262a:	bf00      	nop
 800262c:	40021000 	.word	0x40021000
 8002630:	10908120 	.word	0x10908120
 8002634:	40007000 	.word	0x40007000
 8002638:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800263c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	68db      	ldr	r3, [r3, #12]
 8002644:	2b00      	cmp	r3, #0
 8002646:	d10c      	bne.n	8002662 <HAL_RCC_OscConfig+0x96a>
 8002648:	4bc1      	ldr	r3, [pc, #772]	@ (8002950 <HAL_RCC_OscConfig+0xc58>)
 800264a:	6a1b      	ldr	r3, [r3, #32]
 800264c:	4ac0      	ldr	r2, [pc, #768]	@ (8002950 <HAL_RCC_OscConfig+0xc58>)
 800264e:	f023 0301 	bic.w	r3, r3, #1
 8002652:	6213      	str	r3, [r2, #32]
 8002654:	4bbe      	ldr	r3, [pc, #760]	@ (8002950 <HAL_RCC_OscConfig+0xc58>)
 8002656:	6a1b      	ldr	r3, [r3, #32]
 8002658:	4abd      	ldr	r2, [pc, #756]	@ (8002950 <HAL_RCC_OscConfig+0xc58>)
 800265a:	f023 0304 	bic.w	r3, r3, #4
 800265e:	6213      	str	r3, [r2, #32]
 8002660:	e020      	b.n	80026a4 <HAL_RCC_OscConfig+0x9ac>
 8002662:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002666:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	68db      	ldr	r3, [r3, #12]
 800266e:	2b05      	cmp	r3, #5
 8002670:	d10c      	bne.n	800268c <HAL_RCC_OscConfig+0x994>
 8002672:	4bb7      	ldr	r3, [pc, #732]	@ (8002950 <HAL_RCC_OscConfig+0xc58>)
 8002674:	6a1b      	ldr	r3, [r3, #32]
 8002676:	4ab6      	ldr	r2, [pc, #728]	@ (8002950 <HAL_RCC_OscConfig+0xc58>)
 8002678:	f043 0304 	orr.w	r3, r3, #4
 800267c:	6213      	str	r3, [r2, #32]
 800267e:	4bb4      	ldr	r3, [pc, #720]	@ (8002950 <HAL_RCC_OscConfig+0xc58>)
 8002680:	6a1b      	ldr	r3, [r3, #32]
 8002682:	4ab3      	ldr	r2, [pc, #716]	@ (8002950 <HAL_RCC_OscConfig+0xc58>)
 8002684:	f043 0301 	orr.w	r3, r3, #1
 8002688:	6213      	str	r3, [r2, #32]
 800268a:	e00b      	b.n	80026a4 <HAL_RCC_OscConfig+0x9ac>
 800268c:	4bb0      	ldr	r3, [pc, #704]	@ (8002950 <HAL_RCC_OscConfig+0xc58>)
 800268e:	6a1b      	ldr	r3, [r3, #32]
 8002690:	4aaf      	ldr	r2, [pc, #700]	@ (8002950 <HAL_RCC_OscConfig+0xc58>)
 8002692:	f023 0301 	bic.w	r3, r3, #1
 8002696:	6213      	str	r3, [r2, #32]
 8002698:	4bad      	ldr	r3, [pc, #692]	@ (8002950 <HAL_RCC_OscConfig+0xc58>)
 800269a:	6a1b      	ldr	r3, [r3, #32]
 800269c:	4aac      	ldr	r2, [pc, #688]	@ (8002950 <HAL_RCC_OscConfig+0xc58>)
 800269e:	f023 0304 	bic.w	r3, r3, #4
 80026a2:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80026a4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026a8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	68db      	ldr	r3, [r3, #12]
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	f000 8081 	beq.w	80027b8 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026b6:	f7fe ff83 	bl	80015c0 <HAL_GetTick>
 80026ba:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026be:	e00b      	b.n	80026d8 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80026c0:	f7fe ff7e 	bl	80015c0 <HAL_GetTick>
 80026c4:	4602      	mov	r2, r0
 80026c6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80026ca:	1ad3      	subs	r3, r2, r3
 80026cc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80026d0:	4293      	cmp	r3, r2
 80026d2:	d901      	bls.n	80026d8 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 80026d4:	2303      	movs	r3, #3
 80026d6:	e345      	b.n	8002d64 <HAL_RCC_OscConfig+0x106c>
 80026d8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026dc:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80026e0:	2202      	movs	r2, #2
 80026e2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026e4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026e8:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	fa93 f2a3 	rbit	r2, r3
 80026f2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026f6:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80026fa:	601a      	str	r2, [r3, #0]
 80026fc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002700:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8002704:	2202      	movs	r2, #2
 8002706:	601a      	str	r2, [r3, #0]
 8002708:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800270c:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	fa93 f2a3 	rbit	r2, r3
 8002716:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800271a:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800271e:	601a      	str	r2, [r3, #0]
  return result;
 8002720:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002724:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8002728:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800272a:	fab3 f383 	clz	r3, r3
 800272e:	b2db      	uxtb	r3, r3
 8002730:	095b      	lsrs	r3, r3, #5
 8002732:	b2db      	uxtb	r3, r3
 8002734:	f043 0302 	orr.w	r3, r3, #2
 8002738:	b2db      	uxtb	r3, r3
 800273a:	2b02      	cmp	r3, #2
 800273c:	d102      	bne.n	8002744 <HAL_RCC_OscConfig+0xa4c>
 800273e:	4b84      	ldr	r3, [pc, #528]	@ (8002950 <HAL_RCC_OscConfig+0xc58>)
 8002740:	6a1b      	ldr	r3, [r3, #32]
 8002742:	e013      	b.n	800276c <HAL_RCC_OscConfig+0xa74>
 8002744:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002748:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 800274c:	2202      	movs	r2, #2
 800274e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002750:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002754:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	fa93 f2a3 	rbit	r2, r3
 800275e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002762:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8002766:	601a      	str	r2, [r3, #0]
 8002768:	4b79      	ldr	r3, [pc, #484]	@ (8002950 <HAL_RCC_OscConfig+0xc58>)
 800276a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800276c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002770:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8002774:	2102      	movs	r1, #2
 8002776:	6011      	str	r1, [r2, #0]
 8002778:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800277c:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8002780:	6812      	ldr	r2, [r2, #0]
 8002782:	fa92 f1a2 	rbit	r1, r2
 8002786:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800278a:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 800278e:	6011      	str	r1, [r2, #0]
  return result;
 8002790:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002794:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8002798:	6812      	ldr	r2, [r2, #0]
 800279a:	fab2 f282 	clz	r2, r2
 800279e:	b2d2      	uxtb	r2, r2
 80027a0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80027a4:	b2d2      	uxtb	r2, r2
 80027a6:	f002 021f 	and.w	r2, r2, #31
 80027aa:	2101      	movs	r1, #1
 80027ac:	fa01 f202 	lsl.w	r2, r1, r2
 80027b0:	4013      	ands	r3, r2
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d084      	beq.n	80026c0 <HAL_RCC_OscConfig+0x9c8>
 80027b6:	e07f      	b.n	80028b8 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027b8:	f7fe ff02 	bl	80015c0 <HAL_GetTick>
 80027bc:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027c0:	e00b      	b.n	80027da <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80027c2:	f7fe fefd 	bl	80015c0 <HAL_GetTick>
 80027c6:	4602      	mov	r2, r0
 80027c8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80027cc:	1ad3      	subs	r3, r2, r3
 80027ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80027d2:	4293      	cmp	r3, r2
 80027d4:	d901      	bls.n	80027da <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 80027d6:	2303      	movs	r3, #3
 80027d8:	e2c4      	b.n	8002d64 <HAL_RCC_OscConfig+0x106c>
 80027da:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027de:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 80027e2:	2202      	movs	r2, #2
 80027e4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027e6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027ea:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	fa93 f2a3 	rbit	r2, r3
 80027f4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027f8:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 80027fc:	601a      	str	r2, [r3, #0]
 80027fe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002802:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8002806:	2202      	movs	r2, #2
 8002808:	601a      	str	r2, [r3, #0]
 800280a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800280e:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	fa93 f2a3 	rbit	r2, r3
 8002818:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800281c:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8002820:	601a      	str	r2, [r3, #0]
  return result;
 8002822:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002826:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 800282a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800282c:	fab3 f383 	clz	r3, r3
 8002830:	b2db      	uxtb	r3, r3
 8002832:	095b      	lsrs	r3, r3, #5
 8002834:	b2db      	uxtb	r3, r3
 8002836:	f043 0302 	orr.w	r3, r3, #2
 800283a:	b2db      	uxtb	r3, r3
 800283c:	2b02      	cmp	r3, #2
 800283e:	d102      	bne.n	8002846 <HAL_RCC_OscConfig+0xb4e>
 8002840:	4b43      	ldr	r3, [pc, #268]	@ (8002950 <HAL_RCC_OscConfig+0xc58>)
 8002842:	6a1b      	ldr	r3, [r3, #32]
 8002844:	e013      	b.n	800286e <HAL_RCC_OscConfig+0xb76>
 8002846:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800284a:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 800284e:	2202      	movs	r2, #2
 8002850:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002852:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002856:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	fa93 f2a3 	rbit	r2, r3
 8002860:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002864:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8002868:	601a      	str	r2, [r3, #0]
 800286a:	4b39      	ldr	r3, [pc, #228]	@ (8002950 <HAL_RCC_OscConfig+0xc58>)
 800286c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800286e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002872:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8002876:	2102      	movs	r1, #2
 8002878:	6011      	str	r1, [r2, #0]
 800287a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800287e:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8002882:	6812      	ldr	r2, [r2, #0]
 8002884:	fa92 f1a2 	rbit	r1, r2
 8002888:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800288c:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8002890:	6011      	str	r1, [r2, #0]
  return result;
 8002892:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002896:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 800289a:	6812      	ldr	r2, [r2, #0]
 800289c:	fab2 f282 	clz	r2, r2
 80028a0:	b2d2      	uxtb	r2, r2
 80028a2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80028a6:	b2d2      	uxtb	r2, r2
 80028a8:	f002 021f 	and.w	r2, r2, #31
 80028ac:	2101      	movs	r1, #1
 80028ae:	fa01 f202 	lsl.w	r2, r1, r2
 80028b2:	4013      	ands	r3, r2
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d184      	bne.n	80027c2 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80028b8:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 80028bc:	2b01      	cmp	r3, #1
 80028be:	d105      	bne.n	80028cc <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028c0:	4b23      	ldr	r3, [pc, #140]	@ (8002950 <HAL_RCC_OscConfig+0xc58>)
 80028c2:	69db      	ldr	r3, [r3, #28]
 80028c4:	4a22      	ldr	r2, [pc, #136]	@ (8002950 <HAL_RCC_OscConfig+0xc58>)
 80028c6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80028ca:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80028cc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028d0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	69db      	ldr	r3, [r3, #28]
 80028d8:	2b00      	cmp	r3, #0
 80028da:	f000 8242 	beq.w	8002d62 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80028de:	4b1c      	ldr	r3, [pc, #112]	@ (8002950 <HAL_RCC_OscConfig+0xc58>)
 80028e0:	685b      	ldr	r3, [r3, #4]
 80028e2:	f003 030c 	and.w	r3, r3, #12
 80028e6:	2b08      	cmp	r3, #8
 80028e8:	f000 8213 	beq.w	8002d12 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80028ec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028f0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	69db      	ldr	r3, [r3, #28]
 80028f8:	2b02      	cmp	r3, #2
 80028fa:	f040 8162 	bne.w	8002bc2 <HAL_RCC_OscConfig+0xeca>
 80028fe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002902:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8002906:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800290a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800290c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002910:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	fa93 f2a3 	rbit	r2, r3
 800291a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800291e:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8002922:	601a      	str	r2, [r3, #0]
  return result;
 8002924:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002928:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 800292c:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800292e:	fab3 f383 	clz	r3, r3
 8002932:	b2db      	uxtb	r3, r3
 8002934:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002938:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800293c:	009b      	lsls	r3, r3, #2
 800293e:	461a      	mov	r2, r3
 8002940:	2300      	movs	r3, #0
 8002942:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002944:	f7fe fe3c 	bl	80015c0 <HAL_GetTick>
 8002948:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800294c:	e00c      	b.n	8002968 <HAL_RCC_OscConfig+0xc70>
 800294e:	bf00      	nop
 8002950:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002954:	f7fe fe34 	bl	80015c0 <HAL_GetTick>
 8002958:	4602      	mov	r2, r0
 800295a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800295e:	1ad3      	subs	r3, r2, r3
 8002960:	2b02      	cmp	r3, #2
 8002962:	d901      	bls.n	8002968 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8002964:	2303      	movs	r3, #3
 8002966:	e1fd      	b.n	8002d64 <HAL_RCC_OscConfig+0x106c>
 8002968:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800296c:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8002970:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002974:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002976:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800297a:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	fa93 f2a3 	rbit	r2, r3
 8002984:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002988:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 800298c:	601a      	str	r2, [r3, #0]
  return result;
 800298e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002992:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8002996:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002998:	fab3 f383 	clz	r3, r3
 800299c:	b2db      	uxtb	r3, r3
 800299e:	095b      	lsrs	r3, r3, #5
 80029a0:	b2db      	uxtb	r3, r3
 80029a2:	f043 0301 	orr.w	r3, r3, #1
 80029a6:	b2db      	uxtb	r3, r3
 80029a8:	2b01      	cmp	r3, #1
 80029aa:	d102      	bne.n	80029b2 <HAL_RCC_OscConfig+0xcba>
 80029ac:	4bb0      	ldr	r3, [pc, #704]	@ (8002c70 <HAL_RCC_OscConfig+0xf78>)
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	e027      	b.n	8002a02 <HAL_RCC_OscConfig+0xd0a>
 80029b2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029b6:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80029ba:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80029be:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029c0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029c4:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	fa93 f2a3 	rbit	r2, r3
 80029ce:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029d2:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 80029d6:	601a      	str	r2, [r3, #0]
 80029d8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029dc:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 80029e0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80029e4:	601a      	str	r2, [r3, #0]
 80029e6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029ea:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	fa93 f2a3 	rbit	r2, r3
 80029f4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029f8:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80029fc:	601a      	str	r2, [r3, #0]
 80029fe:	4b9c      	ldr	r3, [pc, #624]	@ (8002c70 <HAL_RCC_OscConfig+0xf78>)
 8002a00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a02:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002a06:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8002a0a:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002a0e:	6011      	str	r1, [r2, #0]
 8002a10:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002a14:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8002a18:	6812      	ldr	r2, [r2, #0]
 8002a1a:	fa92 f1a2 	rbit	r1, r2
 8002a1e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002a22:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8002a26:	6011      	str	r1, [r2, #0]
  return result;
 8002a28:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002a2c:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8002a30:	6812      	ldr	r2, [r2, #0]
 8002a32:	fab2 f282 	clz	r2, r2
 8002a36:	b2d2      	uxtb	r2, r2
 8002a38:	f042 0220 	orr.w	r2, r2, #32
 8002a3c:	b2d2      	uxtb	r2, r2
 8002a3e:	f002 021f 	and.w	r2, r2, #31
 8002a42:	2101      	movs	r1, #1
 8002a44:	fa01 f202 	lsl.w	r2, r1, r2
 8002a48:	4013      	ands	r3, r2
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d182      	bne.n	8002954 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002a4e:	4b88      	ldr	r3, [pc, #544]	@ (8002c70 <HAL_RCC_OscConfig+0xf78>)
 8002a50:	685b      	ldr	r3, [r3, #4]
 8002a52:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002a56:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a5a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8002a62:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a66:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	6a1b      	ldr	r3, [r3, #32]
 8002a6e:	430b      	orrs	r3, r1
 8002a70:	497f      	ldr	r1, [pc, #508]	@ (8002c70 <HAL_RCC_OscConfig+0xf78>)
 8002a72:	4313      	orrs	r3, r2
 8002a74:	604b      	str	r3, [r1, #4]
 8002a76:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a7a:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8002a7e:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002a82:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a84:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a88:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	fa93 f2a3 	rbit	r2, r3
 8002a92:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a96:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8002a9a:	601a      	str	r2, [r3, #0]
  return result;
 8002a9c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002aa0:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8002aa4:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002aa6:	fab3 f383 	clz	r3, r3
 8002aaa:	b2db      	uxtb	r3, r3
 8002aac:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002ab0:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002ab4:	009b      	lsls	r3, r3, #2
 8002ab6:	461a      	mov	r2, r3
 8002ab8:	2301      	movs	r3, #1
 8002aba:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002abc:	f7fe fd80 	bl	80015c0 <HAL_GetTick>
 8002ac0:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002ac4:	e009      	b.n	8002ada <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ac6:	f7fe fd7b 	bl	80015c0 <HAL_GetTick>
 8002aca:	4602      	mov	r2, r0
 8002acc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002ad0:	1ad3      	subs	r3, r2, r3
 8002ad2:	2b02      	cmp	r3, #2
 8002ad4:	d901      	bls.n	8002ada <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8002ad6:	2303      	movs	r3, #3
 8002ad8:	e144      	b.n	8002d64 <HAL_RCC_OscConfig+0x106c>
 8002ada:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ade:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8002ae2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002ae6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ae8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002aec:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	fa93 f2a3 	rbit	r2, r3
 8002af6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002afa:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8002afe:	601a      	str	r2, [r3, #0]
  return result;
 8002b00:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b04:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8002b08:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002b0a:	fab3 f383 	clz	r3, r3
 8002b0e:	b2db      	uxtb	r3, r3
 8002b10:	095b      	lsrs	r3, r3, #5
 8002b12:	b2db      	uxtb	r3, r3
 8002b14:	f043 0301 	orr.w	r3, r3, #1
 8002b18:	b2db      	uxtb	r3, r3
 8002b1a:	2b01      	cmp	r3, #1
 8002b1c:	d102      	bne.n	8002b24 <HAL_RCC_OscConfig+0xe2c>
 8002b1e:	4b54      	ldr	r3, [pc, #336]	@ (8002c70 <HAL_RCC_OscConfig+0xf78>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	e027      	b.n	8002b74 <HAL_RCC_OscConfig+0xe7c>
 8002b24:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b28:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8002b2c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002b30:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b32:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b36:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	fa93 f2a3 	rbit	r2, r3
 8002b40:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b44:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002b48:	601a      	str	r2, [r3, #0]
 8002b4a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b4e:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8002b52:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002b56:	601a      	str	r2, [r3, #0]
 8002b58:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b5c:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	fa93 f2a3 	rbit	r2, r3
 8002b66:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b6a:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8002b6e:	601a      	str	r2, [r3, #0]
 8002b70:	4b3f      	ldr	r3, [pc, #252]	@ (8002c70 <HAL_RCC_OscConfig+0xf78>)
 8002b72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b74:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002b78:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8002b7c:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002b80:	6011      	str	r1, [r2, #0]
 8002b82:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002b86:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8002b8a:	6812      	ldr	r2, [r2, #0]
 8002b8c:	fa92 f1a2 	rbit	r1, r2
 8002b90:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002b94:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8002b98:	6011      	str	r1, [r2, #0]
  return result;
 8002b9a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002b9e:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8002ba2:	6812      	ldr	r2, [r2, #0]
 8002ba4:	fab2 f282 	clz	r2, r2
 8002ba8:	b2d2      	uxtb	r2, r2
 8002baa:	f042 0220 	orr.w	r2, r2, #32
 8002bae:	b2d2      	uxtb	r2, r2
 8002bb0:	f002 021f 	and.w	r2, r2, #31
 8002bb4:	2101      	movs	r1, #1
 8002bb6:	fa01 f202 	lsl.w	r2, r1, r2
 8002bba:	4013      	ands	r3, r2
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d082      	beq.n	8002ac6 <HAL_RCC_OscConfig+0xdce>
 8002bc0:	e0cf      	b.n	8002d62 <HAL_RCC_OscConfig+0x106a>
 8002bc2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002bc6:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8002bca:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002bce:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bd0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002bd4:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	fa93 f2a3 	rbit	r2, r3
 8002bde:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002be2:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8002be6:	601a      	str	r2, [r3, #0]
  return result;
 8002be8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002bec:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8002bf0:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bf2:	fab3 f383 	clz	r3, r3
 8002bf6:	b2db      	uxtb	r3, r3
 8002bf8:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002bfc:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002c00:	009b      	lsls	r3, r3, #2
 8002c02:	461a      	mov	r2, r3
 8002c04:	2300      	movs	r3, #0
 8002c06:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c08:	f7fe fcda 	bl	80015c0 <HAL_GetTick>
 8002c0c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c10:	e009      	b.n	8002c26 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c12:	f7fe fcd5 	bl	80015c0 <HAL_GetTick>
 8002c16:	4602      	mov	r2, r0
 8002c18:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002c1c:	1ad3      	subs	r3, r2, r3
 8002c1e:	2b02      	cmp	r3, #2
 8002c20:	d901      	bls.n	8002c26 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8002c22:	2303      	movs	r3, #3
 8002c24:	e09e      	b.n	8002d64 <HAL_RCC_OscConfig+0x106c>
 8002c26:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c2a:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8002c2e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002c32:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c34:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c38:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	fa93 f2a3 	rbit	r2, r3
 8002c42:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c46:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8002c4a:	601a      	str	r2, [r3, #0]
  return result;
 8002c4c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c50:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8002c54:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c56:	fab3 f383 	clz	r3, r3
 8002c5a:	b2db      	uxtb	r3, r3
 8002c5c:	095b      	lsrs	r3, r3, #5
 8002c5e:	b2db      	uxtb	r3, r3
 8002c60:	f043 0301 	orr.w	r3, r3, #1
 8002c64:	b2db      	uxtb	r3, r3
 8002c66:	2b01      	cmp	r3, #1
 8002c68:	d104      	bne.n	8002c74 <HAL_RCC_OscConfig+0xf7c>
 8002c6a:	4b01      	ldr	r3, [pc, #4]	@ (8002c70 <HAL_RCC_OscConfig+0xf78>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	e029      	b.n	8002cc4 <HAL_RCC_OscConfig+0xfcc>
 8002c70:	40021000 	.word	0x40021000
 8002c74:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c78:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8002c7c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002c80:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c82:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c86:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	fa93 f2a3 	rbit	r2, r3
 8002c90:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c94:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8002c98:	601a      	str	r2, [r3, #0]
 8002c9a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c9e:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8002ca2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002ca6:	601a      	str	r2, [r3, #0]
 8002ca8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002cac:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	fa93 f2a3 	rbit	r2, r3
 8002cb6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002cba:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8002cbe:	601a      	str	r2, [r3, #0]
 8002cc0:	4b2b      	ldr	r3, [pc, #172]	@ (8002d70 <HAL_RCC_OscConfig+0x1078>)
 8002cc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cc4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002cc8:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8002ccc:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002cd0:	6011      	str	r1, [r2, #0]
 8002cd2:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002cd6:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8002cda:	6812      	ldr	r2, [r2, #0]
 8002cdc:	fa92 f1a2 	rbit	r1, r2
 8002ce0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002ce4:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8002ce8:	6011      	str	r1, [r2, #0]
  return result;
 8002cea:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002cee:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8002cf2:	6812      	ldr	r2, [r2, #0]
 8002cf4:	fab2 f282 	clz	r2, r2
 8002cf8:	b2d2      	uxtb	r2, r2
 8002cfa:	f042 0220 	orr.w	r2, r2, #32
 8002cfe:	b2d2      	uxtb	r2, r2
 8002d00:	f002 021f 	and.w	r2, r2, #31
 8002d04:	2101      	movs	r1, #1
 8002d06:	fa01 f202 	lsl.w	r2, r1, r2
 8002d0a:	4013      	ands	r3, r2
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d180      	bne.n	8002c12 <HAL_RCC_OscConfig+0xf1a>
 8002d10:	e027      	b.n	8002d62 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002d12:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d16:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	69db      	ldr	r3, [r3, #28]
 8002d1e:	2b01      	cmp	r3, #1
 8002d20:	d101      	bne.n	8002d26 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8002d22:	2301      	movs	r3, #1
 8002d24:	e01e      	b.n	8002d64 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002d26:	4b12      	ldr	r3, [pc, #72]	@ (8002d70 <HAL_RCC_OscConfig+0x1078>)
 8002d28:	685b      	ldr	r3, [r3, #4]
 8002d2a:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002d2e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8002d32:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002d36:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d3a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	6a1b      	ldr	r3, [r3, #32]
 8002d42:	429a      	cmp	r2, r3
 8002d44:	d10b      	bne.n	8002d5e <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8002d46:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8002d4a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002d4e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d52:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002d5a:	429a      	cmp	r2, r3
 8002d5c:	d001      	beq.n	8002d62 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8002d5e:	2301      	movs	r3, #1
 8002d60:	e000      	b.n	8002d64 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8002d62:	2300      	movs	r3, #0
}
 8002d64:	4618      	mov	r0, r3
 8002d66:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	bd80      	pop	{r7, pc}
 8002d6e:	bf00      	nop
 8002d70:	40021000 	.word	0x40021000

08002d74 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b09e      	sub	sp, #120	@ 0x78
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
 8002d7c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002d7e:	2300      	movs	r3, #0
 8002d80:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d101      	bne.n	8002d8c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002d88:	2301      	movs	r3, #1
 8002d8a:	e162      	b.n	8003052 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002d8c:	4b90      	ldr	r3, [pc, #576]	@ (8002fd0 <HAL_RCC_ClockConfig+0x25c>)
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f003 0307 	and.w	r3, r3, #7
 8002d94:	683a      	ldr	r2, [r7, #0]
 8002d96:	429a      	cmp	r2, r3
 8002d98:	d910      	bls.n	8002dbc <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d9a:	4b8d      	ldr	r3, [pc, #564]	@ (8002fd0 <HAL_RCC_ClockConfig+0x25c>)
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f023 0207 	bic.w	r2, r3, #7
 8002da2:	498b      	ldr	r1, [pc, #556]	@ (8002fd0 <HAL_RCC_ClockConfig+0x25c>)
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	4313      	orrs	r3, r2
 8002da8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002daa:	4b89      	ldr	r3, [pc, #548]	@ (8002fd0 <HAL_RCC_ClockConfig+0x25c>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f003 0307 	and.w	r3, r3, #7
 8002db2:	683a      	ldr	r2, [r7, #0]
 8002db4:	429a      	cmp	r2, r3
 8002db6:	d001      	beq.n	8002dbc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002db8:	2301      	movs	r3, #1
 8002dba:	e14a      	b.n	8003052 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f003 0302 	and.w	r3, r3, #2
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d008      	beq.n	8002dda <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002dc8:	4b82      	ldr	r3, [pc, #520]	@ (8002fd4 <HAL_RCC_ClockConfig+0x260>)
 8002dca:	685b      	ldr	r3, [r3, #4]
 8002dcc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	689b      	ldr	r3, [r3, #8]
 8002dd4:	497f      	ldr	r1, [pc, #508]	@ (8002fd4 <HAL_RCC_ClockConfig+0x260>)
 8002dd6:	4313      	orrs	r3, r2
 8002dd8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f003 0301 	and.w	r3, r3, #1
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	f000 80dc 	beq.w	8002fa0 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	685b      	ldr	r3, [r3, #4]
 8002dec:	2b01      	cmp	r3, #1
 8002dee:	d13c      	bne.n	8002e6a <HAL_RCC_ClockConfig+0xf6>
 8002df0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002df4:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002df6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002df8:	fa93 f3a3 	rbit	r3, r3
 8002dfc:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8002dfe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e00:	fab3 f383 	clz	r3, r3
 8002e04:	b2db      	uxtb	r3, r3
 8002e06:	095b      	lsrs	r3, r3, #5
 8002e08:	b2db      	uxtb	r3, r3
 8002e0a:	f043 0301 	orr.w	r3, r3, #1
 8002e0e:	b2db      	uxtb	r3, r3
 8002e10:	2b01      	cmp	r3, #1
 8002e12:	d102      	bne.n	8002e1a <HAL_RCC_ClockConfig+0xa6>
 8002e14:	4b6f      	ldr	r3, [pc, #444]	@ (8002fd4 <HAL_RCC_ClockConfig+0x260>)
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	e00f      	b.n	8002e3a <HAL_RCC_ClockConfig+0xc6>
 8002e1a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002e1e:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e20:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002e22:	fa93 f3a3 	rbit	r3, r3
 8002e26:	667b      	str	r3, [r7, #100]	@ 0x64
 8002e28:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002e2c:	663b      	str	r3, [r7, #96]	@ 0x60
 8002e2e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002e30:	fa93 f3a3 	rbit	r3, r3
 8002e34:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002e36:	4b67      	ldr	r3, [pc, #412]	@ (8002fd4 <HAL_RCC_ClockConfig+0x260>)
 8002e38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e3a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002e3e:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002e40:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002e42:	fa92 f2a2 	rbit	r2, r2
 8002e46:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8002e48:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8002e4a:	fab2 f282 	clz	r2, r2
 8002e4e:	b2d2      	uxtb	r2, r2
 8002e50:	f042 0220 	orr.w	r2, r2, #32
 8002e54:	b2d2      	uxtb	r2, r2
 8002e56:	f002 021f 	and.w	r2, r2, #31
 8002e5a:	2101      	movs	r1, #1
 8002e5c:	fa01 f202 	lsl.w	r2, r1, r2
 8002e60:	4013      	ands	r3, r2
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d17b      	bne.n	8002f5e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002e66:	2301      	movs	r3, #1
 8002e68:	e0f3      	b.n	8003052 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	685b      	ldr	r3, [r3, #4]
 8002e6e:	2b02      	cmp	r3, #2
 8002e70:	d13c      	bne.n	8002eec <HAL_RCC_ClockConfig+0x178>
 8002e72:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002e76:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e78:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002e7a:	fa93 f3a3 	rbit	r3, r3
 8002e7e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8002e80:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e82:	fab3 f383 	clz	r3, r3
 8002e86:	b2db      	uxtb	r3, r3
 8002e88:	095b      	lsrs	r3, r3, #5
 8002e8a:	b2db      	uxtb	r3, r3
 8002e8c:	f043 0301 	orr.w	r3, r3, #1
 8002e90:	b2db      	uxtb	r3, r3
 8002e92:	2b01      	cmp	r3, #1
 8002e94:	d102      	bne.n	8002e9c <HAL_RCC_ClockConfig+0x128>
 8002e96:	4b4f      	ldr	r3, [pc, #316]	@ (8002fd4 <HAL_RCC_ClockConfig+0x260>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	e00f      	b.n	8002ebc <HAL_RCC_ClockConfig+0x148>
 8002e9c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002ea0:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ea2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002ea4:	fa93 f3a3 	rbit	r3, r3
 8002ea8:	647b      	str	r3, [r7, #68]	@ 0x44
 8002eaa:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002eae:	643b      	str	r3, [r7, #64]	@ 0x40
 8002eb0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002eb2:	fa93 f3a3 	rbit	r3, r3
 8002eb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002eb8:	4b46      	ldr	r3, [pc, #280]	@ (8002fd4 <HAL_RCC_ClockConfig+0x260>)
 8002eba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ebc:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002ec0:	63ba      	str	r2, [r7, #56]	@ 0x38
 8002ec2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002ec4:	fa92 f2a2 	rbit	r2, r2
 8002ec8:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8002eca:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002ecc:	fab2 f282 	clz	r2, r2
 8002ed0:	b2d2      	uxtb	r2, r2
 8002ed2:	f042 0220 	orr.w	r2, r2, #32
 8002ed6:	b2d2      	uxtb	r2, r2
 8002ed8:	f002 021f 	and.w	r2, r2, #31
 8002edc:	2101      	movs	r1, #1
 8002ede:	fa01 f202 	lsl.w	r2, r1, r2
 8002ee2:	4013      	ands	r3, r2
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d13a      	bne.n	8002f5e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002ee8:	2301      	movs	r3, #1
 8002eea:	e0b2      	b.n	8003052 <HAL_RCC_ClockConfig+0x2de>
 8002eec:	2302      	movs	r3, #2
 8002eee:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ef0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ef2:	fa93 f3a3 	rbit	r3, r3
 8002ef6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8002ef8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002efa:	fab3 f383 	clz	r3, r3
 8002efe:	b2db      	uxtb	r3, r3
 8002f00:	095b      	lsrs	r3, r3, #5
 8002f02:	b2db      	uxtb	r3, r3
 8002f04:	f043 0301 	orr.w	r3, r3, #1
 8002f08:	b2db      	uxtb	r3, r3
 8002f0a:	2b01      	cmp	r3, #1
 8002f0c:	d102      	bne.n	8002f14 <HAL_RCC_ClockConfig+0x1a0>
 8002f0e:	4b31      	ldr	r3, [pc, #196]	@ (8002fd4 <HAL_RCC_ClockConfig+0x260>)
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	e00d      	b.n	8002f30 <HAL_RCC_ClockConfig+0x1bc>
 8002f14:	2302      	movs	r3, #2
 8002f16:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f1a:	fa93 f3a3 	rbit	r3, r3
 8002f1e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002f20:	2302      	movs	r3, #2
 8002f22:	623b      	str	r3, [r7, #32]
 8002f24:	6a3b      	ldr	r3, [r7, #32]
 8002f26:	fa93 f3a3 	rbit	r3, r3
 8002f2a:	61fb      	str	r3, [r7, #28]
 8002f2c:	4b29      	ldr	r3, [pc, #164]	@ (8002fd4 <HAL_RCC_ClockConfig+0x260>)
 8002f2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f30:	2202      	movs	r2, #2
 8002f32:	61ba      	str	r2, [r7, #24]
 8002f34:	69ba      	ldr	r2, [r7, #24]
 8002f36:	fa92 f2a2 	rbit	r2, r2
 8002f3a:	617a      	str	r2, [r7, #20]
  return result;
 8002f3c:	697a      	ldr	r2, [r7, #20]
 8002f3e:	fab2 f282 	clz	r2, r2
 8002f42:	b2d2      	uxtb	r2, r2
 8002f44:	f042 0220 	orr.w	r2, r2, #32
 8002f48:	b2d2      	uxtb	r2, r2
 8002f4a:	f002 021f 	and.w	r2, r2, #31
 8002f4e:	2101      	movs	r1, #1
 8002f50:	fa01 f202 	lsl.w	r2, r1, r2
 8002f54:	4013      	ands	r3, r2
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d101      	bne.n	8002f5e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002f5a:	2301      	movs	r3, #1
 8002f5c:	e079      	b.n	8003052 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002f5e:	4b1d      	ldr	r3, [pc, #116]	@ (8002fd4 <HAL_RCC_ClockConfig+0x260>)
 8002f60:	685b      	ldr	r3, [r3, #4]
 8002f62:	f023 0203 	bic.w	r2, r3, #3
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	685b      	ldr	r3, [r3, #4]
 8002f6a:	491a      	ldr	r1, [pc, #104]	@ (8002fd4 <HAL_RCC_ClockConfig+0x260>)
 8002f6c:	4313      	orrs	r3, r2
 8002f6e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002f70:	f7fe fb26 	bl	80015c0 <HAL_GetTick>
 8002f74:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f76:	e00a      	b.n	8002f8e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f78:	f7fe fb22 	bl	80015c0 <HAL_GetTick>
 8002f7c:	4602      	mov	r2, r0
 8002f7e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002f80:	1ad3      	subs	r3, r2, r3
 8002f82:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f86:	4293      	cmp	r3, r2
 8002f88:	d901      	bls.n	8002f8e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002f8a:	2303      	movs	r3, #3
 8002f8c:	e061      	b.n	8003052 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f8e:	4b11      	ldr	r3, [pc, #68]	@ (8002fd4 <HAL_RCC_ClockConfig+0x260>)
 8002f90:	685b      	ldr	r3, [r3, #4]
 8002f92:	f003 020c 	and.w	r2, r3, #12
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	685b      	ldr	r3, [r3, #4]
 8002f9a:	009b      	lsls	r3, r3, #2
 8002f9c:	429a      	cmp	r2, r3
 8002f9e:	d1eb      	bne.n	8002f78 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002fa0:	4b0b      	ldr	r3, [pc, #44]	@ (8002fd0 <HAL_RCC_ClockConfig+0x25c>)
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f003 0307 	and.w	r3, r3, #7
 8002fa8:	683a      	ldr	r2, [r7, #0]
 8002faa:	429a      	cmp	r2, r3
 8002fac:	d214      	bcs.n	8002fd8 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fae:	4b08      	ldr	r3, [pc, #32]	@ (8002fd0 <HAL_RCC_ClockConfig+0x25c>)
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f023 0207 	bic.w	r2, r3, #7
 8002fb6:	4906      	ldr	r1, [pc, #24]	@ (8002fd0 <HAL_RCC_ClockConfig+0x25c>)
 8002fb8:	683b      	ldr	r3, [r7, #0]
 8002fba:	4313      	orrs	r3, r2
 8002fbc:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fbe:	4b04      	ldr	r3, [pc, #16]	@ (8002fd0 <HAL_RCC_ClockConfig+0x25c>)
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f003 0307 	and.w	r3, r3, #7
 8002fc6:	683a      	ldr	r2, [r7, #0]
 8002fc8:	429a      	cmp	r2, r3
 8002fca:	d005      	beq.n	8002fd8 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002fcc:	2301      	movs	r3, #1
 8002fce:	e040      	b.n	8003052 <HAL_RCC_ClockConfig+0x2de>
 8002fd0:	40022000 	.word	0x40022000
 8002fd4:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f003 0304 	and.w	r3, r3, #4
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d008      	beq.n	8002ff6 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002fe4:	4b1d      	ldr	r3, [pc, #116]	@ (800305c <HAL_RCC_ClockConfig+0x2e8>)
 8002fe6:	685b      	ldr	r3, [r3, #4]
 8002fe8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	68db      	ldr	r3, [r3, #12]
 8002ff0:	491a      	ldr	r1, [pc, #104]	@ (800305c <HAL_RCC_ClockConfig+0x2e8>)
 8002ff2:	4313      	orrs	r3, r2
 8002ff4:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f003 0308 	and.w	r3, r3, #8
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d009      	beq.n	8003016 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003002:	4b16      	ldr	r3, [pc, #88]	@ (800305c <HAL_RCC_ClockConfig+0x2e8>)
 8003004:	685b      	ldr	r3, [r3, #4]
 8003006:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	691b      	ldr	r3, [r3, #16]
 800300e:	00db      	lsls	r3, r3, #3
 8003010:	4912      	ldr	r1, [pc, #72]	@ (800305c <HAL_RCC_ClockConfig+0x2e8>)
 8003012:	4313      	orrs	r3, r2
 8003014:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003016:	f000 f829 	bl	800306c <HAL_RCC_GetSysClockFreq>
 800301a:	4601      	mov	r1, r0
 800301c:	4b0f      	ldr	r3, [pc, #60]	@ (800305c <HAL_RCC_ClockConfig+0x2e8>)
 800301e:	685b      	ldr	r3, [r3, #4]
 8003020:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003024:	22f0      	movs	r2, #240	@ 0xf0
 8003026:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003028:	693a      	ldr	r2, [r7, #16]
 800302a:	fa92 f2a2 	rbit	r2, r2
 800302e:	60fa      	str	r2, [r7, #12]
  return result;
 8003030:	68fa      	ldr	r2, [r7, #12]
 8003032:	fab2 f282 	clz	r2, r2
 8003036:	b2d2      	uxtb	r2, r2
 8003038:	40d3      	lsrs	r3, r2
 800303a:	4a09      	ldr	r2, [pc, #36]	@ (8003060 <HAL_RCC_ClockConfig+0x2ec>)
 800303c:	5cd3      	ldrb	r3, [r2, r3]
 800303e:	fa21 f303 	lsr.w	r3, r1, r3
 8003042:	4a08      	ldr	r2, [pc, #32]	@ (8003064 <HAL_RCC_ClockConfig+0x2f0>)
 8003044:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003046:	4b08      	ldr	r3, [pc, #32]	@ (8003068 <HAL_RCC_ClockConfig+0x2f4>)
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	4618      	mov	r0, r3
 800304c:	f7fe fa74 	bl	8001538 <HAL_InitTick>
  
  return HAL_OK;
 8003050:	2300      	movs	r3, #0
}
 8003052:	4618      	mov	r0, r3
 8003054:	3778      	adds	r7, #120	@ 0x78
 8003056:	46bd      	mov	sp, r7
 8003058:	bd80      	pop	{r7, pc}
 800305a:	bf00      	nop
 800305c:	40021000 	.word	0x40021000
 8003060:	08004dfc 	.word	0x08004dfc
 8003064:	20000000 	.word	0x20000000
 8003068:	20000004 	.word	0x20000004

0800306c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800306c:	b480      	push	{r7}
 800306e:	b087      	sub	sp, #28
 8003070:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003072:	2300      	movs	r3, #0
 8003074:	60fb      	str	r3, [r7, #12]
 8003076:	2300      	movs	r3, #0
 8003078:	60bb      	str	r3, [r7, #8]
 800307a:	2300      	movs	r3, #0
 800307c:	617b      	str	r3, [r7, #20]
 800307e:	2300      	movs	r3, #0
 8003080:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003082:	2300      	movs	r3, #0
 8003084:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8003086:	4b1e      	ldr	r3, [pc, #120]	@ (8003100 <HAL_RCC_GetSysClockFreq+0x94>)
 8003088:	685b      	ldr	r3, [r3, #4]
 800308a:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	f003 030c 	and.w	r3, r3, #12
 8003092:	2b04      	cmp	r3, #4
 8003094:	d002      	beq.n	800309c <HAL_RCC_GetSysClockFreq+0x30>
 8003096:	2b08      	cmp	r3, #8
 8003098:	d003      	beq.n	80030a2 <HAL_RCC_GetSysClockFreq+0x36>
 800309a:	e026      	b.n	80030ea <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800309c:	4b19      	ldr	r3, [pc, #100]	@ (8003104 <HAL_RCC_GetSysClockFreq+0x98>)
 800309e:	613b      	str	r3, [r7, #16]
      break;
 80030a0:	e026      	b.n	80030f0 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	0c9b      	lsrs	r3, r3, #18
 80030a6:	f003 030f 	and.w	r3, r3, #15
 80030aa:	4a17      	ldr	r2, [pc, #92]	@ (8003108 <HAL_RCC_GetSysClockFreq+0x9c>)
 80030ac:	5cd3      	ldrb	r3, [r2, r3]
 80030ae:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 80030b0:	4b13      	ldr	r3, [pc, #76]	@ (8003100 <HAL_RCC_GetSysClockFreq+0x94>)
 80030b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030b4:	f003 030f 	and.w	r3, r3, #15
 80030b8:	4a14      	ldr	r2, [pc, #80]	@ (800310c <HAL_RCC_GetSysClockFreq+0xa0>)
 80030ba:	5cd3      	ldrb	r3, [r2, r3]
 80030bc:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d008      	beq.n	80030da <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80030c8:	4a0e      	ldr	r2, [pc, #56]	@ (8003104 <HAL_RCC_GetSysClockFreq+0x98>)
 80030ca:	68bb      	ldr	r3, [r7, #8]
 80030cc:	fbb2 f2f3 	udiv	r2, r2, r3
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	fb02 f303 	mul.w	r3, r2, r3
 80030d6:	617b      	str	r3, [r7, #20]
 80030d8:	e004      	b.n	80030e4 <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	4a0c      	ldr	r2, [pc, #48]	@ (8003110 <HAL_RCC_GetSysClockFreq+0xa4>)
 80030de:	fb02 f303 	mul.w	r3, r2, r3
 80030e2:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80030e4:	697b      	ldr	r3, [r7, #20]
 80030e6:	613b      	str	r3, [r7, #16]
      break;
 80030e8:	e002      	b.n	80030f0 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80030ea:	4b06      	ldr	r3, [pc, #24]	@ (8003104 <HAL_RCC_GetSysClockFreq+0x98>)
 80030ec:	613b      	str	r3, [r7, #16]
      break;
 80030ee:	bf00      	nop
    }
  }
  return sysclockfreq;
 80030f0:	693b      	ldr	r3, [r7, #16]
}
 80030f2:	4618      	mov	r0, r3
 80030f4:	371c      	adds	r7, #28
 80030f6:	46bd      	mov	sp, r7
 80030f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fc:	4770      	bx	lr
 80030fe:	bf00      	nop
 8003100:	40021000 	.word	0x40021000
 8003104:	007a1200 	.word	0x007a1200
 8003108:	08004e14 	.word	0x08004e14
 800310c:	08004e24 	.word	0x08004e24
 8003110:	003d0900 	.word	0x003d0900

08003114 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003114:	b480      	push	{r7}
 8003116:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003118:	4b03      	ldr	r3, [pc, #12]	@ (8003128 <HAL_RCC_GetHCLKFreq+0x14>)
 800311a:	681b      	ldr	r3, [r3, #0]
}
 800311c:	4618      	mov	r0, r3
 800311e:	46bd      	mov	sp, r7
 8003120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003124:	4770      	bx	lr
 8003126:	bf00      	nop
 8003128:	20000000 	.word	0x20000000

0800312c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	b082      	sub	sp, #8
 8003130:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8003132:	f7ff ffef 	bl	8003114 <HAL_RCC_GetHCLKFreq>
 8003136:	4601      	mov	r1, r0
 8003138:	4b0b      	ldr	r3, [pc, #44]	@ (8003168 <HAL_RCC_GetPCLK1Freq+0x3c>)
 800313a:	685b      	ldr	r3, [r3, #4]
 800313c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003140:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8003144:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003146:	687a      	ldr	r2, [r7, #4]
 8003148:	fa92 f2a2 	rbit	r2, r2
 800314c:	603a      	str	r2, [r7, #0]
  return result;
 800314e:	683a      	ldr	r2, [r7, #0]
 8003150:	fab2 f282 	clz	r2, r2
 8003154:	b2d2      	uxtb	r2, r2
 8003156:	40d3      	lsrs	r3, r2
 8003158:	4a04      	ldr	r2, [pc, #16]	@ (800316c <HAL_RCC_GetPCLK1Freq+0x40>)
 800315a:	5cd3      	ldrb	r3, [r2, r3]
 800315c:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8003160:	4618      	mov	r0, r3
 8003162:	3708      	adds	r7, #8
 8003164:	46bd      	mov	sp, r7
 8003166:	bd80      	pop	{r7, pc}
 8003168:	40021000 	.word	0x40021000
 800316c:	08004e0c 	.word	0x08004e0c

08003170 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	b082      	sub	sp, #8
 8003174:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8003176:	f7ff ffcd 	bl	8003114 <HAL_RCC_GetHCLKFreq>
 800317a:	4601      	mov	r1, r0
 800317c:	4b0b      	ldr	r3, [pc, #44]	@ (80031ac <HAL_RCC_GetPCLK2Freq+0x3c>)
 800317e:	685b      	ldr	r3, [r3, #4]
 8003180:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 8003184:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 8003188:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800318a:	687a      	ldr	r2, [r7, #4]
 800318c:	fa92 f2a2 	rbit	r2, r2
 8003190:	603a      	str	r2, [r7, #0]
  return result;
 8003192:	683a      	ldr	r2, [r7, #0]
 8003194:	fab2 f282 	clz	r2, r2
 8003198:	b2d2      	uxtb	r2, r2
 800319a:	40d3      	lsrs	r3, r2
 800319c:	4a04      	ldr	r2, [pc, #16]	@ (80031b0 <HAL_RCC_GetPCLK2Freq+0x40>)
 800319e:	5cd3      	ldrb	r3, [r2, r3]
 80031a0:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80031a4:	4618      	mov	r0, r3
 80031a6:	3708      	adds	r7, #8
 80031a8:	46bd      	mov	sp, r7
 80031aa:	bd80      	pop	{r7, pc}
 80031ac:	40021000 	.word	0x40021000
 80031b0:	08004e0c 	.word	0x08004e0c

080031b4 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	b092      	sub	sp, #72	@ 0x48
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80031bc:	2300      	movs	r3, #0
 80031be:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 80031c0:	2300      	movs	r3, #0
 80031c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80031c4:	2300      	movs	r3, #0
 80031c6:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	f000 80cd 	beq.w	8003372 <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80031d8:	4b86      	ldr	r3, [pc, #536]	@ (80033f4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80031da:	69db      	ldr	r3, [r3, #28]
 80031dc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d10e      	bne.n	8003202 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80031e4:	4b83      	ldr	r3, [pc, #524]	@ (80033f4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80031e6:	69db      	ldr	r3, [r3, #28]
 80031e8:	4a82      	ldr	r2, [pc, #520]	@ (80033f4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80031ea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80031ee:	61d3      	str	r3, [r2, #28]
 80031f0:	4b80      	ldr	r3, [pc, #512]	@ (80033f4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80031f2:	69db      	ldr	r3, [r3, #28]
 80031f4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80031f8:	60bb      	str	r3, [r7, #8]
 80031fa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80031fc:	2301      	movs	r3, #1
 80031fe:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003202:	4b7d      	ldr	r3, [pc, #500]	@ (80033f8 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800320a:	2b00      	cmp	r3, #0
 800320c:	d118      	bne.n	8003240 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800320e:	4b7a      	ldr	r3, [pc, #488]	@ (80033f8 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	4a79      	ldr	r2, [pc, #484]	@ (80033f8 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003214:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003218:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800321a:	f7fe f9d1 	bl	80015c0 <HAL_GetTick>
 800321e:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003220:	e008      	b.n	8003234 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003222:	f7fe f9cd 	bl	80015c0 <HAL_GetTick>
 8003226:	4602      	mov	r2, r0
 8003228:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800322a:	1ad3      	subs	r3, r2, r3
 800322c:	2b64      	cmp	r3, #100	@ 0x64
 800322e:	d901      	bls.n	8003234 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003230:	2303      	movs	r3, #3
 8003232:	e0db      	b.n	80033ec <HAL_RCCEx_PeriphCLKConfig+0x238>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003234:	4b70      	ldr	r3, [pc, #448]	@ (80033f8 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800323c:	2b00      	cmp	r3, #0
 800323e:	d0f0      	beq.n	8003222 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003240:	4b6c      	ldr	r3, [pc, #432]	@ (80033f4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003242:	6a1b      	ldr	r3, [r3, #32]
 8003244:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003248:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800324a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800324c:	2b00      	cmp	r3, #0
 800324e:	d07d      	beq.n	800334c <HAL_RCCEx_PeriphCLKConfig+0x198>
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	685b      	ldr	r3, [r3, #4]
 8003254:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003258:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800325a:	429a      	cmp	r2, r3
 800325c:	d076      	beq.n	800334c <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800325e:	4b65      	ldr	r3, [pc, #404]	@ (80033f4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003260:	6a1b      	ldr	r3, [r3, #32]
 8003262:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003266:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003268:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800326c:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800326e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003270:	fa93 f3a3 	rbit	r3, r3
 8003274:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8003276:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003278:	fab3 f383 	clz	r3, r3
 800327c:	b2db      	uxtb	r3, r3
 800327e:	461a      	mov	r2, r3
 8003280:	4b5e      	ldr	r3, [pc, #376]	@ (80033fc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003282:	4413      	add	r3, r2
 8003284:	009b      	lsls	r3, r3, #2
 8003286:	461a      	mov	r2, r3
 8003288:	2301      	movs	r3, #1
 800328a:	6013      	str	r3, [r2, #0]
 800328c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003290:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003292:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003294:	fa93 f3a3 	rbit	r3, r3
 8003298:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 800329a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800329c:	fab3 f383 	clz	r3, r3
 80032a0:	b2db      	uxtb	r3, r3
 80032a2:	461a      	mov	r2, r3
 80032a4:	4b55      	ldr	r3, [pc, #340]	@ (80033fc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80032a6:	4413      	add	r3, r2
 80032a8:	009b      	lsls	r3, r3, #2
 80032aa:	461a      	mov	r2, r3
 80032ac:	2300      	movs	r3, #0
 80032ae:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80032b0:	4a50      	ldr	r2, [pc, #320]	@ (80033f4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80032b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80032b4:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80032b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80032b8:	f003 0301 	and.w	r3, r3, #1
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d045      	beq.n	800334c <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032c0:	f7fe f97e 	bl	80015c0 <HAL_GetTick>
 80032c4:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032c6:	e00a      	b.n	80032de <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032c8:	f7fe f97a 	bl	80015c0 <HAL_GetTick>
 80032cc:	4602      	mov	r2, r0
 80032ce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80032d0:	1ad3      	subs	r3, r2, r3
 80032d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d901      	bls.n	80032de <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 80032da:	2303      	movs	r3, #3
 80032dc:	e086      	b.n	80033ec <HAL_RCCEx_PeriphCLKConfig+0x238>
 80032de:	2302      	movs	r3, #2
 80032e0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032e4:	fa93 f3a3 	rbit	r3, r3
 80032e8:	627b      	str	r3, [r7, #36]	@ 0x24
 80032ea:	2302      	movs	r3, #2
 80032ec:	623b      	str	r3, [r7, #32]
 80032ee:	6a3b      	ldr	r3, [r7, #32]
 80032f0:	fa93 f3a3 	rbit	r3, r3
 80032f4:	61fb      	str	r3, [r7, #28]
  return result;
 80032f6:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032f8:	fab3 f383 	clz	r3, r3
 80032fc:	b2db      	uxtb	r3, r3
 80032fe:	095b      	lsrs	r3, r3, #5
 8003300:	b2db      	uxtb	r3, r3
 8003302:	f043 0302 	orr.w	r3, r3, #2
 8003306:	b2db      	uxtb	r3, r3
 8003308:	2b02      	cmp	r3, #2
 800330a:	d102      	bne.n	8003312 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 800330c:	4b39      	ldr	r3, [pc, #228]	@ (80033f4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800330e:	6a1b      	ldr	r3, [r3, #32]
 8003310:	e007      	b.n	8003322 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8003312:	2302      	movs	r3, #2
 8003314:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003316:	69bb      	ldr	r3, [r7, #24]
 8003318:	fa93 f3a3 	rbit	r3, r3
 800331c:	617b      	str	r3, [r7, #20]
 800331e:	4b35      	ldr	r3, [pc, #212]	@ (80033f4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003320:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003322:	2202      	movs	r2, #2
 8003324:	613a      	str	r2, [r7, #16]
 8003326:	693a      	ldr	r2, [r7, #16]
 8003328:	fa92 f2a2 	rbit	r2, r2
 800332c:	60fa      	str	r2, [r7, #12]
  return result;
 800332e:	68fa      	ldr	r2, [r7, #12]
 8003330:	fab2 f282 	clz	r2, r2
 8003334:	b2d2      	uxtb	r2, r2
 8003336:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800333a:	b2d2      	uxtb	r2, r2
 800333c:	f002 021f 	and.w	r2, r2, #31
 8003340:	2101      	movs	r1, #1
 8003342:	fa01 f202 	lsl.w	r2, r1, r2
 8003346:	4013      	ands	r3, r2
 8003348:	2b00      	cmp	r3, #0
 800334a:	d0bd      	beq.n	80032c8 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800334c:	4b29      	ldr	r3, [pc, #164]	@ (80033f4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800334e:	6a1b      	ldr	r3, [r3, #32]
 8003350:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	685b      	ldr	r3, [r3, #4]
 8003358:	4926      	ldr	r1, [pc, #152]	@ (80033f4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800335a:	4313      	orrs	r3, r2
 800335c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800335e:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8003362:	2b01      	cmp	r3, #1
 8003364:	d105      	bne.n	8003372 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003366:	4b23      	ldr	r3, [pc, #140]	@ (80033f4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003368:	69db      	ldr	r3, [r3, #28]
 800336a:	4a22      	ldr	r2, [pc, #136]	@ (80033f4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800336c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003370:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f003 0301 	and.w	r3, r3, #1
 800337a:	2b00      	cmp	r3, #0
 800337c:	d008      	beq.n	8003390 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800337e:	4b1d      	ldr	r3, [pc, #116]	@ (80033f4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003380:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003382:	f023 0203 	bic.w	r2, r3, #3
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	689b      	ldr	r3, [r3, #8]
 800338a:	491a      	ldr	r1, [pc, #104]	@ (80033f4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800338c:	4313      	orrs	r3, r2
 800338e:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f003 0320 	and.w	r3, r3, #32
 8003398:	2b00      	cmp	r3, #0
 800339a:	d008      	beq.n	80033ae <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800339c:	4b15      	ldr	r3, [pc, #84]	@ (80033f4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800339e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033a0:	f023 0210 	bic.w	r2, r3, #16
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	68db      	ldr	r3, [r3, #12]
 80033a8:	4912      	ldr	r1, [pc, #72]	@ (80033f4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80033aa:	4313      	orrs	r3, r2
 80033ac:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d008      	beq.n	80033cc <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80033ba:	4b0e      	ldr	r3, [pc, #56]	@ (80033f4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80033bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033be:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	691b      	ldr	r3, [r3, #16]
 80033c6:	490b      	ldr	r1, [pc, #44]	@ (80033f4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80033c8:	4313      	orrs	r3, r2
 80033ca:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d008      	beq.n	80033ea <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80033d8:	4b06      	ldr	r3, [pc, #24]	@ (80033f4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80033da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033dc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	695b      	ldr	r3, [r3, #20]
 80033e4:	4903      	ldr	r1, [pc, #12]	@ (80033f4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80033e6:	4313      	orrs	r3, r2
 80033e8:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80033ea:	2300      	movs	r3, #0
}
 80033ec:	4618      	mov	r0, r3
 80033ee:	3748      	adds	r7, #72	@ 0x48
 80033f0:	46bd      	mov	sp, r7
 80033f2:	bd80      	pop	{r7, pc}
 80033f4:	40021000 	.word	0x40021000
 80033f8:	40007000 	.word	0x40007000
 80033fc:	10908100 	.word	0x10908100

08003400 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003400:	b580      	push	{r7, lr}
 8003402:	b082      	sub	sp, #8
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2b00      	cmp	r3, #0
 800340c:	d101      	bne.n	8003412 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800340e:	2301      	movs	r3, #1
 8003410:	e049      	b.n	80034a6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003418:	b2db      	uxtb	r3, r3
 800341a:	2b00      	cmp	r3, #0
 800341c:	d106      	bne.n	800342c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	2200      	movs	r2, #0
 8003422:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003426:	6878      	ldr	r0, [r7, #4]
 8003428:	f7fd fedc 	bl	80011e4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2202      	movs	r2, #2
 8003430:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681a      	ldr	r2, [r3, #0]
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	3304      	adds	r3, #4
 800343c:	4619      	mov	r1, r3
 800343e:	4610      	mov	r0, r2
 8003440:	f000 fc90 	bl	8003d64 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2201      	movs	r2, #1
 8003448:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2201      	movs	r2, #1
 8003450:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2201      	movs	r2, #1
 8003458:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2201      	movs	r2, #1
 8003460:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2201      	movs	r2, #1
 8003468:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2201      	movs	r2, #1
 8003470:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2201      	movs	r2, #1
 8003478:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2201      	movs	r2, #1
 8003480:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2201      	movs	r2, #1
 8003488:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2201      	movs	r2, #1
 8003490:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2201      	movs	r2, #1
 8003498:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2201      	movs	r2, #1
 80034a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80034a4:	2300      	movs	r3, #0
}
 80034a6:	4618      	mov	r0, r3
 80034a8:	3708      	adds	r7, #8
 80034aa:	46bd      	mov	sp, r7
 80034ac:	bd80      	pop	{r7, pc}
	...

080034b0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80034b0:	b480      	push	{r7}
 80034b2:	b085      	sub	sp, #20
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80034be:	b2db      	uxtb	r3, r3
 80034c0:	2b01      	cmp	r3, #1
 80034c2:	d001      	beq.n	80034c8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80034c4:	2301      	movs	r3, #1
 80034c6:	e038      	b.n	800353a <HAL_TIM_Base_Start+0x8a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2202      	movs	r2, #2
 80034cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	4a1c      	ldr	r2, [pc, #112]	@ (8003548 <HAL_TIM_Base_Start+0x98>)
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d00e      	beq.n	80034f8 <HAL_TIM_Base_Start+0x48>
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80034e2:	d009      	beq.n	80034f8 <HAL_TIM_Base_Start+0x48>
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	4a18      	ldr	r2, [pc, #96]	@ (800354c <HAL_TIM_Base_Start+0x9c>)
 80034ea:	4293      	cmp	r3, r2
 80034ec:	d004      	beq.n	80034f8 <HAL_TIM_Base_Start+0x48>
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	4a17      	ldr	r2, [pc, #92]	@ (8003550 <HAL_TIM_Base_Start+0xa0>)
 80034f4:	4293      	cmp	r3, r2
 80034f6:	d115      	bne.n	8003524 <HAL_TIM_Base_Start+0x74>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	689a      	ldr	r2, [r3, #8]
 80034fe:	4b15      	ldr	r3, [pc, #84]	@ (8003554 <HAL_TIM_Base_Start+0xa4>)
 8003500:	4013      	ands	r3, r2
 8003502:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	2b06      	cmp	r3, #6
 8003508:	d015      	beq.n	8003536 <HAL_TIM_Base_Start+0x86>
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003510:	d011      	beq.n	8003536 <HAL_TIM_Base_Start+0x86>
    {
      __HAL_TIM_ENABLE(htim);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	681a      	ldr	r2, [r3, #0]
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f042 0201 	orr.w	r2, r2, #1
 8003520:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003522:	e008      	b.n	8003536 <HAL_TIM_Base_Start+0x86>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	681a      	ldr	r2, [r3, #0]
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f042 0201 	orr.w	r2, r2, #1
 8003532:	601a      	str	r2, [r3, #0]
 8003534:	e000      	b.n	8003538 <HAL_TIM_Base_Start+0x88>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003536:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003538:	2300      	movs	r3, #0
}
 800353a:	4618      	mov	r0, r3
 800353c:	3714      	adds	r7, #20
 800353e:	46bd      	mov	sp, r7
 8003540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003544:	4770      	bx	lr
 8003546:	bf00      	nop
 8003548:	40012c00 	.word	0x40012c00
 800354c:	40000400 	.word	0x40000400
 8003550:	40014000 	.word	0x40014000
 8003554:	00010007 	.word	0x00010007

08003558 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8003558:	b580      	push	{r7, lr}
 800355a:	b082      	sub	sp, #8
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2b00      	cmp	r3, #0
 8003564:	d101      	bne.n	800356a <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8003566:	2301      	movs	r3, #1
 8003568:	e049      	b.n	80035fe <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003570:	b2db      	uxtb	r3, r3
 8003572:	2b00      	cmp	r3, #0
 8003574:	d106      	bne.n	8003584 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	2200      	movs	r2, #0
 800357a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800357e:	6878      	ldr	r0, [r7, #4]
 8003580:	f000 f841 	bl	8003606 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2202      	movs	r2, #2
 8003588:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681a      	ldr	r2, [r3, #0]
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	3304      	adds	r3, #4
 8003594:	4619      	mov	r1, r3
 8003596:	4610      	mov	r0, r2
 8003598:	f000 fbe4 	bl	8003d64 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2201      	movs	r2, #1
 80035a0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2201      	movs	r2, #1
 80035a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2201      	movs	r2, #1
 80035b0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2201      	movs	r2, #1
 80035b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2201      	movs	r2, #1
 80035c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2201      	movs	r2, #1
 80035c8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2201      	movs	r2, #1
 80035d0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2201      	movs	r2, #1
 80035d8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2201      	movs	r2, #1
 80035e0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2201      	movs	r2, #1
 80035e8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2201      	movs	r2, #1
 80035f0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2201      	movs	r2, #1
 80035f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80035fc:	2300      	movs	r3, #0
}
 80035fe:	4618      	mov	r0, r3
 8003600:	3708      	adds	r7, #8
 8003602:	46bd      	mov	sp, r7
 8003604:	bd80      	pop	{r7, pc}

08003606 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8003606:	b480      	push	{r7}
 8003608:	b083      	sub	sp, #12
 800360a:	af00      	add	r7, sp, #0
 800360c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 800360e:	bf00      	nop
 8003610:	370c      	adds	r7, #12
 8003612:	46bd      	mov	sp, r7
 8003614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003618:	4770      	bx	lr

0800361a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800361a:	b580      	push	{r7, lr}
 800361c:	b082      	sub	sp, #8
 800361e:	af00      	add	r7, sp, #0
 8003620:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	2b00      	cmp	r3, #0
 8003626:	d101      	bne.n	800362c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003628:	2301      	movs	r3, #1
 800362a:	e049      	b.n	80036c0 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003632:	b2db      	uxtb	r3, r3
 8003634:	2b00      	cmp	r3, #0
 8003636:	d106      	bne.n	8003646 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2200      	movs	r2, #0
 800363c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003640:	6878      	ldr	r0, [r7, #4]
 8003642:	f000 f841 	bl	80036c8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	2202      	movs	r2, #2
 800364a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681a      	ldr	r2, [r3, #0]
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	3304      	adds	r3, #4
 8003656:	4619      	mov	r1, r3
 8003658:	4610      	mov	r0, r2
 800365a:	f000 fb83 	bl	8003d64 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	2201      	movs	r2, #1
 8003662:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	2201      	movs	r2, #1
 800366a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	2201      	movs	r2, #1
 8003672:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	2201      	movs	r2, #1
 800367a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	2201      	movs	r2, #1
 8003682:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	2201      	movs	r2, #1
 800368a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	2201      	movs	r2, #1
 8003692:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	2201      	movs	r2, #1
 800369a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	2201      	movs	r2, #1
 80036a2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	2201      	movs	r2, #1
 80036aa:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	2201      	movs	r2, #1
 80036b2:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	2201      	movs	r2, #1
 80036ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80036be:	2300      	movs	r3, #0
}
 80036c0:	4618      	mov	r0, r3
 80036c2:	3708      	adds	r7, #8
 80036c4:	46bd      	mov	sp, r7
 80036c6:	bd80      	pop	{r7, pc}

080036c8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80036c8:	b480      	push	{r7}
 80036ca:	b083      	sub	sp, #12
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80036d0:	bf00      	nop
 80036d2:	370c      	adds	r7, #12
 80036d4:	46bd      	mov	sp, r7
 80036d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036da:	4770      	bx	lr

080036dc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	b084      	sub	sp, #16
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
 80036e4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80036e6:	683b      	ldr	r3, [r7, #0]
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d109      	bne.n	8003700 <HAL_TIM_PWM_Start+0x24>
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80036f2:	b2db      	uxtb	r3, r3
 80036f4:	2b01      	cmp	r3, #1
 80036f6:	bf14      	ite	ne
 80036f8:	2301      	movne	r3, #1
 80036fa:	2300      	moveq	r3, #0
 80036fc:	b2db      	uxtb	r3, r3
 80036fe:	e03c      	b.n	800377a <HAL_TIM_PWM_Start+0x9e>
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	2b04      	cmp	r3, #4
 8003704:	d109      	bne.n	800371a <HAL_TIM_PWM_Start+0x3e>
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800370c:	b2db      	uxtb	r3, r3
 800370e:	2b01      	cmp	r3, #1
 8003710:	bf14      	ite	ne
 8003712:	2301      	movne	r3, #1
 8003714:	2300      	moveq	r3, #0
 8003716:	b2db      	uxtb	r3, r3
 8003718:	e02f      	b.n	800377a <HAL_TIM_PWM_Start+0x9e>
 800371a:	683b      	ldr	r3, [r7, #0]
 800371c:	2b08      	cmp	r3, #8
 800371e:	d109      	bne.n	8003734 <HAL_TIM_PWM_Start+0x58>
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003726:	b2db      	uxtb	r3, r3
 8003728:	2b01      	cmp	r3, #1
 800372a:	bf14      	ite	ne
 800372c:	2301      	movne	r3, #1
 800372e:	2300      	moveq	r3, #0
 8003730:	b2db      	uxtb	r3, r3
 8003732:	e022      	b.n	800377a <HAL_TIM_PWM_Start+0x9e>
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	2b0c      	cmp	r3, #12
 8003738:	d109      	bne.n	800374e <HAL_TIM_PWM_Start+0x72>
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003740:	b2db      	uxtb	r3, r3
 8003742:	2b01      	cmp	r3, #1
 8003744:	bf14      	ite	ne
 8003746:	2301      	movne	r3, #1
 8003748:	2300      	moveq	r3, #0
 800374a:	b2db      	uxtb	r3, r3
 800374c:	e015      	b.n	800377a <HAL_TIM_PWM_Start+0x9e>
 800374e:	683b      	ldr	r3, [r7, #0]
 8003750:	2b10      	cmp	r3, #16
 8003752:	d109      	bne.n	8003768 <HAL_TIM_PWM_Start+0x8c>
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800375a:	b2db      	uxtb	r3, r3
 800375c:	2b01      	cmp	r3, #1
 800375e:	bf14      	ite	ne
 8003760:	2301      	movne	r3, #1
 8003762:	2300      	moveq	r3, #0
 8003764:	b2db      	uxtb	r3, r3
 8003766:	e008      	b.n	800377a <HAL_TIM_PWM_Start+0x9e>
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800376e:	b2db      	uxtb	r3, r3
 8003770:	2b01      	cmp	r3, #1
 8003772:	bf14      	ite	ne
 8003774:	2301      	movne	r3, #1
 8003776:	2300      	moveq	r3, #0
 8003778:	b2db      	uxtb	r3, r3
 800377a:	2b00      	cmp	r3, #0
 800377c:	d001      	beq.n	8003782 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800377e:	2301      	movs	r3, #1
 8003780:	e088      	b.n	8003894 <HAL_TIM_PWM_Start+0x1b8>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003782:	683b      	ldr	r3, [r7, #0]
 8003784:	2b00      	cmp	r3, #0
 8003786:	d104      	bne.n	8003792 <HAL_TIM_PWM_Start+0xb6>
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2202      	movs	r2, #2
 800378c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003790:	e023      	b.n	80037da <HAL_TIM_PWM_Start+0xfe>
 8003792:	683b      	ldr	r3, [r7, #0]
 8003794:	2b04      	cmp	r3, #4
 8003796:	d104      	bne.n	80037a2 <HAL_TIM_PWM_Start+0xc6>
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2202      	movs	r2, #2
 800379c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80037a0:	e01b      	b.n	80037da <HAL_TIM_PWM_Start+0xfe>
 80037a2:	683b      	ldr	r3, [r7, #0]
 80037a4:	2b08      	cmp	r3, #8
 80037a6:	d104      	bne.n	80037b2 <HAL_TIM_PWM_Start+0xd6>
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2202      	movs	r2, #2
 80037ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80037b0:	e013      	b.n	80037da <HAL_TIM_PWM_Start+0xfe>
 80037b2:	683b      	ldr	r3, [r7, #0]
 80037b4:	2b0c      	cmp	r3, #12
 80037b6:	d104      	bne.n	80037c2 <HAL_TIM_PWM_Start+0xe6>
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2202      	movs	r2, #2
 80037bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80037c0:	e00b      	b.n	80037da <HAL_TIM_PWM_Start+0xfe>
 80037c2:	683b      	ldr	r3, [r7, #0]
 80037c4:	2b10      	cmp	r3, #16
 80037c6:	d104      	bne.n	80037d2 <HAL_TIM_PWM_Start+0xf6>
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2202      	movs	r2, #2
 80037cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80037d0:	e003      	b.n	80037da <HAL_TIM_PWM_Start+0xfe>
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	2202      	movs	r2, #2
 80037d6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	2201      	movs	r2, #1
 80037e0:	6839      	ldr	r1, [r7, #0]
 80037e2:	4618      	mov	r0, r3
 80037e4:	f000 fe82 	bl	80044ec <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	4a2b      	ldr	r2, [pc, #172]	@ (800389c <HAL_TIM_PWM_Start+0x1c0>)
 80037ee:	4293      	cmp	r3, r2
 80037f0:	d00e      	beq.n	8003810 <HAL_TIM_PWM_Start+0x134>
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	4a2a      	ldr	r2, [pc, #168]	@ (80038a0 <HAL_TIM_PWM_Start+0x1c4>)
 80037f8:	4293      	cmp	r3, r2
 80037fa:	d009      	beq.n	8003810 <HAL_TIM_PWM_Start+0x134>
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	4a28      	ldr	r2, [pc, #160]	@ (80038a4 <HAL_TIM_PWM_Start+0x1c8>)
 8003802:	4293      	cmp	r3, r2
 8003804:	d004      	beq.n	8003810 <HAL_TIM_PWM_Start+0x134>
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	4a27      	ldr	r2, [pc, #156]	@ (80038a8 <HAL_TIM_PWM_Start+0x1cc>)
 800380c:	4293      	cmp	r3, r2
 800380e:	d101      	bne.n	8003814 <HAL_TIM_PWM_Start+0x138>
 8003810:	2301      	movs	r3, #1
 8003812:	e000      	b.n	8003816 <HAL_TIM_PWM_Start+0x13a>
 8003814:	2300      	movs	r3, #0
 8003816:	2b00      	cmp	r3, #0
 8003818:	d007      	beq.n	800382a <HAL_TIM_PWM_Start+0x14e>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003828:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	4a1b      	ldr	r2, [pc, #108]	@ (800389c <HAL_TIM_PWM_Start+0x1c0>)
 8003830:	4293      	cmp	r3, r2
 8003832:	d00e      	beq.n	8003852 <HAL_TIM_PWM_Start+0x176>
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800383c:	d009      	beq.n	8003852 <HAL_TIM_PWM_Start+0x176>
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	4a1a      	ldr	r2, [pc, #104]	@ (80038ac <HAL_TIM_PWM_Start+0x1d0>)
 8003844:	4293      	cmp	r3, r2
 8003846:	d004      	beq.n	8003852 <HAL_TIM_PWM_Start+0x176>
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	4a14      	ldr	r2, [pc, #80]	@ (80038a0 <HAL_TIM_PWM_Start+0x1c4>)
 800384e:	4293      	cmp	r3, r2
 8003850:	d115      	bne.n	800387e <HAL_TIM_PWM_Start+0x1a2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	689a      	ldr	r2, [r3, #8]
 8003858:	4b15      	ldr	r3, [pc, #84]	@ (80038b0 <HAL_TIM_PWM_Start+0x1d4>)
 800385a:	4013      	ands	r3, r2
 800385c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	2b06      	cmp	r3, #6
 8003862:	d015      	beq.n	8003890 <HAL_TIM_PWM_Start+0x1b4>
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800386a:	d011      	beq.n	8003890 <HAL_TIM_PWM_Start+0x1b4>
    {
      __HAL_TIM_ENABLE(htim);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	681a      	ldr	r2, [r3, #0]
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f042 0201 	orr.w	r2, r2, #1
 800387a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800387c:	e008      	b.n	8003890 <HAL_TIM_PWM_Start+0x1b4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	681a      	ldr	r2, [r3, #0]
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f042 0201 	orr.w	r2, r2, #1
 800388c:	601a      	str	r2, [r3, #0]
 800388e:	e000      	b.n	8003892 <HAL_TIM_PWM_Start+0x1b6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003890:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003892:	2300      	movs	r3, #0
}
 8003894:	4618      	mov	r0, r3
 8003896:	3710      	adds	r7, #16
 8003898:	46bd      	mov	sp, r7
 800389a:	bd80      	pop	{r7, pc}
 800389c:	40012c00 	.word	0x40012c00
 80038a0:	40014000 	.word	0x40014000
 80038a4:	40014400 	.word	0x40014400
 80038a8:	40014800 	.word	0x40014800
 80038ac:	40000400 	.word	0x40000400
 80038b0:	00010007 	.word	0x00010007

080038b4 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80038b4:	b580      	push	{r7, lr}
 80038b6:	b086      	sub	sp, #24
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	60f8      	str	r0, [r7, #12]
 80038bc:	60b9      	str	r1, [r7, #8]
 80038be:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80038c0:	2300      	movs	r3, #0
 80038c2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80038ca:	2b01      	cmp	r3, #1
 80038cc:	d101      	bne.n	80038d2 <HAL_TIM_OC_ConfigChannel+0x1e>
 80038ce:	2302      	movs	r3, #2
 80038d0:	e066      	b.n	80039a0 <HAL_TIM_OC_ConfigChannel+0xec>
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	2201      	movs	r2, #1
 80038d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	2b14      	cmp	r3, #20
 80038de:	d857      	bhi.n	8003990 <HAL_TIM_OC_ConfigChannel+0xdc>
 80038e0:	a201      	add	r2, pc, #4	@ (adr r2, 80038e8 <HAL_TIM_OC_ConfigChannel+0x34>)
 80038e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038e6:	bf00      	nop
 80038e8:	0800393d 	.word	0x0800393d
 80038ec:	08003991 	.word	0x08003991
 80038f0:	08003991 	.word	0x08003991
 80038f4:	08003991 	.word	0x08003991
 80038f8:	0800394b 	.word	0x0800394b
 80038fc:	08003991 	.word	0x08003991
 8003900:	08003991 	.word	0x08003991
 8003904:	08003991 	.word	0x08003991
 8003908:	08003959 	.word	0x08003959
 800390c:	08003991 	.word	0x08003991
 8003910:	08003991 	.word	0x08003991
 8003914:	08003991 	.word	0x08003991
 8003918:	08003967 	.word	0x08003967
 800391c:	08003991 	.word	0x08003991
 8003920:	08003991 	.word	0x08003991
 8003924:	08003991 	.word	0x08003991
 8003928:	08003975 	.word	0x08003975
 800392c:	08003991 	.word	0x08003991
 8003930:	08003991 	.word	0x08003991
 8003934:	08003991 	.word	0x08003991
 8003938:	08003983 	.word	0x08003983
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	68b9      	ldr	r1, [r7, #8]
 8003942:	4618      	mov	r0, r3
 8003944:	f000 fa92 	bl	8003e6c <TIM_OC1_SetConfig>
      break;
 8003948:	e025      	b.n	8003996 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	68b9      	ldr	r1, [r7, #8]
 8003950:	4618      	mov	r0, r3
 8003952:	f000 fb11 	bl	8003f78 <TIM_OC2_SetConfig>
      break;
 8003956:	e01e      	b.n	8003996 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	68b9      	ldr	r1, [r7, #8]
 800395e:	4618      	mov	r0, r3
 8003960:	f000 fb8a 	bl	8004078 <TIM_OC3_SetConfig>
      break;
 8003964:	e017      	b.n	8003996 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	68b9      	ldr	r1, [r7, #8]
 800396c:	4618      	mov	r0, r3
 800396e:	f000 fc01 	bl	8004174 <TIM_OC4_SetConfig>
      break;
 8003972:	e010      	b.n	8003996 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	68b9      	ldr	r1, [r7, #8]
 800397a:	4618      	mov	r0, r3
 800397c:	f000 fc5e 	bl	800423c <TIM_OC5_SetConfig>
      break;
 8003980:	e009      	b.n	8003996 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	68b9      	ldr	r1, [r7, #8]
 8003988:	4618      	mov	r0, r3
 800398a:	f000 fcb5 	bl	80042f8 <TIM_OC6_SetConfig>
      break;
 800398e:	e002      	b.n	8003996 <HAL_TIM_OC_ConfigChannel+0xe2>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8003990:	2301      	movs	r3, #1
 8003992:	75fb      	strb	r3, [r7, #23]
      break;
 8003994:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	2200      	movs	r2, #0
 800399a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800399e:	7dfb      	ldrb	r3, [r7, #23]
}
 80039a0:	4618      	mov	r0, r3
 80039a2:	3718      	adds	r7, #24
 80039a4:	46bd      	mov	sp, r7
 80039a6:	bd80      	pop	{r7, pc}

080039a8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	b086      	sub	sp, #24
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	60f8      	str	r0, [r7, #12]
 80039b0:	60b9      	str	r1, [r7, #8]
 80039b2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80039b4:	2300      	movs	r3, #0
 80039b6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80039be:	2b01      	cmp	r3, #1
 80039c0:	d101      	bne.n	80039c6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80039c2:	2302      	movs	r3, #2
 80039c4:	e0ff      	b.n	8003bc6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	2201      	movs	r2, #1
 80039ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	2b14      	cmp	r3, #20
 80039d2:	f200 80f0 	bhi.w	8003bb6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80039d6:	a201      	add	r2, pc, #4	@ (adr r2, 80039dc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80039d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039dc:	08003a31 	.word	0x08003a31
 80039e0:	08003bb7 	.word	0x08003bb7
 80039e4:	08003bb7 	.word	0x08003bb7
 80039e8:	08003bb7 	.word	0x08003bb7
 80039ec:	08003a71 	.word	0x08003a71
 80039f0:	08003bb7 	.word	0x08003bb7
 80039f4:	08003bb7 	.word	0x08003bb7
 80039f8:	08003bb7 	.word	0x08003bb7
 80039fc:	08003ab3 	.word	0x08003ab3
 8003a00:	08003bb7 	.word	0x08003bb7
 8003a04:	08003bb7 	.word	0x08003bb7
 8003a08:	08003bb7 	.word	0x08003bb7
 8003a0c:	08003af3 	.word	0x08003af3
 8003a10:	08003bb7 	.word	0x08003bb7
 8003a14:	08003bb7 	.word	0x08003bb7
 8003a18:	08003bb7 	.word	0x08003bb7
 8003a1c:	08003b35 	.word	0x08003b35
 8003a20:	08003bb7 	.word	0x08003bb7
 8003a24:	08003bb7 	.word	0x08003bb7
 8003a28:	08003bb7 	.word	0x08003bb7
 8003a2c:	08003b75 	.word	0x08003b75
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	68b9      	ldr	r1, [r7, #8]
 8003a36:	4618      	mov	r0, r3
 8003a38:	f000 fa18 	bl	8003e6c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	699a      	ldr	r2, [r3, #24]
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f042 0208 	orr.w	r2, r2, #8
 8003a4a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	699a      	ldr	r2, [r3, #24]
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f022 0204 	bic.w	r2, r2, #4
 8003a5a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	6999      	ldr	r1, [r3, #24]
 8003a62:	68bb      	ldr	r3, [r7, #8]
 8003a64:	691a      	ldr	r2, [r3, #16]
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	430a      	orrs	r2, r1
 8003a6c:	619a      	str	r2, [r3, #24]
      break;
 8003a6e:	e0a5      	b.n	8003bbc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	68b9      	ldr	r1, [r7, #8]
 8003a76:	4618      	mov	r0, r3
 8003a78:	f000 fa7e 	bl	8003f78 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	699a      	ldr	r2, [r3, #24]
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003a8a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	699a      	ldr	r2, [r3, #24]
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003a9a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	6999      	ldr	r1, [r3, #24]
 8003aa2:	68bb      	ldr	r3, [r7, #8]
 8003aa4:	691b      	ldr	r3, [r3, #16]
 8003aa6:	021a      	lsls	r2, r3, #8
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	430a      	orrs	r2, r1
 8003aae:	619a      	str	r2, [r3, #24]
      break;
 8003ab0:	e084      	b.n	8003bbc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	68b9      	ldr	r1, [r7, #8]
 8003ab8:	4618      	mov	r0, r3
 8003aba:	f000 fadd 	bl	8004078 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	69da      	ldr	r2, [r3, #28]
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f042 0208 	orr.w	r2, r2, #8
 8003acc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	69da      	ldr	r2, [r3, #28]
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f022 0204 	bic.w	r2, r2, #4
 8003adc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	69d9      	ldr	r1, [r3, #28]
 8003ae4:	68bb      	ldr	r3, [r7, #8]
 8003ae6:	691a      	ldr	r2, [r3, #16]
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	430a      	orrs	r2, r1
 8003aee:	61da      	str	r2, [r3, #28]
      break;
 8003af0:	e064      	b.n	8003bbc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	68b9      	ldr	r1, [r7, #8]
 8003af8:	4618      	mov	r0, r3
 8003afa:	f000 fb3b 	bl	8004174 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	69da      	ldr	r2, [r3, #28]
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003b0c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	69da      	ldr	r2, [r3, #28]
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003b1c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	69d9      	ldr	r1, [r3, #28]
 8003b24:	68bb      	ldr	r3, [r7, #8]
 8003b26:	691b      	ldr	r3, [r3, #16]
 8003b28:	021a      	lsls	r2, r3, #8
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	430a      	orrs	r2, r1
 8003b30:	61da      	str	r2, [r3, #28]
      break;
 8003b32:	e043      	b.n	8003bbc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	68b9      	ldr	r1, [r7, #8]
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	f000 fb7e 	bl	800423c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f042 0208 	orr.w	r2, r2, #8
 8003b4e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f022 0204 	bic.w	r2, r2, #4
 8003b5e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8003b66:	68bb      	ldr	r3, [r7, #8]
 8003b68:	691a      	ldr	r2, [r3, #16]
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	430a      	orrs	r2, r1
 8003b70:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8003b72:	e023      	b.n	8003bbc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	68b9      	ldr	r1, [r7, #8]
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	f000 fbbc 	bl	80042f8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003b8e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003b9e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8003ba6:	68bb      	ldr	r3, [r7, #8]
 8003ba8:	691b      	ldr	r3, [r3, #16]
 8003baa:	021a      	lsls	r2, r3, #8
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	430a      	orrs	r2, r1
 8003bb2:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8003bb4:	e002      	b.n	8003bbc <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8003bb6:	2301      	movs	r3, #1
 8003bb8:	75fb      	strb	r3, [r7, #23]
      break;
 8003bba:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003bc4:	7dfb      	ldrb	r3, [r7, #23]
}
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	3718      	adds	r7, #24
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	bd80      	pop	{r7, pc}
 8003bce:	bf00      	nop

08003bd0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	b084      	sub	sp, #16
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
 8003bd8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003bda:	2300      	movs	r3, #0
 8003bdc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003be4:	2b01      	cmp	r3, #1
 8003be6:	d101      	bne.n	8003bec <HAL_TIM_ConfigClockSource+0x1c>
 8003be8:	2302      	movs	r3, #2
 8003bea:	e0b6      	b.n	8003d5a <HAL_TIM_ConfigClockSource+0x18a>
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2201      	movs	r2, #1
 8003bf0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2202      	movs	r2, #2
 8003bf8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	689b      	ldr	r3, [r3, #8]
 8003c02:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003c04:	68bb      	ldr	r3, [r7, #8]
 8003c06:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003c0a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003c0e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003c10:	68bb      	ldr	r3, [r7, #8]
 8003c12:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003c16:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	68ba      	ldr	r2, [r7, #8]
 8003c1e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003c20:	683b      	ldr	r3, [r7, #0]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003c28:	d03e      	beq.n	8003ca8 <HAL_TIM_ConfigClockSource+0xd8>
 8003c2a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003c2e:	f200 8087 	bhi.w	8003d40 <HAL_TIM_ConfigClockSource+0x170>
 8003c32:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003c36:	f000 8086 	beq.w	8003d46 <HAL_TIM_ConfigClockSource+0x176>
 8003c3a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003c3e:	d87f      	bhi.n	8003d40 <HAL_TIM_ConfigClockSource+0x170>
 8003c40:	2b70      	cmp	r3, #112	@ 0x70
 8003c42:	d01a      	beq.n	8003c7a <HAL_TIM_ConfigClockSource+0xaa>
 8003c44:	2b70      	cmp	r3, #112	@ 0x70
 8003c46:	d87b      	bhi.n	8003d40 <HAL_TIM_ConfigClockSource+0x170>
 8003c48:	2b60      	cmp	r3, #96	@ 0x60
 8003c4a:	d050      	beq.n	8003cee <HAL_TIM_ConfigClockSource+0x11e>
 8003c4c:	2b60      	cmp	r3, #96	@ 0x60
 8003c4e:	d877      	bhi.n	8003d40 <HAL_TIM_ConfigClockSource+0x170>
 8003c50:	2b50      	cmp	r3, #80	@ 0x50
 8003c52:	d03c      	beq.n	8003cce <HAL_TIM_ConfigClockSource+0xfe>
 8003c54:	2b50      	cmp	r3, #80	@ 0x50
 8003c56:	d873      	bhi.n	8003d40 <HAL_TIM_ConfigClockSource+0x170>
 8003c58:	2b40      	cmp	r3, #64	@ 0x40
 8003c5a:	d058      	beq.n	8003d0e <HAL_TIM_ConfigClockSource+0x13e>
 8003c5c:	2b40      	cmp	r3, #64	@ 0x40
 8003c5e:	d86f      	bhi.n	8003d40 <HAL_TIM_ConfigClockSource+0x170>
 8003c60:	2b30      	cmp	r3, #48	@ 0x30
 8003c62:	d064      	beq.n	8003d2e <HAL_TIM_ConfigClockSource+0x15e>
 8003c64:	2b30      	cmp	r3, #48	@ 0x30
 8003c66:	d86b      	bhi.n	8003d40 <HAL_TIM_ConfigClockSource+0x170>
 8003c68:	2b20      	cmp	r3, #32
 8003c6a:	d060      	beq.n	8003d2e <HAL_TIM_ConfigClockSource+0x15e>
 8003c6c:	2b20      	cmp	r3, #32
 8003c6e:	d867      	bhi.n	8003d40 <HAL_TIM_ConfigClockSource+0x170>
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d05c      	beq.n	8003d2e <HAL_TIM_ConfigClockSource+0x15e>
 8003c74:	2b10      	cmp	r3, #16
 8003c76:	d05a      	beq.n	8003d2e <HAL_TIM_ConfigClockSource+0x15e>
 8003c78:	e062      	b.n	8003d40 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003c7e:	683b      	ldr	r3, [r7, #0]
 8003c80:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003c82:	683b      	ldr	r3, [r7, #0]
 8003c84:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003c86:	683b      	ldr	r3, [r7, #0]
 8003c88:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003c8a:	f000 fc0f 	bl	80044ac <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	689b      	ldr	r3, [r3, #8]
 8003c94:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003c96:	68bb      	ldr	r3, [r7, #8]
 8003c98:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003c9c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	68ba      	ldr	r2, [r7, #8]
 8003ca4:	609a      	str	r2, [r3, #8]
      break;
 8003ca6:	e04f      	b.n	8003d48 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003cb0:	683b      	ldr	r3, [r7, #0]
 8003cb2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003cb4:	683b      	ldr	r3, [r7, #0]
 8003cb6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003cb8:	f000 fbf8 	bl	80044ac <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	689a      	ldr	r2, [r3, #8]
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003cca:	609a      	str	r2, [r3, #8]
      break;
 8003ccc:	e03c      	b.n	8003d48 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003cd2:	683b      	ldr	r3, [r7, #0]
 8003cd4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003cd6:	683b      	ldr	r3, [r7, #0]
 8003cd8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003cda:	461a      	mov	r2, r3
 8003cdc:	f000 fb6c 	bl	80043b8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	2150      	movs	r1, #80	@ 0x50
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	f000 fbc5 	bl	8004476 <TIM_ITRx_SetConfig>
      break;
 8003cec:	e02c      	b.n	8003d48 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003cf6:	683b      	ldr	r3, [r7, #0]
 8003cf8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003cfa:	461a      	mov	r2, r3
 8003cfc:	f000 fb8b 	bl	8004416 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	2160      	movs	r1, #96	@ 0x60
 8003d06:	4618      	mov	r0, r3
 8003d08:	f000 fbb5 	bl	8004476 <TIM_ITRx_SetConfig>
      break;
 8003d0c:	e01c      	b.n	8003d48 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003d12:	683b      	ldr	r3, [r7, #0]
 8003d14:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003d16:	683b      	ldr	r3, [r7, #0]
 8003d18:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d1a:	461a      	mov	r2, r3
 8003d1c:	f000 fb4c 	bl	80043b8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	2140      	movs	r1, #64	@ 0x40
 8003d26:	4618      	mov	r0, r3
 8003d28:	f000 fba5 	bl	8004476 <TIM_ITRx_SetConfig>
      break;
 8003d2c:	e00c      	b.n	8003d48 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681a      	ldr	r2, [r3, #0]
 8003d32:	683b      	ldr	r3, [r7, #0]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	4619      	mov	r1, r3
 8003d38:	4610      	mov	r0, r2
 8003d3a:	f000 fb9c 	bl	8004476 <TIM_ITRx_SetConfig>
      break;
 8003d3e:	e003      	b.n	8003d48 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8003d40:	2301      	movs	r3, #1
 8003d42:	73fb      	strb	r3, [r7, #15]
      break;
 8003d44:	e000      	b.n	8003d48 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8003d46:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2201      	movs	r2, #1
 8003d4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2200      	movs	r2, #0
 8003d54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003d58:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	3710      	adds	r7, #16
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	bd80      	pop	{r7, pc}
	...

08003d64 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003d64:	b480      	push	{r7}
 8003d66:	b085      	sub	sp, #20
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
 8003d6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	4a38      	ldr	r2, [pc, #224]	@ (8003e58 <TIM_Base_SetConfig+0xf4>)
 8003d78:	4293      	cmp	r3, r2
 8003d7a:	d007      	beq.n	8003d8c <TIM_Base_SetConfig+0x28>
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003d82:	d003      	beq.n	8003d8c <TIM_Base_SetConfig+0x28>
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	4a35      	ldr	r2, [pc, #212]	@ (8003e5c <TIM_Base_SetConfig+0xf8>)
 8003d88:	4293      	cmp	r3, r2
 8003d8a:	d108      	bne.n	8003d9e <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003d92:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003d94:	683b      	ldr	r3, [r7, #0]
 8003d96:	685b      	ldr	r3, [r3, #4]
 8003d98:	68fa      	ldr	r2, [r7, #12]
 8003d9a:	4313      	orrs	r3, r2
 8003d9c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	4a2d      	ldr	r2, [pc, #180]	@ (8003e58 <TIM_Base_SetConfig+0xf4>)
 8003da2:	4293      	cmp	r3, r2
 8003da4:	d013      	beq.n	8003dce <TIM_Base_SetConfig+0x6a>
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003dac:	d00f      	beq.n	8003dce <TIM_Base_SetConfig+0x6a>
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	4a2a      	ldr	r2, [pc, #168]	@ (8003e5c <TIM_Base_SetConfig+0xf8>)
 8003db2:	4293      	cmp	r3, r2
 8003db4:	d00b      	beq.n	8003dce <TIM_Base_SetConfig+0x6a>
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	4a29      	ldr	r2, [pc, #164]	@ (8003e60 <TIM_Base_SetConfig+0xfc>)
 8003dba:	4293      	cmp	r3, r2
 8003dbc:	d007      	beq.n	8003dce <TIM_Base_SetConfig+0x6a>
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	4a28      	ldr	r2, [pc, #160]	@ (8003e64 <TIM_Base_SetConfig+0x100>)
 8003dc2:	4293      	cmp	r3, r2
 8003dc4:	d003      	beq.n	8003dce <TIM_Base_SetConfig+0x6a>
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	4a27      	ldr	r2, [pc, #156]	@ (8003e68 <TIM_Base_SetConfig+0x104>)
 8003dca:	4293      	cmp	r3, r2
 8003dcc:	d108      	bne.n	8003de0 <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003dd4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003dd6:	683b      	ldr	r3, [r7, #0]
 8003dd8:	68db      	ldr	r3, [r3, #12]
 8003dda:	68fa      	ldr	r2, [r7, #12]
 8003ddc:	4313      	orrs	r3, r2
 8003dde:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003de6:	683b      	ldr	r3, [r7, #0]
 8003de8:	695b      	ldr	r3, [r3, #20]
 8003dea:	4313      	orrs	r3, r2
 8003dec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	68fa      	ldr	r2, [r7, #12]
 8003df2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003df4:	683b      	ldr	r3, [r7, #0]
 8003df6:	689a      	ldr	r2, [r3, #8]
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003dfc:	683b      	ldr	r3, [r7, #0]
 8003dfe:	681a      	ldr	r2, [r3, #0]
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	4a14      	ldr	r2, [pc, #80]	@ (8003e58 <TIM_Base_SetConfig+0xf4>)
 8003e08:	4293      	cmp	r3, r2
 8003e0a:	d00b      	beq.n	8003e24 <TIM_Base_SetConfig+0xc0>
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	4a14      	ldr	r2, [pc, #80]	@ (8003e60 <TIM_Base_SetConfig+0xfc>)
 8003e10:	4293      	cmp	r3, r2
 8003e12:	d007      	beq.n	8003e24 <TIM_Base_SetConfig+0xc0>
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	4a13      	ldr	r2, [pc, #76]	@ (8003e64 <TIM_Base_SetConfig+0x100>)
 8003e18:	4293      	cmp	r3, r2
 8003e1a:	d003      	beq.n	8003e24 <TIM_Base_SetConfig+0xc0>
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	4a12      	ldr	r2, [pc, #72]	@ (8003e68 <TIM_Base_SetConfig+0x104>)
 8003e20:	4293      	cmp	r3, r2
 8003e22:	d103      	bne.n	8003e2c <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003e24:	683b      	ldr	r3, [r7, #0]
 8003e26:	691a      	ldr	r2, [r3, #16]
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2201      	movs	r2, #1
 8003e30:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	691b      	ldr	r3, [r3, #16]
 8003e36:	f003 0301 	and.w	r3, r3, #1
 8003e3a:	2b01      	cmp	r3, #1
 8003e3c:	d105      	bne.n	8003e4a <TIM_Base_SetConfig+0xe6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	691b      	ldr	r3, [r3, #16]
 8003e42:	f023 0201 	bic.w	r2, r3, #1
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	611a      	str	r2, [r3, #16]
  }
}
 8003e4a:	bf00      	nop
 8003e4c:	3714      	adds	r7, #20
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e54:	4770      	bx	lr
 8003e56:	bf00      	nop
 8003e58:	40012c00 	.word	0x40012c00
 8003e5c:	40000400 	.word	0x40000400
 8003e60:	40014000 	.word	0x40014000
 8003e64:	40014400 	.word	0x40014400
 8003e68:	40014800 	.word	0x40014800

08003e6c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003e6c:	b480      	push	{r7}
 8003e6e:	b087      	sub	sp, #28
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]
 8003e74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	6a1b      	ldr	r3, [r3, #32]
 8003e7a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	6a1b      	ldr	r3, [r3, #32]
 8003e80:	f023 0201 	bic.w	r2, r3, #1
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	685b      	ldr	r3, [r3, #4]
 8003e8c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	699b      	ldr	r3, [r3, #24]
 8003e92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003e9a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003e9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	f023 0303 	bic.w	r3, r3, #3
 8003ea6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003ea8:	683b      	ldr	r3, [r7, #0]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	68fa      	ldr	r2, [r7, #12]
 8003eae:	4313      	orrs	r3, r2
 8003eb0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003eb2:	697b      	ldr	r3, [r7, #20]
 8003eb4:	f023 0302 	bic.w	r3, r3, #2
 8003eb8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003eba:	683b      	ldr	r3, [r7, #0]
 8003ebc:	689b      	ldr	r3, [r3, #8]
 8003ebe:	697a      	ldr	r2, [r7, #20]
 8003ec0:	4313      	orrs	r3, r2
 8003ec2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	4a28      	ldr	r2, [pc, #160]	@ (8003f68 <TIM_OC1_SetConfig+0xfc>)
 8003ec8:	4293      	cmp	r3, r2
 8003eca:	d00b      	beq.n	8003ee4 <TIM_OC1_SetConfig+0x78>
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	4a27      	ldr	r2, [pc, #156]	@ (8003f6c <TIM_OC1_SetConfig+0x100>)
 8003ed0:	4293      	cmp	r3, r2
 8003ed2:	d007      	beq.n	8003ee4 <TIM_OC1_SetConfig+0x78>
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	4a26      	ldr	r2, [pc, #152]	@ (8003f70 <TIM_OC1_SetConfig+0x104>)
 8003ed8:	4293      	cmp	r3, r2
 8003eda:	d003      	beq.n	8003ee4 <TIM_OC1_SetConfig+0x78>
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	4a25      	ldr	r2, [pc, #148]	@ (8003f74 <TIM_OC1_SetConfig+0x108>)
 8003ee0:	4293      	cmp	r3, r2
 8003ee2:	d10c      	bne.n	8003efe <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003ee4:	697b      	ldr	r3, [r7, #20]
 8003ee6:	f023 0308 	bic.w	r3, r3, #8
 8003eea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003eec:	683b      	ldr	r3, [r7, #0]
 8003eee:	68db      	ldr	r3, [r3, #12]
 8003ef0:	697a      	ldr	r2, [r7, #20]
 8003ef2:	4313      	orrs	r3, r2
 8003ef4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003ef6:	697b      	ldr	r3, [r7, #20]
 8003ef8:	f023 0304 	bic.w	r3, r3, #4
 8003efc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	4a19      	ldr	r2, [pc, #100]	@ (8003f68 <TIM_OC1_SetConfig+0xfc>)
 8003f02:	4293      	cmp	r3, r2
 8003f04:	d00b      	beq.n	8003f1e <TIM_OC1_SetConfig+0xb2>
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	4a18      	ldr	r2, [pc, #96]	@ (8003f6c <TIM_OC1_SetConfig+0x100>)
 8003f0a:	4293      	cmp	r3, r2
 8003f0c:	d007      	beq.n	8003f1e <TIM_OC1_SetConfig+0xb2>
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	4a17      	ldr	r2, [pc, #92]	@ (8003f70 <TIM_OC1_SetConfig+0x104>)
 8003f12:	4293      	cmp	r3, r2
 8003f14:	d003      	beq.n	8003f1e <TIM_OC1_SetConfig+0xb2>
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	4a16      	ldr	r2, [pc, #88]	@ (8003f74 <TIM_OC1_SetConfig+0x108>)
 8003f1a:	4293      	cmp	r3, r2
 8003f1c:	d111      	bne.n	8003f42 <TIM_OC1_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003f1e:	693b      	ldr	r3, [r7, #16]
 8003f20:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003f24:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003f26:	693b      	ldr	r3, [r7, #16]
 8003f28:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003f2c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003f2e:	683b      	ldr	r3, [r7, #0]
 8003f30:	695b      	ldr	r3, [r3, #20]
 8003f32:	693a      	ldr	r2, [r7, #16]
 8003f34:	4313      	orrs	r3, r2
 8003f36:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003f38:	683b      	ldr	r3, [r7, #0]
 8003f3a:	699b      	ldr	r3, [r3, #24]
 8003f3c:	693a      	ldr	r2, [r7, #16]
 8003f3e:	4313      	orrs	r3, r2
 8003f40:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	693a      	ldr	r2, [r7, #16]
 8003f46:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	68fa      	ldr	r2, [r7, #12]
 8003f4c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003f4e:	683b      	ldr	r3, [r7, #0]
 8003f50:	685a      	ldr	r2, [r3, #4]
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	697a      	ldr	r2, [r7, #20]
 8003f5a:	621a      	str	r2, [r3, #32]
}
 8003f5c:	bf00      	nop
 8003f5e:	371c      	adds	r7, #28
 8003f60:	46bd      	mov	sp, r7
 8003f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f66:	4770      	bx	lr
 8003f68:	40012c00 	.word	0x40012c00
 8003f6c:	40014000 	.word	0x40014000
 8003f70:	40014400 	.word	0x40014400
 8003f74:	40014800 	.word	0x40014800

08003f78 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003f78:	b480      	push	{r7}
 8003f7a:	b087      	sub	sp, #28
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]
 8003f80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6a1b      	ldr	r3, [r3, #32]
 8003f86:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	6a1b      	ldr	r3, [r3, #32]
 8003f8c:	f023 0210 	bic.w	r2, r3, #16
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	685b      	ldr	r3, [r3, #4]
 8003f98:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	699b      	ldr	r3, [r3, #24]
 8003f9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003fa6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003faa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003fb2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003fb4:	683b      	ldr	r3, [r7, #0]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	021b      	lsls	r3, r3, #8
 8003fba:	68fa      	ldr	r2, [r7, #12]
 8003fbc:	4313      	orrs	r3, r2
 8003fbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003fc0:	697b      	ldr	r3, [r7, #20]
 8003fc2:	f023 0320 	bic.w	r3, r3, #32
 8003fc6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003fc8:	683b      	ldr	r3, [r7, #0]
 8003fca:	689b      	ldr	r3, [r3, #8]
 8003fcc:	011b      	lsls	r3, r3, #4
 8003fce:	697a      	ldr	r2, [r7, #20]
 8003fd0:	4313      	orrs	r3, r2
 8003fd2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	4a24      	ldr	r2, [pc, #144]	@ (8004068 <TIM_OC2_SetConfig+0xf0>)
 8003fd8:	4293      	cmp	r3, r2
 8003fda:	d10d      	bne.n	8003ff8 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003fdc:	697b      	ldr	r3, [r7, #20]
 8003fde:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003fe2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003fe4:	683b      	ldr	r3, [r7, #0]
 8003fe6:	68db      	ldr	r3, [r3, #12]
 8003fe8:	011b      	lsls	r3, r3, #4
 8003fea:	697a      	ldr	r2, [r7, #20]
 8003fec:	4313      	orrs	r3, r2
 8003fee:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003ff0:	697b      	ldr	r3, [r7, #20]
 8003ff2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003ff6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	4a1b      	ldr	r2, [pc, #108]	@ (8004068 <TIM_OC2_SetConfig+0xf0>)
 8003ffc:	4293      	cmp	r3, r2
 8003ffe:	d00b      	beq.n	8004018 <TIM_OC2_SetConfig+0xa0>
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	4a1a      	ldr	r2, [pc, #104]	@ (800406c <TIM_OC2_SetConfig+0xf4>)
 8004004:	4293      	cmp	r3, r2
 8004006:	d007      	beq.n	8004018 <TIM_OC2_SetConfig+0xa0>
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	4a19      	ldr	r2, [pc, #100]	@ (8004070 <TIM_OC2_SetConfig+0xf8>)
 800400c:	4293      	cmp	r3, r2
 800400e:	d003      	beq.n	8004018 <TIM_OC2_SetConfig+0xa0>
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	4a18      	ldr	r2, [pc, #96]	@ (8004074 <TIM_OC2_SetConfig+0xfc>)
 8004014:	4293      	cmp	r3, r2
 8004016:	d113      	bne.n	8004040 <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004018:	693b      	ldr	r3, [r7, #16]
 800401a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800401e:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004020:	693b      	ldr	r3, [r7, #16]
 8004022:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004026:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004028:	683b      	ldr	r3, [r7, #0]
 800402a:	695b      	ldr	r3, [r3, #20]
 800402c:	009b      	lsls	r3, r3, #2
 800402e:	693a      	ldr	r2, [r7, #16]
 8004030:	4313      	orrs	r3, r2
 8004032:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004034:	683b      	ldr	r3, [r7, #0]
 8004036:	699b      	ldr	r3, [r3, #24]
 8004038:	009b      	lsls	r3, r3, #2
 800403a:	693a      	ldr	r2, [r7, #16]
 800403c:	4313      	orrs	r3, r2
 800403e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	693a      	ldr	r2, [r7, #16]
 8004044:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	68fa      	ldr	r2, [r7, #12]
 800404a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800404c:	683b      	ldr	r3, [r7, #0]
 800404e:	685a      	ldr	r2, [r3, #4]
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	697a      	ldr	r2, [r7, #20]
 8004058:	621a      	str	r2, [r3, #32]
}
 800405a:	bf00      	nop
 800405c:	371c      	adds	r7, #28
 800405e:	46bd      	mov	sp, r7
 8004060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004064:	4770      	bx	lr
 8004066:	bf00      	nop
 8004068:	40012c00 	.word	0x40012c00
 800406c:	40014000 	.word	0x40014000
 8004070:	40014400 	.word	0x40014400
 8004074:	40014800 	.word	0x40014800

08004078 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004078:	b480      	push	{r7}
 800407a:	b087      	sub	sp, #28
 800407c:	af00      	add	r7, sp, #0
 800407e:	6078      	str	r0, [r7, #4]
 8004080:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6a1b      	ldr	r3, [r3, #32]
 8004086:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	6a1b      	ldr	r3, [r3, #32]
 800408c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	685b      	ldr	r3, [r3, #4]
 8004098:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	69db      	ldr	r3, [r3, #28]
 800409e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80040a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80040aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	f023 0303 	bic.w	r3, r3, #3
 80040b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80040b4:	683b      	ldr	r3, [r7, #0]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	68fa      	ldr	r2, [r7, #12]
 80040ba:	4313      	orrs	r3, r2
 80040bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80040be:	697b      	ldr	r3, [r7, #20]
 80040c0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80040c4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80040c6:	683b      	ldr	r3, [r7, #0]
 80040c8:	689b      	ldr	r3, [r3, #8]
 80040ca:	021b      	lsls	r3, r3, #8
 80040cc:	697a      	ldr	r2, [r7, #20]
 80040ce:	4313      	orrs	r3, r2
 80040d0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	4a23      	ldr	r2, [pc, #140]	@ (8004164 <TIM_OC3_SetConfig+0xec>)
 80040d6:	4293      	cmp	r3, r2
 80040d8:	d10d      	bne.n	80040f6 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80040da:	697b      	ldr	r3, [r7, #20]
 80040dc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80040e0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80040e2:	683b      	ldr	r3, [r7, #0]
 80040e4:	68db      	ldr	r3, [r3, #12]
 80040e6:	021b      	lsls	r3, r3, #8
 80040e8:	697a      	ldr	r2, [r7, #20]
 80040ea:	4313      	orrs	r3, r2
 80040ec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80040ee:	697b      	ldr	r3, [r7, #20]
 80040f0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80040f4:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	4a1a      	ldr	r2, [pc, #104]	@ (8004164 <TIM_OC3_SetConfig+0xec>)
 80040fa:	4293      	cmp	r3, r2
 80040fc:	d00b      	beq.n	8004116 <TIM_OC3_SetConfig+0x9e>
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	4a19      	ldr	r2, [pc, #100]	@ (8004168 <TIM_OC3_SetConfig+0xf0>)
 8004102:	4293      	cmp	r3, r2
 8004104:	d007      	beq.n	8004116 <TIM_OC3_SetConfig+0x9e>
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	4a18      	ldr	r2, [pc, #96]	@ (800416c <TIM_OC3_SetConfig+0xf4>)
 800410a:	4293      	cmp	r3, r2
 800410c:	d003      	beq.n	8004116 <TIM_OC3_SetConfig+0x9e>
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	4a17      	ldr	r2, [pc, #92]	@ (8004170 <TIM_OC3_SetConfig+0xf8>)
 8004112:	4293      	cmp	r3, r2
 8004114:	d113      	bne.n	800413e <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004116:	693b      	ldr	r3, [r7, #16]
 8004118:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800411c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800411e:	693b      	ldr	r3, [r7, #16]
 8004120:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004124:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004126:	683b      	ldr	r3, [r7, #0]
 8004128:	695b      	ldr	r3, [r3, #20]
 800412a:	011b      	lsls	r3, r3, #4
 800412c:	693a      	ldr	r2, [r7, #16]
 800412e:	4313      	orrs	r3, r2
 8004130:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004132:	683b      	ldr	r3, [r7, #0]
 8004134:	699b      	ldr	r3, [r3, #24]
 8004136:	011b      	lsls	r3, r3, #4
 8004138:	693a      	ldr	r2, [r7, #16]
 800413a:	4313      	orrs	r3, r2
 800413c:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	693a      	ldr	r2, [r7, #16]
 8004142:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	68fa      	ldr	r2, [r7, #12]
 8004148:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800414a:	683b      	ldr	r3, [r7, #0]
 800414c:	685a      	ldr	r2, [r3, #4]
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	697a      	ldr	r2, [r7, #20]
 8004156:	621a      	str	r2, [r3, #32]
}
 8004158:	bf00      	nop
 800415a:	371c      	adds	r7, #28
 800415c:	46bd      	mov	sp, r7
 800415e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004162:	4770      	bx	lr
 8004164:	40012c00 	.word	0x40012c00
 8004168:	40014000 	.word	0x40014000
 800416c:	40014400 	.word	0x40014400
 8004170:	40014800 	.word	0x40014800

08004174 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004174:	b480      	push	{r7}
 8004176:	b087      	sub	sp, #28
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
 800417c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6a1b      	ldr	r3, [r3, #32]
 8004182:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	6a1b      	ldr	r3, [r3, #32]
 8004188:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	685b      	ldr	r3, [r3, #4]
 8004194:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	69db      	ldr	r3, [r3, #28]
 800419a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80041a2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80041a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80041ae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80041b0:	683b      	ldr	r3, [r7, #0]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	021b      	lsls	r3, r3, #8
 80041b6:	68fa      	ldr	r2, [r7, #12]
 80041b8:	4313      	orrs	r3, r2
 80041ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80041bc:	693b      	ldr	r3, [r7, #16]
 80041be:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80041c2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80041c4:	683b      	ldr	r3, [r7, #0]
 80041c6:	689b      	ldr	r3, [r3, #8]
 80041c8:	031b      	lsls	r3, r3, #12
 80041ca:	693a      	ldr	r2, [r7, #16]
 80041cc:	4313      	orrs	r3, r2
 80041ce:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	4a16      	ldr	r2, [pc, #88]	@ (800422c <TIM_OC4_SetConfig+0xb8>)
 80041d4:	4293      	cmp	r3, r2
 80041d6:	d00b      	beq.n	80041f0 <TIM_OC4_SetConfig+0x7c>
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	4a15      	ldr	r2, [pc, #84]	@ (8004230 <TIM_OC4_SetConfig+0xbc>)
 80041dc:	4293      	cmp	r3, r2
 80041de:	d007      	beq.n	80041f0 <TIM_OC4_SetConfig+0x7c>
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	4a14      	ldr	r2, [pc, #80]	@ (8004234 <TIM_OC4_SetConfig+0xc0>)
 80041e4:	4293      	cmp	r3, r2
 80041e6:	d003      	beq.n	80041f0 <TIM_OC4_SetConfig+0x7c>
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	4a13      	ldr	r2, [pc, #76]	@ (8004238 <TIM_OC4_SetConfig+0xc4>)
 80041ec:	4293      	cmp	r3, r2
 80041ee:	d109      	bne.n	8004204 <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80041f0:	697b      	ldr	r3, [r7, #20]
 80041f2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80041f6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80041f8:	683b      	ldr	r3, [r7, #0]
 80041fa:	695b      	ldr	r3, [r3, #20]
 80041fc:	019b      	lsls	r3, r3, #6
 80041fe:	697a      	ldr	r2, [r7, #20]
 8004200:	4313      	orrs	r3, r2
 8004202:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	697a      	ldr	r2, [r7, #20]
 8004208:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	68fa      	ldr	r2, [r7, #12]
 800420e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004210:	683b      	ldr	r3, [r7, #0]
 8004212:	685a      	ldr	r2, [r3, #4]
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	693a      	ldr	r2, [r7, #16]
 800421c:	621a      	str	r2, [r3, #32]
}
 800421e:	bf00      	nop
 8004220:	371c      	adds	r7, #28
 8004222:	46bd      	mov	sp, r7
 8004224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004228:	4770      	bx	lr
 800422a:	bf00      	nop
 800422c:	40012c00 	.word	0x40012c00
 8004230:	40014000 	.word	0x40014000
 8004234:	40014400 	.word	0x40014400
 8004238:	40014800 	.word	0x40014800

0800423c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800423c:	b480      	push	{r7}
 800423e:	b087      	sub	sp, #28
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]
 8004244:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6a1b      	ldr	r3, [r3, #32]
 800424a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	6a1b      	ldr	r3, [r3, #32]
 8004250:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	685b      	ldr	r3, [r3, #4]
 800425c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004262:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800426a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800426e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004270:	683b      	ldr	r3, [r7, #0]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	68fa      	ldr	r2, [r7, #12]
 8004276:	4313      	orrs	r3, r2
 8004278:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800427a:	693b      	ldr	r3, [r7, #16]
 800427c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8004280:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004282:	683b      	ldr	r3, [r7, #0]
 8004284:	689b      	ldr	r3, [r3, #8]
 8004286:	041b      	lsls	r3, r3, #16
 8004288:	693a      	ldr	r2, [r7, #16]
 800428a:	4313      	orrs	r3, r2
 800428c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	4a15      	ldr	r2, [pc, #84]	@ (80042e8 <TIM_OC5_SetConfig+0xac>)
 8004292:	4293      	cmp	r3, r2
 8004294:	d00b      	beq.n	80042ae <TIM_OC5_SetConfig+0x72>
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	4a14      	ldr	r2, [pc, #80]	@ (80042ec <TIM_OC5_SetConfig+0xb0>)
 800429a:	4293      	cmp	r3, r2
 800429c:	d007      	beq.n	80042ae <TIM_OC5_SetConfig+0x72>
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	4a13      	ldr	r2, [pc, #76]	@ (80042f0 <TIM_OC5_SetConfig+0xb4>)
 80042a2:	4293      	cmp	r3, r2
 80042a4:	d003      	beq.n	80042ae <TIM_OC5_SetConfig+0x72>
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	4a12      	ldr	r2, [pc, #72]	@ (80042f4 <TIM_OC5_SetConfig+0xb8>)
 80042aa:	4293      	cmp	r3, r2
 80042ac:	d109      	bne.n	80042c2 <TIM_OC5_SetConfig+0x86>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80042ae:	697b      	ldr	r3, [r7, #20]
 80042b0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80042b4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80042b6:	683b      	ldr	r3, [r7, #0]
 80042b8:	695b      	ldr	r3, [r3, #20]
 80042ba:	021b      	lsls	r3, r3, #8
 80042bc:	697a      	ldr	r2, [r7, #20]
 80042be:	4313      	orrs	r3, r2
 80042c0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	697a      	ldr	r2, [r7, #20]
 80042c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	68fa      	ldr	r2, [r7, #12]
 80042cc:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80042ce:	683b      	ldr	r3, [r7, #0]
 80042d0:	685a      	ldr	r2, [r3, #4]
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	693a      	ldr	r2, [r7, #16]
 80042da:	621a      	str	r2, [r3, #32]
}
 80042dc:	bf00      	nop
 80042de:	371c      	adds	r7, #28
 80042e0:	46bd      	mov	sp, r7
 80042e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e6:	4770      	bx	lr
 80042e8:	40012c00 	.word	0x40012c00
 80042ec:	40014000 	.word	0x40014000
 80042f0:	40014400 	.word	0x40014400
 80042f4:	40014800 	.word	0x40014800

080042f8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80042f8:	b480      	push	{r7}
 80042fa:	b087      	sub	sp, #28
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	6078      	str	r0, [r7, #4]
 8004300:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	6a1b      	ldr	r3, [r3, #32]
 8004306:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	6a1b      	ldr	r3, [r3, #32]
 800430c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	685b      	ldr	r3, [r3, #4]
 8004318:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800431e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004326:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800432a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800432c:	683b      	ldr	r3, [r7, #0]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	021b      	lsls	r3, r3, #8
 8004332:	68fa      	ldr	r2, [r7, #12]
 8004334:	4313      	orrs	r3, r2
 8004336:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004338:	693b      	ldr	r3, [r7, #16]
 800433a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800433e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004340:	683b      	ldr	r3, [r7, #0]
 8004342:	689b      	ldr	r3, [r3, #8]
 8004344:	051b      	lsls	r3, r3, #20
 8004346:	693a      	ldr	r2, [r7, #16]
 8004348:	4313      	orrs	r3, r2
 800434a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	4a16      	ldr	r2, [pc, #88]	@ (80043a8 <TIM_OC6_SetConfig+0xb0>)
 8004350:	4293      	cmp	r3, r2
 8004352:	d00b      	beq.n	800436c <TIM_OC6_SetConfig+0x74>
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	4a15      	ldr	r2, [pc, #84]	@ (80043ac <TIM_OC6_SetConfig+0xb4>)
 8004358:	4293      	cmp	r3, r2
 800435a:	d007      	beq.n	800436c <TIM_OC6_SetConfig+0x74>
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	4a14      	ldr	r2, [pc, #80]	@ (80043b0 <TIM_OC6_SetConfig+0xb8>)
 8004360:	4293      	cmp	r3, r2
 8004362:	d003      	beq.n	800436c <TIM_OC6_SetConfig+0x74>
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	4a13      	ldr	r2, [pc, #76]	@ (80043b4 <TIM_OC6_SetConfig+0xbc>)
 8004368:	4293      	cmp	r3, r2
 800436a:	d109      	bne.n	8004380 <TIM_OC6_SetConfig+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800436c:	697b      	ldr	r3, [r7, #20]
 800436e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004372:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004374:	683b      	ldr	r3, [r7, #0]
 8004376:	695b      	ldr	r3, [r3, #20]
 8004378:	029b      	lsls	r3, r3, #10
 800437a:	697a      	ldr	r2, [r7, #20]
 800437c:	4313      	orrs	r3, r2
 800437e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	697a      	ldr	r2, [r7, #20]
 8004384:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	68fa      	ldr	r2, [r7, #12]
 800438a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800438c:	683b      	ldr	r3, [r7, #0]
 800438e:	685a      	ldr	r2, [r3, #4]
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	693a      	ldr	r2, [r7, #16]
 8004398:	621a      	str	r2, [r3, #32]
}
 800439a:	bf00      	nop
 800439c:	371c      	adds	r7, #28
 800439e:	46bd      	mov	sp, r7
 80043a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a4:	4770      	bx	lr
 80043a6:	bf00      	nop
 80043a8:	40012c00 	.word	0x40012c00
 80043ac:	40014000 	.word	0x40014000
 80043b0:	40014400 	.word	0x40014400
 80043b4:	40014800 	.word	0x40014800

080043b8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80043b8:	b480      	push	{r7}
 80043ba:	b087      	sub	sp, #28
 80043bc:	af00      	add	r7, sp, #0
 80043be:	60f8      	str	r0, [r7, #12]
 80043c0:	60b9      	str	r1, [r7, #8]
 80043c2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	6a1b      	ldr	r3, [r3, #32]
 80043c8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	6a1b      	ldr	r3, [r3, #32]
 80043ce:	f023 0201 	bic.w	r2, r3, #1
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	699b      	ldr	r3, [r3, #24]
 80043da:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80043dc:	693b      	ldr	r3, [r7, #16]
 80043de:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80043e2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	011b      	lsls	r3, r3, #4
 80043e8:	693a      	ldr	r2, [r7, #16]
 80043ea:	4313      	orrs	r3, r2
 80043ec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80043ee:	697b      	ldr	r3, [r7, #20]
 80043f0:	f023 030a 	bic.w	r3, r3, #10
 80043f4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80043f6:	697a      	ldr	r2, [r7, #20]
 80043f8:	68bb      	ldr	r3, [r7, #8]
 80043fa:	4313      	orrs	r3, r2
 80043fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	693a      	ldr	r2, [r7, #16]
 8004402:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	697a      	ldr	r2, [r7, #20]
 8004408:	621a      	str	r2, [r3, #32]
}
 800440a:	bf00      	nop
 800440c:	371c      	adds	r7, #28
 800440e:	46bd      	mov	sp, r7
 8004410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004414:	4770      	bx	lr

08004416 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004416:	b480      	push	{r7}
 8004418:	b087      	sub	sp, #28
 800441a:	af00      	add	r7, sp, #0
 800441c:	60f8      	str	r0, [r7, #12]
 800441e:	60b9      	str	r1, [r7, #8]
 8004420:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	6a1b      	ldr	r3, [r3, #32]
 8004426:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	6a1b      	ldr	r3, [r3, #32]
 800442c:	f023 0210 	bic.w	r2, r3, #16
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	699b      	ldr	r3, [r3, #24]
 8004438:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800443a:	693b      	ldr	r3, [r7, #16]
 800443c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004440:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	031b      	lsls	r3, r3, #12
 8004446:	693a      	ldr	r2, [r7, #16]
 8004448:	4313      	orrs	r3, r2
 800444a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800444c:	697b      	ldr	r3, [r7, #20]
 800444e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004452:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004454:	68bb      	ldr	r3, [r7, #8]
 8004456:	011b      	lsls	r3, r3, #4
 8004458:	697a      	ldr	r2, [r7, #20]
 800445a:	4313      	orrs	r3, r2
 800445c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	693a      	ldr	r2, [r7, #16]
 8004462:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	697a      	ldr	r2, [r7, #20]
 8004468:	621a      	str	r2, [r3, #32]
}
 800446a:	bf00      	nop
 800446c:	371c      	adds	r7, #28
 800446e:	46bd      	mov	sp, r7
 8004470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004474:	4770      	bx	lr

08004476 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004476:	b480      	push	{r7}
 8004478:	b085      	sub	sp, #20
 800447a:	af00      	add	r7, sp, #0
 800447c:	6078      	str	r0, [r7, #4]
 800447e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	689b      	ldr	r3, [r3, #8]
 8004484:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800448c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800448e:	683a      	ldr	r2, [r7, #0]
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	4313      	orrs	r3, r2
 8004494:	f043 0307 	orr.w	r3, r3, #7
 8004498:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	68fa      	ldr	r2, [r7, #12]
 800449e:	609a      	str	r2, [r3, #8]
}
 80044a0:	bf00      	nop
 80044a2:	3714      	adds	r7, #20
 80044a4:	46bd      	mov	sp, r7
 80044a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044aa:	4770      	bx	lr

080044ac <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80044ac:	b480      	push	{r7}
 80044ae:	b087      	sub	sp, #28
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	60f8      	str	r0, [r7, #12]
 80044b4:	60b9      	str	r1, [r7, #8]
 80044b6:	607a      	str	r2, [r7, #4]
 80044b8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	689b      	ldr	r3, [r3, #8]
 80044be:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80044c0:	697b      	ldr	r3, [r7, #20]
 80044c2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80044c6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80044c8:	683b      	ldr	r3, [r7, #0]
 80044ca:	021a      	lsls	r2, r3, #8
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	431a      	orrs	r2, r3
 80044d0:	68bb      	ldr	r3, [r7, #8]
 80044d2:	4313      	orrs	r3, r2
 80044d4:	697a      	ldr	r2, [r7, #20]
 80044d6:	4313      	orrs	r3, r2
 80044d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	697a      	ldr	r2, [r7, #20]
 80044de:	609a      	str	r2, [r3, #8]
}
 80044e0:	bf00      	nop
 80044e2:	371c      	adds	r7, #28
 80044e4:	46bd      	mov	sp, r7
 80044e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ea:	4770      	bx	lr

080044ec <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80044ec:	b480      	push	{r7}
 80044ee:	b087      	sub	sp, #28
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	60f8      	str	r0, [r7, #12]
 80044f4:	60b9      	str	r1, [r7, #8]
 80044f6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80044f8:	68bb      	ldr	r3, [r7, #8]
 80044fa:	f003 031f 	and.w	r3, r3, #31
 80044fe:	2201      	movs	r2, #1
 8004500:	fa02 f303 	lsl.w	r3, r2, r3
 8004504:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	6a1a      	ldr	r2, [r3, #32]
 800450a:	697b      	ldr	r3, [r7, #20]
 800450c:	43db      	mvns	r3, r3
 800450e:	401a      	ands	r2, r3
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	6a1a      	ldr	r2, [r3, #32]
 8004518:	68bb      	ldr	r3, [r7, #8]
 800451a:	f003 031f 	and.w	r3, r3, #31
 800451e:	6879      	ldr	r1, [r7, #4]
 8004520:	fa01 f303 	lsl.w	r3, r1, r3
 8004524:	431a      	orrs	r2, r3
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	621a      	str	r2, [r3, #32]
}
 800452a:	bf00      	nop
 800452c:	371c      	adds	r7, #28
 800452e:	46bd      	mov	sp, r7
 8004530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004534:	4770      	bx	lr
	...

08004538 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004538:	b480      	push	{r7}
 800453a:	b085      	sub	sp, #20
 800453c:	af00      	add	r7, sp, #0
 800453e:	6078      	str	r0, [r7, #4]
 8004540:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004548:	2b01      	cmp	r3, #1
 800454a:	d101      	bne.n	8004550 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800454c:	2302      	movs	r3, #2
 800454e:	e054      	b.n	80045fa <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2201      	movs	r2, #1
 8004554:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2202      	movs	r2, #2
 800455c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	685b      	ldr	r3, [r3, #4]
 8004566:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	689b      	ldr	r3, [r3, #8]
 800456e:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	4a24      	ldr	r2, [pc, #144]	@ (8004608 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004576:	4293      	cmp	r3, r2
 8004578:	d108      	bne.n	800458c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8004580:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004582:	683b      	ldr	r3, [r7, #0]
 8004584:	685b      	ldr	r3, [r3, #4]
 8004586:	68fa      	ldr	r2, [r7, #12]
 8004588:	4313      	orrs	r3, r2
 800458a:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004592:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004594:	683b      	ldr	r3, [r7, #0]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	68fa      	ldr	r2, [r7, #12]
 800459a:	4313      	orrs	r3, r2
 800459c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	68fa      	ldr	r2, [r7, #12]
 80045a4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	4a17      	ldr	r2, [pc, #92]	@ (8004608 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80045ac:	4293      	cmp	r3, r2
 80045ae:	d00e      	beq.n	80045ce <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80045b8:	d009      	beq.n	80045ce <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	4a13      	ldr	r2, [pc, #76]	@ (800460c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80045c0:	4293      	cmp	r3, r2
 80045c2:	d004      	beq.n	80045ce <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	4a11      	ldr	r2, [pc, #68]	@ (8004610 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80045ca:	4293      	cmp	r3, r2
 80045cc:	d10c      	bne.n	80045e8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80045ce:	68bb      	ldr	r3, [r7, #8]
 80045d0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80045d4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80045d6:	683b      	ldr	r3, [r7, #0]
 80045d8:	689b      	ldr	r3, [r3, #8]
 80045da:	68ba      	ldr	r2, [r7, #8]
 80045dc:	4313      	orrs	r3, r2
 80045de:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	68ba      	ldr	r2, [r7, #8]
 80045e6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	2201      	movs	r2, #1
 80045ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2200      	movs	r2, #0
 80045f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80045f8:	2300      	movs	r3, #0
}
 80045fa:	4618      	mov	r0, r3
 80045fc:	3714      	adds	r7, #20
 80045fe:	46bd      	mov	sp, r7
 8004600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004604:	4770      	bx	lr
 8004606:	bf00      	nop
 8004608:	40012c00 	.word	0x40012c00
 800460c:	40000400 	.word	0x40000400
 8004610:	40014000 	.word	0x40014000

08004614 <HAL_MultiProcessor_Init>:
  *        HAL_MultiProcessorEx_AddressLength_Set() must be called after
  *        HAL_MultiProcessor_Init().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MultiProcessor_Init(UART_HandleTypeDef *huart, uint8_t Address, uint32_t WakeUpMethod)
{
 8004614:	b580      	push	{r7, lr}
 8004616:	b084      	sub	sp, #16
 8004618:	af00      	add	r7, sp, #0
 800461a:	60f8      	str	r0, [r7, #12]
 800461c:	460b      	mov	r3, r1
 800461e:	607a      	str	r2, [r7, #4]
 8004620:	72fb      	strb	r3, [r7, #11]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	2b00      	cmp	r3, #0
 8004626:	d101      	bne.n	800462c <HAL_MultiProcessor_Init+0x18>
  {
    return HAL_ERROR;
 8004628:	2301      	movs	r3, #1
 800462a:	e059      	b.n	80046e0 <HAL_MultiProcessor_Init+0xcc>
  }

  /* Check the wake up method parameter */
  assert_param(IS_UART_WAKEUPMETHOD(WakeUpMethod));

  if (huart->gState == HAL_UART_STATE_RESET)
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004630:	2b00      	cmp	r3, #0
 8004632:	d106      	bne.n	8004642 <HAL_MultiProcessor_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	2200      	movs	r2, #0
 8004638:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800463c:	68f8      	ldr	r0, [r7, #12]
 800463e:	f7fc fe85 	bl	800134c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	2224      	movs	r2, #36	@ 0x24
 8004646:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	681a      	ldr	r2, [r3, #0]
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f022 0201 	bic.w	r2, r2, #1
 8004656:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800465c:	2b00      	cmp	r3, #0
 800465e:	d002      	beq.n	8004666 <HAL_MultiProcessor_Init+0x52>
  {
    UART_AdvFeatureConfig(huart);
 8004660:	68f8      	ldr	r0, [r7, #12]
 8004662:	f000 f977 	bl	8004954 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004666:	68f8      	ldr	r0, [r7, #12]
 8004668:	f000 f83e 	bl	80046e8 <UART_SetConfig>
 800466c:	4603      	mov	r3, r0
 800466e:	2b01      	cmp	r3, #1
 8004670:	d101      	bne.n	8004676 <HAL_MultiProcessor_Init+0x62>
  {
    return HAL_ERROR;
 8004672:	2301      	movs	r3, #1
 8004674:	e034      	b.n	80046e0 <HAL_MultiProcessor_Init+0xcc>
  }

  /* In multiprocessor mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register. */
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	685a      	ldr	r2, [r3, #4]
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004684:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	689a      	ldr	r2, [r3, #8]
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004694:	609a      	str	r2, [r3, #8]

  if (WakeUpMethod == UART_WAKEUPMETHOD_ADDRESSMARK)
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800469c:	d10a      	bne.n	80046b4 <HAL_MultiProcessor_Init+0xa0>
  {
    /* If address mark wake up method is chosen, set the USART address node */
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ADD, ((uint32_t)Address << UART_CR2_ADDRESS_LSB_POS));
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	685b      	ldr	r3, [r3, #4]
 80046a4:	f023 417f 	bic.w	r1, r3, #4278190080	@ 0xff000000
 80046a8:	7afb      	ldrb	r3, [r7, #11]
 80046aa:	061a      	lsls	r2, r3, #24
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	430a      	orrs	r2, r1
 80046b2:	605a      	str	r2, [r3, #4]
  }

  /* Set the wake up method by setting the WAKE bit in the CR1 register */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_WAKE, WakeUpMethod);
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f423 6100 	bic.w	r1, r3, #2048	@ 0x800
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	687a      	ldr	r2, [r7, #4]
 80046c4:	430a      	orrs	r2, r1
 80046c6:	601a      	str	r2, [r3, #0]

  __HAL_UART_ENABLE(huart);
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	681a      	ldr	r2, [r3, #0]
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f042 0201 	orr.w	r2, r2, #1
 80046d6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80046d8:	68f8      	ldr	r0, [r7, #12]
 80046da:	f000 f9dd 	bl	8004a98 <UART_CheckIdleState>
 80046de:	4603      	mov	r3, r0
}
 80046e0:	4618      	mov	r0, r3
 80046e2:	3710      	adds	r7, #16
 80046e4:	46bd      	mov	sp, r7
 80046e6:	bd80      	pop	{r7, pc}

080046e8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80046e8:	b580      	push	{r7, lr}
 80046ea:	b088      	sub	sp, #32
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80046f0:	2300      	movs	r3, #0
 80046f2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	689a      	ldr	r2, [r3, #8]
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	691b      	ldr	r3, [r3, #16]
 80046fc:	431a      	orrs	r2, r3
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	695b      	ldr	r3, [r3, #20]
 8004702:	431a      	orrs	r2, r3
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	69db      	ldr	r3, [r3, #28]
 8004708:	4313      	orrs	r3, r2
 800470a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	681a      	ldr	r2, [r3, #0]
 8004712:	4b8a      	ldr	r3, [pc, #552]	@ (800493c <UART_SetConfig+0x254>)
 8004714:	4013      	ands	r3, r2
 8004716:	687a      	ldr	r2, [r7, #4]
 8004718:	6812      	ldr	r2, [r2, #0]
 800471a:	6979      	ldr	r1, [r7, #20]
 800471c:	430b      	orrs	r3, r1
 800471e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	685b      	ldr	r3, [r3, #4]
 8004726:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	68da      	ldr	r2, [r3, #12]
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	430a      	orrs	r2, r1
 8004734:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	699b      	ldr	r3, [r3, #24]
 800473a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	6a1b      	ldr	r3, [r3, #32]
 8004740:	697a      	ldr	r2, [r7, #20]
 8004742:	4313      	orrs	r3, r2
 8004744:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	689b      	ldr	r3, [r3, #8]
 800474c:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	697a      	ldr	r2, [r7, #20]
 8004756:	430a      	orrs	r2, r1
 8004758:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	4a78      	ldr	r2, [pc, #480]	@ (8004940 <UART_SetConfig+0x258>)
 8004760:	4293      	cmp	r3, r2
 8004762:	d120      	bne.n	80047a6 <UART_SetConfig+0xbe>
 8004764:	4b77      	ldr	r3, [pc, #476]	@ (8004944 <UART_SetConfig+0x25c>)
 8004766:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004768:	f003 0303 	and.w	r3, r3, #3
 800476c:	2b03      	cmp	r3, #3
 800476e:	d817      	bhi.n	80047a0 <UART_SetConfig+0xb8>
 8004770:	a201      	add	r2, pc, #4	@ (adr r2, 8004778 <UART_SetConfig+0x90>)
 8004772:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004776:	bf00      	nop
 8004778:	08004789 	.word	0x08004789
 800477c:	08004795 	.word	0x08004795
 8004780:	0800479b 	.word	0x0800479b
 8004784:	0800478f 	.word	0x0800478f
 8004788:	2300      	movs	r3, #0
 800478a:	77fb      	strb	r3, [r7, #31]
 800478c:	e01d      	b.n	80047ca <UART_SetConfig+0xe2>
 800478e:	2302      	movs	r3, #2
 8004790:	77fb      	strb	r3, [r7, #31]
 8004792:	e01a      	b.n	80047ca <UART_SetConfig+0xe2>
 8004794:	2304      	movs	r3, #4
 8004796:	77fb      	strb	r3, [r7, #31]
 8004798:	e017      	b.n	80047ca <UART_SetConfig+0xe2>
 800479a:	2308      	movs	r3, #8
 800479c:	77fb      	strb	r3, [r7, #31]
 800479e:	e014      	b.n	80047ca <UART_SetConfig+0xe2>
 80047a0:	2310      	movs	r3, #16
 80047a2:	77fb      	strb	r3, [r7, #31]
 80047a4:	e011      	b.n	80047ca <UART_SetConfig+0xe2>
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	4a67      	ldr	r2, [pc, #412]	@ (8004948 <UART_SetConfig+0x260>)
 80047ac:	4293      	cmp	r3, r2
 80047ae:	d102      	bne.n	80047b6 <UART_SetConfig+0xce>
 80047b0:	2300      	movs	r3, #0
 80047b2:	77fb      	strb	r3, [r7, #31]
 80047b4:	e009      	b.n	80047ca <UART_SetConfig+0xe2>
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	4a64      	ldr	r2, [pc, #400]	@ (800494c <UART_SetConfig+0x264>)
 80047bc:	4293      	cmp	r3, r2
 80047be:	d102      	bne.n	80047c6 <UART_SetConfig+0xde>
 80047c0:	2300      	movs	r3, #0
 80047c2:	77fb      	strb	r3, [r7, #31]
 80047c4:	e001      	b.n	80047ca <UART_SetConfig+0xe2>
 80047c6:	2310      	movs	r3, #16
 80047c8:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	69db      	ldr	r3, [r3, #28]
 80047ce:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80047d2:	d15a      	bne.n	800488a <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 80047d4:	7ffb      	ldrb	r3, [r7, #31]
 80047d6:	2b08      	cmp	r3, #8
 80047d8:	d827      	bhi.n	800482a <UART_SetConfig+0x142>
 80047da:	a201      	add	r2, pc, #4	@ (adr r2, 80047e0 <UART_SetConfig+0xf8>)
 80047dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047e0:	08004805 	.word	0x08004805
 80047e4:	0800480d 	.word	0x0800480d
 80047e8:	08004815 	.word	0x08004815
 80047ec:	0800482b 	.word	0x0800482b
 80047f0:	0800481b 	.word	0x0800481b
 80047f4:	0800482b 	.word	0x0800482b
 80047f8:	0800482b 	.word	0x0800482b
 80047fc:	0800482b 	.word	0x0800482b
 8004800:	08004823 	.word	0x08004823
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004804:	f7fe fc92 	bl	800312c <HAL_RCC_GetPCLK1Freq>
 8004808:	61b8      	str	r0, [r7, #24]
        break;
 800480a:	e013      	b.n	8004834 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800480c:	f7fe fcb0 	bl	8003170 <HAL_RCC_GetPCLK2Freq>
 8004810:	61b8      	str	r0, [r7, #24]
        break;
 8004812:	e00f      	b.n	8004834 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004814:	4b4e      	ldr	r3, [pc, #312]	@ (8004950 <UART_SetConfig+0x268>)
 8004816:	61bb      	str	r3, [r7, #24]
        break;
 8004818:	e00c      	b.n	8004834 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800481a:	f7fe fc27 	bl	800306c <HAL_RCC_GetSysClockFreq>
 800481e:	61b8      	str	r0, [r7, #24]
        break;
 8004820:	e008      	b.n	8004834 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004822:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004826:	61bb      	str	r3, [r7, #24]
        break;
 8004828:	e004      	b.n	8004834 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 800482a:	2300      	movs	r3, #0
 800482c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800482e:	2301      	movs	r3, #1
 8004830:	77bb      	strb	r3, [r7, #30]
        break;
 8004832:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004834:	69bb      	ldr	r3, [r7, #24]
 8004836:	2b00      	cmp	r3, #0
 8004838:	d074      	beq.n	8004924 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800483a:	69bb      	ldr	r3, [r7, #24]
 800483c:	005a      	lsls	r2, r3, #1
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	685b      	ldr	r3, [r3, #4]
 8004842:	085b      	lsrs	r3, r3, #1
 8004844:	441a      	add	r2, r3
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	685b      	ldr	r3, [r3, #4]
 800484a:	fbb2 f3f3 	udiv	r3, r2, r3
 800484e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004850:	693b      	ldr	r3, [r7, #16]
 8004852:	2b0f      	cmp	r3, #15
 8004854:	d916      	bls.n	8004884 <UART_SetConfig+0x19c>
 8004856:	693b      	ldr	r3, [r7, #16]
 8004858:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800485c:	d212      	bcs.n	8004884 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800485e:	693b      	ldr	r3, [r7, #16]
 8004860:	b29b      	uxth	r3, r3
 8004862:	f023 030f 	bic.w	r3, r3, #15
 8004866:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004868:	693b      	ldr	r3, [r7, #16]
 800486a:	085b      	lsrs	r3, r3, #1
 800486c:	b29b      	uxth	r3, r3
 800486e:	f003 0307 	and.w	r3, r3, #7
 8004872:	b29a      	uxth	r2, r3
 8004874:	89fb      	ldrh	r3, [r7, #14]
 8004876:	4313      	orrs	r3, r2
 8004878:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	89fa      	ldrh	r2, [r7, #14]
 8004880:	60da      	str	r2, [r3, #12]
 8004882:	e04f      	b.n	8004924 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8004884:	2301      	movs	r3, #1
 8004886:	77bb      	strb	r3, [r7, #30]
 8004888:	e04c      	b.n	8004924 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800488a:	7ffb      	ldrb	r3, [r7, #31]
 800488c:	2b08      	cmp	r3, #8
 800488e:	d828      	bhi.n	80048e2 <UART_SetConfig+0x1fa>
 8004890:	a201      	add	r2, pc, #4	@ (adr r2, 8004898 <UART_SetConfig+0x1b0>)
 8004892:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004896:	bf00      	nop
 8004898:	080048bd 	.word	0x080048bd
 800489c:	080048c5 	.word	0x080048c5
 80048a0:	080048cd 	.word	0x080048cd
 80048a4:	080048e3 	.word	0x080048e3
 80048a8:	080048d3 	.word	0x080048d3
 80048ac:	080048e3 	.word	0x080048e3
 80048b0:	080048e3 	.word	0x080048e3
 80048b4:	080048e3 	.word	0x080048e3
 80048b8:	080048db 	.word	0x080048db
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80048bc:	f7fe fc36 	bl	800312c <HAL_RCC_GetPCLK1Freq>
 80048c0:	61b8      	str	r0, [r7, #24]
        break;
 80048c2:	e013      	b.n	80048ec <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80048c4:	f7fe fc54 	bl	8003170 <HAL_RCC_GetPCLK2Freq>
 80048c8:	61b8      	str	r0, [r7, #24]
        break;
 80048ca:	e00f      	b.n	80048ec <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80048cc:	4b20      	ldr	r3, [pc, #128]	@ (8004950 <UART_SetConfig+0x268>)
 80048ce:	61bb      	str	r3, [r7, #24]
        break;
 80048d0:	e00c      	b.n	80048ec <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80048d2:	f7fe fbcb 	bl	800306c <HAL_RCC_GetSysClockFreq>
 80048d6:	61b8      	str	r0, [r7, #24]
        break;
 80048d8:	e008      	b.n	80048ec <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80048da:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80048de:	61bb      	str	r3, [r7, #24]
        break;
 80048e0:	e004      	b.n	80048ec <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 80048e2:	2300      	movs	r3, #0
 80048e4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80048e6:	2301      	movs	r3, #1
 80048e8:	77bb      	strb	r3, [r7, #30]
        break;
 80048ea:	bf00      	nop
    }

    if (pclk != 0U)
 80048ec:	69bb      	ldr	r3, [r7, #24]
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d018      	beq.n	8004924 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	685b      	ldr	r3, [r3, #4]
 80048f6:	085a      	lsrs	r2, r3, #1
 80048f8:	69bb      	ldr	r3, [r7, #24]
 80048fa:	441a      	add	r2, r3
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	685b      	ldr	r3, [r3, #4]
 8004900:	fbb2 f3f3 	udiv	r3, r2, r3
 8004904:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004906:	693b      	ldr	r3, [r7, #16]
 8004908:	2b0f      	cmp	r3, #15
 800490a:	d909      	bls.n	8004920 <UART_SetConfig+0x238>
 800490c:	693b      	ldr	r3, [r7, #16]
 800490e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004912:	d205      	bcs.n	8004920 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004914:	693b      	ldr	r3, [r7, #16]
 8004916:	b29a      	uxth	r2, r3
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	60da      	str	r2, [r3, #12]
 800491e:	e001      	b.n	8004924 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8004920:	2301      	movs	r3, #1
 8004922:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	2200      	movs	r2, #0
 8004928:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	2200      	movs	r2, #0
 800492e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004930:	7fbb      	ldrb	r3, [r7, #30]
}
 8004932:	4618      	mov	r0, r3
 8004934:	3720      	adds	r7, #32
 8004936:	46bd      	mov	sp, r7
 8004938:	bd80      	pop	{r7, pc}
 800493a:	bf00      	nop
 800493c:	efff69f3 	.word	0xefff69f3
 8004940:	40013800 	.word	0x40013800
 8004944:	40021000 	.word	0x40021000
 8004948:	40004400 	.word	0x40004400
 800494c:	40004800 	.word	0x40004800
 8004950:	007a1200 	.word	0x007a1200

08004954 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004954:	b480      	push	{r7}
 8004956:	b083      	sub	sp, #12
 8004958:	af00      	add	r7, sp, #0
 800495a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004960:	f003 0308 	and.w	r3, r3, #8
 8004964:	2b00      	cmp	r3, #0
 8004966:	d00a      	beq.n	800497e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	685b      	ldr	r3, [r3, #4]
 800496e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	430a      	orrs	r2, r1
 800497c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004982:	f003 0301 	and.w	r3, r3, #1
 8004986:	2b00      	cmp	r3, #0
 8004988:	d00a      	beq.n	80049a0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	685b      	ldr	r3, [r3, #4]
 8004990:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	430a      	orrs	r2, r1
 800499e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049a4:	f003 0302 	and.w	r3, r3, #2
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d00a      	beq.n	80049c2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	685b      	ldr	r3, [r3, #4]
 80049b2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	430a      	orrs	r2, r1
 80049c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049c6:	f003 0304 	and.w	r3, r3, #4
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d00a      	beq.n	80049e4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	685b      	ldr	r3, [r3, #4]
 80049d4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	430a      	orrs	r2, r1
 80049e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049e8:	f003 0310 	and.w	r3, r3, #16
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d00a      	beq.n	8004a06 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	689b      	ldr	r3, [r3, #8]
 80049f6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	430a      	orrs	r2, r1
 8004a04:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a0a:	f003 0320 	and.w	r3, r3, #32
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d00a      	beq.n	8004a28 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	689b      	ldr	r3, [r3, #8]
 8004a18:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	430a      	orrs	r2, r1
 8004a26:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a2c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d01a      	beq.n	8004a6a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	685b      	ldr	r3, [r3, #4]
 8004a3a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	430a      	orrs	r2, r1
 8004a48:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a4e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004a52:	d10a      	bne.n	8004a6a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	685b      	ldr	r3, [r3, #4]
 8004a5a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	430a      	orrs	r2, r1
 8004a68:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a6e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d00a      	beq.n	8004a8c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	685b      	ldr	r3, [r3, #4]
 8004a7c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	430a      	orrs	r2, r1
 8004a8a:	605a      	str	r2, [r3, #4]
  }
}
 8004a8c:	bf00      	nop
 8004a8e:	370c      	adds	r7, #12
 8004a90:	46bd      	mov	sp, r7
 8004a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a96:	4770      	bx	lr

08004a98 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004a98:	b580      	push	{r7, lr}
 8004a9a:	b098      	sub	sp, #96	@ 0x60
 8004a9c:	af02      	add	r7, sp, #8
 8004a9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	2200      	movs	r2, #0
 8004aa4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004aa8:	f7fc fd8a 	bl	80015c0 <HAL_GetTick>
 8004aac:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f003 0308 	and.w	r3, r3, #8
 8004ab8:	2b08      	cmp	r3, #8
 8004aba:	d12e      	bne.n	8004b1a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004abc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004ac0:	9300      	str	r3, [sp, #0]
 8004ac2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004ac4:	2200      	movs	r2, #0
 8004ac6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004aca:	6878      	ldr	r0, [r7, #4]
 8004acc:	f000 f88c 	bl	8004be8 <UART_WaitOnFlagUntilTimeout>
 8004ad0:	4603      	mov	r3, r0
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d021      	beq.n	8004b1a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004adc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ade:	e853 3f00 	ldrex	r3, [r3]
 8004ae2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004ae4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ae6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004aea:	653b      	str	r3, [r7, #80]	@ 0x50
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	461a      	mov	r2, r3
 8004af2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004af4:	647b      	str	r3, [r7, #68]	@ 0x44
 8004af6:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004af8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004afa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004afc:	e841 2300 	strex	r3, r2, [r1]
 8004b00:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004b02:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d1e6      	bne.n	8004ad6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	2220      	movs	r2, #32
 8004b0c:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	2200      	movs	r2, #0
 8004b12:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004b16:	2303      	movs	r3, #3
 8004b18:	e062      	b.n	8004be0 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f003 0304 	and.w	r3, r3, #4
 8004b24:	2b04      	cmp	r3, #4
 8004b26:	d149      	bne.n	8004bbc <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004b28:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004b2c:	9300      	str	r3, [sp, #0]
 8004b2e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004b30:	2200      	movs	r2, #0
 8004b32:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004b36:	6878      	ldr	r0, [r7, #4]
 8004b38:	f000 f856 	bl	8004be8 <UART_WaitOnFlagUntilTimeout>
 8004b3c:	4603      	mov	r3, r0
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d03c      	beq.n	8004bbc <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b4a:	e853 3f00 	ldrex	r3, [r3]
 8004b4e:	623b      	str	r3, [r7, #32]
   return(result);
 8004b50:	6a3b      	ldr	r3, [r7, #32]
 8004b52:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004b56:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	461a      	mov	r2, r3
 8004b5e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004b60:	633b      	str	r3, [r7, #48]	@ 0x30
 8004b62:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b64:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004b66:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004b68:	e841 2300 	strex	r3, r2, [r1]
 8004b6c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004b6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d1e6      	bne.n	8004b42 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	3308      	adds	r3, #8
 8004b7a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b7c:	693b      	ldr	r3, [r7, #16]
 8004b7e:	e853 3f00 	ldrex	r3, [r3]
 8004b82:	60fb      	str	r3, [r7, #12]
   return(result);
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	f023 0301 	bic.w	r3, r3, #1
 8004b8a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	3308      	adds	r3, #8
 8004b92:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004b94:	61fa      	str	r2, [r7, #28]
 8004b96:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b98:	69b9      	ldr	r1, [r7, #24]
 8004b9a:	69fa      	ldr	r2, [r7, #28]
 8004b9c:	e841 2300 	strex	r3, r2, [r1]
 8004ba0:	617b      	str	r3, [r7, #20]
   return(result);
 8004ba2:	697b      	ldr	r3, [r7, #20]
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d1e5      	bne.n	8004b74 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2220      	movs	r2, #32
 8004bac:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	2200      	movs	r2, #0
 8004bb4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004bb8:	2303      	movs	r3, #3
 8004bba:	e011      	b.n	8004be0 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	2220      	movs	r2, #32
 8004bc0:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	2220      	movs	r2, #32
 8004bc6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	2200      	movs	r2, #0
 8004bce:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	2200      	movs	r2, #0
 8004bd4:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	2200      	movs	r2, #0
 8004bda:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8004bde:	2300      	movs	r3, #0
}
 8004be0:	4618      	mov	r0, r3
 8004be2:	3758      	adds	r7, #88	@ 0x58
 8004be4:	46bd      	mov	sp, r7
 8004be6:	bd80      	pop	{r7, pc}

08004be8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004be8:	b580      	push	{r7, lr}
 8004bea:	b084      	sub	sp, #16
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	60f8      	str	r0, [r7, #12]
 8004bf0:	60b9      	str	r1, [r7, #8]
 8004bf2:	603b      	str	r3, [r7, #0]
 8004bf4:	4613      	mov	r3, r2
 8004bf6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004bf8:	e04f      	b.n	8004c9a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004bfa:	69bb      	ldr	r3, [r7, #24]
 8004bfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c00:	d04b      	beq.n	8004c9a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c02:	f7fc fcdd 	bl	80015c0 <HAL_GetTick>
 8004c06:	4602      	mov	r2, r0
 8004c08:	683b      	ldr	r3, [r7, #0]
 8004c0a:	1ad3      	subs	r3, r2, r3
 8004c0c:	69ba      	ldr	r2, [r7, #24]
 8004c0e:	429a      	cmp	r2, r3
 8004c10:	d302      	bcc.n	8004c18 <UART_WaitOnFlagUntilTimeout+0x30>
 8004c12:	69bb      	ldr	r3, [r7, #24]
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d101      	bne.n	8004c1c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004c18:	2303      	movs	r3, #3
 8004c1a:	e04e      	b.n	8004cba <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f003 0304 	and.w	r3, r3, #4
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d037      	beq.n	8004c9a <UART_WaitOnFlagUntilTimeout+0xb2>
 8004c2a:	68bb      	ldr	r3, [r7, #8]
 8004c2c:	2b80      	cmp	r3, #128	@ 0x80
 8004c2e:	d034      	beq.n	8004c9a <UART_WaitOnFlagUntilTimeout+0xb2>
 8004c30:	68bb      	ldr	r3, [r7, #8]
 8004c32:	2b40      	cmp	r3, #64	@ 0x40
 8004c34:	d031      	beq.n	8004c9a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	69db      	ldr	r3, [r3, #28]
 8004c3c:	f003 0308 	and.w	r3, r3, #8
 8004c40:	2b08      	cmp	r3, #8
 8004c42:	d110      	bne.n	8004c66 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	2208      	movs	r2, #8
 8004c4a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004c4c:	68f8      	ldr	r0, [r7, #12]
 8004c4e:	f000 f838 	bl	8004cc2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	2208      	movs	r2, #8
 8004c56:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	2200      	movs	r2, #0
 8004c5e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8004c62:	2301      	movs	r3, #1
 8004c64:	e029      	b.n	8004cba <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	69db      	ldr	r3, [r3, #28]
 8004c6c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004c70:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004c74:	d111      	bne.n	8004c9a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004c7e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004c80:	68f8      	ldr	r0, [r7, #12]
 8004c82:	f000 f81e 	bl	8004cc2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	2220      	movs	r2, #32
 8004c8a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	2200      	movs	r2, #0
 8004c92:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8004c96:	2303      	movs	r3, #3
 8004c98:	e00f      	b.n	8004cba <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	69da      	ldr	r2, [r3, #28]
 8004ca0:	68bb      	ldr	r3, [r7, #8]
 8004ca2:	4013      	ands	r3, r2
 8004ca4:	68ba      	ldr	r2, [r7, #8]
 8004ca6:	429a      	cmp	r2, r3
 8004ca8:	bf0c      	ite	eq
 8004caa:	2301      	moveq	r3, #1
 8004cac:	2300      	movne	r3, #0
 8004cae:	b2db      	uxtb	r3, r3
 8004cb0:	461a      	mov	r2, r3
 8004cb2:	79fb      	ldrb	r3, [r7, #7]
 8004cb4:	429a      	cmp	r2, r3
 8004cb6:	d0a0      	beq.n	8004bfa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004cb8:	2300      	movs	r3, #0
}
 8004cba:	4618      	mov	r0, r3
 8004cbc:	3710      	adds	r7, #16
 8004cbe:	46bd      	mov	sp, r7
 8004cc0:	bd80      	pop	{r7, pc}

08004cc2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004cc2:	b480      	push	{r7}
 8004cc4:	b095      	sub	sp, #84	@ 0x54
 8004cc6:	af00      	add	r7, sp, #0
 8004cc8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cd0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004cd2:	e853 3f00 	ldrex	r3, [r3]
 8004cd6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004cd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cda:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004cde:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	461a      	mov	r2, r3
 8004ce6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004ce8:	643b      	str	r3, [r7, #64]	@ 0x40
 8004cea:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cec:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004cee:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004cf0:	e841 2300 	strex	r3, r2, [r1]
 8004cf4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004cf6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d1e6      	bne.n	8004cca <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	3308      	adds	r3, #8
 8004d02:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d04:	6a3b      	ldr	r3, [r7, #32]
 8004d06:	e853 3f00 	ldrex	r3, [r3]
 8004d0a:	61fb      	str	r3, [r7, #28]
   return(result);
 8004d0c:	69fb      	ldr	r3, [r7, #28]
 8004d0e:	f023 0301 	bic.w	r3, r3, #1
 8004d12:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	3308      	adds	r3, #8
 8004d1a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004d1c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004d1e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d20:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004d22:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004d24:	e841 2300 	strex	r3, r2, [r1]
 8004d28:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004d2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d1e5      	bne.n	8004cfc <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004d34:	2b01      	cmp	r3, #1
 8004d36:	d118      	bne.n	8004d6a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	e853 3f00 	ldrex	r3, [r3]
 8004d44:	60bb      	str	r3, [r7, #8]
   return(result);
 8004d46:	68bb      	ldr	r3, [r7, #8]
 8004d48:	f023 0310 	bic.w	r3, r3, #16
 8004d4c:	647b      	str	r3, [r7, #68]	@ 0x44
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	461a      	mov	r2, r3
 8004d54:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004d56:	61bb      	str	r3, [r7, #24]
 8004d58:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d5a:	6979      	ldr	r1, [r7, #20]
 8004d5c:	69ba      	ldr	r2, [r7, #24]
 8004d5e:	e841 2300 	strex	r3, r2, [r1]
 8004d62:	613b      	str	r3, [r7, #16]
   return(result);
 8004d64:	693b      	ldr	r3, [r7, #16]
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d1e6      	bne.n	8004d38 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	2220      	movs	r2, #32
 8004d6e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	2200      	movs	r2, #0
 8004d76:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2200      	movs	r2, #0
 8004d7c:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004d7e:	bf00      	nop
 8004d80:	3754      	adds	r7, #84	@ 0x54
 8004d82:	46bd      	mov	sp, r7
 8004d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d88:	4770      	bx	lr

08004d8a <memset>:
 8004d8a:	4402      	add	r2, r0
 8004d8c:	4603      	mov	r3, r0
 8004d8e:	4293      	cmp	r3, r2
 8004d90:	d100      	bne.n	8004d94 <memset+0xa>
 8004d92:	4770      	bx	lr
 8004d94:	f803 1b01 	strb.w	r1, [r3], #1
 8004d98:	e7f9      	b.n	8004d8e <memset+0x4>
	...

08004d9c <__libc_init_array>:
 8004d9c:	b570      	push	{r4, r5, r6, lr}
 8004d9e:	4d0d      	ldr	r5, [pc, #52]	@ (8004dd4 <__libc_init_array+0x38>)
 8004da0:	4c0d      	ldr	r4, [pc, #52]	@ (8004dd8 <__libc_init_array+0x3c>)
 8004da2:	1b64      	subs	r4, r4, r5
 8004da4:	10a4      	asrs	r4, r4, #2
 8004da6:	2600      	movs	r6, #0
 8004da8:	42a6      	cmp	r6, r4
 8004daa:	d109      	bne.n	8004dc0 <__libc_init_array+0x24>
 8004dac:	4d0b      	ldr	r5, [pc, #44]	@ (8004ddc <__libc_init_array+0x40>)
 8004dae:	4c0c      	ldr	r4, [pc, #48]	@ (8004de0 <__libc_init_array+0x44>)
 8004db0:	f000 f818 	bl	8004de4 <_init>
 8004db4:	1b64      	subs	r4, r4, r5
 8004db6:	10a4      	asrs	r4, r4, #2
 8004db8:	2600      	movs	r6, #0
 8004dba:	42a6      	cmp	r6, r4
 8004dbc:	d105      	bne.n	8004dca <__libc_init_array+0x2e>
 8004dbe:	bd70      	pop	{r4, r5, r6, pc}
 8004dc0:	f855 3b04 	ldr.w	r3, [r5], #4
 8004dc4:	4798      	blx	r3
 8004dc6:	3601      	adds	r6, #1
 8004dc8:	e7ee      	b.n	8004da8 <__libc_init_array+0xc>
 8004dca:	f855 3b04 	ldr.w	r3, [r5], #4
 8004dce:	4798      	blx	r3
 8004dd0:	3601      	adds	r6, #1
 8004dd2:	e7f2      	b.n	8004dba <__libc_init_array+0x1e>
 8004dd4:	08004e34 	.word	0x08004e34
 8004dd8:	08004e34 	.word	0x08004e34
 8004ddc:	08004e34 	.word	0x08004e34
 8004de0:	08004e38 	.word	0x08004e38

08004de4 <_init>:
 8004de4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004de6:	bf00      	nop
 8004de8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004dea:	bc08      	pop	{r3}
 8004dec:	469e      	mov	lr, r3
 8004dee:	4770      	bx	lr

08004df0 <_fini>:
 8004df0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004df2:	bf00      	nop
 8004df4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004df6:	bc08      	pop	{r3}
 8004df8:	469e      	mov	lr, r3
 8004dfa:	4770      	bx	lr
