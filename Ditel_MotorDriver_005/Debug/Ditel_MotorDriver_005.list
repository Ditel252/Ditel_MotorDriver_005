
Ditel_MotorDriver_005.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000627c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a30  0800640c  0800640c  0000740c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006e3c  08006e3c  0000805c  2**0
                  CONTENTS
  4 .ARM          00000008  08006e3c  08006e3c  00007e3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006e44  08006e44  0000805c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006e44  08006e44  00007e44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006e48  08006e48  00007e48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08006e4c  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000805c  2**0
                  CONTENTS
 10 .bss          0000048c  2000005c  2000005c  0000805c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200004e8  200004e8  0000805c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000805c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001275c  00000000  00000000  0000808c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002c47  00000000  00000000  0001a7e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f78  00000000  00000000  0001d430  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000bfd  00000000  00000000  0001e3a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001d590  00000000  00000000  0001efa5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00015e38  00000000  00000000  0003c535  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a8397  00000000  00000000  0005236d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000fa704  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004498  00000000  00000000  000fa748  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006a  00000000  00000000  000febe0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000005c 	.word	0x2000005c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080063f4 	.word	0x080063f4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000060 	.word	0x20000060
 80001cc:	080063f4 	.word	0x080063f4

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <_7SegInit>:

#include <D-M-005/7Seg.h>

_7SEG_SETTING _7SegSetting;

void _7SegInit(_7SEG_SETTING *__7SegSetting){
 8000280:	b580      	push	{r7, lr}
 8000282:	b082      	sub	sp, #8
 8000284:	af00      	add	r7, sp, #0
 8000286:	6078      	str	r0, [r7, #4]
	_7SegSetting.__7SegSi_GpioPort = __7SegSetting->__7SegSi_GpioPort;
 8000288:	687b      	ldr	r3, [r7, #4]
 800028a:	681b      	ldr	r3, [r3, #0]
 800028c:	4a18      	ldr	r2, [pc, #96]	@ (80002f0 <_7SegInit+0x70>)
 800028e:	6013      	str	r3, [r2, #0]
	_7SegSetting.__7SegSi_Pin = __7SegSetting->__7SegSi_Pin;
 8000290:	687b      	ldr	r3, [r7, #4]
 8000292:	889a      	ldrh	r2, [r3, #4]
 8000294:	4b16      	ldr	r3, [pc, #88]	@ (80002f0 <_7SegInit+0x70>)
 8000296:	809a      	strh	r2, [r3, #4]
	_7SegSetting.__7SegRck_GpioPort = __7SegSetting->__7SegRck_GpioPort;
 8000298:	687b      	ldr	r3, [r7, #4]
 800029a:	689b      	ldr	r3, [r3, #8]
 800029c:	4a14      	ldr	r2, [pc, #80]	@ (80002f0 <_7SegInit+0x70>)
 800029e:	6093      	str	r3, [r2, #8]
	_7SegSetting.__7SegRck_Pin = __7SegSetting->__7SegRck_Pin;
 80002a0:	687b      	ldr	r3, [r7, #4]
 80002a2:	899a      	ldrh	r2, [r3, #12]
 80002a4:	4b12      	ldr	r3, [pc, #72]	@ (80002f0 <_7SegInit+0x70>)
 80002a6:	819a      	strh	r2, [r3, #12]
	_7SegSetting.__7SegSck_GpioPort = __7SegSetting->__7SegSck_GpioPort;
 80002a8:	687b      	ldr	r3, [r7, #4]
 80002aa:	691b      	ldr	r3, [r3, #16]
 80002ac:	4a10      	ldr	r2, [pc, #64]	@ (80002f0 <_7SegInit+0x70>)
 80002ae:	6113      	str	r3, [r2, #16]
	_7SegSetting.__7SegSck_Pin = __7SegSetting->__7SegSck_Pin;
 80002b0:	687b      	ldr	r3, [r7, #4]
 80002b2:	8a9a      	ldrh	r2, [r3, #20]
 80002b4:	4b0e      	ldr	r3, [pc, #56]	@ (80002f0 <_7SegInit+0x70>)
 80002b6:	829a      	strh	r2, [r3, #20]

	HAL_GPIO_WritePin(_7SegSetting.__7SegSi_GpioPort, _7SegSetting.__7SegSi_Pin, GPIO_PIN_RESET);
 80002b8:	4b0d      	ldr	r3, [pc, #52]	@ (80002f0 <_7SegInit+0x70>)
 80002ba:	681b      	ldr	r3, [r3, #0]
 80002bc:	4a0c      	ldr	r2, [pc, #48]	@ (80002f0 <_7SegInit+0x70>)
 80002be:	8891      	ldrh	r1, [r2, #4]
 80002c0:	2200      	movs	r2, #0
 80002c2:	4618      	mov	r0, r3
 80002c4:	f001 ffaa 	bl	800221c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(_7SegSetting.__7SegRck_GpioPort, _7SegSetting.__7SegRck_Pin, GPIO_PIN_RESET);
 80002c8:	4b09      	ldr	r3, [pc, #36]	@ (80002f0 <_7SegInit+0x70>)
 80002ca:	689b      	ldr	r3, [r3, #8]
 80002cc:	4a08      	ldr	r2, [pc, #32]	@ (80002f0 <_7SegInit+0x70>)
 80002ce:	8991      	ldrh	r1, [r2, #12]
 80002d0:	2200      	movs	r2, #0
 80002d2:	4618      	mov	r0, r3
 80002d4:	f001 ffa2 	bl	800221c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(_7SegSetting.__7SegSck_GpioPort, _7SegSetting.__7SegSck_Pin, GPIO_PIN_RESET);
 80002d8:	4b05      	ldr	r3, [pc, #20]	@ (80002f0 <_7SegInit+0x70>)
 80002da:	691b      	ldr	r3, [r3, #16]
 80002dc:	4a04      	ldr	r2, [pc, #16]	@ (80002f0 <_7SegInit+0x70>)
 80002de:	8a91      	ldrh	r1, [r2, #20]
 80002e0:	2200      	movs	r2, #0
 80002e2:	4618      	mov	r0, r3
 80002e4:	f001 ff9a 	bl	800221c <HAL_GPIO_WritePin>
}
 80002e8:	bf00      	nop
 80002ea:	3708      	adds	r7, #8
 80002ec:	46bd      	mov	sp, r7
 80002ee:	bd80      	pop	{r7, pc}
 80002f0:	20000078 	.word	0x20000078

080002f4 <_7SegReset>:
            __7Seg1byteDisplay(~(0b00011110 | (isDisplayDp ? 0b10000000 : 0b00000000)));
            break;
    }
}

void _7SegReset(){
 80002f4:	b580      	push	{r7, lr}
 80002f6:	af00      	add	r7, sp, #0
    __7Seg1byteDisplay(~(0b00000000));
 80002f8:	f04f 30ff 	mov.w	r0, #4294967295
 80002fc:	f000 f878 	bl	80003f0 <__7Seg1byteDisplay>
    __7Seg1byteDisplay(~(0b00000000));
 8000300:	f04f 30ff 	mov.w	r0, #4294967295
 8000304:	f000 f874 	bl	80003f0 <__7Seg1byteDisplay>
}
 8000308:	bf00      	nop
 800030a:	bd80      	pop	{r7, pc}

0800030c <_7SegSetUpAnimation>:

void _7SegSetUpAnimation(_SETUP_STEP_FOR_7SEG __SetupStep){
 800030c:	b580      	push	{r7, lr}
 800030e:	b082      	sub	sp, #8
 8000310:	af00      	add	r7, sp, #0
 8000312:	4603      	mov	r3, r0
 8000314:	71fb      	strb	r3, [r7, #7]
	switch (__SetupStep) {
 8000316:	79fb      	ldrb	r3, [r7, #7]
 8000318:	3b01      	subs	r3, #1
 800031a:	2b08      	cmp	r3, #8
 800031c:	d863      	bhi.n	80003e6 <_7SegSetUpAnimation+0xda>
 800031e:	a201      	add	r2, pc, #4	@ (adr r2, 8000324 <_7SegSetUpAnimation+0x18>)
 8000320:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000324:	08000349 	.word	0x08000349
 8000328:	0800035b 	.word	0x0800035b
 800032c:	0800036d 	.word	0x0800036d
 8000330:	0800037f 	.word	0x0800037f
 8000334:	08000391 	.word	0x08000391
 8000338:	080003a3 	.word	0x080003a3
 800033c:	080003b5 	.word	0x080003b5
 8000340:	080003c7 	.word	0x080003c7
 8000344:	080003d9 	.word	0x080003d9
		case _SETUP_STEP_START_PROGRAM:
			__7Seg1byteDisplay(__7SEG_NULL_1Byte);
 8000348:	f04f 30ff 	mov.w	r0, #4294967295
 800034c:	f000 f850 	bl	80003f0 <__7Seg1byteDisplay>
			__7Seg1byteDisplay(__7SEG_ONLY_A_1Byte);
 8000350:	f06f 0002 	mvn.w	r0, #2
 8000354:	f000 f84c 	bl	80003f0 <__7Seg1byteDisplay>
			break;
 8000358:	e045      	b.n	80003e6 <_7SegSetUpAnimation+0xda>
		case _SETUP_STEP_SETUP_MOTOR:
			__7Seg1byteDisplay(__7SEG_ONLY_A_1Byte);
 800035a:	f06f 0002 	mvn.w	r0, #2
 800035e:	f000 f847 	bl	80003f0 <__7Seg1byteDisplay>
			__7Seg1byteDisplay(__7SEG_NULL_1Byte);
 8000362:	f04f 30ff 	mov.w	r0, #4294967295
 8000366:	f000 f843 	bl	80003f0 <__7Seg1byteDisplay>
			break;
 800036a:	e03c      	b.n	80003e6 <_7SegSetUpAnimation+0xda>
		case _SETUP_STEP_SETUP_AND_READ_SWICH:
			__7Seg1byteDisplay(__7SEG_ONLY_B_1Byte);
 800036c:	f06f 0001 	mvn.w	r0, #1
 8000370:	f000 f83e 	bl	80003f0 <__7Seg1byteDisplay>
			__7Seg1byteDisplay(__7SEG_NULL_1Byte);
 8000374:	f04f 30ff 	mov.w	r0, #4294967295
 8000378:	f000 f83a 	bl	80003f0 <__7Seg1byteDisplay>
			break;
 800037c:	e033      	b.n	80003e6 <_7SegSetUpAnimation+0xda>
		case _SETUP_STEP_SETUP_CONSOLE:
			__7Seg1byteDisplay(__7SEG_ONLY_C_1Byte);
 800037e:	f06f 0040 	mvn.w	r0, #64	@ 0x40
 8000382:	f000 f835 	bl	80003f0 <__7Seg1byteDisplay>
			__7Seg1byteDisplay(__7SEG_NULL_1Byte);
 8000386:	f04f 30ff 	mov.w	r0, #4294967295
 800038a:	f000 f831 	bl	80003f0 <__7Seg1byteDisplay>
			break;
 800038e:	e02a      	b.n	80003e6 <_7SegSetUpAnimation+0xda>
		case _SETUP_STEP_NULL3:
			__7Seg1byteDisplay(__7SEG_ONLY_D_1Byte);
 8000390:	f06f 0020 	mvn.w	r0, #32
 8000394:	f000 f82c 	bl	80003f0 <__7Seg1byteDisplay>
			__7Seg1byteDisplay(__7SEG_NULL_1Byte);
 8000398:	f04f 30ff 	mov.w	r0, #4294967295
 800039c:	f000 f828 	bl	80003f0 <__7Seg1byteDisplay>
			break;
 80003a0:	e021      	b.n	80003e6 <_7SegSetUpAnimation+0xda>
		case _SETUP_STEP_NULL4:
			__7Seg1byteDisplay(__7SEG_NULL_1Byte);
 80003a2:	f04f 30ff 	mov.w	r0, #4294967295
 80003a6:	f000 f823 	bl	80003f0 <__7Seg1byteDisplay>
			__7Seg1byteDisplay(__7SEG_ONLY_D_1Byte);
 80003aa:	f06f 0020 	mvn.w	r0, #32
 80003ae:	f000 f81f 	bl	80003f0 <__7Seg1byteDisplay>
			break;
 80003b2:	e018      	b.n	80003e6 <_7SegSetUpAnimation+0xda>
		case _SETUP_STEP_NULL5:
			__7Seg1byteDisplay(__7SEG_NULL_1Byte);
 80003b4:	f04f 30ff 	mov.w	r0, #4294967295
 80003b8:	f000 f81a 	bl	80003f0 <__7Seg1byteDisplay>
			__7Seg1byteDisplay(__7SEG_ONLY_E_1Byte);
 80003bc:	f06f 0010 	mvn.w	r0, #16
 80003c0:	f000 f816 	bl	80003f0 <__7Seg1byteDisplay>
			break;
 80003c4:	e00f      	b.n	80003e6 <_7SegSetUpAnimation+0xda>
		case _SETUP_STEP_NULL6:
			__7Seg1byteDisplay(__7SEG_NULL_1Byte);
 80003c6:	f04f 30ff 	mov.w	r0, #4294967295
 80003ca:	f000 f811 	bl	80003f0 <__7Seg1byteDisplay>
			__7Seg1byteDisplay(__7SEG_ONLY_F_1Byte);
 80003ce:	f06f 0004 	mvn.w	r0, #4
 80003d2:	f000 f80d 	bl	80003f0 <__7Seg1byteDisplay>
			break;
 80003d6:	e006      	b.n	80003e6 <_7SegSetUpAnimation+0xda>
		case _SETUP_STEP_FINISH:
			__7Seg1byteDisplay(~__7SEG_ONLY_G_1Byte | ~__7SEG_ONLY_DP_1Byte);
 80003d8:	2088      	movs	r0, #136	@ 0x88
 80003da:	f000 f809 	bl	80003f0 <__7Seg1byteDisplay>
			__7Seg1byteDisplay(~__7SEG_ONLY_G_1Byte | ~__7SEG_ONLY_DP_1Byte);
 80003de:	2088      	movs	r0, #136	@ 0x88
 80003e0:	f000 f806 	bl	80003f0 <__7Seg1byteDisplay>
			break;
 80003e4:	bf00      	nop
	}
}
 80003e6:	bf00      	nop
 80003e8:	3708      	adds	r7, #8
 80003ea:	46bd      	mov	sp, r7
 80003ec:	bd80      	pop	{r7, pc}
 80003ee:	bf00      	nop

080003f0 <__7Seg1byteDisplay>:

void __7Seg1byteDisplay(uint8_t _displayContent){
 80003f0:	b580      	push	{r7, lr}
 80003f2:	b084      	sub	sp, #16
 80003f4:	af00      	add	r7, sp, #0
 80003f6:	4603      	mov	r3, r0
 80003f8:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(_7SegSetting.__7SegRck_GpioPort, _7SegSetting.__7SegRck_Pin, GPIO_PIN_RESET);
 80003fa:	4b1e      	ldr	r3, [pc, #120]	@ (8000474 <__7Seg1byteDisplay+0x84>)
 80003fc:	689b      	ldr	r3, [r3, #8]
 80003fe:	4a1d      	ldr	r2, [pc, #116]	@ (8000474 <__7Seg1byteDisplay+0x84>)
 8000400:	8991      	ldrh	r1, [r2, #12]
 8000402:	2200      	movs	r2, #0
 8000404:	4618      	mov	r0, r3
 8000406:	f001 ff09 	bl	800221c <HAL_GPIO_WritePin>
    for (int i = 0; i < 8; i++){
 800040a:	2300      	movs	r3, #0
 800040c:	60fb      	str	r3, [r7, #12]
 800040e:	e021      	b.n	8000454 <__7Seg1byteDisplay+0x64>
        HAL_GPIO_WritePin(_7SegSetting.__7SegSi_GpioPort, _7SegSetting.__7SegSi_Pin, (_displayContent & (1U << i)) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000410:	4b18      	ldr	r3, [pc, #96]	@ (8000474 <__7Seg1byteDisplay+0x84>)
 8000412:	6818      	ldr	r0, [r3, #0]
 8000414:	4b17      	ldr	r3, [pc, #92]	@ (8000474 <__7Seg1byteDisplay+0x84>)
 8000416:	8899      	ldrh	r1, [r3, #4]
 8000418:	79fa      	ldrb	r2, [r7, #7]
 800041a:	68fb      	ldr	r3, [r7, #12]
 800041c:	fa22 f303 	lsr.w	r3, r2, r3
 8000420:	b2db      	uxtb	r3, r3
 8000422:	f003 0301 	and.w	r3, r3, #1
 8000426:	b2db      	uxtb	r3, r3
 8000428:	461a      	mov	r2, r3
 800042a:	f001 fef7 	bl	800221c <HAL_GPIO_WritePin>

        HAL_GPIO_WritePin(_7SegSetting.__7SegSck_GpioPort, _7SegSetting.__7SegSck_Pin, GPIO_PIN_SET);
 800042e:	4b11      	ldr	r3, [pc, #68]	@ (8000474 <__7Seg1byteDisplay+0x84>)
 8000430:	691b      	ldr	r3, [r3, #16]
 8000432:	4a10      	ldr	r2, [pc, #64]	@ (8000474 <__7Seg1byteDisplay+0x84>)
 8000434:	8a91      	ldrh	r1, [r2, #20]
 8000436:	2201      	movs	r2, #1
 8000438:	4618      	mov	r0, r3
 800043a:	f001 feef 	bl	800221c <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(_7SegSetting.__7SegSck_GpioPort, _7SegSetting.__7SegSck_Pin, GPIO_PIN_RESET);
 800043e:	4b0d      	ldr	r3, [pc, #52]	@ (8000474 <__7Seg1byteDisplay+0x84>)
 8000440:	691b      	ldr	r3, [r3, #16]
 8000442:	4a0c      	ldr	r2, [pc, #48]	@ (8000474 <__7Seg1byteDisplay+0x84>)
 8000444:	8a91      	ldrh	r1, [r2, #20]
 8000446:	2200      	movs	r2, #0
 8000448:	4618      	mov	r0, r3
 800044a:	f001 fee7 	bl	800221c <HAL_GPIO_WritePin>
    for (int i = 0; i < 8; i++){
 800044e:	68fb      	ldr	r3, [r7, #12]
 8000450:	3301      	adds	r3, #1
 8000452:	60fb      	str	r3, [r7, #12]
 8000454:	68fb      	ldr	r3, [r7, #12]
 8000456:	2b07      	cmp	r3, #7
 8000458:	ddda      	ble.n	8000410 <__7Seg1byteDisplay+0x20>
    }

    HAL_GPIO_WritePin(_7SegSetting.__7SegRck_GpioPort, _7SegSetting.__7SegRck_Pin, GPIO_PIN_SET);
 800045a:	4b06      	ldr	r3, [pc, #24]	@ (8000474 <__7Seg1byteDisplay+0x84>)
 800045c:	689b      	ldr	r3, [r3, #8]
 800045e:	4a05      	ldr	r2, [pc, #20]	@ (8000474 <__7Seg1byteDisplay+0x84>)
 8000460:	8991      	ldrh	r1, [r2, #12]
 8000462:	2201      	movs	r2, #1
 8000464:	4618      	mov	r0, r3
 8000466:	f001 fed9 	bl	800221c <HAL_GPIO_WritePin>
}
 800046a:	bf00      	nop
 800046c:	3710      	adds	r7, #16
 800046e:	46bd      	mov	sp, r7
 8000470:	bd80      	pop	{r7, pc}
 8000472:	bf00      	nop
 8000474:	20000078 	.word	0x20000078

08000478 <_MotorInit>:

#include "D-M-005/Motor.h"

_MOTOR_SETTING _MotorSetting;

void _MotorInit(_MOTOR_SETTING *__MotorSetting){
 8000478:	b580      	push	{r7, lr}
 800047a:	b082      	sub	sp, #8
 800047c:	af00      	add	r7, sp, #0
 800047e:	6078      	str	r0, [r7, #4]
	_MotorSetting.__MotorN1_Tim = __MotorSetting->__MotorN1_Tim;
 8000480:	687b      	ldr	r3, [r7, #4]
 8000482:	681b      	ldr	r3, [r3, #0]
 8000484:	4a5c      	ldr	r2, [pc, #368]	@ (80005f8 <_MotorInit+0x180>)
 8000486:	6013      	str	r3, [r2, #0]
	_MotorSetting.__MotorN1_TimChannel = __MotorSetting->__MotorN1_TimChannel;
 8000488:	687b      	ldr	r3, [r7, #4]
 800048a:	685b      	ldr	r3, [r3, #4]
 800048c:	4a5a      	ldr	r2, [pc, #360]	@ (80005f8 <_MotorInit+0x180>)
 800048e:	6053      	str	r3, [r2, #4]
	_MotorSetting.__MotorN2_Tim = __MotorSetting->__MotorN2_Tim;
 8000490:	687b      	ldr	r3, [r7, #4]
 8000492:	689b      	ldr	r3, [r3, #8]
 8000494:	4a58      	ldr	r2, [pc, #352]	@ (80005f8 <_MotorInit+0x180>)
 8000496:	6093      	str	r3, [r2, #8]
	_MotorSetting.__MotorN2_TimChannel = __MotorSetting->__MotorN2_TimChannel;
 8000498:	687b      	ldr	r3, [r7, #4]
 800049a:	68db      	ldr	r3, [r3, #12]
 800049c:	4a56      	ldr	r2, [pc, #344]	@ (80005f8 <_MotorInit+0x180>)
 800049e:	60d3      	str	r3, [r2, #12]

	_MotorSetting.__MotorP1_GpioPort = __MotorSetting->__MotorP1_GpioPort;
 80004a0:	687b      	ldr	r3, [r7, #4]
 80004a2:	691b      	ldr	r3, [r3, #16]
 80004a4:	4a54      	ldr	r2, [pc, #336]	@ (80005f8 <_MotorInit+0x180>)
 80004a6:	6113      	str	r3, [r2, #16]
	_MotorSetting.__MotorP1_Pin = __MotorSetting->__MotorP1_Pin;
 80004a8:	687b      	ldr	r3, [r7, #4]
 80004aa:	8a9a      	ldrh	r2, [r3, #20]
 80004ac:	4b52      	ldr	r3, [pc, #328]	@ (80005f8 <_MotorInit+0x180>)
 80004ae:	829a      	strh	r2, [r3, #20]
	_MotorSetting.__MotorP2_GpioPort = __MotorSetting->__MotorP2_GpioPort;
 80004b0:	687b      	ldr	r3, [r7, #4]
 80004b2:	699b      	ldr	r3, [r3, #24]
 80004b4:	4a50      	ldr	r2, [pc, #320]	@ (80005f8 <_MotorInit+0x180>)
 80004b6:	6193      	str	r3, [r2, #24]
	_MotorSetting.__MotorP2_Pin = __MotorSetting->__MotorP2_Pin;
 80004b8:	687b      	ldr	r3, [r7, #4]
 80004ba:	8b9a      	ldrh	r2, [r3, #28]
 80004bc:	4b4e      	ldr	r3, [pc, #312]	@ (80005f8 <_MotorInit+0x180>)
 80004be:	839a      	strh	r2, [r3, #28]

	_MotorSetting.__DeadTime_TIM = __MotorSetting->__DeadTime_TIM;
 80004c0:	687b      	ldr	r3, [r7, #4]
 80004c2:	6a1b      	ldr	r3, [r3, #32]
 80004c4:	4a4c      	ldr	r2, [pc, #304]	@ (80005f8 <_MotorInit+0x180>)
 80004c6:	6213      	str	r3, [r2, #32]

	HAL_GPIO_WritePin(_MotorSetting.__MotorP1_GpioPort, _MotorSetting.__MotorP1_Pin, GPIO_PIN_RESET);
 80004c8:	4b4b      	ldr	r3, [pc, #300]	@ (80005f8 <_MotorInit+0x180>)
 80004ca:	691b      	ldr	r3, [r3, #16]
 80004cc:	4a4a      	ldr	r2, [pc, #296]	@ (80005f8 <_MotorInit+0x180>)
 80004ce:	8a91      	ldrh	r1, [r2, #20]
 80004d0:	2200      	movs	r2, #0
 80004d2:	4618      	mov	r0, r3
 80004d4:	f001 fea2 	bl	800221c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(_MotorSetting.__MotorP2_GpioPort, _MotorSetting.__MotorP2_Pin, GPIO_PIN_RESET);
 80004d8:	4b47      	ldr	r3, [pc, #284]	@ (80005f8 <_MotorInit+0x180>)
 80004da:	699b      	ldr	r3, [r3, #24]
 80004dc:	4a46      	ldr	r2, [pc, #280]	@ (80005f8 <_MotorInit+0x180>)
 80004de:	8b91      	ldrh	r1, [r2, #28]
 80004e0:	2200      	movs	r2, #0
 80004e2:	4618      	mov	r0, r3
 80004e4:	f001 fe9a 	bl	800221c <HAL_GPIO_WritePin>

	HAL_TIM_PWM_Start(_MotorSetting.__MotorN1_Tim, _MotorSetting.__MotorN1_TimChannel);
 80004e8:	4b43      	ldr	r3, [pc, #268]	@ (80005f8 <_MotorInit+0x180>)
 80004ea:	681b      	ldr	r3, [r3, #0]
 80004ec:	4a42      	ldr	r2, [pc, #264]	@ (80005f8 <_MotorInit+0x180>)
 80004ee:	6852      	ldr	r2, [r2, #4]
 80004f0:	4611      	mov	r1, r2
 80004f2:	4618      	mov	r0, r3
 80004f4:	f003 fb9c 	bl	8003c30 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(_MotorSetting.__MotorN2_Tim, _MotorSetting.__MotorN2_TimChannel);
 80004f8:	4b3f      	ldr	r3, [pc, #252]	@ (80005f8 <_MotorInit+0x180>)
 80004fa:	689b      	ldr	r3, [r3, #8]
 80004fc:	4a3e      	ldr	r2, [pc, #248]	@ (80005f8 <_MotorInit+0x180>)
 80004fe:	68d2      	ldr	r2, [r2, #12]
 8000500:	4611      	mov	r1, r2
 8000502:	4618      	mov	r0, r3
 8000504:	f003 fb94 	bl	8003c30 <HAL_TIM_PWM_Start>

	HAL_TIM_Base_Start(_MotorSetting.__DeadTime_TIM);
 8000508:	4b3b      	ldr	r3, [pc, #236]	@ (80005f8 <_MotorInit+0x180>)
 800050a:	6a1b      	ldr	r3, [r3, #32]
 800050c:	4618      	mov	r0, r3
 800050e:	f003 fa79 	bl	8003a04 <HAL_TIM_Base_Start>

	__HAL_TIM_SET_COMPARE(_MotorSetting.__MotorN1_Tim, _MotorSetting.__MotorN1_TimChannel, 0);
 8000512:	4b39      	ldr	r3, [pc, #228]	@ (80005f8 <_MotorInit+0x180>)
 8000514:	685b      	ldr	r3, [r3, #4]
 8000516:	2b00      	cmp	r3, #0
 8000518:	d105      	bne.n	8000526 <_MotorInit+0xae>
 800051a:	4b37      	ldr	r3, [pc, #220]	@ (80005f8 <_MotorInit+0x180>)
 800051c:	681b      	ldr	r3, [r3, #0]
 800051e:	681b      	ldr	r3, [r3, #0]
 8000520:	2200      	movs	r2, #0
 8000522:	635a      	str	r2, [r3, #52]	@ 0x34
 8000524:	e02c      	b.n	8000580 <_MotorInit+0x108>
 8000526:	4b34      	ldr	r3, [pc, #208]	@ (80005f8 <_MotorInit+0x180>)
 8000528:	685b      	ldr	r3, [r3, #4]
 800052a:	2b04      	cmp	r3, #4
 800052c:	d105      	bne.n	800053a <_MotorInit+0xc2>
 800052e:	4b32      	ldr	r3, [pc, #200]	@ (80005f8 <_MotorInit+0x180>)
 8000530:	681b      	ldr	r3, [r3, #0]
 8000532:	681a      	ldr	r2, [r3, #0]
 8000534:	2300      	movs	r3, #0
 8000536:	6393      	str	r3, [r2, #56]	@ 0x38
 8000538:	e022      	b.n	8000580 <_MotorInit+0x108>
 800053a:	4b2f      	ldr	r3, [pc, #188]	@ (80005f8 <_MotorInit+0x180>)
 800053c:	685b      	ldr	r3, [r3, #4]
 800053e:	2b08      	cmp	r3, #8
 8000540:	d105      	bne.n	800054e <_MotorInit+0xd6>
 8000542:	4b2d      	ldr	r3, [pc, #180]	@ (80005f8 <_MotorInit+0x180>)
 8000544:	681b      	ldr	r3, [r3, #0]
 8000546:	681a      	ldr	r2, [r3, #0]
 8000548:	2300      	movs	r3, #0
 800054a:	63d3      	str	r3, [r2, #60]	@ 0x3c
 800054c:	e018      	b.n	8000580 <_MotorInit+0x108>
 800054e:	4b2a      	ldr	r3, [pc, #168]	@ (80005f8 <_MotorInit+0x180>)
 8000550:	685b      	ldr	r3, [r3, #4]
 8000552:	2b0c      	cmp	r3, #12
 8000554:	d105      	bne.n	8000562 <_MotorInit+0xea>
 8000556:	4b28      	ldr	r3, [pc, #160]	@ (80005f8 <_MotorInit+0x180>)
 8000558:	681b      	ldr	r3, [r3, #0]
 800055a:	681a      	ldr	r2, [r3, #0]
 800055c:	2300      	movs	r3, #0
 800055e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000560:	e00e      	b.n	8000580 <_MotorInit+0x108>
 8000562:	4b25      	ldr	r3, [pc, #148]	@ (80005f8 <_MotorInit+0x180>)
 8000564:	685b      	ldr	r3, [r3, #4]
 8000566:	2b10      	cmp	r3, #16
 8000568:	d105      	bne.n	8000576 <_MotorInit+0xfe>
 800056a:	4b23      	ldr	r3, [pc, #140]	@ (80005f8 <_MotorInit+0x180>)
 800056c:	681b      	ldr	r3, [r3, #0]
 800056e:	681a      	ldr	r2, [r3, #0]
 8000570:	2300      	movs	r3, #0
 8000572:	6593      	str	r3, [r2, #88]	@ 0x58
 8000574:	e004      	b.n	8000580 <_MotorInit+0x108>
 8000576:	4b20      	ldr	r3, [pc, #128]	@ (80005f8 <_MotorInit+0x180>)
 8000578:	681b      	ldr	r3, [r3, #0]
 800057a:	681a      	ldr	r2, [r3, #0]
 800057c:	2300      	movs	r3, #0
 800057e:	65d3      	str	r3, [r2, #92]	@ 0x5c
	__HAL_TIM_SET_COMPARE(_MotorSetting.__MotorN2_Tim, _MotorSetting.__MotorN2_TimChannel, 0);
 8000580:	4b1d      	ldr	r3, [pc, #116]	@ (80005f8 <_MotorInit+0x180>)
 8000582:	68db      	ldr	r3, [r3, #12]
 8000584:	2b00      	cmp	r3, #0
 8000586:	d105      	bne.n	8000594 <_MotorInit+0x11c>
 8000588:	4b1b      	ldr	r3, [pc, #108]	@ (80005f8 <_MotorInit+0x180>)
 800058a:	689b      	ldr	r3, [r3, #8]
 800058c:	681b      	ldr	r3, [r3, #0]
 800058e:	2200      	movs	r2, #0
 8000590:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8000592:	e02c      	b.n	80005ee <_MotorInit+0x176>
	__HAL_TIM_SET_COMPARE(_MotorSetting.__MotorN2_Tim, _MotorSetting.__MotorN2_TimChannel, 0);
 8000594:	4b18      	ldr	r3, [pc, #96]	@ (80005f8 <_MotorInit+0x180>)
 8000596:	68db      	ldr	r3, [r3, #12]
 8000598:	2b04      	cmp	r3, #4
 800059a:	d105      	bne.n	80005a8 <_MotorInit+0x130>
 800059c:	4b16      	ldr	r3, [pc, #88]	@ (80005f8 <_MotorInit+0x180>)
 800059e:	689b      	ldr	r3, [r3, #8]
 80005a0:	681a      	ldr	r2, [r3, #0]
 80005a2:	2300      	movs	r3, #0
 80005a4:	6393      	str	r3, [r2, #56]	@ 0x38
}
 80005a6:	e022      	b.n	80005ee <_MotorInit+0x176>
	__HAL_TIM_SET_COMPARE(_MotorSetting.__MotorN2_Tim, _MotorSetting.__MotorN2_TimChannel, 0);
 80005a8:	4b13      	ldr	r3, [pc, #76]	@ (80005f8 <_MotorInit+0x180>)
 80005aa:	68db      	ldr	r3, [r3, #12]
 80005ac:	2b08      	cmp	r3, #8
 80005ae:	d105      	bne.n	80005bc <_MotorInit+0x144>
 80005b0:	4b11      	ldr	r3, [pc, #68]	@ (80005f8 <_MotorInit+0x180>)
 80005b2:	689b      	ldr	r3, [r3, #8]
 80005b4:	681a      	ldr	r2, [r3, #0]
 80005b6:	2300      	movs	r3, #0
 80005b8:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 80005ba:	e018      	b.n	80005ee <_MotorInit+0x176>
	__HAL_TIM_SET_COMPARE(_MotorSetting.__MotorN2_Tim, _MotorSetting.__MotorN2_TimChannel, 0);
 80005bc:	4b0e      	ldr	r3, [pc, #56]	@ (80005f8 <_MotorInit+0x180>)
 80005be:	68db      	ldr	r3, [r3, #12]
 80005c0:	2b0c      	cmp	r3, #12
 80005c2:	d105      	bne.n	80005d0 <_MotorInit+0x158>
 80005c4:	4b0c      	ldr	r3, [pc, #48]	@ (80005f8 <_MotorInit+0x180>)
 80005c6:	689b      	ldr	r3, [r3, #8]
 80005c8:	681a      	ldr	r2, [r3, #0]
 80005ca:	2300      	movs	r3, #0
 80005cc:	6413      	str	r3, [r2, #64]	@ 0x40
}
 80005ce:	e00e      	b.n	80005ee <_MotorInit+0x176>
	__HAL_TIM_SET_COMPARE(_MotorSetting.__MotorN2_Tim, _MotorSetting.__MotorN2_TimChannel, 0);
 80005d0:	4b09      	ldr	r3, [pc, #36]	@ (80005f8 <_MotorInit+0x180>)
 80005d2:	68db      	ldr	r3, [r3, #12]
 80005d4:	2b10      	cmp	r3, #16
 80005d6:	d105      	bne.n	80005e4 <_MotorInit+0x16c>
 80005d8:	4b07      	ldr	r3, [pc, #28]	@ (80005f8 <_MotorInit+0x180>)
 80005da:	689b      	ldr	r3, [r3, #8]
 80005dc:	681a      	ldr	r2, [r3, #0]
 80005de:	2300      	movs	r3, #0
 80005e0:	6593      	str	r3, [r2, #88]	@ 0x58
}
 80005e2:	e004      	b.n	80005ee <_MotorInit+0x176>
	__HAL_TIM_SET_COMPARE(_MotorSetting.__MotorN2_Tim, _MotorSetting.__MotorN2_TimChannel, 0);
 80005e4:	4b04      	ldr	r3, [pc, #16]	@ (80005f8 <_MotorInit+0x180>)
 80005e6:	689b      	ldr	r3, [r3, #8]
 80005e8:	681a      	ldr	r2, [r3, #0]
 80005ea:	2300      	movs	r3, #0
 80005ec:	65d3      	str	r3, [r2, #92]	@ 0x5c
}
 80005ee:	bf00      	nop
 80005f0:	3708      	adds	r7, #8
 80005f2:	46bd      	mov	sp, r7
 80005f4:	bd80      	pop	{r7, pc}
 80005f6:	bf00      	nop
 80005f8:	20000090 	.word	0x20000090

080005fc <_SwitchInit>:

#include "D-M-005/Switch.h"

_SWITCH_SETTING _SwitchSetting;

void _SwitchInit(_SWITCH_SETTING *__SwitchSetting){
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b082      	sub	sp, #8
 8000600:	af00      	add	r7, sp, #0
 8000602:	6078      	str	r0, [r7, #4]
	_SwitchSetting.__ShiftRegisterClk_GpioPort = __SwitchSetting->__ShiftRegisterClk_GpioPort;
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	4a14      	ldr	r2, [pc, #80]	@ (800065c <_SwitchInit+0x60>)
 800060a:	6013      	str	r3, [r2, #0]
	_SwitchSetting.__ShiftRegisterClk_Pin = __SwitchSetting->__ShiftRegisterClk_Pin;
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	889a      	ldrh	r2, [r3, #4]
 8000610:	4b12      	ldr	r3, [pc, #72]	@ (800065c <_SwitchInit+0x60>)
 8000612:	809a      	strh	r2, [r3, #4]
	_SwitchSetting.__ShiftRegisterQh_GpioPort = __SwitchSetting->__ShiftRegisterQh_GpioPort;
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	691b      	ldr	r3, [r3, #16]
 8000618:	4a10      	ldr	r2, [pc, #64]	@ (800065c <_SwitchInit+0x60>)
 800061a:	6113      	str	r3, [r2, #16]
	_SwitchSetting.__ShiftRegisterQh_Pin = __SwitchSetting->__ShiftRegisterQh_Pin;
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	8a9a      	ldrh	r2, [r3, #20]
 8000620:	4b0e      	ldr	r3, [pc, #56]	@ (800065c <_SwitchInit+0x60>)
 8000622:	829a      	strh	r2, [r3, #20]
	_SwitchSetting.__ShiftRegisterShLd_GpioPort = __SwitchSetting->__ShiftRegisterShLd_GpioPort;
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	689b      	ldr	r3, [r3, #8]
 8000628:	4a0c      	ldr	r2, [pc, #48]	@ (800065c <_SwitchInit+0x60>)
 800062a:	6093      	str	r3, [r2, #8]
	_SwitchSetting.__ShiftRegisterShLd_Pin = __SwitchSetting->__ShiftRegisterShLd_Pin;
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	899a      	ldrh	r2, [r3, #12]
 8000630:	4b0a      	ldr	r3, [pc, #40]	@ (800065c <_SwitchInit+0x60>)
 8000632:	819a      	strh	r2, [r3, #12]

	HAL_GPIO_WritePin(_SwitchSetting.__ShiftRegisterClk_GpioPort, _SwitchSetting.__ShiftRegisterClk_Pin, GPIO_PIN_RESET);
 8000634:	4b09      	ldr	r3, [pc, #36]	@ (800065c <_SwitchInit+0x60>)
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	4a08      	ldr	r2, [pc, #32]	@ (800065c <_SwitchInit+0x60>)
 800063a:	8891      	ldrh	r1, [r2, #4]
 800063c:	2200      	movs	r2, #0
 800063e:	4618      	mov	r0, r3
 8000640:	f001 fdec 	bl	800221c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(_SwitchSetting.__ShiftRegisterShLd_GpioPort, _SwitchSetting.__ShiftRegisterShLd_Pin, GPIO_PIN_RESET);
 8000644:	4b05      	ldr	r3, [pc, #20]	@ (800065c <_SwitchInit+0x60>)
 8000646:	689b      	ldr	r3, [r3, #8]
 8000648:	4a04      	ldr	r2, [pc, #16]	@ (800065c <_SwitchInit+0x60>)
 800064a:	8991      	ldrh	r1, [r2, #12]
 800064c:	2200      	movs	r2, #0
 800064e:	4618      	mov	r0, r3
 8000650:	f001 fde4 	bl	800221c <HAL_GPIO_WritePin>
}
 8000654:	bf00      	nop
 8000656:	3708      	adds	r7, #8
 8000658:	46bd      	mov	sp, r7
 800065a:	bd80      	pop	{r7, pc}
 800065c:	200000b4 	.word	0x200000b4

08000660 <_SwitchRead>:

void _SwitchRead(_SWITCH_READ_DATA *__SwitchReadData){
 8000660:	b580      	push	{r7, lr}
 8000662:	b084      	sub	sp, #16
 8000664:	af00      	add	r7, sp, #0
 8000666:	6078      	str	r0, [r7, #4]
	uint8_t _readSwData = 0;
 8000668:	2300      	movs	r3, #0
 800066a:	73fb      	strb	r3, [r7, #15]

	HAL_GPIO_WritePin(_SwitchSetting.__ShiftRegisterShLd_GpioPort, _SwitchSetting.__ShiftRegisterShLd_Pin, GPIO_PIN_RESET);
 800066c:	4b5a      	ldr	r3, [pc, #360]	@ (80007d8 <_SwitchRead+0x178>)
 800066e:	689b      	ldr	r3, [r3, #8]
 8000670:	4a59      	ldr	r2, [pc, #356]	@ (80007d8 <_SwitchRead+0x178>)
 8000672:	8991      	ldrh	r1, [r2, #12]
 8000674:	2200      	movs	r2, #0
 8000676:	4618      	mov	r0, r3
 8000678:	f001 fdd0 	bl	800221c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(_SwitchSetting.__ShiftRegisterClk_GpioPort, _SwitchSetting.__ShiftRegisterClk_Pin, GPIO_PIN_SET);
 800067c:	4b56      	ldr	r3, [pc, #344]	@ (80007d8 <_SwitchRead+0x178>)
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	4a55      	ldr	r2, [pc, #340]	@ (80007d8 <_SwitchRead+0x178>)
 8000682:	8891      	ldrh	r1, [r2, #4]
 8000684:	2201      	movs	r2, #1
 8000686:	4618      	mov	r0, r3
 8000688:	f001 fdc8 	bl	800221c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(_SwitchSetting.__ShiftRegisterClk_GpioPort, _SwitchSetting.__ShiftRegisterClk_Pin, GPIO_PIN_RESET);
 800068c:	4b52      	ldr	r3, [pc, #328]	@ (80007d8 <_SwitchRead+0x178>)
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	4a51      	ldr	r2, [pc, #324]	@ (80007d8 <_SwitchRead+0x178>)
 8000692:	8891      	ldrh	r1, [r2, #4]
 8000694:	2200      	movs	r2, #0
 8000696:	4618      	mov	r0, r3
 8000698:	f001 fdc0 	bl	800221c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(_SwitchSetting.__ShiftRegisterShLd_GpioPort, _SwitchSetting.__ShiftRegisterShLd_Pin, GPIO_PIN_SET);
 800069c:	4b4e      	ldr	r3, [pc, #312]	@ (80007d8 <_SwitchRead+0x178>)
 800069e:	689b      	ldr	r3, [r3, #8]
 80006a0:	4a4d      	ldr	r2, [pc, #308]	@ (80007d8 <_SwitchRead+0x178>)
 80006a2:	8991      	ldrh	r1, [r2, #12]
 80006a4:	2201      	movs	r2, #1
 80006a6:	4618      	mov	r0, r3
 80006a8:	f001 fdb8 	bl	800221c <HAL_GPIO_WritePin>

	_readSwData = _readSwData | (HAL_GPIO_ReadPin(_SwitchSetting.__ShiftRegisterQh_GpioPort, _SwitchSetting.__ShiftRegisterQh_Pin) << 7);
 80006ac:	4b4a      	ldr	r3, [pc, #296]	@ (80007d8 <_SwitchRead+0x178>)
 80006ae:	691b      	ldr	r3, [r3, #16]
 80006b0:	4a49      	ldr	r2, [pc, #292]	@ (80007d8 <_SwitchRead+0x178>)
 80006b2:	8a92      	ldrh	r2, [r2, #20]
 80006b4:	4611      	mov	r1, r2
 80006b6:	4618      	mov	r0, r3
 80006b8:	f001 fd98 	bl	80021ec <HAL_GPIO_ReadPin>
 80006bc:	4603      	mov	r3, r0
 80006be:	01db      	lsls	r3, r3, #7
 80006c0:	b25a      	sxtb	r2, r3
 80006c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80006c6:	4313      	orrs	r3, r2
 80006c8:	b25b      	sxtb	r3, r3
 80006ca:	73fb      	strb	r3, [r7, #15]
	for(int i = 6; i >= 0; i--){
 80006cc:	2306      	movs	r3, #6
 80006ce:	60bb      	str	r3, [r7, #8]
 80006d0:	e025      	b.n	800071e <_SwitchRead+0xbe>
		HAL_GPIO_WritePin(_SwitchSetting.__ShiftRegisterClk_GpioPort, _SwitchSetting.__ShiftRegisterClk_Pin, GPIO_PIN_SET);
 80006d2:	4b41      	ldr	r3, [pc, #260]	@ (80007d8 <_SwitchRead+0x178>)
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	4a40      	ldr	r2, [pc, #256]	@ (80007d8 <_SwitchRead+0x178>)
 80006d8:	8891      	ldrh	r1, [r2, #4]
 80006da:	2201      	movs	r2, #1
 80006dc:	4618      	mov	r0, r3
 80006de:	f001 fd9d 	bl	800221c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(_SwitchSetting.__ShiftRegisterClk_GpioPort, _SwitchSetting.__ShiftRegisterClk_Pin, GPIO_PIN_RESET);
 80006e2:	4b3d      	ldr	r3, [pc, #244]	@ (80007d8 <_SwitchRead+0x178>)
 80006e4:	681b      	ldr	r3, [r3, #0]
 80006e6:	4a3c      	ldr	r2, [pc, #240]	@ (80007d8 <_SwitchRead+0x178>)
 80006e8:	8891      	ldrh	r1, [r2, #4]
 80006ea:	2200      	movs	r2, #0
 80006ec:	4618      	mov	r0, r3
 80006ee:	f001 fd95 	bl	800221c <HAL_GPIO_WritePin>

		_readSwData = _readSwData | (HAL_GPIO_ReadPin(_SwitchSetting.__ShiftRegisterQh_GpioPort, _SwitchSetting.__ShiftRegisterQh_Pin) << i);
 80006f2:	4b39      	ldr	r3, [pc, #228]	@ (80007d8 <_SwitchRead+0x178>)
 80006f4:	691b      	ldr	r3, [r3, #16]
 80006f6:	4a38      	ldr	r2, [pc, #224]	@ (80007d8 <_SwitchRead+0x178>)
 80006f8:	8a92      	ldrh	r2, [r2, #20]
 80006fa:	4611      	mov	r1, r2
 80006fc:	4618      	mov	r0, r3
 80006fe:	f001 fd75 	bl	80021ec <HAL_GPIO_ReadPin>
 8000702:	4603      	mov	r3, r0
 8000704:	461a      	mov	r2, r3
 8000706:	68bb      	ldr	r3, [r7, #8]
 8000708:	fa02 f303 	lsl.w	r3, r2, r3
 800070c:	b25a      	sxtb	r2, r3
 800070e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000712:	4313      	orrs	r3, r2
 8000714:	b25b      	sxtb	r3, r3
 8000716:	73fb      	strb	r3, [r7, #15]
	for(int i = 6; i >= 0; i--){
 8000718:	68bb      	ldr	r3, [r7, #8]
 800071a:	3b01      	subs	r3, #1
 800071c:	60bb      	str	r3, [r7, #8]
 800071e:	68bb      	ldr	r3, [r7, #8]
 8000720:	2b00      	cmp	r3, #0
 8000722:	dad6      	bge.n	80006d2 <_SwitchRead+0x72>
	}

	__SwitchReadData->_Address = 0;
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	2200      	movs	r2, #0
 8000728:	701a      	strb	r2, [r3, #0]
	__SwitchReadData->_Address |= (!!(_readSwData & (1U << __SWITCH_BIT_ADDRESS_4TH_DIGIT))) << 3;
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	781b      	ldrb	r3, [r3, #0]
 800072e:	b25a      	sxtb	r2, r3
 8000730:	7bfb      	ldrb	r3, [r7, #15]
 8000732:	00db      	lsls	r3, r3, #3
 8000734:	b25b      	sxtb	r3, r3
 8000736:	f003 0308 	and.w	r3, r3, #8
 800073a:	b25b      	sxtb	r3, r3
 800073c:	4313      	orrs	r3, r2
 800073e:	b25b      	sxtb	r3, r3
 8000740:	b2da      	uxtb	r2, r3
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	701a      	strb	r2, [r3, #0]
	__SwitchReadData->_Address |= (!!(_readSwData & (1U << __SWITCH_BIT_ADDRESS_3ND_DIGIT))) << 2;
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	781b      	ldrb	r3, [r3, #0]
 800074a:	b25a      	sxtb	r2, r3
 800074c:	7bfb      	ldrb	r3, [r7, #15]
 800074e:	005b      	lsls	r3, r3, #1
 8000750:	b25b      	sxtb	r3, r3
 8000752:	f003 0304 	and.w	r3, r3, #4
 8000756:	b25b      	sxtb	r3, r3
 8000758:	4313      	orrs	r3, r2
 800075a:	b25b      	sxtb	r3, r3
 800075c:	b2da      	uxtb	r2, r3
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	701a      	strb	r2, [r3, #0]
	__SwitchReadData->_Address |= (!!(_readSwData & (1U << __SWITCH_BIT_ADDRESS_2ND_DIGIT))) << 1;
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	781b      	ldrb	r3, [r3, #0]
 8000766:	b25a      	sxtb	r2, r3
 8000768:	7bfb      	ldrb	r3, [r7, #15]
 800076a:	085b      	lsrs	r3, r3, #1
 800076c:	b25b      	sxtb	r3, r3
 800076e:	f003 0302 	and.w	r3, r3, #2
 8000772:	b25b      	sxtb	r3, r3
 8000774:	4313      	orrs	r3, r2
 8000776:	b25b      	sxtb	r3, r3
 8000778:	b2da      	uxtb	r2, r3
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	701a      	strb	r2, [r3, #0]
	__SwitchReadData->_Address |= (!!(_readSwData & (1U << __SWITCH_BIT_ADDRESS_1ST_DIGIT))) << 0;
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	781b      	ldrb	r3, [r3, #0]
 8000782:	b25a      	sxtb	r2, r3
 8000784:	7bfb      	ldrb	r3, [r7, #15]
 8000786:	f003 0308 	and.w	r3, r3, #8
 800078a:	2b00      	cmp	r3, #0
 800078c:	bf14      	ite	ne
 800078e:	2301      	movne	r3, #1
 8000790:	2300      	moveq	r3, #0
 8000792:	b2db      	uxtb	r3, r3
 8000794:	b25b      	sxtb	r3, r3
 8000796:	4313      	orrs	r3, r2
 8000798:	b25b      	sxtb	r3, r3
 800079a:	b2da      	uxtb	r2, r3
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	701a      	strb	r2, [r3, #0]

	if(!!!(_readSwData & (1U << __SWITCH_BIT_OPERATION_MODE)))
 80007a0:	7bfb      	ldrb	r3, [r7, #15]
 80007a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d103      	bne.n	80007b2 <_SwitchRead+0x152>
		__SwitchReadData->_OperatingMode = _SWITCH_OPERATION_MODE_NORMAL;
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	2200      	movs	r2, #0
 80007ae:	705a      	strb	r2, [r3, #1]
 80007b0:	e002      	b.n	80007b8 <_SwitchRead+0x158>
	else
		__SwitchReadData->_OperatingMode = _SWITCH_OPERATION_MODE_PC_CONSOLE;
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	2201      	movs	r2, #1
 80007b6:	705a      	strb	r2, [r3, #1]

	if(!!(_readSwData & (1U << __SWITCH_BIT_COMMUNICATION_MODE)))
 80007b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007bc:	2b00      	cmp	r3, #0
 80007be:	da03      	bge.n	80007c8 <_SwitchRead+0x168>
		__SwitchReadData->_CommunicationMode = _SWITCH_COMMUNICATION_MODE_CAN;
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	2200      	movs	r2, #0
 80007c4:	709a      	strb	r2, [r3, #2]
	else
		__SwitchReadData->_CommunicationMode = _SWITCH_COMMUNICATION_MODE_UART;
}
 80007c6:	e002      	b.n	80007ce <_SwitchRead+0x16e>
		__SwitchReadData->_CommunicationMode = _SWITCH_COMMUNICATION_MODE_UART;
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	2201      	movs	r2, #1
 80007cc:	709a      	strb	r2, [r3, #2]
}
 80007ce:	bf00      	nop
 80007d0:	3710      	adds	r7, #16
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bd80      	pop	{r7, pc}
 80007d6:	bf00      	nop
 80007d8:	200000b4 	.word	0x200000b4

080007dc <_AccurateDelay>:
 */


#include "D-M-005/Utility.h"

uint32_t _AccurateDelay(uint32_t _ms, uint32_t _lastGetTick){
 80007dc:	b580      	push	{r7, lr}
 80007de:	b084      	sub	sp, #16
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]
 80007e4:	6039      	str	r1, [r7, #0]
	uint32_t _nowTick = HAL_GetTick();
 80007e6:	f001 f8f9 	bl	80019dc <HAL_GetTick>
 80007ea:	60f8      	str	r0, [r7, #12]

	while((_nowTick - _lastGetTick) <= _ms){
 80007ec:	e002      	b.n	80007f4 <_AccurateDelay+0x18>
		_nowTick = HAL_GetTick();
 80007ee:	f001 f8f5 	bl	80019dc <HAL_GetTick>
 80007f2:	60f8      	str	r0, [r7, #12]
	while((_nowTick - _lastGetTick) <= _ms){
 80007f4:	68fa      	ldr	r2, [r7, #12]
 80007f6:	683b      	ldr	r3, [r7, #0]
 80007f8:	1ad3      	subs	r3, r2, r3
 80007fa:	687a      	ldr	r2, [r7, #4]
 80007fc:	429a      	cmp	r2, r3
 80007fe:	d2f6      	bcs.n	80007ee <_AccurateDelay+0x12>
	}

	return _nowTick;
 8000800:	68fb      	ldr	r3, [r7, #12]
}
 8000802:	4618      	mov	r0, r3
 8000804:	3710      	adds	r7, #16
 8000806:	46bd      	mov	sp, r7
 8000808:	bd80      	pop	{r7, pc}
	...

0800080c <_ConsoleInit>:

#include "D-M-005/Console/Console.h"

_CONSOLE_SETTING _ConsoleSetting;

void _ConsoleInit(_CONSOLE_SETTING *__ConsoleSetting){
 800080c:	b580      	push	{r7, lr}
 800080e:	b082      	sub	sp, #8
 8000810:	af00      	add	r7, sp, #0
 8000812:	6078      	str	r0, [r7, #4]
	_ConsoleSetting.__PcUart = __ConsoleSetting->__PcUart;
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	4a05      	ldr	r2, [pc, #20]	@ (8000830 <_ConsoleInit+0x24>)
 800081a:	6013      	str	r3, [r2, #0]

	DprintfInit(_ConsoleSetting.__PcUart);
 800081c:	4b04      	ldr	r3, [pc, #16]	@ (8000830 <_ConsoleInit+0x24>)
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	4618      	mov	r0, r3
 8000822:	f000 f897 	bl	8000954 <DprintfInit>
}
 8000826:	bf00      	nop
 8000828:	3708      	adds	r7, #8
 800082a:	46bd      	mov	sp, r7
 800082c:	bd80      	pop	{r7, pc}
 800082e:	bf00      	nop
 8000830:	200000cc 	.word	0x200000cc

08000834 <_ConsoleStartLogo>:

void _ConsoleStartLogo(){
 8000834:	b580      	push	{r7, lr}
 8000836:	af00      	add	r7, sp, #0
	Dprintf("============================================================================================================\r\n");
 8000838:	482c      	ldr	r0, [pc, #176]	@ (80008ec <_ConsoleStartLogo+0xb8>)
 800083a:	f000 f89b 	bl	8000974 <Dprintf>
	Dprintf("============================================================================================================\r\n");
 800083e:	482b      	ldr	r0, [pc, #172]	@ (80008ec <_ConsoleStartLogo+0xb8>)
 8000840:	f000 f898 	bl	8000974 <Dprintf>
	Dprintf("              _____                    _____                   _______                   _____          \r\n");
 8000844:	482a      	ldr	r0, [pc, #168]	@ (80008f0 <_ConsoleStartLogo+0xbc>)
 8000846:	f000 f895 	bl	8000974 <Dprintf>
	Dprintf("             /\\    \\                  /\\    \\                 /::\\    \\                 /\\    \\         \r\n");
 800084a:	482a      	ldr	r0, [pc, #168]	@ (80008f4 <_ConsoleStartLogo+0xc0>)
 800084c:	f000 f892 	bl	8000974 <Dprintf>
	Dprintf("            /::\\    \\                /::\\____\\               /::::\\    \\               /::\\    \\        \r\n");
 8000850:	4829      	ldr	r0, [pc, #164]	@ (80008f8 <_ConsoleStartLogo+0xc4>)
 8000852:	f000 f88f 	bl	8000974 <Dprintf>
	Dprintf("           /::::\\    \\              /::::|   |              /::::::\\    \\             /::::\\    \\       \r\n");
 8000856:	4829      	ldr	r0, [pc, #164]	@ (80008fc <_ConsoleStartLogo+0xc8>)
 8000858:	f000 f88c 	bl	8000974 <Dprintf>
	Dprintf("          /::::::\\    \\            /:::::|   |             /::::::::\\    \\           /::::::\\    \\      \r\n");
 800085c:	4828      	ldr	r0, [pc, #160]	@ (8000900 <_ConsoleStartLogo+0xcc>)
 800085e:	f000 f889 	bl	8000974 <Dprintf>
	Dprintf("         /:::/\\:::\\    \\          /::::::|   |            /:::/~~\\:::\\    \\         /:::/\\:::\\    \\     \r\n");
 8000862:	4828      	ldr	r0, [pc, #160]	@ (8000904 <_ConsoleStartLogo+0xd0>)
 8000864:	f000 f886 	bl	8000974 <Dprintf>
	Dprintf("        /:::/  \\:::\\    \\        /:::/|::|   |           /:::/    \\:::\\    \\       /:::/__\\:::\\    \\    \r\n");
 8000868:	4827      	ldr	r0, [pc, #156]	@ (8000908 <_ConsoleStartLogo+0xd4>)
 800086a:	f000 f883 	bl	8000974 <Dprintf>
	Dprintf("       /:::/    \\:::\\    \\      /:::/ |::|   |          /:::/    / \\:::\\    \\      \\:::\\   \\:::\\    \\   \r\n");
 800086e:	4827      	ldr	r0, [pc, #156]	@ (800090c <_ConsoleStartLogo+0xd8>)
 8000870:	f000 f880 	bl	8000974 <Dprintf>
	Dprintf("      /:::/    / \\:::\\    \\    /:::/  |::|___|______   /:::/____/   \\:::\\____\\   ___\\:::\\   \\:::\\    \\  \r\n");
 8000874:	4826      	ldr	r0, [pc, #152]	@ (8000910 <_ConsoleStartLogo+0xdc>)
 8000876:	f000 f87d 	bl	8000974 <Dprintf>
	Dprintf("     /:::/    /   \\:::\\ ___\\  /:::/   |::::::::\\    \\ |:::|    |     |:::|    | /\\   \\:::\\   \\:::\\    \\ \r\n");
 800087a:	4826      	ldr	r0, [pc, #152]	@ (8000914 <_ConsoleStartLogo+0xe0>)
 800087c:	f000 f87a 	bl	8000974 <Dprintf>
	Dprintf("    /:::/____/     \\:::|    |/:::/    |:::::::::\\____\\|:::|____|     |:::|    |/::\\   \\:::\\   \\:::\\____\\\r\n");
 8000880:	4825      	ldr	r0, [pc, #148]	@ (8000918 <_ConsoleStartLogo+0xe4>)
 8000882:	f000 f877 	bl	8000974 <Dprintf>
	Dprintf("    \\:::\\    \\     /:::|____|\\::/    / ~~~~~/:::/    / \\:::\\    \\   /:::/    / \\:::\\   \\:::\\   \\::/    /\r\n");
 8000886:	4825      	ldr	r0, [pc, #148]	@ (800091c <_ConsoleStartLogo+0xe8>)
 8000888:	f000 f874 	bl	8000974 <Dprintf>
	Dprintf("     \\:::\\    \\   /:::/    /  \\/____/      /:::/    /   \\:::\\    \\ /:::/    /   \\:::\\   \\:::\\   \\/____/ \r\n");
 800088c:	4824      	ldr	r0, [pc, #144]	@ (8000920 <_ConsoleStartLogo+0xec>)
 800088e:	f000 f871 	bl	8000974 <Dprintf>
	Dprintf("      \\:::\\    \\ /:::/    /               /:::/    /     \\:::\\    /:::/    /     \\:::\\   \\:::\\    \\     \r\n");
 8000892:	4824      	ldr	r0, [pc, #144]	@ (8000924 <_ConsoleStartLogo+0xf0>)
 8000894:	f000 f86e 	bl	8000974 <Dprintf>
	Dprintf("       \\:::\\    /:::/    /               /:::/    /       \\:::\\__/:::/    /       \\:::\\   \\:::\\____\\    \r\n");
 8000898:	4823      	ldr	r0, [pc, #140]	@ (8000928 <_ConsoleStartLogo+0xf4>)
 800089a:	f000 f86b 	bl	8000974 <Dprintf>
	Dprintf("        \\:::\\  /:::/    /               /:::/    /         \\::::::::/    /         \\:::\\  /:::/    /    \r\n");
 800089e:	4823      	ldr	r0, [pc, #140]	@ (800092c <_ConsoleStartLogo+0xf8>)
 80008a0:	f000 f868 	bl	8000974 <Dprintf>
	Dprintf("         \\:::\\/:::/    /               /:::/    /           \\::::::/    /           \\:::\\/:::/    /     \r\n");
 80008a4:	4822      	ldr	r0, [pc, #136]	@ (8000930 <_ConsoleStartLogo+0xfc>)
 80008a6:	f000 f865 	bl	8000974 <Dprintf>
	Dprintf("          \\::::::/    /               /:::/    /             \\::::/    /             \\::::::/    /      \r\n");
 80008aa:	4822      	ldr	r0, [pc, #136]	@ (8000934 <_ConsoleStartLogo+0x100>)
 80008ac:	f000 f862 	bl	8000974 <Dprintf>
	Dprintf("           \\::::/    /               /:::/    /               \\::/____/               \\::::/    /       \r\n");
 80008b0:	4821      	ldr	r0, [pc, #132]	@ (8000938 <_ConsoleStartLogo+0x104>)
 80008b2:	f000 f85f 	bl	8000974 <Dprintf>
	Dprintf("            \\::/____/                \\::/    /                 ~~                      \\::/    /        \r\n");
 80008b6:	4821      	ldr	r0, [pc, #132]	@ (800093c <_ConsoleStartLogo+0x108>)
 80008b8:	f000 f85c 	bl	8000974 <Dprintf>
	Dprintf("             ~~                       \\/____/                                           \\/____/         \r\n");
 80008bc:	4820      	ldr	r0, [pc, #128]	@ (8000940 <_ConsoleStartLogo+0x10c>)
 80008be:	f000 f859 	bl	8000974 <Dprintf>
	Dprintf("============================================================================================================\r\n");
 80008c2:	480a      	ldr	r0, [pc, #40]	@ (80008ec <_ConsoleStartLogo+0xb8>)
 80008c4:	f000 f856 	bl	8000974 <Dprintf>

	Dprintf("Welcom to Ditel Motor-Driver Operating System\r\n");
 80008c8:	481e      	ldr	r0, [pc, #120]	@ (8000944 <_ConsoleStartLogo+0x110>)
 80008ca:	f000 f853 	bl	8000974 <Dprintf>
	Dprintf("Version: beta\r\n");
 80008ce:	481e      	ldr	r0, [pc, #120]	@ (8000948 <_ConsoleStartLogo+0x114>)
 80008d0:	f000 f850 	bl	8000974 <Dprintf>

	Dprintf("<Commands>\r\n");
 80008d4:	481d      	ldr	r0, [pc, #116]	@ (800094c <_ConsoleStartLogo+0x118>)
 80008d6:	f000 f84d 	bl	8000974 <Dprintf>
	Dprintf("motor [--set <power>]\r\n");
 80008da:	481d      	ldr	r0, [pc, #116]	@ (8000950 <_ConsoleStartLogo+0x11c>)
 80008dc:	f000 f84a 	bl	8000974 <Dprintf>


	Dprintf("============================================================================================================\r\n");
 80008e0:	4802      	ldr	r0, [pc, #8]	@ (80008ec <_ConsoleStartLogo+0xb8>)
 80008e2:	f000 f847 	bl	8000974 <Dprintf>
}
 80008e6:	bf00      	nop
 80008e8:	bd80      	pop	{r7, pc}
 80008ea:	bf00      	nop
 80008ec:	0800640c 	.word	0x0800640c
 80008f0:	0800647c 	.word	0x0800647c
 80008f4:	080064e8 	.word	0x080064e8
 80008f8:	08006554 	.word	0x08006554
 80008fc:	080065c0 	.word	0x080065c0
 8000900:	0800662c 	.word	0x0800662c
 8000904:	08006698 	.word	0x08006698
 8000908:	08006704 	.word	0x08006704
 800090c:	08006770 	.word	0x08006770
 8000910:	080067dc 	.word	0x080067dc
 8000914:	08006848 	.word	0x08006848
 8000918:	080068b4 	.word	0x080068b4
 800091c:	08006920 	.word	0x08006920
 8000920:	0800698c 	.word	0x0800698c
 8000924:	080069f8 	.word	0x080069f8
 8000928:	08006a64 	.word	0x08006a64
 800092c:	08006ad0 	.word	0x08006ad0
 8000930:	08006b3c 	.word	0x08006b3c
 8000934:	08006ba8 	.word	0x08006ba8
 8000938:	08006c14 	.word	0x08006c14
 800093c:	08006c80 	.word	0x08006c80
 8000940:	08006cec 	.word	0x08006cec
 8000944:	08006d58 	.word	0x08006d58
 8000948:	08006d88 	.word	0x08006d88
 800094c:	08006d98 	.word	0x08006d98
 8000950:	08006da8 	.word	0x08006da8

08000954 <DprintfInit>:

#include "D-M-005/Console/Ditel_Printf.h"

UART_HandleTypeDef *_DprintfUart;

void DprintfInit(UART_HandleTypeDef *hurat){
 8000954:	b480      	push	{r7}
 8000956:	b083      	sub	sp, #12
 8000958:	af00      	add	r7, sp, #0
 800095a:	6078      	str	r0, [r7, #4]
	_DprintfUart = hurat;
 800095c:	4a04      	ldr	r2, [pc, #16]	@ (8000970 <DprintfInit+0x1c>)
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	6013      	str	r3, [r2, #0]
}
 8000962:	bf00      	nop
 8000964:	370c      	adds	r7, #12
 8000966:	46bd      	mov	sp, r7
 8000968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096c:	4770      	bx	lr
 800096e:	bf00      	nop
 8000970:	200000d0 	.word	0x200000d0

08000974 <Dprintf>:

void Dprintf(char* str, ...)
{
 8000974:	b40f      	push	{r0, r1, r2, r3}
 8000976:	b590      	push	{r4, r7, lr}
 8000978:	b0b5      	sub	sp, #212	@ 0xd4
 800097a:	af00      	add	r7, sp, #0
    char resultString[128] = {0}, argString_In[32] = {0}, argString_Out[32] = {0};
 800097c:	2300      	movs	r3, #0
 800097e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8000980:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000984:	227c      	movs	r2, #124	@ 0x7c
 8000986:	2100      	movs	r1, #0
 8000988:	4618      	mov	r0, r3
 800098a:	f005 f8a3 	bl	8005ad4 <memset>
 800098e:	2300      	movs	r3, #0
 8000990:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000992:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000996:	2200      	movs	r2, #0
 8000998:	601a      	str	r2, [r3, #0]
 800099a:	605a      	str	r2, [r3, #4]
 800099c:	609a      	str	r2, [r3, #8]
 800099e:	60da      	str	r2, [r3, #12]
 80009a0:	611a      	str	r2, [r3, #16]
 80009a2:	615a      	str	r2, [r3, #20]
 80009a4:	619a      	str	r2, [r3, #24]
 80009a6:	2300      	movs	r3, #0
 80009a8:	60bb      	str	r3, [r7, #8]
 80009aa:	f107 030c 	add.w	r3, r7, #12
 80009ae:	2200      	movs	r2, #0
 80009b0:	601a      	str	r2, [r3, #0]
 80009b2:	605a      	str	r2, [r3, #4]
 80009b4:	609a      	str	r2, [r3, #8]
 80009b6:	60da      	str	r2, [r3, #12]
 80009b8:	611a      	str	r2, [r3, #16]
 80009ba:	615a      	str	r2, [r3, #20]
 80009bc:	619a      	str	r2, [r3, #24]

    va_list ap;
    va_start(ap, str);
 80009be:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 80009c2:	607b      	str	r3, [r7, #4]

    unsigned short int count_In = 0, count_Out = 0, count_Arg = 0;
 80009c4:	2300      	movs	r3, #0
 80009c6:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
 80009ca:	2300      	movs	r3, #0
 80009cc:	f8a7 30cc 	strh.w	r3, [r7, #204]	@ 0xcc
 80009d0:	2300      	movs	r3, #0
 80009d2:	f8a7 30ca 	strh.w	r3, [r7, #202]	@ 0xca

    while(str[count_In] != '\0'){
 80009d6:	e141      	b.n	8000c5c <Dprintf+0x2e8>
        if(str[count_In] == '%'){
 80009d8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80009dc:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80009e0:	4413      	add	r3, r2
 80009e2:	781b      	ldrb	r3, [r3, #0]
 80009e4:	2b25      	cmp	r3, #37	@ 0x25
 80009e6:	f040 8123 	bne.w	8000c30 <Dprintf+0x2bc>
            count_In++;
 80009ea:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80009ee:	3301      	adds	r3, #1
 80009f0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
            count_Arg = 0;
 80009f4:	2300      	movs	r3, #0
 80009f6:	f8a7 30ca 	strh.w	r3, [r7, #202]	@ 0xca

            argString_In[count_Arg] = '%';
 80009fa:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	@ 0xca
 80009fe:	33d0      	adds	r3, #208	@ 0xd0
 8000a00:	443b      	add	r3, r7
 8000a02:	2225      	movs	r2, #37	@ 0x25
 8000a04:	f803 2ca8 	strb.w	r2, [r3, #-168]
            count_Arg++;
 8000a08:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	@ 0xca
 8000a0c:	3301      	adds	r3, #1
 8000a0e:	f8a7 30ca 	strh.w	r3, [r7, #202]	@ 0xca

            unsigned short int isArg = 1U;
 8000a12:	2301      	movs	r3, #1
 8000a14:	f8a7 30c8 	strh.w	r3, [r7, #200]	@ 0xc8

            while(1){
                if(str[count_In] == 'd'| str[count_In] == 's'| str[count_In] == 'u' | str[count_In] == 'f'){
 8000a18:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8000a1c:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8000a20:	4413      	add	r3, r2
 8000a22:	781b      	ldrb	r3, [r3, #0]
 8000a24:	2b64      	cmp	r3, #100	@ 0x64
 8000a26:	bf0c      	ite	eq
 8000a28:	2301      	moveq	r3, #1
 8000a2a:	2300      	movne	r3, #0
 8000a2c:	b2da      	uxtb	r2, r3
 8000a2e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8000a32:	f8d7 10e0 	ldr.w	r1, [r7, #224]	@ 0xe0
 8000a36:	440b      	add	r3, r1
 8000a38:	781b      	ldrb	r3, [r3, #0]
 8000a3a:	2b73      	cmp	r3, #115	@ 0x73
 8000a3c:	bf0c      	ite	eq
 8000a3e:	2301      	moveq	r3, #1
 8000a40:	2300      	movne	r3, #0
 8000a42:	b2db      	uxtb	r3, r3
 8000a44:	4313      	orrs	r3, r2
 8000a46:	b2db      	uxtb	r3, r3
 8000a48:	4619      	mov	r1, r3
 8000a4a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8000a4e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8000a52:	4413      	add	r3, r2
 8000a54:	781b      	ldrb	r3, [r3, #0]
 8000a56:	2b75      	cmp	r3, #117	@ 0x75
 8000a58:	bf0c      	ite	eq
 8000a5a:	2301      	moveq	r3, #1
 8000a5c:	2300      	movne	r3, #0
 8000a5e:	b2db      	uxtb	r3, r3
 8000a60:	430b      	orrs	r3, r1
 8000a62:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	@ 0xce
 8000a66:	f8d7 10e0 	ldr.w	r1, [r7, #224]	@ 0xe0
 8000a6a:	440a      	add	r2, r1
 8000a6c:	7812      	ldrb	r2, [r2, #0]
 8000a6e:	2a66      	cmp	r2, #102	@ 0x66
 8000a70:	bf0c      	ite	eq
 8000a72:	2201      	moveq	r2, #1
 8000a74:	2200      	movne	r2, #0
 8000a76:	b2d2      	uxtb	r2, r2
 8000a78:	4313      	orrs	r3, r2
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d00c      	beq.n	8000a98 <Dprintf+0x124>
                    argString_In[count_Arg] = str[count_In];
 8000a7e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8000a82:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8000a86:	441a      	add	r2, r3
 8000a88:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	@ 0xca
 8000a8c:	7812      	ldrb	r2, [r2, #0]
 8000a8e:	33d0      	adds	r3, #208	@ 0xd0
 8000a90:	443b      	add	r3, r7
 8000a92:	f803 2ca8 	strb.w	r2, [r3, #-168]
                    break;
 8000a96:	e03c      	b.n	8000b12 <Dprintf+0x19e>
                }else if(str[count_In] == '%'){
 8000a98:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8000a9c:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8000aa0:	4413      	add	r3, r2
 8000aa2:	781b      	ldrb	r3, [r3, #0]
 8000aa4:	2b25      	cmp	r3, #37	@ 0x25
 8000aa6:	d114      	bne.n	8000ad2 <Dprintf+0x15e>
                    resultString[count_Out] = '%';
 8000aa8:	f8b7 30cc 	ldrh.w	r3, [r7, #204]	@ 0xcc
 8000aac:	33d0      	adds	r3, #208	@ 0xd0
 8000aae:	443b      	add	r3, r7
 8000ab0:	2225      	movs	r2, #37	@ 0x25
 8000ab2:	f803 2c88 	strb.w	r2, [r3, #-136]
                    count_Out++;
 8000ab6:	f8b7 30cc 	ldrh.w	r3, [r7, #204]	@ 0xcc
 8000aba:	3301      	adds	r3, #1
 8000abc:	f8a7 30cc 	strh.w	r3, [r7, #204]	@ 0xcc
                    count_In++;
 8000ac0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8000ac4:	3301      	adds	r3, #1
 8000ac6:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
                    isArg = 0U;
 8000aca:	2300      	movs	r3, #0
 8000acc:	f8a7 30c8 	strh.w	r3, [r7, #200]	@ 0xc8
                    break;
 8000ad0:	e01f      	b.n	8000b12 <Dprintf+0x19e>
                }else if(str[count_In] == '\0'){
 8000ad2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8000ad6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8000ada:	4413      	add	r3, r2
 8000adc:	781b      	ldrb	r3, [r3, #0]
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	f000 80d6 	beq.w	8000c90 <Dprintf+0x31c>
                    return;
                }else{
                    argString_In[count_Arg] = str[count_In];
 8000ae4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8000ae8:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8000aec:	441a      	add	r2, r3
 8000aee:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	@ 0xca
 8000af2:	7812      	ldrb	r2, [r2, #0]
 8000af4:	33d0      	adds	r3, #208	@ 0xd0
 8000af6:	443b      	add	r3, r7
 8000af8:	f803 2ca8 	strb.w	r2, [r3, #-168]
                    count_Arg++;
 8000afc:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	@ 0xca
 8000b00:	3301      	adds	r3, #1
 8000b02:	f8a7 30ca 	strh.w	r3, [r7, #202]	@ 0xca
                    count_In++;
 8000b06:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8000b0a:	3301      	adds	r3, #1
 8000b0c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
                if(str[count_In] == 'd'| str[count_In] == 's'| str[count_In] == 'u' | str[count_In] == 'f'){
 8000b10:	e782      	b.n	8000a18 <Dprintf+0xa4>
                }
            }

            if(isArg){
 8000b12:	f8b7 30c8 	ldrh.w	r3, [r7, #200]	@ 0xc8
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	f000 80a0 	beq.w	8000c5c <Dprintf+0x2e8>
                count_Arg++;
 8000b1c:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	@ 0xca
 8000b20:	3301      	adds	r3, #1
 8000b22:	f8a7 30ca 	strh.w	r3, [r7, #202]	@ 0xca
                argString_In[count_Arg] = '\0';
 8000b26:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	@ 0xca
 8000b2a:	33d0      	adds	r3, #208	@ 0xd0
 8000b2c:	443b      	add	r3, r7
 8000b2e:	2200      	movs	r2, #0
 8000b30:	f803 2ca8 	strb.w	r2, [r3, #-168]

                switch(str[count_In]){
 8000b34:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8000b38:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8000b3c:	4413      	add	r3, r2
 8000b3e:	781b      	ldrb	r3, [r3, #0]
 8000b40:	3b64      	subs	r3, #100	@ 0x64
 8000b42:	2b11      	cmp	r3, #17
 8000b44:	d85a      	bhi.n	8000bfc <Dprintf+0x288>
 8000b46:	a201      	add	r2, pc, #4	@ (adr r2, 8000b4c <Dprintf+0x1d8>)
 8000b48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b4c:	08000b95 	.word	0x08000b95
 8000b50:	08000bfd 	.word	0x08000bfd
 8000b54:	08000bdd 	.word	0x08000bdd
 8000b58:	08000bfd 	.word	0x08000bfd
 8000b5c:	08000bfd 	.word	0x08000bfd
 8000b60:	08000bfd 	.word	0x08000bfd
 8000b64:	08000bfd 	.word	0x08000bfd
 8000b68:	08000bfd 	.word	0x08000bfd
 8000b6c:	08000bfd 	.word	0x08000bfd
 8000b70:	08000bfd 	.word	0x08000bfd
 8000b74:	08000bfd 	.word	0x08000bfd
 8000b78:	08000bfd 	.word	0x08000bfd
 8000b7c:	08000bfd 	.word	0x08000bfd
 8000b80:	08000bfd 	.word	0x08000bfd
 8000b84:	08000bfd 	.word	0x08000bfd
 8000b88:	08000bad 	.word	0x08000bad
 8000b8c:	08000bfd 	.word	0x08000bfd
 8000b90:	08000bc5 	.word	0x08000bc5
                case 'd':
                    sprintf(argString_Out, argString_In, va_arg(ap, int));
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	1d1a      	adds	r2, r3, #4
 8000b98:	607a      	str	r2, [r7, #4]
 8000b9a:	681a      	ldr	r2, [r3, #0]
 8000b9c:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 8000ba0:	f107 0308 	add.w	r3, r7, #8
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	f004 ff75 	bl	8005a94 <siprintf>
                    break;
 8000baa:	e027      	b.n	8000bfc <Dprintf+0x288>
                case 's':
                    sprintf(argString_Out, argString_In, va_arg(ap, char*));
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	1d1a      	adds	r2, r3, #4
 8000bb0:	607a      	str	r2, [r7, #4]
 8000bb2:	681a      	ldr	r2, [r3, #0]
 8000bb4:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 8000bb8:	f107 0308 	add.w	r3, r7, #8
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	f004 ff69 	bl	8005a94 <siprintf>
                    break;
 8000bc2:	e01b      	b.n	8000bfc <Dprintf+0x288>
                case 'u':
                    sprintf(argString_Out, argString_In, va_arg(ap, unsigned int));
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	1d1a      	adds	r2, r3, #4
 8000bc8:	607a      	str	r2, [r7, #4]
 8000bca:	681a      	ldr	r2, [r3, #0]
 8000bcc:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 8000bd0:	f107 0308 	add.w	r3, r7, #8
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	f004 ff5d 	bl	8005a94 <siprintf>
                    break;
 8000bda:	e00f      	b.n	8000bfc <Dprintf+0x288>
                case 'f':
                    sprintf(argString_Out, argString_In, va_arg(ap, double));
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	3307      	adds	r3, #7
 8000be0:	f023 0307 	bic.w	r3, r3, #7
 8000be4:	f103 0208 	add.w	r2, r3, #8
 8000be8:	607a      	str	r2, [r7, #4]
 8000bea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000bee:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 8000bf2:	f107 0008 	add.w	r0, r7, #8
 8000bf6:	f004 ff4d 	bl	8005a94 <siprintf>
                    break;
 8000bfa:	bf00      	nop
                }

                strcat(resultString, argString_Out);
 8000bfc:	f107 0208 	add.w	r2, r7, #8
 8000c00:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000c04:	4611      	mov	r1, r2
 8000c06:	4618      	mov	r0, r3
 8000c08:	f004 ff6c 	bl	8005ae4 <strcat>

                count_Out += strlen(argString_Out);
 8000c0c:	f107 0308 	add.w	r3, r7, #8
 8000c10:	4618      	mov	r0, r3
 8000c12:	f7ff fadd 	bl	80001d0 <strlen>
 8000c16:	4603      	mov	r3, r0
 8000c18:	b29a      	uxth	r2, r3
 8000c1a:	f8b7 30cc 	ldrh.w	r3, [r7, #204]	@ 0xcc
 8000c1e:	4413      	add	r3, r2
 8000c20:	f8a7 30cc 	strh.w	r3, [r7, #204]	@ 0xcc
                count_In++;
 8000c24:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8000c28:	3301      	adds	r3, #1
 8000c2a:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
 8000c2e:	e015      	b.n	8000c5c <Dprintf+0x2e8>
            }
        }else{
            resultString[count_Out] = str[count_In];
 8000c30:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8000c34:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8000c38:	441a      	add	r2, r3
 8000c3a:	f8b7 30cc 	ldrh.w	r3, [r7, #204]	@ 0xcc
 8000c3e:	7812      	ldrb	r2, [r2, #0]
 8000c40:	33d0      	adds	r3, #208	@ 0xd0
 8000c42:	443b      	add	r3, r7
 8000c44:	f803 2c88 	strb.w	r2, [r3, #-136]

            count_In++;
 8000c48:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8000c4c:	3301      	adds	r3, #1
 8000c4e:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
            count_Out++;
 8000c52:	f8b7 30cc 	ldrh.w	r3, [r7, #204]	@ 0xcc
 8000c56:	3301      	adds	r3, #1
 8000c58:	f8a7 30cc 	strh.w	r3, [r7, #204]	@ 0xcc
    while(str[count_In] != '\0'){
 8000c5c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8000c60:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8000c64:	4413      	add	r3, r2
 8000c66:	781b      	ldrb	r3, [r3, #0]
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	f47f aeb5 	bne.w	80009d8 <Dprintf+0x64>
        }
    }

    va_end(ap);

    HAL_UART_Transmit(_DprintfUart, (uint8_t *)resultString, strlen(resultString), 300);
 8000c6e:	4b0c      	ldr	r3, [pc, #48]	@ (8000ca0 <Dprintf+0x32c>)
 8000c70:	681c      	ldr	r4, [r3, #0]
 8000c72:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000c76:	4618      	mov	r0, r3
 8000c78:	f7ff faaa 	bl	80001d0 <strlen>
 8000c7c:	4603      	mov	r3, r0
 8000c7e:	b29a      	uxth	r2, r3
 8000c80:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 8000c84:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8000c88:	4620      	mov	r0, r4
 8000c8a:	f003 ffd7 	bl	8004c3c <HAL_UART_Transmit>
 8000c8e:	e000      	b.n	8000c92 <Dprintf+0x31e>
                    return;
 8000c90:	bf00      	nop
}
 8000c92:	37d4      	adds	r7, #212	@ 0xd4
 8000c94:	46bd      	mov	sp, r7
 8000c96:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8000c9a:	b004      	add	sp, #16
 8000c9c:	4770      	bx	lr
 8000c9e:	bf00      	nop
 8000ca0:	200000d0 	.word	0x200000d0

08000ca4 <Init>:
static void MX_TIM2_Init(void);
static void MX_TIM3_Init(void);
static void MX_TIM1_Init(void);
static void MX_TIM15_Init(void);
/* USER CODE BEGIN PFP */
void Init(){
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b082      	sub	sp, #8
 8000ca8:	af00      	add	r7, sp, #0
	uint32_t _lastReadTick;

	//Start Program
	_Init_7Seg();
 8000caa:	f000 f85f 	bl	8000d6c <_Init_7Seg>
	_7SegReset();
 8000cae:	f7ff fb21 	bl	80002f4 <_7SegReset>

	_7SegSetUpAnimation(_SETUP_STEP_START_PROGRAM);
 8000cb2:	2001      	movs	r0, #1
 8000cb4:	f7ff fb2a 	bl	800030c <_7SegSetUpAnimation>
	_lastReadTick = HAL_GetTick();
 8000cb8:	f000 fe90 	bl	80019dc <HAL_GetTick>
 8000cbc:	6078      	str	r0, [r7, #4]

	//Init Motor
	_Init_Motor();
 8000cbe:	f000 f875 	bl	8000dac <_Init_Motor>

	_lastReadTick = _AccurateDelay(200, _lastReadTick);
 8000cc2:	6879      	ldr	r1, [r7, #4]
 8000cc4:	20c8      	movs	r0, #200	@ 0xc8
 8000cc6:	f7ff fd89 	bl	80007dc <_AccurateDelay>
 8000cca:	6078      	str	r0, [r7, #4]
	_7SegSetUpAnimation(_SETUP_STEP_SETUP_MOTOR);
 8000ccc:	2002      	movs	r0, #2
 8000cce:	f7ff fb1d 	bl	800030c <_7SegSetUpAnimation>

	//Init Switch And Read State
	_Init_Switch();
 8000cd2:	f000 f899 	bl	8000e08 <_Init_Switch>

	_lastReadTick = _AccurateDelay(200, _lastReadTick);
 8000cd6:	6879      	ldr	r1, [r7, #4]
 8000cd8:	20c8      	movs	r0, #200	@ 0xc8
 8000cda:	f7ff fd7f 	bl	80007dc <_AccurateDelay>
 8000cde:	6078      	str	r0, [r7, #4]
	_7SegSetUpAnimation(_SETUP_STEP_SETUP_AND_READ_SWICH);
 8000ce0:	2003      	movs	r0, #3
 8000ce2:	f7ff fb13 	bl	800030c <_7SegSetUpAnimation>

	//Init Console
	_Init_Console();
 8000ce6:	f000 f8b3 	bl	8000e50 <_Init_Console>

	_lastReadTick = _AccurateDelay(200, _lastReadTick);
 8000cea:	6879      	ldr	r1, [r7, #4]
 8000cec:	20c8      	movs	r0, #200	@ 0xc8
 8000cee:	f7ff fd75 	bl	80007dc <_AccurateDelay>
 8000cf2:	6078      	str	r0, [r7, #4]
	_7SegSetUpAnimation(_SETUP_STEP_SETUP_CONSOLE);
 8000cf4:	2004      	movs	r0, #4
 8000cf6:	f7ff fb09 	bl	800030c <_7SegSetUpAnimation>

	_lastReadTick = _AccurateDelay(200, _lastReadTick);
 8000cfa:	6879      	ldr	r1, [r7, #4]
 8000cfc:	20c8      	movs	r0, #200	@ 0xc8
 8000cfe:	f7ff fd6d 	bl	80007dc <_AccurateDelay>
 8000d02:	6078      	str	r0, [r7, #4]
	_7SegSetUpAnimation(_SETUP_STEP_NULL3);
 8000d04:	2005      	movs	r0, #5
 8000d06:	f7ff fb01 	bl	800030c <_7SegSetUpAnimation>

	_lastReadTick = _AccurateDelay(200, _lastReadTick);
 8000d0a:	6879      	ldr	r1, [r7, #4]
 8000d0c:	20c8      	movs	r0, #200	@ 0xc8
 8000d0e:	f7ff fd65 	bl	80007dc <_AccurateDelay>
 8000d12:	6078      	str	r0, [r7, #4]
	_7SegSetUpAnimation(_SETUP_STEP_NULL4);
 8000d14:	2006      	movs	r0, #6
 8000d16:	f7ff faf9 	bl	800030c <_7SegSetUpAnimation>

	_lastReadTick = _AccurateDelay(200, _lastReadTick);
 8000d1a:	6879      	ldr	r1, [r7, #4]
 8000d1c:	20c8      	movs	r0, #200	@ 0xc8
 8000d1e:	f7ff fd5d 	bl	80007dc <_AccurateDelay>
 8000d22:	6078      	str	r0, [r7, #4]
	_7SegSetUpAnimation(_SETUP_STEP_NULL5);
 8000d24:	2007      	movs	r0, #7
 8000d26:	f7ff faf1 	bl	800030c <_7SegSetUpAnimation>

	_lastReadTick = _AccurateDelay(200, _lastReadTick);
 8000d2a:	6879      	ldr	r1, [r7, #4]
 8000d2c:	20c8      	movs	r0, #200	@ 0xc8
 8000d2e:	f7ff fd55 	bl	80007dc <_AccurateDelay>
 8000d32:	6078      	str	r0, [r7, #4]
	_7SegSetUpAnimation(_SETUP_STEP_NULL6);
 8000d34:	2008      	movs	r0, #8
 8000d36:	f7ff fae9 	bl	800030c <_7SegSetUpAnimation>

	_lastReadTick = _AccurateDelay(200, _lastReadTick);
 8000d3a:	6879      	ldr	r1, [r7, #4]
 8000d3c:	20c8      	movs	r0, #200	@ 0xc8
 8000d3e:	f7ff fd4d 	bl	80007dc <_AccurateDelay>
 8000d42:	6078      	str	r0, [r7, #4]
	_7SegSetUpAnimation(_SETUP_STEP_FINISH);
 8000d44:	2009      	movs	r0, #9
 8000d46:	f7ff fae1 	bl	800030c <_7SegSetUpAnimation>

	_lastReadTick = _AccurateDelay(200, _lastReadTick);
 8000d4a:	6879      	ldr	r1, [r7, #4]
 8000d4c:	20c8      	movs	r0, #200	@ 0xc8
 8000d4e:	f7ff fd45 	bl	80007dc <_AccurateDelay>
 8000d52:	6078      	str	r0, [r7, #4]
	_7SegReset();
 8000d54:	f7ff face 	bl	80002f4 <_7SegReset>


	_lastReadTick = _AccurateDelay(200, _lastReadTick);
 8000d58:	6879      	ldr	r1, [r7, #4]
 8000d5a:	20c8      	movs	r0, #200	@ 0xc8
 8000d5c:	f7ff fd3e 	bl	80007dc <_AccurateDelay>
 8000d60:	6078      	str	r0, [r7, #4]
}
 8000d62:	bf00      	nop
 8000d64:	3708      	adds	r7, #8
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd80      	pop	{r7, pc}
	...

08000d6c <_Init_7Seg>:

void _Init_7Seg(){
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	af00      	add	r7, sp, #0
	Setting_7Seg.__7SegSi_GpioPort = _7SEG_SI_GPIO_Port;
 8000d70:	4b0c      	ldr	r3, [pc, #48]	@ (8000da4 <_Init_7Seg+0x38>)
 8000d72:	4a0d      	ldr	r2, [pc, #52]	@ (8000da8 <_Init_7Seg+0x3c>)
 8000d74:	601a      	str	r2, [r3, #0]
	Setting_7Seg.__7SegSi_Pin = _7SEG_SI_Pin;
 8000d76:	4b0b      	ldr	r3, [pc, #44]	@ (8000da4 <_Init_7Seg+0x38>)
 8000d78:	2240      	movs	r2, #64	@ 0x40
 8000d7a:	809a      	strh	r2, [r3, #4]
	Setting_7Seg.__7SegRck_GpioPort = _7SEG_RCK_GPIO_Port;
 8000d7c:	4b09      	ldr	r3, [pc, #36]	@ (8000da4 <_Init_7Seg+0x38>)
 8000d7e:	4a0a      	ldr	r2, [pc, #40]	@ (8000da8 <_Init_7Seg+0x3c>)
 8000d80:	609a      	str	r2, [r3, #8]
	Setting_7Seg.__7SegRck_Pin = _7SEG_RCK_Pin;
 8000d82:	4b08      	ldr	r3, [pc, #32]	@ (8000da4 <_Init_7Seg+0x38>)
 8000d84:	2220      	movs	r2, #32
 8000d86:	819a      	strh	r2, [r3, #12]
	Setting_7Seg.__7SegSck_GpioPort = _7SEG_SCK_GPIO_Port;
 8000d88:	4b06      	ldr	r3, [pc, #24]	@ (8000da4 <_Init_7Seg+0x38>)
 8000d8a:	4a07      	ldr	r2, [pc, #28]	@ (8000da8 <_Init_7Seg+0x3c>)
 8000d8c:	611a      	str	r2, [r3, #16]
	Setting_7Seg.__7SegSck_Pin = _7SEG_SCK_Pin;
 8000d8e:	4b05      	ldr	r3, [pc, #20]	@ (8000da4 <_Init_7Seg+0x38>)
 8000d90:	2210      	movs	r2, #16
 8000d92:	829a      	strh	r2, [r3, #20]

	_7SegInit(&Setting_7Seg);
 8000d94:	4803      	ldr	r0, [pc, #12]	@ (8000da4 <_Init_7Seg+0x38>)
 8000d96:	f7ff fa73 	bl	8000280 <_7SegInit>
	_7SegReset();
 8000d9a:	f7ff faab 	bl	80002f4 <_7SegReset>
}
 8000d9e:	bf00      	nop
 8000da0:	bd80      	pop	{r7, pc}
 8000da2:	bf00      	nop
 8000da4:	2000033c 	.word	0x2000033c
 8000da8:	48000400 	.word	0x48000400

08000dac <_Init_Motor>:

void _Init_Motor(){
 8000dac:	b580      	push	{r7, lr}
 8000dae:	af00      	add	r7, sp, #0
	Setting_Motor.__MotorN1_Tim = &htim2;
 8000db0:	4b10      	ldr	r3, [pc, #64]	@ (8000df4 <_Init_Motor+0x48>)
 8000db2:	4a11      	ldr	r2, [pc, #68]	@ (8000df8 <_Init_Motor+0x4c>)
 8000db4:	601a      	str	r2, [r3, #0]
	Setting_Motor.__MotorN1_TimChannel = TIM_CHANNEL_2;
 8000db6:	4b0f      	ldr	r3, [pc, #60]	@ (8000df4 <_Init_Motor+0x48>)
 8000db8:	2204      	movs	r2, #4
 8000dba:	605a      	str	r2, [r3, #4]
	Setting_Motor.__MotorN2_Tim = &htim3;
 8000dbc:	4b0d      	ldr	r3, [pc, #52]	@ (8000df4 <_Init_Motor+0x48>)
 8000dbe:	4a0f      	ldr	r2, [pc, #60]	@ (8000dfc <_Init_Motor+0x50>)
 8000dc0:	609a      	str	r2, [r3, #8]
	Setting_Motor.__MotorN2_TimChannel = TIM_CHANNEL_3;
 8000dc2:	4b0c      	ldr	r3, [pc, #48]	@ (8000df4 <_Init_Motor+0x48>)
 8000dc4:	2208      	movs	r2, #8
 8000dc6:	60da      	str	r2, [r3, #12]

	Setting_Motor.__MotorP1_GpioPort = SIG_P1_GPIO_Port;
 8000dc8:	4b0a      	ldr	r3, [pc, #40]	@ (8000df4 <_Init_Motor+0x48>)
 8000dca:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000dce:	611a      	str	r2, [r3, #16]
	Setting_Motor.__MotorP1_Pin = SIG_P1_Pin;
 8000dd0:	4b08      	ldr	r3, [pc, #32]	@ (8000df4 <_Init_Motor+0x48>)
 8000dd2:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000dd6:	829a      	strh	r2, [r3, #20]
	Setting_Motor.__MotorP2_GpioPort = SIG_P2_GPIO_Port;
 8000dd8:	4b06      	ldr	r3, [pc, #24]	@ (8000df4 <_Init_Motor+0x48>)
 8000dda:	4a09      	ldr	r2, [pc, #36]	@ (8000e00 <_Init_Motor+0x54>)
 8000ddc:	619a      	str	r2, [r3, #24]
	Setting_Motor.__MotorP2_Pin = SIG_P2_Pin;
 8000dde:	4b05      	ldr	r3, [pc, #20]	@ (8000df4 <_Init_Motor+0x48>)
 8000de0:	2202      	movs	r2, #2
 8000de2:	839a      	strh	r2, [r3, #28]

	Setting_Motor.__DeadTime_TIM = &htim1;
 8000de4:	4b03      	ldr	r3, [pc, #12]	@ (8000df4 <_Init_Motor+0x48>)
 8000de6:	4a07      	ldr	r2, [pc, #28]	@ (8000e04 <_Init_Motor+0x58>)
 8000de8:	621a      	str	r2, [r3, #32]

	_MotorInit(&Setting_Motor);
 8000dea:	4802      	ldr	r0, [pc, #8]	@ (8000df4 <_Init_Motor+0x48>)
 8000dec:	f7ff fb44 	bl	8000478 <_MotorInit>
}
 8000df0:	bf00      	nop
 8000df2:	bd80      	pop	{r7, pc}
 8000df4:	20000354 	.word	0x20000354
 8000df8:	20000148 	.word	0x20000148
 8000dfc:	20000194 	.word	0x20000194
 8000e00:	48000400 	.word	0x48000400
 8000e04:	200000fc 	.word	0x200000fc

08000e08 <_Init_Switch>:

void _Init_Switch(){
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	af00      	add	r7, sp, #0
	Setting_Swich.__ShiftRegisterClk_GpioPort = SW_CLK_GPIO_Port;
 8000e0c:	4b0e      	ldr	r3, [pc, #56]	@ (8000e48 <_Init_Switch+0x40>)
 8000e0e:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000e12:	601a      	str	r2, [r3, #0]
	Setting_Swich.__ShiftRegisterClk_Pin = SW_CLK_Pin;
 8000e14:	4b0c      	ldr	r3, [pc, #48]	@ (8000e48 <_Init_Switch+0x40>)
 8000e16:	2210      	movs	r2, #16
 8000e18:	809a      	strh	r2, [r3, #4]
	Setting_Swich.__ShiftRegisterQh_GpioPort = SW_QH_GPIO_Port;
 8000e1a:	4b0b      	ldr	r3, [pc, #44]	@ (8000e48 <_Init_Switch+0x40>)
 8000e1c:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000e20:	611a      	str	r2, [r3, #16]
	Setting_Swich.__ShiftRegisterQh_Pin = SW_QH_Pin;
 8000e22:	4b09      	ldr	r3, [pc, #36]	@ (8000e48 <_Init_Switch+0x40>)
 8000e24:	2201      	movs	r2, #1
 8000e26:	829a      	strh	r2, [r3, #20]
	Setting_Swich.__ShiftRegisterShLd_GpioPort = SW_SH_LD_GPIO_Port;
 8000e28:	4b07      	ldr	r3, [pc, #28]	@ (8000e48 <_Init_Switch+0x40>)
 8000e2a:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000e2e:	609a      	str	r2, [r3, #8]
	Setting_Swich.__ShiftRegisterShLd_Pin = SW_SH_LD_Pin;
 8000e30:	4b05      	ldr	r3, [pc, #20]	@ (8000e48 <_Init_Switch+0x40>)
 8000e32:	2202      	movs	r2, #2
 8000e34:	819a      	strh	r2, [r3, #12]

	_SwitchInit(&Setting_Swich);
 8000e36:	4804      	ldr	r0, [pc, #16]	@ (8000e48 <_Init_Switch+0x40>)
 8000e38:	f7ff fbe0 	bl	80005fc <_SwitchInit>
	_SwitchRead(&SwitchReadData);
 8000e3c:	4803      	ldr	r0, [pc, #12]	@ (8000e4c <_Init_Switch+0x44>)
 8000e3e:	f7ff fc0f 	bl	8000660 <_SwitchRead>
}
 8000e42:	bf00      	nop
 8000e44:	bd80      	pop	{r7, pc}
 8000e46:	bf00      	nop
 8000e48:	20000378 	.word	0x20000378
 8000e4c:	20000394 	.word	0x20000394

08000e50 <_Init_Console>:

void _Init_Console(){
 8000e50:	b580      	push	{r7, lr}
 8000e52:	af00      	add	r7, sp, #0
	Setting_Console.__PcUart = &huart1;
 8000e54:	4b03      	ldr	r3, [pc, #12]	@ (8000e64 <_Init_Console+0x14>)
 8000e56:	4a04      	ldr	r2, [pc, #16]	@ (8000e68 <_Init_Console+0x18>)
 8000e58:	601a      	str	r2, [r3, #0]

	_ConsoleInit(&Setting_Console);
 8000e5a:	4802      	ldr	r0, [pc, #8]	@ (8000e64 <_Init_Console+0x14>)
 8000e5c:	f7ff fcd6 	bl	800080c <_ConsoleInit>
}
 8000e60:	bf00      	nop
 8000e62:	bd80      	pop	{r7, pc}
 8000e64:	20000390 	.word	0x20000390
 8000e68:	2000022c 	.word	0x2000022c

08000e6c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e70:	f000 fd5a 	bl	8001928 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e74:	f000 f822 	bl	8000ebc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e78:	f000 faaa 	bl	80013d0 <MX_GPIO_Init>
  MX_CAN_Init();
 8000e7c:	f000 f87a 	bl	8000f74 <MX_CAN_Init>
  MX_USART1_UART_Init();
 8000e80:	f000 fa42 	bl	8001308 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000e84:	f000 fa72 	bl	800136c <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000e88:	f000 f8fe 	bl	8001088 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000e8c:	f000 f972 	bl	8001174 <MX_TIM3_Init>
  MX_TIM1_Init();
 8000e90:	f000 f8a6 	bl	8000fe0 <MX_TIM1_Init>
  MX_TIM15_Init();
 8000e94:	f000 f9e6 	bl	8001264 <MX_TIM15_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(LED_POWER_GPIO_Port, LED_POWER_Pin, GPIO_PIN_SET); //Power Led ON
 8000e98:	2201      	movs	r2, #1
 8000e9a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000e9e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ea2:	f001 f9bb 	bl	800221c <HAL_GPIO_WritePin>

  Init(); //Init
 8000ea6:	f7ff fefd 	bl	8000ca4 <Init>

  Dprintf("Hello World!!\r\n");
 8000eaa:	4803      	ldr	r0, [pc, #12]	@ (8000eb8 <main+0x4c>)
 8000eac:	f7ff fd62 	bl	8000974 <Dprintf>
  _ConsoleStartLogo();
 8000eb0:	f7ff fcc0 	bl	8000834 <_ConsoleStartLogo>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000eb4:	bf00      	nop
 8000eb6:	e7fd      	b.n	8000eb4 <main+0x48>
 8000eb8:	08006dc0 	.word	0x08006dc0

08000ebc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b096      	sub	sp, #88	@ 0x58
 8000ec0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ec2:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000ec6:	2228      	movs	r2, #40	@ 0x28
 8000ec8:	2100      	movs	r1, #0
 8000eca:	4618      	mov	r0, r3
 8000ecc:	f004 fe02 	bl	8005ad4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ed0:	f107 031c 	add.w	r3, r7, #28
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	601a      	str	r2, [r3, #0]
 8000ed8:	605a      	str	r2, [r3, #4]
 8000eda:	609a      	str	r2, [r3, #8]
 8000edc:	60da      	str	r2, [r3, #12]
 8000ede:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ee0:	1d3b      	adds	r3, r7, #4
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	601a      	str	r2, [r3, #0]
 8000ee6:	605a      	str	r2, [r3, #4]
 8000ee8:	609a      	str	r2, [r3, #8]
 8000eea:	60da      	str	r2, [r3, #12]
 8000eec:	611a      	str	r2, [r3, #16]
 8000eee:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ef0:	2302      	movs	r3, #2
 8000ef2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ef4:	2301      	movs	r3, #1
 8000ef6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ef8:	2310      	movs	r3, #16
 8000efa:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000efc:	2302      	movs	r3, #2
 8000efe:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000f00:	2300      	movs	r3, #0
 8000f02:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL15;
 8000f04:	f44f 1350 	mov.w	r3, #3407872	@ 0x340000
 8000f08:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f0a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000f0e:	4618      	mov	r0, r3
 8000f10:	f001 f99c 	bl	800224c <HAL_RCC_OscConfig>
 8000f14:	4603      	mov	r3, r0
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d001      	beq.n	8000f1e <SystemClock_Config+0x62>
  {
    Error_Handler();
 8000f1a:	f000 fabb 	bl	8001494 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f1e:	230f      	movs	r3, #15
 8000f20:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f22:	2302      	movs	r3, #2
 8000f24:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f26:	2300      	movs	r3, #0
 8000f28:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000f2a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000f2e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f30:	2300      	movs	r3, #0
 8000f32:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000f34:	f107 031c 	add.w	r3, r7, #28
 8000f38:	2102      	movs	r1, #2
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	f002 f9c4 	bl	80032c8 <HAL_RCC_ClockConfig>
 8000f40:	4603      	mov	r3, r0
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d001      	beq.n	8000f4a <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000f46:	f000 faa5 	bl	8001494 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_TIM1;
 8000f4a:	f241 0301 	movw	r3, #4097	@ 0x1001
 8000f4e:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000f50:	2300      	movs	r3, #0
 8000f52:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 8000f54:	2300      	movs	r3, #0
 8000f56:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f58:	1d3b      	adds	r3, r7, #4
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	f002 fbd4 	bl	8003708 <HAL_RCCEx_PeriphCLKConfig>
 8000f60:	4603      	mov	r3, r0
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d001      	beq.n	8000f6a <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000f66:	f000 fa95 	bl	8001494 <Error_Handler>
  }
}
 8000f6a:	bf00      	nop
 8000f6c:	3758      	adds	r7, #88	@ 0x58
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}
	...

08000f74 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 8000f78:	4b17      	ldr	r3, [pc, #92]	@ (8000fd8 <MX_CAN_Init+0x64>)
 8000f7a:	4a18      	ldr	r2, [pc, #96]	@ (8000fdc <MX_CAN_Init+0x68>)
 8000f7c:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 3;
 8000f7e:	4b16      	ldr	r3, [pc, #88]	@ (8000fd8 <MX_CAN_Init+0x64>)
 8000f80:	2203      	movs	r2, #3
 8000f82:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000f84:	4b14      	ldr	r3, [pc, #80]	@ (8000fd8 <MX_CAN_Init+0x64>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000f8a:	4b13      	ldr	r3, [pc, #76]	@ (8000fd8 <MX_CAN_Init+0x64>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_7TQ;
 8000f90:	4b11      	ldr	r3, [pc, #68]	@ (8000fd8 <MX_CAN_Init+0x64>)
 8000f92:	f44f 22c0 	mov.w	r2, #393216	@ 0x60000
 8000f96:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000f98:	4b0f      	ldr	r3, [pc, #60]	@ (8000fd8 <MX_CAN_Init+0x64>)
 8000f9a:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8000f9e:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000fa0:	4b0d      	ldr	r3, [pc, #52]	@ (8000fd8 <MX_CAN_Init+0x64>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8000fa6:	4b0c      	ldr	r3, [pc, #48]	@ (8000fd8 <MX_CAN_Init+0x64>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000fac:	4b0a      	ldr	r3, [pc, #40]	@ (8000fd8 <MX_CAN_Init+0x64>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8000fb2:	4b09      	ldr	r3, [pc, #36]	@ (8000fd8 <MX_CAN_Init+0x64>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000fb8:	4b07      	ldr	r3, [pc, #28]	@ (8000fd8 <MX_CAN_Init+0x64>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8000fbe:	4b06      	ldr	r3, [pc, #24]	@ (8000fd8 <MX_CAN_Init+0x64>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000fc4:	4804      	ldr	r0, [pc, #16]	@ (8000fd8 <MX_CAN_Init+0x64>)
 8000fc6:	f000 fd15 	bl	80019f4 <HAL_CAN_Init>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d001      	beq.n	8000fd4 <MX_CAN_Init+0x60>
  {
    Error_Handler();
 8000fd0:	f000 fa60 	bl	8001494 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8000fd4:	bf00      	nop
 8000fd6:	bd80      	pop	{r7, pc}
 8000fd8:	200000d4 	.word	0x200000d4
 8000fdc:	40006400 	.word	0x40006400

08000fe0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b088      	sub	sp, #32
 8000fe4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000fe6:	f107 0310 	add.w	r3, r7, #16
 8000fea:	2200      	movs	r2, #0
 8000fec:	601a      	str	r2, [r3, #0]
 8000fee:	605a      	str	r2, [r3, #4]
 8000ff0:	609a      	str	r2, [r3, #8]
 8000ff2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ff4:	1d3b      	adds	r3, r7, #4
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	601a      	str	r2, [r3, #0]
 8000ffa:	605a      	str	r2, [r3, #4]
 8000ffc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000ffe:	4b20      	ldr	r3, [pc, #128]	@ (8001080 <MX_TIM1_Init+0xa0>)
 8001000:	4a20      	ldr	r2, [pc, #128]	@ (8001084 <MX_TIM1_Init+0xa4>)
 8001002:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 6-1;
 8001004:	4b1e      	ldr	r3, [pc, #120]	@ (8001080 <MX_TIM1_Init+0xa0>)
 8001006:	2205      	movs	r2, #5
 8001008:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800100a:	4b1d      	ldr	r3, [pc, #116]	@ (8001080 <MX_TIM1_Init+0xa0>)
 800100c:	2200      	movs	r2, #0
 800100e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xffff-1;
 8001010:	4b1b      	ldr	r3, [pc, #108]	@ (8001080 <MX_TIM1_Init+0xa0>)
 8001012:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8001016:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001018:	4b19      	ldr	r3, [pc, #100]	@ (8001080 <MX_TIM1_Init+0xa0>)
 800101a:	2200      	movs	r2, #0
 800101c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800101e:	4b18      	ldr	r3, [pc, #96]	@ (8001080 <MX_TIM1_Init+0xa0>)
 8001020:	2200      	movs	r2, #0
 8001022:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001024:	4b16      	ldr	r3, [pc, #88]	@ (8001080 <MX_TIM1_Init+0xa0>)
 8001026:	2200      	movs	r2, #0
 8001028:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800102a:	4815      	ldr	r0, [pc, #84]	@ (8001080 <MX_TIM1_Init+0xa0>)
 800102c:	f002 fc92 	bl	8003954 <HAL_TIM_Base_Init>
 8001030:	4603      	mov	r3, r0
 8001032:	2b00      	cmp	r3, #0
 8001034:	d001      	beq.n	800103a <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8001036:	f000 fa2d 	bl	8001494 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800103a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800103e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001040:	f107 0310 	add.w	r3, r7, #16
 8001044:	4619      	mov	r1, r3
 8001046:	480e      	ldr	r0, [pc, #56]	@ (8001080 <MX_TIM1_Init+0xa0>)
 8001048:	f003 f86c 	bl	8004124 <HAL_TIM_ConfigClockSource>
 800104c:	4603      	mov	r3, r0
 800104e:	2b00      	cmp	r3, #0
 8001050:	d001      	beq.n	8001056 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8001052:	f000 fa1f 	bl	8001494 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001056:	2300      	movs	r3, #0
 8001058:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800105a:	2300      	movs	r3, #0
 800105c:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800105e:	2300      	movs	r3, #0
 8001060:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001062:	1d3b      	adds	r3, r7, #4
 8001064:	4619      	mov	r1, r3
 8001066:	4806      	ldr	r0, [pc, #24]	@ (8001080 <MX_TIM1_Init+0xa0>)
 8001068:	f003 fd10 	bl	8004a8c <HAL_TIMEx_MasterConfigSynchronization>
 800106c:	4603      	mov	r3, r0
 800106e:	2b00      	cmp	r3, #0
 8001070:	d001      	beq.n	8001076 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001072:	f000 fa0f 	bl	8001494 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001076:	bf00      	nop
 8001078:	3720      	adds	r7, #32
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}
 800107e:	bf00      	nop
 8001080:	200000fc 	.word	0x200000fc
 8001084:	40012c00 	.word	0x40012c00

08001088 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b08e      	sub	sp, #56	@ 0x38
 800108c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800108e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001092:	2200      	movs	r2, #0
 8001094:	601a      	str	r2, [r3, #0]
 8001096:	605a      	str	r2, [r3, #4]
 8001098:	609a      	str	r2, [r3, #8]
 800109a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800109c:	f107 031c 	add.w	r3, r7, #28
 80010a0:	2200      	movs	r2, #0
 80010a2:	601a      	str	r2, [r3, #0]
 80010a4:	605a      	str	r2, [r3, #4]
 80010a6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80010a8:	463b      	mov	r3, r7
 80010aa:	2200      	movs	r2, #0
 80010ac:	601a      	str	r2, [r3, #0]
 80010ae:	605a      	str	r2, [r3, #4]
 80010b0:	609a      	str	r2, [r3, #8]
 80010b2:	60da      	str	r2, [r3, #12]
 80010b4:	611a      	str	r2, [r3, #16]
 80010b6:	615a      	str	r2, [r3, #20]
 80010b8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80010ba:	4b2d      	ldr	r3, [pc, #180]	@ (8001170 <MX_TIM2_Init+0xe8>)
 80010bc:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80010c0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80010c2:	4b2b      	ldr	r3, [pc, #172]	@ (8001170 <MX_TIM2_Init+0xe8>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010c8:	4b29      	ldr	r3, [pc, #164]	@ (8001170 <MX_TIM2_Init+0xe8>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 60000-1;
 80010ce:	4b28      	ldr	r3, [pc, #160]	@ (8001170 <MX_TIM2_Init+0xe8>)
 80010d0:	f64e 225f 	movw	r2, #59999	@ 0xea5f
 80010d4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010d6:	4b26      	ldr	r3, [pc, #152]	@ (8001170 <MX_TIM2_Init+0xe8>)
 80010d8:	2200      	movs	r2, #0
 80010da:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010dc:	4b24      	ldr	r3, [pc, #144]	@ (8001170 <MX_TIM2_Init+0xe8>)
 80010de:	2200      	movs	r2, #0
 80010e0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80010e2:	4823      	ldr	r0, [pc, #140]	@ (8001170 <MX_TIM2_Init+0xe8>)
 80010e4:	f002 fc36 	bl	8003954 <HAL_TIM_Base_Init>
 80010e8:	4603      	mov	r3, r0
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d001      	beq.n	80010f2 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 80010ee:	f000 f9d1 	bl	8001494 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010f2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80010f6:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80010f8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80010fc:	4619      	mov	r1, r3
 80010fe:	481c      	ldr	r0, [pc, #112]	@ (8001170 <MX_TIM2_Init+0xe8>)
 8001100:	f003 f810 	bl	8004124 <HAL_TIM_ConfigClockSource>
 8001104:	4603      	mov	r3, r0
 8001106:	2b00      	cmp	r3, #0
 8001108:	d001      	beq.n	800110e <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 800110a:	f000 f9c3 	bl	8001494 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800110e:	4818      	ldr	r0, [pc, #96]	@ (8001170 <MX_TIM2_Init+0xe8>)
 8001110:	f002 fd2d 	bl	8003b6e <HAL_TIM_PWM_Init>
 8001114:	4603      	mov	r3, r0
 8001116:	2b00      	cmp	r3, #0
 8001118:	d001      	beq.n	800111e <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 800111a:	f000 f9bb 	bl	8001494 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800111e:	2300      	movs	r3, #0
 8001120:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001122:	2300      	movs	r3, #0
 8001124:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001126:	f107 031c 	add.w	r3, r7, #28
 800112a:	4619      	mov	r1, r3
 800112c:	4810      	ldr	r0, [pc, #64]	@ (8001170 <MX_TIM2_Init+0xe8>)
 800112e:	f003 fcad 	bl	8004a8c <HAL_TIMEx_MasterConfigSynchronization>
 8001132:	4603      	mov	r3, r0
 8001134:	2b00      	cmp	r3, #0
 8001136:	d001      	beq.n	800113c <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8001138:	f000 f9ac 	bl	8001494 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800113c:	2360      	movs	r3, #96	@ 0x60
 800113e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001140:	2300      	movs	r3, #0
 8001142:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001144:	2300      	movs	r3, #0
 8001146:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001148:	2300      	movs	r3, #0
 800114a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800114c:	463b      	mov	r3, r7
 800114e:	2204      	movs	r2, #4
 8001150:	4619      	mov	r1, r3
 8001152:	4807      	ldr	r0, [pc, #28]	@ (8001170 <MX_TIM2_Init+0xe8>)
 8001154:	f002 fed2 	bl	8003efc <HAL_TIM_PWM_ConfigChannel>
 8001158:	4603      	mov	r3, r0
 800115a:	2b00      	cmp	r3, #0
 800115c:	d001      	beq.n	8001162 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 800115e:	f000 f999 	bl	8001494 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001162:	4803      	ldr	r0, [pc, #12]	@ (8001170 <MX_TIM2_Init+0xe8>)
 8001164:	f000 fa5e 	bl	8001624 <HAL_TIM_MspPostInit>

}
 8001168:	bf00      	nop
 800116a:	3738      	adds	r7, #56	@ 0x38
 800116c:	46bd      	mov	sp, r7
 800116e:	bd80      	pop	{r7, pc}
 8001170:	20000148 	.word	0x20000148

08001174 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b08e      	sub	sp, #56	@ 0x38
 8001178:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800117a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800117e:	2200      	movs	r2, #0
 8001180:	601a      	str	r2, [r3, #0]
 8001182:	605a      	str	r2, [r3, #4]
 8001184:	609a      	str	r2, [r3, #8]
 8001186:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001188:	f107 031c 	add.w	r3, r7, #28
 800118c:	2200      	movs	r2, #0
 800118e:	601a      	str	r2, [r3, #0]
 8001190:	605a      	str	r2, [r3, #4]
 8001192:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001194:	463b      	mov	r3, r7
 8001196:	2200      	movs	r2, #0
 8001198:	601a      	str	r2, [r3, #0]
 800119a:	605a      	str	r2, [r3, #4]
 800119c:	609a      	str	r2, [r3, #8]
 800119e:	60da      	str	r2, [r3, #12]
 80011a0:	611a      	str	r2, [r3, #16]
 80011a2:	615a      	str	r2, [r3, #20]
 80011a4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80011a6:	4b2d      	ldr	r3, [pc, #180]	@ (800125c <MX_TIM3_Init+0xe8>)
 80011a8:	4a2d      	ldr	r2, [pc, #180]	@ (8001260 <MX_TIM3_Init+0xec>)
 80011aa:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80011ac:	4b2b      	ldr	r3, [pc, #172]	@ (800125c <MX_TIM3_Init+0xe8>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011b2:	4b2a      	ldr	r3, [pc, #168]	@ (800125c <MX_TIM3_Init+0xe8>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 60000-1;
 80011b8:	4b28      	ldr	r3, [pc, #160]	@ (800125c <MX_TIM3_Init+0xe8>)
 80011ba:	f64e 225f 	movw	r2, #59999	@ 0xea5f
 80011be:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011c0:	4b26      	ldr	r3, [pc, #152]	@ (800125c <MX_TIM3_Init+0xe8>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011c6:	4b25      	ldr	r3, [pc, #148]	@ (800125c <MX_TIM3_Init+0xe8>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80011cc:	4823      	ldr	r0, [pc, #140]	@ (800125c <MX_TIM3_Init+0xe8>)
 80011ce:	f002 fbc1 	bl	8003954 <HAL_TIM_Base_Init>
 80011d2:	4603      	mov	r3, r0
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d001      	beq.n	80011dc <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 80011d8:	f000 f95c 	bl	8001494 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011dc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80011e0:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80011e2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80011e6:	4619      	mov	r1, r3
 80011e8:	481c      	ldr	r0, [pc, #112]	@ (800125c <MX_TIM3_Init+0xe8>)
 80011ea:	f002 ff9b 	bl	8004124 <HAL_TIM_ConfigClockSource>
 80011ee:	4603      	mov	r3, r0
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d001      	beq.n	80011f8 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 80011f4:	f000 f94e 	bl	8001494 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 80011f8:	4818      	ldr	r0, [pc, #96]	@ (800125c <MX_TIM3_Init+0xe8>)
 80011fa:	f002 fc57 	bl	8003aac <HAL_TIM_OC_Init>
 80011fe:	4603      	mov	r3, r0
 8001200:	2b00      	cmp	r3, #0
 8001202:	d001      	beq.n	8001208 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8001204:	f000 f946 	bl	8001494 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001208:	2300      	movs	r3, #0
 800120a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800120c:	2300      	movs	r3, #0
 800120e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001210:	f107 031c 	add.w	r3, r7, #28
 8001214:	4619      	mov	r1, r3
 8001216:	4811      	ldr	r0, [pc, #68]	@ (800125c <MX_TIM3_Init+0xe8>)
 8001218:	f003 fc38 	bl	8004a8c <HAL_TIMEx_MasterConfigSynchronization>
 800121c:	4603      	mov	r3, r0
 800121e:	2b00      	cmp	r3, #0
 8001220:	d001      	beq.n	8001226 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8001222:	f000 f937 	bl	8001494 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001226:	2300      	movs	r3, #0
 8001228:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800122a:	2300      	movs	r3, #0
 800122c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800122e:	2300      	movs	r3, #0
 8001230:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001232:	2300      	movs	r3, #0
 8001234:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001236:	463b      	mov	r3, r7
 8001238:	2208      	movs	r2, #8
 800123a:	4619      	mov	r1, r3
 800123c:	4807      	ldr	r0, [pc, #28]	@ (800125c <MX_TIM3_Init+0xe8>)
 800123e:	f002 fde3 	bl	8003e08 <HAL_TIM_OC_ConfigChannel>
 8001242:	4603      	mov	r3, r0
 8001244:	2b00      	cmp	r3, #0
 8001246:	d001      	beq.n	800124c <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8001248:	f000 f924 	bl	8001494 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800124c:	4803      	ldr	r0, [pc, #12]	@ (800125c <MX_TIM3_Init+0xe8>)
 800124e:	f000 f9e9 	bl	8001624 <HAL_TIM_MspPostInit>

}
 8001252:	bf00      	nop
 8001254:	3738      	adds	r7, #56	@ 0x38
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	20000194 	.word	0x20000194
 8001260:	40000400 	.word	0x40000400

08001264 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b088      	sub	sp, #32
 8001268:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800126a:	f107 0310 	add.w	r3, r7, #16
 800126e:	2200      	movs	r2, #0
 8001270:	601a      	str	r2, [r3, #0]
 8001272:	605a      	str	r2, [r3, #4]
 8001274:	609a      	str	r2, [r3, #8]
 8001276:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001278:	1d3b      	adds	r3, r7, #4
 800127a:	2200      	movs	r2, #0
 800127c:	601a      	str	r2, [r3, #0]
 800127e:	605a      	str	r2, [r3, #4]
 8001280:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8001282:	4b1f      	ldr	r3, [pc, #124]	@ (8001300 <MX_TIM15_Init+0x9c>)
 8001284:	4a1f      	ldr	r2, [pc, #124]	@ (8001304 <MX_TIM15_Init+0xa0>)
 8001286:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 8001288:	4b1d      	ldr	r3, [pc, #116]	@ (8001300 <MX_TIM15_Init+0x9c>)
 800128a:	2200      	movs	r2, #0
 800128c:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 800128e:	4b1c      	ldr	r3, [pc, #112]	@ (8001300 <MX_TIM15_Init+0x9c>)
 8001290:	2200      	movs	r2, #0
 8001292:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 8001294:	4b1a      	ldr	r3, [pc, #104]	@ (8001300 <MX_TIM15_Init+0x9c>)
 8001296:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800129a:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800129c:	4b18      	ldr	r3, [pc, #96]	@ (8001300 <MX_TIM15_Init+0x9c>)
 800129e:	2200      	movs	r2, #0
 80012a0:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 80012a2:	4b17      	ldr	r3, [pc, #92]	@ (8001300 <MX_TIM15_Init+0x9c>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012a8:	4b15      	ldr	r3, [pc, #84]	@ (8001300 <MX_TIM15_Init+0x9c>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 80012ae:	4814      	ldr	r0, [pc, #80]	@ (8001300 <MX_TIM15_Init+0x9c>)
 80012b0:	f002 fb50 	bl	8003954 <HAL_TIM_Base_Init>
 80012b4:	4603      	mov	r3, r0
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d001      	beq.n	80012be <MX_TIM15_Init+0x5a>
  {
    Error_Handler();
 80012ba:	f000 f8eb 	bl	8001494 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012be:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80012c2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 80012c4:	f107 0310 	add.w	r3, r7, #16
 80012c8:	4619      	mov	r1, r3
 80012ca:	480d      	ldr	r0, [pc, #52]	@ (8001300 <MX_TIM15_Init+0x9c>)
 80012cc:	f002 ff2a 	bl	8004124 <HAL_TIM_ConfigClockSource>
 80012d0:	4603      	mov	r3, r0
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d001      	beq.n	80012da <MX_TIM15_Init+0x76>
  {
    Error_Handler();
 80012d6:	f000 f8dd 	bl	8001494 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012da:	2300      	movs	r3, #0
 80012dc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012de:	2300      	movs	r3, #0
 80012e0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 80012e2:	1d3b      	adds	r3, r7, #4
 80012e4:	4619      	mov	r1, r3
 80012e6:	4806      	ldr	r0, [pc, #24]	@ (8001300 <MX_TIM15_Init+0x9c>)
 80012e8:	f003 fbd0 	bl	8004a8c <HAL_TIMEx_MasterConfigSynchronization>
 80012ec:	4603      	mov	r3, r0
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d001      	beq.n	80012f6 <MX_TIM15_Init+0x92>
  {
    Error_Handler();
 80012f2:	f000 f8cf 	bl	8001494 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 80012f6:	bf00      	nop
 80012f8:	3720      	adds	r7, #32
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}
 80012fe:	bf00      	nop
 8001300:	200001e0 	.word	0x200001e0
 8001304:	40014000 	.word	0x40014000

08001308 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800130c:	4b15      	ldr	r3, [pc, #84]	@ (8001364 <MX_USART1_UART_Init+0x5c>)
 800130e:	4a16      	ldr	r2, [pc, #88]	@ (8001368 <MX_USART1_UART_Init+0x60>)
 8001310:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001312:	4b14      	ldr	r3, [pc, #80]	@ (8001364 <MX_USART1_UART_Init+0x5c>)
 8001314:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001318:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800131a:	4b12      	ldr	r3, [pc, #72]	@ (8001364 <MX_USART1_UART_Init+0x5c>)
 800131c:	2200      	movs	r2, #0
 800131e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001320:	4b10      	ldr	r3, [pc, #64]	@ (8001364 <MX_USART1_UART_Init+0x5c>)
 8001322:	2200      	movs	r2, #0
 8001324:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001326:	4b0f      	ldr	r3, [pc, #60]	@ (8001364 <MX_USART1_UART_Init+0x5c>)
 8001328:	2200      	movs	r2, #0
 800132a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800132c:	4b0d      	ldr	r3, [pc, #52]	@ (8001364 <MX_USART1_UART_Init+0x5c>)
 800132e:	220c      	movs	r2, #12
 8001330:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001332:	4b0c      	ldr	r3, [pc, #48]	@ (8001364 <MX_USART1_UART_Init+0x5c>)
 8001334:	2200      	movs	r2, #0
 8001336:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001338:	4b0a      	ldr	r3, [pc, #40]	@ (8001364 <MX_USART1_UART_Init+0x5c>)
 800133a:	2200      	movs	r2, #0
 800133c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800133e:	4b09      	ldr	r3, [pc, #36]	@ (8001364 <MX_USART1_UART_Init+0x5c>)
 8001340:	2200      	movs	r2, #0
 8001342:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001344:	4b07      	ldr	r3, [pc, #28]	@ (8001364 <MX_USART1_UART_Init+0x5c>)
 8001346:	2200      	movs	r2, #0
 8001348:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_MultiProcessor_Init(&huart1, 0, UART_WAKEUPMETHOD_IDLELINE) != HAL_OK)
 800134a:	2200      	movs	r2, #0
 800134c:	2100      	movs	r1, #0
 800134e:	4805      	ldr	r0, [pc, #20]	@ (8001364 <MX_USART1_UART_Init+0x5c>)
 8001350:	f003 fc0a 	bl	8004b68 <HAL_MultiProcessor_Init>
 8001354:	4603      	mov	r3, r0
 8001356:	2b00      	cmp	r3, #0
 8001358:	d001      	beq.n	800135e <MX_USART1_UART_Init+0x56>
  {
    Error_Handler();
 800135a:	f000 f89b 	bl	8001494 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800135e:	bf00      	nop
 8001360:	bd80      	pop	{r7, pc}
 8001362:	bf00      	nop
 8001364:	2000022c 	.word	0x2000022c
 8001368:	40013800 	.word	0x40013800

0800136c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001370:	4b15      	ldr	r3, [pc, #84]	@ (80013c8 <MX_USART2_UART_Init+0x5c>)
 8001372:	4a16      	ldr	r2, [pc, #88]	@ (80013cc <MX_USART2_UART_Init+0x60>)
 8001374:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8001376:	4b14      	ldr	r3, [pc, #80]	@ (80013c8 <MX_USART2_UART_Init+0x5c>)
 8001378:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 800137c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800137e:	4b12      	ldr	r3, [pc, #72]	@ (80013c8 <MX_USART2_UART_Init+0x5c>)
 8001380:	2200      	movs	r2, #0
 8001382:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001384:	4b10      	ldr	r3, [pc, #64]	@ (80013c8 <MX_USART2_UART_Init+0x5c>)
 8001386:	2200      	movs	r2, #0
 8001388:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800138a:	4b0f      	ldr	r3, [pc, #60]	@ (80013c8 <MX_USART2_UART_Init+0x5c>)
 800138c:	2200      	movs	r2, #0
 800138e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001390:	4b0d      	ldr	r3, [pc, #52]	@ (80013c8 <MX_USART2_UART_Init+0x5c>)
 8001392:	220c      	movs	r2, #12
 8001394:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001396:	4b0c      	ldr	r3, [pc, #48]	@ (80013c8 <MX_USART2_UART_Init+0x5c>)
 8001398:	2200      	movs	r2, #0
 800139a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800139c:	4b0a      	ldr	r3, [pc, #40]	@ (80013c8 <MX_USART2_UART_Init+0x5c>)
 800139e:	2200      	movs	r2, #0
 80013a0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80013a2:	4b09      	ldr	r3, [pc, #36]	@ (80013c8 <MX_USART2_UART_Init+0x5c>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80013a8:	4b07      	ldr	r3, [pc, #28]	@ (80013c8 <MX_USART2_UART_Init+0x5c>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_MultiProcessor_Init(&huart2, 0, UART_WAKEUPMETHOD_IDLELINE) != HAL_OK)
 80013ae:	2200      	movs	r2, #0
 80013b0:	2100      	movs	r1, #0
 80013b2:	4805      	ldr	r0, [pc, #20]	@ (80013c8 <MX_USART2_UART_Init+0x5c>)
 80013b4:	f003 fbd8 	bl	8004b68 <HAL_MultiProcessor_Init>
 80013b8:	4603      	mov	r3, r0
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d001      	beq.n	80013c2 <MX_USART2_UART_Init+0x56>
  {
    Error_Handler();
 80013be:	f000 f869 	bl	8001494 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80013c2:	bf00      	nop
 80013c4:	bd80      	pop	{r7, pc}
 80013c6:	bf00      	nop
 80013c8:	200002b4 	.word	0x200002b4
 80013cc:	40004400 	.word	0x40004400

080013d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b088      	sub	sp, #32
 80013d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013d6:	f107 030c 	add.w	r3, r7, #12
 80013da:	2200      	movs	r2, #0
 80013dc:	601a      	str	r2, [r3, #0]
 80013de:	605a      	str	r2, [r3, #4]
 80013e0:	609a      	str	r2, [r3, #8]
 80013e2:	60da      	str	r2, [r3, #12]
 80013e4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013e6:	4b29      	ldr	r3, [pc, #164]	@ (800148c <MX_GPIO_Init+0xbc>)
 80013e8:	695b      	ldr	r3, [r3, #20]
 80013ea:	4a28      	ldr	r2, [pc, #160]	@ (800148c <MX_GPIO_Init+0xbc>)
 80013ec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80013f0:	6153      	str	r3, [r2, #20]
 80013f2:	4b26      	ldr	r3, [pc, #152]	@ (800148c <MX_GPIO_Init+0xbc>)
 80013f4:	695b      	ldr	r3, [r3, #20]
 80013f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013fa:	60bb      	str	r3, [r7, #8]
 80013fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013fe:	4b23      	ldr	r3, [pc, #140]	@ (800148c <MX_GPIO_Init+0xbc>)
 8001400:	695b      	ldr	r3, [r3, #20]
 8001402:	4a22      	ldr	r2, [pc, #136]	@ (800148c <MX_GPIO_Init+0xbc>)
 8001404:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001408:	6153      	str	r3, [r2, #20]
 800140a:	4b20      	ldr	r3, [pc, #128]	@ (800148c <MX_GPIO_Init+0xbc>)
 800140c:	695b      	ldr	r3, [r3, #20]
 800140e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001412:	607b      	str	r3, [r7, #4]
 8001414:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SW_SH_LD_Pin|SW_CLK_Pin|LED_POWER_Pin|SIG_P1_Pin, GPIO_PIN_RESET);
 8001416:	2200      	movs	r2, #0
 8001418:	f248 1112 	movw	r1, #33042	@ 0x8112
 800141c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001420:	f000 fefc 	bl	800221c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SIG_P2_Pin|_7SEG_SCK_Pin|_7SEG_RCK_Pin|_7SEG_SI_Pin
 8001424:	2200      	movs	r2, #0
 8001426:	21f2      	movs	r1, #242	@ 0xf2
 8001428:	4819      	ldr	r0, [pc, #100]	@ (8001490 <MX_GPIO_Init+0xc0>)
 800142a:	f000 fef7 	bl	800221c <HAL_GPIO_WritePin>
                          |LED_UART_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : SW_QH_Pin ROTARY_ENCODER_Z_Pin ROTARY_ENCODER_B_Pin ROTARY_ENCODER_A_Pin */
  GPIO_InitStruct.Pin = SW_QH_Pin|ROTARY_ENCODER_Z_Pin|ROTARY_ENCODER_B_Pin|ROTARY_ENCODER_A_Pin;
 800142e:	23e1      	movs	r3, #225	@ 0xe1
 8001430:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001432:	2300      	movs	r3, #0
 8001434:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001436:	2300      	movs	r3, #0
 8001438:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800143a:	f107 030c 	add.w	r3, r7, #12
 800143e:	4619      	mov	r1, r3
 8001440:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001444:	f000 fd60 	bl	8001f08 <HAL_GPIO_Init>

  /*Configure GPIO pins : SW_SH_LD_Pin SW_CLK_Pin LED_POWER_Pin SIG_P1_Pin */
  GPIO_InitStruct.Pin = SW_SH_LD_Pin|SW_CLK_Pin|LED_POWER_Pin|SIG_P1_Pin;
 8001448:	f248 1312 	movw	r3, #33042	@ 0x8112
 800144c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800144e:	2301      	movs	r3, #1
 8001450:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001452:	2300      	movs	r3, #0
 8001454:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001456:	2300      	movs	r3, #0
 8001458:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800145a:	f107 030c 	add.w	r3, r7, #12
 800145e:	4619      	mov	r1, r3
 8001460:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001464:	f000 fd50 	bl	8001f08 <HAL_GPIO_Init>

  /*Configure GPIO pins : SIG_P2_Pin _7SEG_SCK_Pin _7SEG_RCK_Pin _7SEG_SI_Pin
                           LED_UART_Pin */
  GPIO_InitStruct.Pin = SIG_P2_Pin|_7SEG_SCK_Pin|_7SEG_RCK_Pin|_7SEG_SI_Pin
 8001468:	23f2      	movs	r3, #242	@ 0xf2
 800146a:	60fb      	str	r3, [r7, #12]
                          |LED_UART_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800146c:	2301      	movs	r3, #1
 800146e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001470:	2300      	movs	r3, #0
 8001472:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001474:	2300      	movs	r3, #0
 8001476:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001478:	f107 030c 	add.w	r3, r7, #12
 800147c:	4619      	mov	r1, r3
 800147e:	4804      	ldr	r0, [pc, #16]	@ (8001490 <MX_GPIO_Init+0xc0>)
 8001480:	f000 fd42 	bl	8001f08 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001484:	bf00      	nop
 8001486:	3720      	adds	r7, #32
 8001488:	46bd      	mov	sp, r7
 800148a:	bd80      	pop	{r7, pc}
 800148c:	40021000 	.word	0x40021000
 8001490:	48000400 	.word	0x48000400

08001494 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001494:	b480      	push	{r7}
 8001496:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001498:	b672      	cpsid	i
}
 800149a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800149c:	bf00      	nop
 800149e:	e7fd      	b.n	800149c <Error_Handler+0x8>

080014a0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014a0:	b480      	push	{r7}
 80014a2:	b083      	sub	sp, #12
 80014a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014a6:	4b0f      	ldr	r3, [pc, #60]	@ (80014e4 <HAL_MspInit+0x44>)
 80014a8:	699b      	ldr	r3, [r3, #24]
 80014aa:	4a0e      	ldr	r2, [pc, #56]	@ (80014e4 <HAL_MspInit+0x44>)
 80014ac:	f043 0301 	orr.w	r3, r3, #1
 80014b0:	6193      	str	r3, [r2, #24]
 80014b2:	4b0c      	ldr	r3, [pc, #48]	@ (80014e4 <HAL_MspInit+0x44>)
 80014b4:	699b      	ldr	r3, [r3, #24]
 80014b6:	f003 0301 	and.w	r3, r3, #1
 80014ba:	607b      	str	r3, [r7, #4]
 80014bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014be:	4b09      	ldr	r3, [pc, #36]	@ (80014e4 <HAL_MspInit+0x44>)
 80014c0:	69db      	ldr	r3, [r3, #28]
 80014c2:	4a08      	ldr	r2, [pc, #32]	@ (80014e4 <HAL_MspInit+0x44>)
 80014c4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80014c8:	61d3      	str	r3, [r2, #28]
 80014ca:	4b06      	ldr	r3, [pc, #24]	@ (80014e4 <HAL_MspInit+0x44>)
 80014cc:	69db      	ldr	r3, [r3, #28]
 80014ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014d2:	603b      	str	r3, [r7, #0]
 80014d4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014d6:	bf00      	nop
 80014d8:	370c      	adds	r7, #12
 80014da:	46bd      	mov	sp, r7
 80014dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e0:	4770      	bx	lr
 80014e2:	bf00      	nop
 80014e4:	40021000 	.word	0x40021000

080014e8 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b08a      	sub	sp, #40	@ 0x28
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014f0:	f107 0314 	add.w	r3, r7, #20
 80014f4:	2200      	movs	r2, #0
 80014f6:	601a      	str	r2, [r3, #0]
 80014f8:	605a      	str	r2, [r3, #4]
 80014fa:	609a      	str	r2, [r3, #8]
 80014fc:	60da      	str	r2, [r3, #12]
 80014fe:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN)
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	4a18      	ldr	r2, [pc, #96]	@ (8001568 <HAL_CAN_MspInit+0x80>)
 8001506:	4293      	cmp	r3, r2
 8001508:	d129      	bne.n	800155e <HAL_CAN_MspInit+0x76>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800150a:	4b18      	ldr	r3, [pc, #96]	@ (800156c <HAL_CAN_MspInit+0x84>)
 800150c:	69db      	ldr	r3, [r3, #28]
 800150e:	4a17      	ldr	r2, [pc, #92]	@ (800156c <HAL_CAN_MspInit+0x84>)
 8001510:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001514:	61d3      	str	r3, [r2, #28]
 8001516:	4b15      	ldr	r3, [pc, #84]	@ (800156c <HAL_CAN_MspInit+0x84>)
 8001518:	69db      	ldr	r3, [r3, #28]
 800151a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800151e:	613b      	str	r3, [r7, #16]
 8001520:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001522:	4b12      	ldr	r3, [pc, #72]	@ (800156c <HAL_CAN_MspInit+0x84>)
 8001524:	695b      	ldr	r3, [r3, #20]
 8001526:	4a11      	ldr	r2, [pc, #68]	@ (800156c <HAL_CAN_MspInit+0x84>)
 8001528:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800152c:	6153      	str	r3, [r2, #20]
 800152e:	4b0f      	ldr	r3, [pc, #60]	@ (800156c <HAL_CAN_MspInit+0x84>)
 8001530:	695b      	ldr	r3, [r3, #20]
 8001532:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001536:	60fb      	str	r3, [r7, #12]
 8001538:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = CAN_RXD_Pin|CAN_TXD_Pin;
 800153a:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800153e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001540:	2302      	movs	r3, #2
 8001542:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001544:	2300      	movs	r3, #0
 8001546:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001548:	2303      	movs	r3, #3
 800154a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN;
 800154c:	2309      	movs	r3, #9
 800154e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001550:	f107 0314 	add.w	r3, r7, #20
 8001554:	4619      	mov	r1, r3
 8001556:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800155a:	f000 fcd5 	bl	8001f08 <HAL_GPIO_Init>

  /* USER CODE END CAN_MspInit 1 */

  }

}
 800155e:	bf00      	nop
 8001560:	3728      	adds	r7, #40	@ 0x28
 8001562:	46bd      	mov	sp, r7
 8001564:	bd80      	pop	{r7, pc}
 8001566:	bf00      	nop
 8001568:	40006400 	.word	0x40006400
 800156c:	40021000 	.word	0x40021000

08001570 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001570:	b480      	push	{r7}
 8001572:	b087      	sub	sp, #28
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	4a25      	ldr	r2, [pc, #148]	@ (8001614 <HAL_TIM_Base_MspInit+0xa4>)
 800157e:	4293      	cmp	r3, r2
 8001580:	d10c      	bne.n	800159c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001582:	4b25      	ldr	r3, [pc, #148]	@ (8001618 <HAL_TIM_Base_MspInit+0xa8>)
 8001584:	699b      	ldr	r3, [r3, #24]
 8001586:	4a24      	ldr	r2, [pc, #144]	@ (8001618 <HAL_TIM_Base_MspInit+0xa8>)
 8001588:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800158c:	6193      	str	r3, [r2, #24]
 800158e:	4b22      	ldr	r3, [pc, #136]	@ (8001618 <HAL_TIM_Base_MspInit+0xa8>)
 8001590:	699b      	ldr	r3, [r3, #24]
 8001592:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001596:	617b      	str	r3, [r7, #20]
 8001598:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 800159a:	e034      	b.n	8001606 <HAL_TIM_Base_MspInit+0x96>
  else if(htim_base->Instance==TIM2)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80015a4:	d10c      	bne.n	80015c0 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80015a6:	4b1c      	ldr	r3, [pc, #112]	@ (8001618 <HAL_TIM_Base_MspInit+0xa8>)
 80015a8:	69db      	ldr	r3, [r3, #28]
 80015aa:	4a1b      	ldr	r2, [pc, #108]	@ (8001618 <HAL_TIM_Base_MspInit+0xa8>)
 80015ac:	f043 0301 	orr.w	r3, r3, #1
 80015b0:	61d3      	str	r3, [r2, #28]
 80015b2:	4b19      	ldr	r3, [pc, #100]	@ (8001618 <HAL_TIM_Base_MspInit+0xa8>)
 80015b4:	69db      	ldr	r3, [r3, #28]
 80015b6:	f003 0301 	and.w	r3, r3, #1
 80015ba:	613b      	str	r3, [r7, #16]
 80015bc:	693b      	ldr	r3, [r7, #16]
}
 80015be:	e022      	b.n	8001606 <HAL_TIM_Base_MspInit+0x96>
  else if(htim_base->Instance==TIM3)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	4a15      	ldr	r2, [pc, #84]	@ (800161c <HAL_TIM_Base_MspInit+0xac>)
 80015c6:	4293      	cmp	r3, r2
 80015c8:	d10c      	bne.n	80015e4 <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80015ca:	4b13      	ldr	r3, [pc, #76]	@ (8001618 <HAL_TIM_Base_MspInit+0xa8>)
 80015cc:	69db      	ldr	r3, [r3, #28]
 80015ce:	4a12      	ldr	r2, [pc, #72]	@ (8001618 <HAL_TIM_Base_MspInit+0xa8>)
 80015d0:	f043 0302 	orr.w	r3, r3, #2
 80015d4:	61d3      	str	r3, [r2, #28]
 80015d6:	4b10      	ldr	r3, [pc, #64]	@ (8001618 <HAL_TIM_Base_MspInit+0xa8>)
 80015d8:	69db      	ldr	r3, [r3, #28]
 80015da:	f003 0302 	and.w	r3, r3, #2
 80015de:	60fb      	str	r3, [r7, #12]
 80015e0:	68fb      	ldr	r3, [r7, #12]
}
 80015e2:	e010      	b.n	8001606 <HAL_TIM_Base_MspInit+0x96>
  else if(htim_base->Instance==TIM15)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	4a0d      	ldr	r2, [pc, #52]	@ (8001620 <HAL_TIM_Base_MspInit+0xb0>)
 80015ea:	4293      	cmp	r3, r2
 80015ec:	d10b      	bne.n	8001606 <HAL_TIM_Base_MspInit+0x96>
    __HAL_RCC_TIM15_CLK_ENABLE();
 80015ee:	4b0a      	ldr	r3, [pc, #40]	@ (8001618 <HAL_TIM_Base_MspInit+0xa8>)
 80015f0:	699b      	ldr	r3, [r3, #24]
 80015f2:	4a09      	ldr	r2, [pc, #36]	@ (8001618 <HAL_TIM_Base_MspInit+0xa8>)
 80015f4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80015f8:	6193      	str	r3, [r2, #24]
 80015fa:	4b07      	ldr	r3, [pc, #28]	@ (8001618 <HAL_TIM_Base_MspInit+0xa8>)
 80015fc:	699b      	ldr	r3, [r3, #24]
 80015fe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001602:	60bb      	str	r3, [r7, #8]
 8001604:	68bb      	ldr	r3, [r7, #8]
}
 8001606:	bf00      	nop
 8001608:	371c      	adds	r7, #28
 800160a:	46bd      	mov	sp, r7
 800160c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001610:	4770      	bx	lr
 8001612:	bf00      	nop
 8001614:	40012c00 	.word	0x40012c00
 8001618:	40021000 	.word	0x40021000
 800161c:	40000400 	.word	0x40000400
 8001620:	40014000 	.word	0x40014000

08001624 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b08a      	sub	sp, #40	@ 0x28
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800162c:	f107 0314 	add.w	r3, r7, #20
 8001630:	2200      	movs	r2, #0
 8001632:	601a      	str	r2, [r3, #0]
 8001634:	605a      	str	r2, [r3, #4]
 8001636:	609a      	str	r2, [r3, #8]
 8001638:	60da      	str	r2, [r3, #12]
 800163a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001644:	d11c      	bne.n	8001680 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001646:	4b21      	ldr	r3, [pc, #132]	@ (80016cc <HAL_TIM_MspPostInit+0xa8>)
 8001648:	695b      	ldr	r3, [r3, #20]
 800164a:	4a20      	ldr	r2, [pc, #128]	@ (80016cc <HAL_TIM_MspPostInit+0xa8>)
 800164c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001650:	6153      	str	r3, [r2, #20]
 8001652:	4b1e      	ldr	r3, [pc, #120]	@ (80016cc <HAL_TIM_MspPostInit+0xa8>)
 8001654:	695b      	ldr	r3, [r3, #20]
 8001656:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800165a:	613b      	str	r3, [r7, #16]
 800165c:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = SIG_N1_Pin;
 800165e:	2308      	movs	r3, #8
 8001660:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001662:	2302      	movs	r3, #2
 8001664:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001666:	2300      	movs	r3, #0
 8001668:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800166a:	2300      	movs	r3, #0
 800166c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800166e:	2301      	movs	r3, #1
 8001670:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(SIG_N1_GPIO_Port, &GPIO_InitStruct);
 8001672:	f107 0314 	add.w	r3, r7, #20
 8001676:	4619      	mov	r1, r3
 8001678:	4815      	ldr	r0, [pc, #84]	@ (80016d0 <HAL_TIM_MspPostInit+0xac>)
 800167a:	f000 fc45 	bl	8001f08 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800167e:	e020      	b.n	80016c2 <HAL_TIM_MspPostInit+0x9e>
  else if(htim->Instance==TIM3)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	4a13      	ldr	r2, [pc, #76]	@ (80016d4 <HAL_TIM_MspPostInit+0xb0>)
 8001686:	4293      	cmp	r3, r2
 8001688:	d11b      	bne.n	80016c2 <HAL_TIM_MspPostInit+0x9e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800168a:	4b10      	ldr	r3, [pc, #64]	@ (80016cc <HAL_TIM_MspPostInit+0xa8>)
 800168c:	695b      	ldr	r3, [r3, #20]
 800168e:	4a0f      	ldr	r2, [pc, #60]	@ (80016cc <HAL_TIM_MspPostInit+0xa8>)
 8001690:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001694:	6153      	str	r3, [r2, #20]
 8001696:	4b0d      	ldr	r3, [pc, #52]	@ (80016cc <HAL_TIM_MspPostInit+0xa8>)
 8001698:	695b      	ldr	r3, [r3, #20]
 800169a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800169e:	60fb      	str	r3, [r7, #12]
 80016a0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = SIG_N2_Pin;
 80016a2:	2301      	movs	r3, #1
 80016a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016a6:	2302      	movs	r3, #2
 80016a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016aa:	2300      	movs	r3, #0
 80016ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016ae:	2300      	movs	r3, #0
 80016b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80016b2:	2302      	movs	r3, #2
 80016b4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(SIG_N2_GPIO_Port, &GPIO_InitStruct);
 80016b6:	f107 0314 	add.w	r3, r7, #20
 80016ba:	4619      	mov	r1, r3
 80016bc:	4804      	ldr	r0, [pc, #16]	@ (80016d0 <HAL_TIM_MspPostInit+0xac>)
 80016be:	f000 fc23 	bl	8001f08 <HAL_GPIO_Init>
}
 80016c2:	bf00      	nop
 80016c4:	3728      	adds	r7, #40	@ 0x28
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bd80      	pop	{r7, pc}
 80016ca:	bf00      	nop
 80016cc:	40021000 	.word	0x40021000
 80016d0:	48000400 	.word	0x48000400
 80016d4:	40000400 	.word	0x40000400

080016d8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b08c      	sub	sp, #48	@ 0x30
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016e0:	f107 031c 	add.w	r3, r7, #28
 80016e4:	2200      	movs	r2, #0
 80016e6:	601a      	str	r2, [r3, #0]
 80016e8:	605a      	str	r2, [r3, #4]
 80016ea:	609a      	str	r2, [r3, #8]
 80016ec:	60da      	str	r2, [r3, #12]
 80016ee:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	4a33      	ldr	r2, [pc, #204]	@ (80017c4 <HAL_UART_MspInit+0xec>)
 80016f6:	4293      	cmp	r3, r2
 80016f8:	d132      	bne.n	8001760 <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80016fa:	4b33      	ldr	r3, [pc, #204]	@ (80017c8 <HAL_UART_MspInit+0xf0>)
 80016fc:	699b      	ldr	r3, [r3, #24]
 80016fe:	4a32      	ldr	r2, [pc, #200]	@ (80017c8 <HAL_UART_MspInit+0xf0>)
 8001700:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001704:	6193      	str	r3, [r2, #24]
 8001706:	4b30      	ldr	r3, [pc, #192]	@ (80017c8 <HAL_UART_MspInit+0xf0>)
 8001708:	699b      	ldr	r3, [r3, #24]
 800170a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800170e:	61bb      	str	r3, [r7, #24]
 8001710:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001712:	4b2d      	ldr	r3, [pc, #180]	@ (80017c8 <HAL_UART_MspInit+0xf0>)
 8001714:	695b      	ldr	r3, [r3, #20]
 8001716:	4a2c      	ldr	r2, [pc, #176]	@ (80017c8 <HAL_UART_MspInit+0xf0>)
 8001718:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800171c:	6153      	str	r3, [r2, #20]
 800171e:	4b2a      	ldr	r3, [pc, #168]	@ (80017c8 <HAL_UART_MspInit+0xf0>)
 8001720:	695b      	ldr	r3, [r3, #20]
 8001722:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001726:	617b      	str	r3, [r7, #20]
 8001728:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = PC_UART_TXD_Pin|PC_UART_RXD_Pin;
 800172a:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800172e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001730:	2312      	movs	r3, #18
 8001732:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001734:	2300      	movs	r3, #0
 8001736:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001738:	2303      	movs	r3, #3
 800173a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800173c:	2307      	movs	r3, #7
 800173e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001740:	f107 031c 	add.w	r3, r7, #28
 8001744:	4619      	mov	r1, r3
 8001746:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800174a:	f000 fbdd 	bl	8001f08 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800174e:	2200      	movs	r2, #0
 8001750:	2100      	movs	r1, #0
 8001752:	2025      	movs	r0, #37	@ 0x25
 8001754:	f000 fb25 	bl	8001da2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001758:	2025      	movs	r0, #37	@ 0x25
 800175a:	f000 fb3e 	bl	8001dda <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800175e:	e02d      	b.n	80017bc <HAL_UART_MspInit+0xe4>
  else if(huart->Instance==USART2)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	4a19      	ldr	r2, [pc, #100]	@ (80017cc <HAL_UART_MspInit+0xf4>)
 8001766:	4293      	cmp	r3, r2
 8001768:	d128      	bne.n	80017bc <HAL_UART_MspInit+0xe4>
    __HAL_RCC_USART2_CLK_ENABLE();
 800176a:	4b17      	ldr	r3, [pc, #92]	@ (80017c8 <HAL_UART_MspInit+0xf0>)
 800176c:	69db      	ldr	r3, [r3, #28]
 800176e:	4a16      	ldr	r2, [pc, #88]	@ (80017c8 <HAL_UART_MspInit+0xf0>)
 8001770:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001774:	61d3      	str	r3, [r2, #28]
 8001776:	4b14      	ldr	r3, [pc, #80]	@ (80017c8 <HAL_UART_MspInit+0xf0>)
 8001778:	69db      	ldr	r3, [r3, #28]
 800177a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800177e:	613b      	str	r3, [r7, #16]
 8001780:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001782:	4b11      	ldr	r3, [pc, #68]	@ (80017c8 <HAL_UART_MspInit+0xf0>)
 8001784:	695b      	ldr	r3, [r3, #20]
 8001786:	4a10      	ldr	r2, [pc, #64]	@ (80017c8 <HAL_UART_MspInit+0xf0>)
 8001788:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800178c:	6153      	str	r3, [r2, #20]
 800178e:	4b0e      	ldr	r3, [pc, #56]	@ (80017c8 <HAL_UART_MspInit+0xf0>)
 8001790:	695b      	ldr	r3, [r3, #20]
 8001792:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001796:	60fb      	str	r3, [r7, #12]
 8001798:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = N_C__Pin|UART_RX_Pin;
 800179a:	230c      	movs	r3, #12
 800179c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800179e:	2312      	movs	r3, #18
 80017a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017a2:	2300      	movs	r3, #0
 80017a4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80017a6:	2303      	movs	r3, #3
 80017a8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80017aa:	2307      	movs	r3, #7
 80017ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017ae:	f107 031c 	add.w	r3, r7, #28
 80017b2:	4619      	mov	r1, r3
 80017b4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80017b8:	f000 fba6 	bl	8001f08 <HAL_GPIO_Init>
}
 80017bc:	bf00      	nop
 80017be:	3730      	adds	r7, #48	@ 0x30
 80017c0:	46bd      	mov	sp, r7
 80017c2:	bd80      	pop	{r7, pc}
 80017c4:	40013800 	.word	0x40013800
 80017c8:	40021000 	.word	0x40021000
 80017cc:	40004400 	.word	0x40004400

080017d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017d0:	b480      	push	{r7}
 80017d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80017d4:	bf00      	nop
 80017d6:	e7fd      	b.n	80017d4 <NMI_Handler+0x4>

080017d8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017d8:	b480      	push	{r7}
 80017da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017dc:	bf00      	nop
 80017de:	e7fd      	b.n	80017dc <HardFault_Handler+0x4>

080017e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017e0:	b480      	push	{r7}
 80017e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017e4:	bf00      	nop
 80017e6:	e7fd      	b.n	80017e4 <MemManage_Handler+0x4>

080017e8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017e8:	b480      	push	{r7}
 80017ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017ec:	bf00      	nop
 80017ee:	e7fd      	b.n	80017ec <BusFault_Handler+0x4>

080017f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017f0:	b480      	push	{r7}
 80017f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017f4:	bf00      	nop
 80017f6:	e7fd      	b.n	80017f4 <UsageFault_Handler+0x4>

080017f8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017f8:	b480      	push	{r7}
 80017fa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017fc:	bf00      	nop
 80017fe:	46bd      	mov	sp, r7
 8001800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001804:	4770      	bx	lr

08001806 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001806:	b480      	push	{r7}
 8001808:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800180a:	bf00      	nop
 800180c:	46bd      	mov	sp, r7
 800180e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001812:	4770      	bx	lr

08001814 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001814:	b480      	push	{r7}
 8001816:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001818:	bf00      	nop
 800181a:	46bd      	mov	sp, r7
 800181c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001820:	4770      	bx	lr

08001822 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001822:	b580      	push	{r7, lr}
 8001824:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001826:	f000 f8c5 	bl	80019b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800182a:	bf00      	nop
 800182c:	bd80      	pop	{r7, pc}
	...

08001830 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXT line 25.
  */
void USART1_IRQHandler(void)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001834:	4802      	ldr	r0, [pc, #8]	@ (8001840 <USART1_IRQHandler+0x10>)
 8001836:	f003 fa8b 	bl	8004d50 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800183a:	bf00      	nop
 800183c:	bd80      	pop	{r7, pc}
 800183e:	bf00      	nop
 8001840:	2000022c 	.word	0x2000022c

08001844 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b086      	sub	sp, #24
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800184c:	4a14      	ldr	r2, [pc, #80]	@ (80018a0 <_sbrk+0x5c>)
 800184e:	4b15      	ldr	r3, [pc, #84]	@ (80018a4 <_sbrk+0x60>)
 8001850:	1ad3      	subs	r3, r2, r3
 8001852:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001854:	697b      	ldr	r3, [r7, #20]
 8001856:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001858:	4b13      	ldr	r3, [pc, #76]	@ (80018a8 <_sbrk+0x64>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	2b00      	cmp	r3, #0
 800185e:	d102      	bne.n	8001866 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001860:	4b11      	ldr	r3, [pc, #68]	@ (80018a8 <_sbrk+0x64>)
 8001862:	4a12      	ldr	r2, [pc, #72]	@ (80018ac <_sbrk+0x68>)
 8001864:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001866:	4b10      	ldr	r3, [pc, #64]	@ (80018a8 <_sbrk+0x64>)
 8001868:	681a      	ldr	r2, [r3, #0]
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	4413      	add	r3, r2
 800186e:	693a      	ldr	r2, [r7, #16]
 8001870:	429a      	cmp	r2, r3
 8001872:	d207      	bcs.n	8001884 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001874:	f004 f946 	bl	8005b04 <__errno>
 8001878:	4603      	mov	r3, r0
 800187a:	220c      	movs	r2, #12
 800187c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800187e:	f04f 33ff 	mov.w	r3, #4294967295
 8001882:	e009      	b.n	8001898 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001884:	4b08      	ldr	r3, [pc, #32]	@ (80018a8 <_sbrk+0x64>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800188a:	4b07      	ldr	r3, [pc, #28]	@ (80018a8 <_sbrk+0x64>)
 800188c:	681a      	ldr	r2, [r3, #0]
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	4413      	add	r3, r2
 8001892:	4a05      	ldr	r2, [pc, #20]	@ (80018a8 <_sbrk+0x64>)
 8001894:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001896:	68fb      	ldr	r3, [r7, #12]
}
 8001898:	4618      	mov	r0, r3
 800189a:	3718      	adds	r7, #24
 800189c:	46bd      	mov	sp, r7
 800189e:	bd80      	pop	{r7, pc}
 80018a0:	20003000 	.word	0x20003000
 80018a4:	00000400 	.word	0x00000400
 80018a8:	20000398 	.word	0x20000398
 80018ac:	200004e8 	.word	0x200004e8

080018b0 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80018b0:	b480      	push	{r7}
 80018b2:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80018b4:	4b06      	ldr	r3, [pc, #24]	@ (80018d0 <SystemInit+0x20>)
 80018b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80018ba:	4a05      	ldr	r2, [pc, #20]	@ (80018d0 <SystemInit+0x20>)
 80018bc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80018c0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80018c4:	bf00      	nop
 80018c6:	46bd      	mov	sp, r7
 80018c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018cc:	4770      	bx	lr
 80018ce:	bf00      	nop
 80018d0:	e000ed00 	.word	0xe000ed00

080018d4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80018d4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800190c <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80018d8:	f7ff ffea 	bl	80018b0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80018dc:	480c      	ldr	r0, [pc, #48]	@ (8001910 <LoopForever+0x6>)
  ldr r1, =_edata
 80018de:	490d      	ldr	r1, [pc, #52]	@ (8001914 <LoopForever+0xa>)
  ldr r2, =_sidata
 80018e0:	4a0d      	ldr	r2, [pc, #52]	@ (8001918 <LoopForever+0xe>)
  movs r3, #0
 80018e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80018e4:	e002      	b.n	80018ec <LoopCopyDataInit>

080018e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018ea:	3304      	adds	r3, #4

080018ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80018f0:	d3f9      	bcc.n	80018e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80018f2:	4a0a      	ldr	r2, [pc, #40]	@ (800191c <LoopForever+0x12>)
  ldr r4, =_ebss
 80018f4:	4c0a      	ldr	r4, [pc, #40]	@ (8001920 <LoopForever+0x16>)
  movs r3, #0
 80018f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018f8:	e001      	b.n	80018fe <LoopFillZerobss>

080018fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018fc:	3204      	adds	r2, #4

080018fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001900:	d3fb      	bcc.n	80018fa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001902:	f004 f905 	bl	8005b10 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001906:	f7ff fab1 	bl	8000e6c <main>

0800190a <LoopForever>:

LoopForever:
    b LoopForever
 800190a:	e7fe      	b.n	800190a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800190c:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8001910:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001914:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8001918:	08006e4c 	.word	0x08006e4c
  ldr r2, =_sbss
 800191c:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8001920:	200004e8 	.word	0x200004e8

08001924 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001924:	e7fe      	b.n	8001924 <ADC1_2_IRQHandler>
	...

08001928 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800192c:	4b08      	ldr	r3, [pc, #32]	@ (8001950 <HAL_Init+0x28>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	4a07      	ldr	r2, [pc, #28]	@ (8001950 <HAL_Init+0x28>)
 8001932:	f043 0310 	orr.w	r3, r3, #16
 8001936:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001938:	2003      	movs	r0, #3
 800193a:	f000 fa27 	bl	8001d8c <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800193e:	200f      	movs	r0, #15
 8001940:	f000 f808 	bl	8001954 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001944:	f7ff fdac 	bl	80014a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001948:	2300      	movs	r3, #0
}
 800194a:	4618      	mov	r0, r3
 800194c:	bd80      	pop	{r7, pc}
 800194e:	bf00      	nop
 8001950:	40022000 	.word	0x40022000

08001954 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b082      	sub	sp, #8
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800195c:	4b12      	ldr	r3, [pc, #72]	@ (80019a8 <HAL_InitTick+0x54>)
 800195e:	681a      	ldr	r2, [r3, #0]
 8001960:	4b12      	ldr	r3, [pc, #72]	@ (80019ac <HAL_InitTick+0x58>)
 8001962:	781b      	ldrb	r3, [r3, #0]
 8001964:	4619      	mov	r1, r3
 8001966:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800196a:	fbb3 f3f1 	udiv	r3, r3, r1
 800196e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001972:	4618      	mov	r0, r3
 8001974:	f000 fa3f 	bl	8001df6 <HAL_SYSTICK_Config>
 8001978:	4603      	mov	r3, r0
 800197a:	2b00      	cmp	r3, #0
 800197c:	d001      	beq.n	8001982 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800197e:	2301      	movs	r3, #1
 8001980:	e00e      	b.n	80019a0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	2b0f      	cmp	r3, #15
 8001986:	d80a      	bhi.n	800199e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001988:	2200      	movs	r2, #0
 800198a:	6879      	ldr	r1, [r7, #4]
 800198c:	f04f 30ff 	mov.w	r0, #4294967295
 8001990:	f000 fa07 	bl	8001da2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001994:	4a06      	ldr	r2, [pc, #24]	@ (80019b0 <HAL_InitTick+0x5c>)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800199a:	2300      	movs	r3, #0
 800199c:	e000      	b.n	80019a0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800199e:	2301      	movs	r3, #1
}
 80019a0:	4618      	mov	r0, r3
 80019a2:	3708      	adds	r7, #8
 80019a4:	46bd      	mov	sp, r7
 80019a6:	bd80      	pop	{r7, pc}
 80019a8:	20000000 	.word	0x20000000
 80019ac:	20000008 	.word	0x20000008
 80019b0:	20000004 	.word	0x20000004

080019b4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019b4:	b480      	push	{r7}
 80019b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80019b8:	4b06      	ldr	r3, [pc, #24]	@ (80019d4 <HAL_IncTick+0x20>)
 80019ba:	781b      	ldrb	r3, [r3, #0]
 80019bc:	461a      	mov	r2, r3
 80019be:	4b06      	ldr	r3, [pc, #24]	@ (80019d8 <HAL_IncTick+0x24>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	4413      	add	r3, r2
 80019c4:	4a04      	ldr	r2, [pc, #16]	@ (80019d8 <HAL_IncTick+0x24>)
 80019c6:	6013      	str	r3, [r2, #0]
}
 80019c8:	bf00      	nop
 80019ca:	46bd      	mov	sp, r7
 80019cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d0:	4770      	bx	lr
 80019d2:	bf00      	nop
 80019d4:	20000008 	.word	0x20000008
 80019d8:	2000039c 	.word	0x2000039c

080019dc <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019dc:	b480      	push	{r7}
 80019de:	af00      	add	r7, sp, #0
  return uwTick;  
 80019e0:	4b03      	ldr	r3, [pc, #12]	@ (80019f0 <HAL_GetTick+0x14>)
 80019e2:	681b      	ldr	r3, [r3, #0]
}
 80019e4:	4618      	mov	r0, r3
 80019e6:	46bd      	mov	sp, r7
 80019e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ec:	4770      	bx	lr
 80019ee:	bf00      	nop
 80019f0:	2000039c 	.word	0x2000039c

080019f4 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b084      	sub	sp, #16
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d101      	bne.n	8001a06 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001a02:	2301      	movs	r3, #1
 8001a04:	e0ed      	b.n	8001be2 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a0c:	b2db      	uxtb	r3, r3
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d102      	bne.n	8001a18 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001a12:	6878      	ldr	r0, [r7, #4]
 8001a14:	f7ff fd68 	bl	80014e8 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	681a      	ldr	r2, [r3, #0]
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f042 0201 	orr.w	r2, r2, #1
 8001a26:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001a28:	f7ff ffd8 	bl	80019dc <HAL_GetTick>
 8001a2c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001a2e:	e012      	b.n	8001a56 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001a30:	f7ff ffd4 	bl	80019dc <HAL_GetTick>
 8001a34:	4602      	mov	r2, r0
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	1ad3      	subs	r3, r2, r3
 8001a3a:	2b0a      	cmp	r3, #10
 8001a3c:	d90b      	bls.n	8001a56 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a42:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	2205      	movs	r2, #5
 8001a4e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001a52:	2301      	movs	r3, #1
 8001a54:	e0c5      	b.n	8001be2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	685b      	ldr	r3, [r3, #4]
 8001a5c:	f003 0301 	and.w	r3, r3, #1
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d0e5      	beq.n	8001a30 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	681a      	ldr	r2, [r3, #0]
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f022 0202 	bic.w	r2, r2, #2
 8001a72:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001a74:	f7ff ffb2 	bl	80019dc <HAL_GetTick>
 8001a78:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001a7a:	e012      	b.n	8001aa2 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001a7c:	f7ff ffae 	bl	80019dc <HAL_GetTick>
 8001a80:	4602      	mov	r2, r0
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	1ad3      	subs	r3, r2, r3
 8001a86:	2b0a      	cmp	r3, #10
 8001a88:	d90b      	bls.n	8001aa2 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a8e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	2205      	movs	r2, #5
 8001a9a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001a9e:	2301      	movs	r3, #1
 8001aa0:	e09f      	b.n	8001be2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	685b      	ldr	r3, [r3, #4]
 8001aa8:	f003 0302 	and.w	r3, r3, #2
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d1e5      	bne.n	8001a7c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	7e1b      	ldrb	r3, [r3, #24]
 8001ab4:	2b01      	cmp	r3, #1
 8001ab6:	d108      	bne.n	8001aca <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	681a      	ldr	r2, [r3, #0]
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001ac6:	601a      	str	r2, [r3, #0]
 8001ac8:	e007      	b.n	8001ada <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	681a      	ldr	r2, [r3, #0]
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001ad8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	7e5b      	ldrb	r3, [r3, #25]
 8001ade:	2b01      	cmp	r3, #1
 8001ae0:	d108      	bne.n	8001af4 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	681a      	ldr	r2, [r3, #0]
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001af0:	601a      	str	r2, [r3, #0]
 8001af2:	e007      	b.n	8001b04 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	681a      	ldr	r2, [r3, #0]
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001b02:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	7e9b      	ldrb	r3, [r3, #26]
 8001b08:	2b01      	cmp	r3, #1
 8001b0a:	d108      	bne.n	8001b1e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	681a      	ldr	r2, [r3, #0]
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f042 0220 	orr.w	r2, r2, #32
 8001b1a:	601a      	str	r2, [r3, #0]
 8001b1c:	e007      	b.n	8001b2e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	681a      	ldr	r2, [r3, #0]
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f022 0220 	bic.w	r2, r2, #32
 8001b2c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	7edb      	ldrb	r3, [r3, #27]
 8001b32:	2b01      	cmp	r3, #1
 8001b34:	d108      	bne.n	8001b48 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	681a      	ldr	r2, [r3, #0]
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f022 0210 	bic.w	r2, r2, #16
 8001b44:	601a      	str	r2, [r3, #0]
 8001b46:	e007      	b.n	8001b58 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	681a      	ldr	r2, [r3, #0]
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f042 0210 	orr.w	r2, r2, #16
 8001b56:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	7f1b      	ldrb	r3, [r3, #28]
 8001b5c:	2b01      	cmp	r3, #1
 8001b5e:	d108      	bne.n	8001b72 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	681a      	ldr	r2, [r3, #0]
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f042 0208 	orr.w	r2, r2, #8
 8001b6e:	601a      	str	r2, [r3, #0]
 8001b70:	e007      	b.n	8001b82 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	681a      	ldr	r2, [r3, #0]
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f022 0208 	bic.w	r2, r2, #8
 8001b80:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	7f5b      	ldrb	r3, [r3, #29]
 8001b86:	2b01      	cmp	r3, #1
 8001b88:	d108      	bne.n	8001b9c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	681a      	ldr	r2, [r3, #0]
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f042 0204 	orr.w	r2, r2, #4
 8001b98:	601a      	str	r2, [r3, #0]
 8001b9a:	e007      	b.n	8001bac <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	681a      	ldr	r2, [r3, #0]
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f022 0204 	bic.w	r2, r2, #4
 8001baa:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	689a      	ldr	r2, [r3, #8]
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	68db      	ldr	r3, [r3, #12]
 8001bb4:	431a      	orrs	r2, r3
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	691b      	ldr	r3, [r3, #16]
 8001bba:	431a      	orrs	r2, r3
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	695b      	ldr	r3, [r3, #20]
 8001bc0:	ea42 0103 	orr.w	r1, r2, r3
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	685b      	ldr	r3, [r3, #4]
 8001bc8:	1e5a      	subs	r2, r3, #1
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	430a      	orrs	r2, r1
 8001bd0:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	2201      	movs	r2, #1
 8001bdc:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001be0:	2300      	movs	r3, #0
}
 8001be2:	4618      	mov	r0, r3
 8001be4:	3710      	adds	r7, #16
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bd80      	pop	{r7, pc}
	...

08001bec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bec:	b480      	push	{r7}
 8001bee:	b085      	sub	sp, #20
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	f003 0307 	and.w	r3, r3, #7
 8001bfa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001bfc:	4b0c      	ldr	r3, [pc, #48]	@ (8001c30 <__NVIC_SetPriorityGrouping+0x44>)
 8001bfe:	68db      	ldr	r3, [r3, #12]
 8001c00:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c02:	68ba      	ldr	r2, [r7, #8]
 8001c04:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001c08:	4013      	ands	r3, r2
 8001c0a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c10:	68bb      	ldr	r3, [r7, #8]
 8001c12:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c14:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001c18:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001c1c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c1e:	4a04      	ldr	r2, [pc, #16]	@ (8001c30 <__NVIC_SetPriorityGrouping+0x44>)
 8001c20:	68bb      	ldr	r3, [r7, #8]
 8001c22:	60d3      	str	r3, [r2, #12]
}
 8001c24:	bf00      	nop
 8001c26:	3714      	adds	r7, #20
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2e:	4770      	bx	lr
 8001c30:	e000ed00 	.word	0xe000ed00

08001c34 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c34:	b480      	push	{r7}
 8001c36:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c38:	4b04      	ldr	r3, [pc, #16]	@ (8001c4c <__NVIC_GetPriorityGrouping+0x18>)
 8001c3a:	68db      	ldr	r3, [r3, #12]
 8001c3c:	0a1b      	lsrs	r3, r3, #8
 8001c3e:	f003 0307 	and.w	r3, r3, #7
}
 8001c42:	4618      	mov	r0, r3
 8001c44:	46bd      	mov	sp, r7
 8001c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4a:	4770      	bx	lr
 8001c4c:	e000ed00 	.word	0xe000ed00

08001c50 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c50:	b480      	push	{r7}
 8001c52:	b083      	sub	sp, #12
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	4603      	mov	r3, r0
 8001c58:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	db0b      	blt.n	8001c7a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c62:	79fb      	ldrb	r3, [r7, #7]
 8001c64:	f003 021f 	and.w	r2, r3, #31
 8001c68:	4907      	ldr	r1, [pc, #28]	@ (8001c88 <__NVIC_EnableIRQ+0x38>)
 8001c6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c6e:	095b      	lsrs	r3, r3, #5
 8001c70:	2001      	movs	r0, #1
 8001c72:	fa00 f202 	lsl.w	r2, r0, r2
 8001c76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001c7a:	bf00      	nop
 8001c7c:	370c      	adds	r7, #12
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c84:	4770      	bx	lr
 8001c86:	bf00      	nop
 8001c88:	e000e100 	.word	0xe000e100

08001c8c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	b083      	sub	sp, #12
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	4603      	mov	r3, r0
 8001c94:	6039      	str	r1, [r7, #0]
 8001c96:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	db0a      	blt.n	8001cb6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	b2da      	uxtb	r2, r3
 8001ca4:	490c      	ldr	r1, [pc, #48]	@ (8001cd8 <__NVIC_SetPriority+0x4c>)
 8001ca6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001caa:	0112      	lsls	r2, r2, #4
 8001cac:	b2d2      	uxtb	r2, r2
 8001cae:	440b      	add	r3, r1
 8001cb0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001cb4:	e00a      	b.n	8001ccc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	b2da      	uxtb	r2, r3
 8001cba:	4908      	ldr	r1, [pc, #32]	@ (8001cdc <__NVIC_SetPriority+0x50>)
 8001cbc:	79fb      	ldrb	r3, [r7, #7]
 8001cbe:	f003 030f 	and.w	r3, r3, #15
 8001cc2:	3b04      	subs	r3, #4
 8001cc4:	0112      	lsls	r2, r2, #4
 8001cc6:	b2d2      	uxtb	r2, r2
 8001cc8:	440b      	add	r3, r1
 8001cca:	761a      	strb	r2, [r3, #24]
}
 8001ccc:	bf00      	nop
 8001cce:	370c      	adds	r7, #12
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd6:	4770      	bx	lr
 8001cd8:	e000e100 	.word	0xe000e100
 8001cdc:	e000ed00 	.word	0xe000ed00

08001ce0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	b089      	sub	sp, #36	@ 0x24
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	60f8      	str	r0, [r7, #12]
 8001ce8:	60b9      	str	r1, [r7, #8]
 8001cea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	f003 0307 	and.w	r3, r3, #7
 8001cf2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001cf4:	69fb      	ldr	r3, [r7, #28]
 8001cf6:	f1c3 0307 	rsb	r3, r3, #7
 8001cfa:	2b04      	cmp	r3, #4
 8001cfc:	bf28      	it	cs
 8001cfe:	2304      	movcs	r3, #4
 8001d00:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d02:	69fb      	ldr	r3, [r7, #28]
 8001d04:	3304      	adds	r3, #4
 8001d06:	2b06      	cmp	r3, #6
 8001d08:	d902      	bls.n	8001d10 <NVIC_EncodePriority+0x30>
 8001d0a:	69fb      	ldr	r3, [r7, #28]
 8001d0c:	3b03      	subs	r3, #3
 8001d0e:	e000      	b.n	8001d12 <NVIC_EncodePriority+0x32>
 8001d10:	2300      	movs	r3, #0
 8001d12:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d14:	f04f 32ff 	mov.w	r2, #4294967295
 8001d18:	69bb      	ldr	r3, [r7, #24]
 8001d1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d1e:	43da      	mvns	r2, r3
 8001d20:	68bb      	ldr	r3, [r7, #8]
 8001d22:	401a      	ands	r2, r3
 8001d24:	697b      	ldr	r3, [r7, #20]
 8001d26:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d28:	f04f 31ff 	mov.w	r1, #4294967295
 8001d2c:	697b      	ldr	r3, [r7, #20]
 8001d2e:	fa01 f303 	lsl.w	r3, r1, r3
 8001d32:	43d9      	mvns	r1, r3
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d38:	4313      	orrs	r3, r2
         );
}
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	3724      	adds	r7, #36	@ 0x24
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d44:	4770      	bx	lr
	...

08001d48 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b082      	sub	sp, #8
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	3b01      	subs	r3, #1
 8001d54:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001d58:	d301      	bcc.n	8001d5e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	e00f      	b.n	8001d7e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d5e:	4a0a      	ldr	r2, [pc, #40]	@ (8001d88 <SysTick_Config+0x40>)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	3b01      	subs	r3, #1
 8001d64:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d66:	210f      	movs	r1, #15
 8001d68:	f04f 30ff 	mov.w	r0, #4294967295
 8001d6c:	f7ff ff8e 	bl	8001c8c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d70:	4b05      	ldr	r3, [pc, #20]	@ (8001d88 <SysTick_Config+0x40>)
 8001d72:	2200      	movs	r2, #0
 8001d74:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d76:	4b04      	ldr	r3, [pc, #16]	@ (8001d88 <SysTick_Config+0x40>)
 8001d78:	2207      	movs	r2, #7
 8001d7a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d7c:	2300      	movs	r3, #0
}
 8001d7e:	4618      	mov	r0, r3
 8001d80:	3708      	adds	r7, #8
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bd80      	pop	{r7, pc}
 8001d86:	bf00      	nop
 8001d88:	e000e010 	.word	0xe000e010

08001d8c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b082      	sub	sp, #8
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d94:	6878      	ldr	r0, [r7, #4]
 8001d96:	f7ff ff29 	bl	8001bec <__NVIC_SetPriorityGrouping>
}
 8001d9a:	bf00      	nop
 8001d9c:	3708      	adds	r7, #8
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bd80      	pop	{r7, pc}

08001da2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001da2:	b580      	push	{r7, lr}
 8001da4:	b086      	sub	sp, #24
 8001da6:	af00      	add	r7, sp, #0
 8001da8:	4603      	mov	r3, r0
 8001daa:	60b9      	str	r1, [r7, #8]
 8001dac:	607a      	str	r2, [r7, #4]
 8001dae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001db0:	2300      	movs	r3, #0
 8001db2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001db4:	f7ff ff3e 	bl	8001c34 <__NVIC_GetPriorityGrouping>
 8001db8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001dba:	687a      	ldr	r2, [r7, #4]
 8001dbc:	68b9      	ldr	r1, [r7, #8]
 8001dbe:	6978      	ldr	r0, [r7, #20]
 8001dc0:	f7ff ff8e 	bl	8001ce0 <NVIC_EncodePriority>
 8001dc4:	4602      	mov	r2, r0
 8001dc6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001dca:	4611      	mov	r1, r2
 8001dcc:	4618      	mov	r0, r3
 8001dce:	f7ff ff5d 	bl	8001c8c <__NVIC_SetPriority>
}
 8001dd2:	bf00      	nop
 8001dd4:	3718      	adds	r7, #24
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bd80      	pop	{r7, pc}

08001dda <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001dda:	b580      	push	{r7, lr}
 8001ddc:	b082      	sub	sp, #8
 8001dde:	af00      	add	r7, sp, #0
 8001de0:	4603      	mov	r3, r0
 8001de2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001de4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001de8:	4618      	mov	r0, r3
 8001dea:	f7ff ff31 	bl	8001c50 <__NVIC_EnableIRQ>
}
 8001dee:	bf00      	nop
 8001df0:	3708      	adds	r7, #8
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bd80      	pop	{r7, pc}

08001df6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001df6:	b580      	push	{r7, lr}
 8001df8:	b082      	sub	sp, #8
 8001dfa:	af00      	add	r7, sp, #0
 8001dfc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001dfe:	6878      	ldr	r0, [r7, #4]
 8001e00:	f7ff ffa2 	bl	8001d48 <SysTick_Config>
 8001e04:	4603      	mov	r3, r0
}
 8001e06:	4618      	mov	r0, r3
 8001e08:	3708      	adds	r7, #8
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bd80      	pop	{r7, pc}

08001e0e <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001e0e:	b480      	push	{r7}
 8001e10:	b083      	sub	sp, #12
 8001e12:	af00      	add	r7, sp, #0
 8001e14:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d101      	bne.n	8001e20 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8001e1c:	2301      	movs	r3, #1
 8001e1e:	e02e      	b.n	8001e7e <HAL_DMA_Abort+0x70>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001e26:	2b02      	cmp	r3, #2
 8001e28:	d008      	beq.n	8001e3c <HAL_DMA_Abort+0x2e>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	2204      	movs	r2, #4
 8001e2e:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	2200      	movs	r2, #0
 8001e34:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 8001e38:	2301      	movs	r3, #1
 8001e3a:	e020      	b.n	8001e7e <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	681a      	ldr	r2, [r3, #0]
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f022 020e 	bic.w	r2, r2, #14
 8001e4a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	681a      	ldr	r2, [r3, #0]
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f022 0201 	bic.w	r2, r2, #1
 8001e5a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001e64:	2101      	movs	r1, #1
 8001e66:	fa01 f202 	lsl.w	r2, r1, r2
 8001e6a:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	2201      	movs	r2, #1
 8001e70:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	2200      	movs	r2, #0
 8001e78:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001e7c:	2300      	movs	r3, #0
}
 8001e7e:	4618      	mov	r0, r3
 8001e80:	370c      	adds	r7, #12
 8001e82:	46bd      	mov	sp, r7
 8001e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e88:	4770      	bx	lr

08001e8a <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001e8a:	b580      	push	{r7, lr}
 8001e8c:	b084      	sub	sp, #16
 8001e8e:	af00      	add	r7, sp, #0
 8001e90:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001e92:	2300      	movs	r3, #0
 8001e94:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001e9c:	2b02      	cmp	r3, #2
 8001e9e:	d005      	beq.n	8001eac <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	2204      	movs	r2, #4
 8001ea4:	639a      	str	r2, [r3, #56]	@ 0x38

    status = HAL_ERROR;
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	73fb      	strb	r3, [r7, #15]
 8001eaa:	e027      	b.n	8001efc <HAL_DMA_Abort_IT+0x72>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	681a      	ldr	r2, [r3, #0]
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f022 020e 	bic.w	r2, r2, #14
 8001eba:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	681a      	ldr	r2, [r3, #0]
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f022 0201 	bic.w	r2, r2, #1
 8001eca:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001ed4:	2101      	movs	r1, #1
 8001ed6:	fa01 f202 	lsl.w	r2, r1, r2
 8001eda:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	2201      	movs	r2, #1
 8001ee0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d003      	beq.n	8001efc <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001ef8:	6878      	ldr	r0, [r7, #4]
 8001efa:	4798      	blx	r3
    }
  }
  return status;
 8001efc:	7bfb      	ldrb	r3, [r7, #15]
}
 8001efe:	4618      	mov	r0, r3
 8001f00:	3710      	adds	r7, #16
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bd80      	pop	{r7, pc}
	...

08001f08 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	b087      	sub	sp, #28
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
 8001f10:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001f12:	2300      	movs	r3, #0
 8001f14:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f16:	e14e      	b.n	80021b6 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	681a      	ldr	r2, [r3, #0]
 8001f1c:	2101      	movs	r1, #1
 8001f1e:	697b      	ldr	r3, [r7, #20]
 8001f20:	fa01 f303 	lsl.w	r3, r1, r3
 8001f24:	4013      	ands	r3, r2
 8001f26:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	f000 8140 	beq.w	80021b0 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	685b      	ldr	r3, [r3, #4]
 8001f34:	f003 0303 	and.w	r3, r3, #3
 8001f38:	2b01      	cmp	r3, #1
 8001f3a:	d005      	beq.n	8001f48 <HAL_GPIO_Init+0x40>
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	685b      	ldr	r3, [r3, #4]
 8001f40:	f003 0303 	and.w	r3, r3, #3
 8001f44:	2b02      	cmp	r3, #2
 8001f46:	d130      	bne.n	8001faa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	689b      	ldr	r3, [r3, #8]
 8001f4c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001f4e:	697b      	ldr	r3, [r7, #20]
 8001f50:	005b      	lsls	r3, r3, #1
 8001f52:	2203      	movs	r2, #3
 8001f54:	fa02 f303 	lsl.w	r3, r2, r3
 8001f58:	43db      	mvns	r3, r3
 8001f5a:	693a      	ldr	r2, [r7, #16]
 8001f5c:	4013      	ands	r3, r2
 8001f5e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	68da      	ldr	r2, [r3, #12]
 8001f64:	697b      	ldr	r3, [r7, #20]
 8001f66:	005b      	lsls	r3, r3, #1
 8001f68:	fa02 f303 	lsl.w	r3, r2, r3
 8001f6c:	693a      	ldr	r2, [r7, #16]
 8001f6e:	4313      	orrs	r3, r2
 8001f70:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	693a      	ldr	r2, [r7, #16]
 8001f76:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	685b      	ldr	r3, [r3, #4]
 8001f7c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001f7e:	2201      	movs	r2, #1
 8001f80:	697b      	ldr	r3, [r7, #20]
 8001f82:	fa02 f303 	lsl.w	r3, r2, r3
 8001f86:	43db      	mvns	r3, r3
 8001f88:	693a      	ldr	r2, [r7, #16]
 8001f8a:	4013      	ands	r3, r2
 8001f8c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	685b      	ldr	r3, [r3, #4]
 8001f92:	091b      	lsrs	r3, r3, #4
 8001f94:	f003 0201 	and.w	r2, r3, #1
 8001f98:	697b      	ldr	r3, [r7, #20]
 8001f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f9e:	693a      	ldr	r2, [r7, #16]
 8001fa0:	4313      	orrs	r3, r2
 8001fa2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	693a      	ldr	r2, [r7, #16]
 8001fa8:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	685b      	ldr	r3, [r3, #4]
 8001fae:	f003 0303 	and.w	r3, r3, #3
 8001fb2:	2b03      	cmp	r3, #3
 8001fb4:	d017      	beq.n	8001fe6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	68db      	ldr	r3, [r3, #12]
 8001fba:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001fbc:	697b      	ldr	r3, [r7, #20]
 8001fbe:	005b      	lsls	r3, r3, #1
 8001fc0:	2203      	movs	r2, #3
 8001fc2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc6:	43db      	mvns	r3, r3
 8001fc8:	693a      	ldr	r2, [r7, #16]
 8001fca:	4013      	ands	r3, r2
 8001fcc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001fce:	683b      	ldr	r3, [r7, #0]
 8001fd0:	689a      	ldr	r2, [r3, #8]
 8001fd2:	697b      	ldr	r3, [r7, #20]
 8001fd4:	005b      	lsls	r3, r3, #1
 8001fd6:	fa02 f303 	lsl.w	r3, r2, r3
 8001fda:	693a      	ldr	r2, [r7, #16]
 8001fdc:	4313      	orrs	r3, r2
 8001fde:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	693a      	ldr	r2, [r7, #16]
 8001fe4:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	685b      	ldr	r3, [r3, #4]
 8001fea:	f003 0303 	and.w	r3, r3, #3
 8001fee:	2b02      	cmp	r3, #2
 8001ff0:	d123      	bne.n	800203a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001ff2:	697b      	ldr	r3, [r7, #20]
 8001ff4:	08da      	lsrs	r2, r3, #3
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	3208      	adds	r2, #8
 8001ffa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ffe:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002000:	697b      	ldr	r3, [r7, #20]
 8002002:	f003 0307 	and.w	r3, r3, #7
 8002006:	009b      	lsls	r3, r3, #2
 8002008:	220f      	movs	r2, #15
 800200a:	fa02 f303 	lsl.w	r3, r2, r3
 800200e:	43db      	mvns	r3, r3
 8002010:	693a      	ldr	r2, [r7, #16]
 8002012:	4013      	ands	r3, r2
 8002014:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	691a      	ldr	r2, [r3, #16]
 800201a:	697b      	ldr	r3, [r7, #20]
 800201c:	f003 0307 	and.w	r3, r3, #7
 8002020:	009b      	lsls	r3, r3, #2
 8002022:	fa02 f303 	lsl.w	r3, r2, r3
 8002026:	693a      	ldr	r2, [r7, #16]
 8002028:	4313      	orrs	r3, r2
 800202a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800202c:	697b      	ldr	r3, [r7, #20]
 800202e:	08da      	lsrs	r2, r3, #3
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	3208      	adds	r2, #8
 8002034:	6939      	ldr	r1, [r7, #16]
 8002036:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002040:	697b      	ldr	r3, [r7, #20]
 8002042:	005b      	lsls	r3, r3, #1
 8002044:	2203      	movs	r2, #3
 8002046:	fa02 f303 	lsl.w	r3, r2, r3
 800204a:	43db      	mvns	r3, r3
 800204c:	693a      	ldr	r2, [r7, #16]
 800204e:	4013      	ands	r3, r2
 8002050:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	685b      	ldr	r3, [r3, #4]
 8002056:	f003 0203 	and.w	r2, r3, #3
 800205a:	697b      	ldr	r3, [r7, #20]
 800205c:	005b      	lsls	r3, r3, #1
 800205e:	fa02 f303 	lsl.w	r3, r2, r3
 8002062:	693a      	ldr	r2, [r7, #16]
 8002064:	4313      	orrs	r3, r2
 8002066:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	693a      	ldr	r2, [r7, #16]
 800206c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	685b      	ldr	r3, [r3, #4]
 8002072:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002076:	2b00      	cmp	r3, #0
 8002078:	f000 809a 	beq.w	80021b0 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800207c:	4b55      	ldr	r3, [pc, #340]	@ (80021d4 <HAL_GPIO_Init+0x2cc>)
 800207e:	699b      	ldr	r3, [r3, #24]
 8002080:	4a54      	ldr	r2, [pc, #336]	@ (80021d4 <HAL_GPIO_Init+0x2cc>)
 8002082:	f043 0301 	orr.w	r3, r3, #1
 8002086:	6193      	str	r3, [r2, #24]
 8002088:	4b52      	ldr	r3, [pc, #328]	@ (80021d4 <HAL_GPIO_Init+0x2cc>)
 800208a:	699b      	ldr	r3, [r3, #24]
 800208c:	f003 0301 	and.w	r3, r3, #1
 8002090:	60bb      	str	r3, [r7, #8]
 8002092:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002094:	4a50      	ldr	r2, [pc, #320]	@ (80021d8 <HAL_GPIO_Init+0x2d0>)
 8002096:	697b      	ldr	r3, [r7, #20]
 8002098:	089b      	lsrs	r3, r3, #2
 800209a:	3302      	adds	r3, #2
 800209c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020a0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80020a2:	697b      	ldr	r3, [r7, #20]
 80020a4:	f003 0303 	and.w	r3, r3, #3
 80020a8:	009b      	lsls	r3, r3, #2
 80020aa:	220f      	movs	r2, #15
 80020ac:	fa02 f303 	lsl.w	r3, r2, r3
 80020b0:	43db      	mvns	r3, r3
 80020b2:	693a      	ldr	r2, [r7, #16]
 80020b4:	4013      	ands	r3, r2
 80020b6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80020be:	d013      	beq.n	80020e8 <HAL_GPIO_Init+0x1e0>
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	4a46      	ldr	r2, [pc, #280]	@ (80021dc <HAL_GPIO_Init+0x2d4>)
 80020c4:	4293      	cmp	r3, r2
 80020c6:	d00d      	beq.n	80020e4 <HAL_GPIO_Init+0x1dc>
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	4a45      	ldr	r2, [pc, #276]	@ (80021e0 <HAL_GPIO_Init+0x2d8>)
 80020cc:	4293      	cmp	r3, r2
 80020ce:	d007      	beq.n	80020e0 <HAL_GPIO_Init+0x1d8>
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	4a44      	ldr	r2, [pc, #272]	@ (80021e4 <HAL_GPIO_Init+0x2dc>)
 80020d4:	4293      	cmp	r3, r2
 80020d6:	d101      	bne.n	80020dc <HAL_GPIO_Init+0x1d4>
 80020d8:	2303      	movs	r3, #3
 80020da:	e006      	b.n	80020ea <HAL_GPIO_Init+0x1e2>
 80020dc:	2305      	movs	r3, #5
 80020de:	e004      	b.n	80020ea <HAL_GPIO_Init+0x1e2>
 80020e0:	2302      	movs	r3, #2
 80020e2:	e002      	b.n	80020ea <HAL_GPIO_Init+0x1e2>
 80020e4:	2301      	movs	r3, #1
 80020e6:	e000      	b.n	80020ea <HAL_GPIO_Init+0x1e2>
 80020e8:	2300      	movs	r3, #0
 80020ea:	697a      	ldr	r2, [r7, #20]
 80020ec:	f002 0203 	and.w	r2, r2, #3
 80020f0:	0092      	lsls	r2, r2, #2
 80020f2:	4093      	lsls	r3, r2
 80020f4:	693a      	ldr	r2, [r7, #16]
 80020f6:	4313      	orrs	r3, r2
 80020f8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80020fa:	4937      	ldr	r1, [pc, #220]	@ (80021d8 <HAL_GPIO_Init+0x2d0>)
 80020fc:	697b      	ldr	r3, [r7, #20]
 80020fe:	089b      	lsrs	r3, r3, #2
 8002100:	3302      	adds	r3, #2
 8002102:	693a      	ldr	r2, [r7, #16]
 8002104:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002108:	4b37      	ldr	r3, [pc, #220]	@ (80021e8 <HAL_GPIO_Init+0x2e0>)
 800210a:	689b      	ldr	r3, [r3, #8]
 800210c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	43db      	mvns	r3, r3
 8002112:	693a      	ldr	r2, [r7, #16]
 8002114:	4013      	ands	r3, r2
 8002116:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	685b      	ldr	r3, [r3, #4]
 800211c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002120:	2b00      	cmp	r3, #0
 8002122:	d003      	beq.n	800212c <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8002124:	693a      	ldr	r2, [r7, #16]
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	4313      	orrs	r3, r2
 800212a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800212c:	4a2e      	ldr	r2, [pc, #184]	@ (80021e8 <HAL_GPIO_Init+0x2e0>)
 800212e:	693b      	ldr	r3, [r7, #16]
 8002130:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002132:	4b2d      	ldr	r3, [pc, #180]	@ (80021e8 <HAL_GPIO_Init+0x2e0>)
 8002134:	68db      	ldr	r3, [r3, #12]
 8002136:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	43db      	mvns	r3, r3
 800213c:	693a      	ldr	r2, [r7, #16]
 800213e:	4013      	ands	r3, r2
 8002140:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	685b      	ldr	r3, [r3, #4]
 8002146:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800214a:	2b00      	cmp	r3, #0
 800214c:	d003      	beq.n	8002156 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 800214e:	693a      	ldr	r2, [r7, #16]
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	4313      	orrs	r3, r2
 8002154:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002156:	4a24      	ldr	r2, [pc, #144]	@ (80021e8 <HAL_GPIO_Init+0x2e0>)
 8002158:	693b      	ldr	r3, [r7, #16]
 800215a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800215c:	4b22      	ldr	r3, [pc, #136]	@ (80021e8 <HAL_GPIO_Init+0x2e0>)
 800215e:	685b      	ldr	r3, [r3, #4]
 8002160:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	43db      	mvns	r3, r3
 8002166:	693a      	ldr	r2, [r7, #16]
 8002168:	4013      	ands	r3, r2
 800216a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	685b      	ldr	r3, [r3, #4]
 8002170:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002174:	2b00      	cmp	r3, #0
 8002176:	d003      	beq.n	8002180 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8002178:	693a      	ldr	r2, [r7, #16]
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	4313      	orrs	r3, r2
 800217e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002180:	4a19      	ldr	r2, [pc, #100]	@ (80021e8 <HAL_GPIO_Init+0x2e0>)
 8002182:	693b      	ldr	r3, [r7, #16]
 8002184:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002186:	4b18      	ldr	r3, [pc, #96]	@ (80021e8 <HAL_GPIO_Init+0x2e0>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	43db      	mvns	r3, r3
 8002190:	693a      	ldr	r2, [r7, #16]
 8002192:	4013      	ands	r3, r2
 8002194:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	685b      	ldr	r3, [r3, #4]
 800219a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d003      	beq.n	80021aa <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 80021a2:	693a      	ldr	r2, [r7, #16]
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	4313      	orrs	r3, r2
 80021a8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80021aa:	4a0f      	ldr	r2, [pc, #60]	@ (80021e8 <HAL_GPIO_Init+0x2e0>)
 80021ac:	693b      	ldr	r3, [r7, #16]
 80021ae:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80021b0:	697b      	ldr	r3, [r7, #20]
 80021b2:	3301      	adds	r3, #1
 80021b4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80021b6:	683b      	ldr	r3, [r7, #0]
 80021b8:	681a      	ldr	r2, [r3, #0]
 80021ba:	697b      	ldr	r3, [r7, #20]
 80021bc:	fa22 f303 	lsr.w	r3, r2, r3
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	f47f aea9 	bne.w	8001f18 <HAL_GPIO_Init+0x10>
  }
}
 80021c6:	bf00      	nop
 80021c8:	bf00      	nop
 80021ca:	371c      	adds	r7, #28
 80021cc:	46bd      	mov	sp, r7
 80021ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d2:	4770      	bx	lr
 80021d4:	40021000 	.word	0x40021000
 80021d8:	40010000 	.word	0x40010000
 80021dc:	48000400 	.word	0x48000400
 80021e0:	48000800 	.word	0x48000800
 80021e4:	48000c00 	.word	0x48000c00
 80021e8:	40010400 	.word	0x40010400

080021ec <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80021ec:	b480      	push	{r7}
 80021ee:	b085      	sub	sp, #20
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
 80021f4:	460b      	mov	r3, r1
 80021f6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	691a      	ldr	r2, [r3, #16]
 80021fc:	887b      	ldrh	r3, [r7, #2]
 80021fe:	4013      	ands	r3, r2
 8002200:	2b00      	cmp	r3, #0
 8002202:	d002      	beq.n	800220a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002204:	2301      	movs	r3, #1
 8002206:	73fb      	strb	r3, [r7, #15]
 8002208:	e001      	b.n	800220e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800220a:	2300      	movs	r3, #0
 800220c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800220e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002210:	4618      	mov	r0, r3
 8002212:	3714      	adds	r7, #20
 8002214:	46bd      	mov	sp, r7
 8002216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221a:	4770      	bx	lr

0800221c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800221c:	b480      	push	{r7}
 800221e:	b083      	sub	sp, #12
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
 8002224:	460b      	mov	r3, r1
 8002226:	807b      	strh	r3, [r7, #2]
 8002228:	4613      	mov	r3, r2
 800222a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800222c:	787b      	ldrb	r3, [r7, #1]
 800222e:	2b00      	cmp	r3, #0
 8002230:	d003      	beq.n	800223a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002232:	887a      	ldrh	r2, [r7, #2]
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002238:	e002      	b.n	8002240 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800223a:	887a      	ldrh	r2, [r7, #2]
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002240:	bf00      	nop
 8002242:	370c      	adds	r7, #12
 8002244:	46bd      	mov	sp, r7
 8002246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224a:	4770      	bx	lr

0800224c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 8002252:	af00      	add	r7, sp, #0
 8002254:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002258:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800225c:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800225e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002262:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	2b00      	cmp	r3, #0
 800226a:	d102      	bne.n	8002272 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 800226c:	2301      	movs	r3, #1
 800226e:	f001 b823 	b.w	80032b8 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002272:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002276:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f003 0301 	and.w	r3, r3, #1
 8002282:	2b00      	cmp	r3, #0
 8002284:	f000 817d 	beq.w	8002582 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002288:	4bbc      	ldr	r3, [pc, #752]	@ (800257c <HAL_RCC_OscConfig+0x330>)
 800228a:	685b      	ldr	r3, [r3, #4]
 800228c:	f003 030c 	and.w	r3, r3, #12
 8002290:	2b04      	cmp	r3, #4
 8002292:	d00c      	beq.n	80022ae <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002294:	4bb9      	ldr	r3, [pc, #740]	@ (800257c <HAL_RCC_OscConfig+0x330>)
 8002296:	685b      	ldr	r3, [r3, #4]
 8002298:	f003 030c 	and.w	r3, r3, #12
 800229c:	2b08      	cmp	r3, #8
 800229e:	d15c      	bne.n	800235a <HAL_RCC_OscConfig+0x10e>
 80022a0:	4bb6      	ldr	r3, [pc, #728]	@ (800257c <HAL_RCC_OscConfig+0x330>)
 80022a2:	685b      	ldr	r3, [r3, #4]
 80022a4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80022a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80022ac:	d155      	bne.n	800235a <HAL_RCC_OscConfig+0x10e>
 80022ae:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80022b2:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022b6:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 80022ba:	fa93 f3a3 	rbit	r3, r3
 80022be:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80022c2:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022c6:	fab3 f383 	clz	r3, r3
 80022ca:	b2db      	uxtb	r3, r3
 80022cc:	095b      	lsrs	r3, r3, #5
 80022ce:	b2db      	uxtb	r3, r3
 80022d0:	f043 0301 	orr.w	r3, r3, #1
 80022d4:	b2db      	uxtb	r3, r3
 80022d6:	2b01      	cmp	r3, #1
 80022d8:	d102      	bne.n	80022e0 <HAL_RCC_OscConfig+0x94>
 80022da:	4ba8      	ldr	r3, [pc, #672]	@ (800257c <HAL_RCC_OscConfig+0x330>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	e015      	b.n	800230c <HAL_RCC_OscConfig+0xc0>
 80022e0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80022e4:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022e8:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 80022ec:	fa93 f3a3 	rbit	r3, r3
 80022f0:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 80022f4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80022f8:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 80022fc:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 8002300:	fa93 f3a3 	rbit	r3, r3
 8002304:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 8002308:	4b9c      	ldr	r3, [pc, #624]	@ (800257c <HAL_RCC_OscConfig+0x330>)
 800230a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800230c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002310:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 8002314:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8002318:	fa92 f2a2 	rbit	r2, r2
 800231c:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 8002320:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 8002324:	fab2 f282 	clz	r2, r2
 8002328:	b2d2      	uxtb	r2, r2
 800232a:	f042 0220 	orr.w	r2, r2, #32
 800232e:	b2d2      	uxtb	r2, r2
 8002330:	f002 021f 	and.w	r2, r2, #31
 8002334:	2101      	movs	r1, #1
 8002336:	fa01 f202 	lsl.w	r2, r1, r2
 800233a:	4013      	ands	r3, r2
 800233c:	2b00      	cmp	r3, #0
 800233e:	f000 811f 	beq.w	8002580 <HAL_RCC_OscConfig+0x334>
 8002342:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002346:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	685b      	ldr	r3, [r3, #4]
 800234e:	2b00      	cmp	r3, #0
 8002350:	f040 8116 	bne.w	8002580 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8002354:	2301      	movs	r3, #1
 8002356:	f000 bfaf 	b.w	80032b8 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800235a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800235e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	685b      	ldr	r3, [r3, #4]
 8002366:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800236a:	d106      	bne.n	800237a <HAL_RCC_OscConfig+0x12e>
 800236c:	4b83      	ldr	r3, [pc, #524]	@ (800257c <HAL_RCC_OscConfig+0x330>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	4a82      	ldr	r2, [pc, #520]	@ (800257c <HAL_RCC_OscConfig+0x330>)
 8002372:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002376:	6013      	str	r3, [r2, #0]
 8002378:	e036      	b.n	80023e8 <HAL_RCC_OscConfig+0x19c>
 800237a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800237e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	685b      	ldr	r3, [r3, #4]
 8002386:	2b00      	cmp	r3, #0
 8002388:	d10c      	bne.n	80023a4 <HAL_RCC_OscConfig+0x158>
 800238a:	4b7c      	ldr	r3, [pc, #496]	@ (800257c <HAL_RCC_OscConfig+0x330>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	4a7b      	ldr	r2, [pc, #492]	@ (800257c <HAL_RCC_OscConfig+0x330>)
 8002390:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002394:	6013      	str	r3, [r2, #0]
 8002396:	4b79      	ldr	r3, [pc, #484]	@ (800257c <HAL_RCC_OscConfig+0x330>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	4a78      	ldr	r2, [pc, #480]	@ (800257c <HAL_RCC_OscConfig+0x330>)
 800239c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80023a0:	6013      	str	r3, [r2, #0]
 80023a2:	e021      	b.n	80023e8 <HAL_RCC_OscConfig+0x19c>
 80023a4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023a8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	685b      	ldr	r3, [r3, #4]
 80023b0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80023b4:	d10c      	bne.n	80023d0 <HAL_RCC_OscConfig+0x184>
 80023b6:	4b71      	ldr	r3, [pc, #452]	@ (800257c <HAL_RCC_OscConfig+0x330>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	4a70      	ldr	r2, [pc, #448]	@ (800257c <HAL_RCC_OscConfig+0x330>)
 80023bc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80023c0:	6013      	str	r3, [r2, #0]
 80023c2:	4b6e      	ldr	r3, [pc, #440]	@ (800257c <HAL_RCC_OscConfig+0x330>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	4a6d      	ldr	r2, [pc, #436]	@ (800257c <HAL_RCC_OscConfig+0x330>)
 80023c8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80023cc:	6013      	str	r3, [r2, #0]
 80023ce:	e00b      	b.n	80023e8 <HAL_RCC_OscConfig+0x19c>
 80023d0:	4b6a      	ldr	r3, [pc, #424]	@ (800257c <HAL_RCC_OscConfig+0x330>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	4a69      	ldr	r2, [pc, #420]	@ (800257c <HAL_RCC_OscConfig+0x330>)
 80023d6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80023da:	6013      	str	r3, [r2, #0]
 80023dc:	4b67      	ldr	r3, [pc, #412]	@ (800257c <HAL_RCC_OscConfig+0x330>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	4a66      	ldr	r2, [pc, #408]	@ (800257c <HAL_RCC_OscConfig+0x330>)
 80023e2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80023e6:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80023e8:	4b64      	ldr	r3, [pc, #400]	@ (800257c <HAL_RCC_OscConfig+0x330>)
 80023ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023ec:	f023 020f 	bic.w	r2, r3, #15
 80023f0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023f4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	689b      	ldr	r3, [r3, #8]
 80023fc:	495f      	ldr	r1, [pc, #380]	@ (800257c <HAL_RCC_OscConfig+0x330>)
 80023fe:	4313      	orrs	r3, r2
 8002400:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002402:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002406:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	685b      	ldr	r3, [r3, #4]
 800240e:	2b00      	cmp	r3, #0
 8002410:	d059      	beq.n	80024c6 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002412:	f7ff fae3 	bl	80019dc <HAL_GetTick>
 8002416:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800241a:	e00a      	b.n	8002432 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800241c:	f7ff fade 	bl	80019dc <HAL_GetTick>
 8002420:	4602      	mov	r2, r0
 8002422:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002426:	1ad3      	subs	r3, r2, r3
 8002428:	2b64      	cmp	r3, #100	@ 0x64
 800242a:	d902      	bls.n	8002432 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 800242c:	2303      	movs	r3, #3
 800242e:	f000 bf43 	b.w	80032b8 <HAL_RCC_OscConfig+0x106c>
 8002432:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002436:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800243a:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 800243e:	fa93 f3a3 	rbit	r3, r3
 8002442:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 8002446:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800244a:	fab3 f383 	clz	r3, r3
 800244e:	b2db      	uxtb	r3, r3
 8002450:	095b      	lsrs	r3, r3, #5
 8002452:	b2db      	uxtb	r3, r3
 8002454:	f043 0301 	orr.w	r3, r3, #1
 8002458:	b2db      	uxtb	r3, r3
 800245a:	2b01      	cmp	r3, #1
 800245c:	d102      	bne.n	8002464 <HAL_RCC_OscConfig+0x218>
 800245e:	4b47      	ldr	r3, [pc, #284]	@ (800257c <HAL_RCC_OscConfig+0x330>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	e015      	b.n	8002490 <HAL_RCC_OscConfig+0x244>
 8002464:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002468:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800246c:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8002470:	fa93 f3a3 	rbit	r3, r3
 8002474:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8002478:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800247c:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8002480:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8002484:	fa93 f3a3 	rbit	r3, r3
 8002488:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 800248c:	4b3b      	ldr	r3, [pc, #236]	@ (800257c <HAL_RCC_OscConfig+0x330>)
 800248e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002490:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002494:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 8002498:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 800249c:	fa92 f2a2 	rbit	r2, r2
 80024a0:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 80024a4:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 80024a8:	fab2 f282 	clz	r2, r2
 80024ac:	b2d2      	uxtb	r2, r2
 80024ae:	f042 0220 	orr.w	r2, r2, #32
 80024b2:	b2d2      	uxtb	r2, r2
 80024b4:	f002 021f 	and.w	r2, r2, #31
 80024b8:	2101      	movs	r1, #1
 80024ba:	fa01 f202 	lsl.w	r2, r1, r2
 80024be:	4013      	ands	r3, r2
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d0ab      	beq.n	800241c <HAL_RCC_OscConfig+0x1d0>
 80024c4:	e05d      	b.n	8002582 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024c6:	f7ff fa89 	bl	80019dc <HAL_GetTick>
 80024ca:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024ce:	e00a      	b.n	80024e6 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80024d0:	f7ff fa84 	bl	80019dc <HAL_GetTick>
 80024d4:	4602      	mov	r2, r0
 80024d6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80024da:	1ad3      	subs	r3, r2, r3
 80024dc:	2b64      	cmp	r3, #100	@ 0x64
 80024de:	d902      	bls.n	80024e6 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 80024e0:	2303      	movs	r3, #3
 80024e2:	f000 bee9 	b.w	80032b8 <HAL_RCC_OscConfig+0x106c>
 80024e6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80024ea:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024ee:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 80024f2:	fa93 f3a3 	rbit	r3, r3
 80024f6:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 80024fa:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024fe:	fab3 f383 	clz	r3, r3
 8002502:	b2db      	uxtb	r3, r3
 8002504:	095b      	lsrs	r3, r3, #5
 8002506:	b2db      	uxtb	r3, r3
 8002508:	f043 0301 	orr.w	r3, r3, #1
 800250c:	b2db      	uxtb	r3, r3
 800250e:	2b01      	cmp	r3, #1
 8002510:	d102      	bne.n	8002518 <HAL_RCC_OscConfig+0x2cc>
 8002512:	4b1a      	ldr	r3, [pc, #104]	@ (800257c <HAL_RCC_OscConfig+0x330>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	e015      	b.n	8002544 <HAL_RCC_OscConfig+0x2f8>
 8002518:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800251c:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002520:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8002524:	fa93 f3a3 	rbit	r3, r3
 8002528:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 800252c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002530:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8002534:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8002538:	fa93 f3a3 	rbit	r3, r3
 800253c:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 8002540:	4b0e      	ldr	r3, [pc, #56]	@ (800257c <HAL_RCC_OscConfig+0x330>)
 8002542:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002544:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002548:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 800254c:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8002550:	fa92 f2a2 	rbit	r2, r2
 8002554:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 8002558:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 800255c:	fab2 f282 	clz	r2, r2
 8002560:	b2d2      	uxtb	r2, r2
 8002562:	f042 0220 	orr.w	r2, r2, #32
 8002566:	b2d2      	uxtb	r2, r2
 8002568:	f002 021f 	and.w	r2, r2, #31
 800256c:	2101      	movs	r1, #1
 800256e:	fa01 f202 	lsl.w	r2, r1, r2
 8002572:	4013      	ands	r3, r2
 8002574:	2b00      	cmp	r3, #0
 8002576:	d1ab      	bne.n	80024d0 <HAL_RCC_OscConfig+0x284>
 8002578:	e003      	b.n	8002582 <HAL_RCC_OscConfig+0x336>
 800257a:	bf00      	nop
 800257c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002580:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002582:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002586:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f003 0302 	and.w	r3, r3, #2
 8002592:	2b00      	cmp	r3, #0
 8002594:	f000 817d 	beq.w	8002892 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002598:	4ba6      	ldr	r3, [pc, #664]	@ (8002834 <HAL_RCC_OscConfig+0x5e8>)
 800259a:	685b      	ldr	r3, [r3, #4]
 800259c:	f003 030c 	and.w	r3, r3, #12
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d00b      	beq.n	80025bc <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80025a4:	4ba3      	ldr	r3, [pc, #652]	@ (8002834 <HAL_RCC_OscConfig+0x5e8>)
 80025a6:	685b      	ldr	r3, [r3, #4]
 80025a8:	f003 030c 	and.w	r3, r3, #12
 80025ac:	2b08      	cmp	r3, #8
 80025ae:	d172      	bne.n	8002696 <HAL_RCC_OscConfig+0x44a>
 80025b0:	4ba0      	ldr	r3, [pc, #640]	@ (8002834 <HAL_RCC_OscConfig+0x5e8>)
 80025b2:	685b      	ldr	r3, [r3, #4]
 80025b4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d16c      	bne.n	8002696 <HAL_RCC_OscConfig+0x44a>
 80025bc:	2302      	movs	r3, #2
 80025be:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025c2:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 80025c6:	fa93 f3a3 	rbit	r3, r3
 80025ca:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 80025ce:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025d2:	fab3 f383 	clz	r3, r3
 80025d6:	b2db      	uxtb	r3, r3
 80025d8:	095b      	lsrs	r3, r3, #5
 80025da:	b2db      	uxtb	r3, r3
 80025dc:	f043 0301 	orr.w	r3, r3, #1
 80025e0:	b2db      	uxtb	r3, r3
 80025e2:	2b01      	cmp	r3, #1
 80025e4:	d102      	bne.n	80025ec <HAL_RCC_OscConfig+0x3a0>
 80025e6:	4b93      	ldr	r3, [pc, #588]	@ (8002834 <HAL_RCC_OscConfig+0x5e8>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	e013      	b.n	8002614 <HAL_RCC_OscConfig+0x3c8>
 80025ec:	2302      	movs	r3, #2
 80025ee:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025f2:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 80025f6:	fa93 f3a3 	rbit	r3, r3
 80025fa:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 80025fe:	2302      	movs	r3, #2
 8002600:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8002604:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8002608:	fa93 f3a3 	rbit	r3, r3
 800260c:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 8002610:	4b88      	ldr	r3, [pc, #544]	@ (8002834 <HAL_RCC_OscConfig+0x5e8>)
 8002612:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002614:	2202      	movs	r2, #2
 8002616:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 800261a:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 800261e:	fa92 f2a2 	rbit	r2, r2
 8002622:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 8002626:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 800262a:	fab2 f282 	clz	r2, r2
 800262e:	b2d2      	uxtb	r2, r2
 8002630:	f042 0220 	orr.w	r2, r2, #32
 8002634:	b2d2      	uxtb	r2, r2
 8002636:	f002 021f 	and.w	r2, r2, #31
 800263a:	2101      	movs	r1, #1
 800263c:	fa01 f202 	lsl.w	r2, r1, r2
 8002640:	4013      	ands	r3, r2
 8002642:	2b00      	cmp	r3, #0
 8002644:	d00a      	beq.n	800265c <HAL_RCC_OscConfig+0x410>
 8002646:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800264a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	691b      	ldr	r3, [r3, #16]
 8002652:	2b01      	cmp	r3, #1
 8002654:	d002      	beq.n	800265c <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8002656:	2301      	movs	r3, #1
 8002658:	f000 be2e 	b.w	80032b8 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800265c:	4b75      	ldr	r3, [pc, #468]	@ (8002834 <HAL_RCC_OscConfig+0x5e8>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002664:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002668:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	695b      	ldr	r3, [r3, #20]
 8002670:	21f8      	movs	r1, #248	@ 0xf8
 8002672:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002676:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 800267a:	fa91 f1a1 	rbit	r1, r1
 800267e:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 8002682:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 8002686:	fab1 f181 	clz	r1, r1
 800268a:	b2c9      	uxtb	r1, r1
 800268c:	408b      	lsls	r3, r1
 800268e:	4969      	ldr	r1, [pc, #420]	@ (8002834 <HAL_RCC_OscConfig+0x5e8>)
 8002690:	4313      	orrs	r3, r2
 8002692:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002694:	e0fd      	b.n	8002892 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002696:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800269a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	691b      	ldr	r3, [r3, #16]
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	f000 8088 	beq.w	80027b8 <HAL_RCC_OscConfig+0x56c>
 80026a8:	2301      	movs	r3, #1
 80026aa:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026ae:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 80026b2:	fa93 f3a3 	rbit	r3, r3
 80026b6:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 80026ba:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80026be:	fab3 f383 	clz	r3, r3
 80026c2:	b2db      	uxtb	r3, r3
 80026c4:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80026c8:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80026cc:	009b      	lsls	r3, r3, #2
 80026ce:	461a      	mov	r2, r3
 80026d0:	2301      	movs	r3, #1
 80026d2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026d4:	f7ff f982 	bl	80019dc <HAL_GetTick>
 80026d8:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026dc:	e00a      	b.n	80026f4 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80026de:	f7ff f97d 	bl	80019dc <HAL_GetTick>
 80026e2:	4602      	mov	r2, r0
 80026e4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80026e8:	1ad3      	subs	r3, r2, r3
 80026ea:	2b02      	cmp	r3, #2
 80026ec:	d902      	bls.n	80026f4 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 80026ee:	2303      	movs	r3, #3
 80026f0:	f000 bde2 	b.w	80032b8 <HAL_RCC_OscConfig+0x106c>
 80026f4:	2302      	movs	r3, #2
 80026f6:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026fa:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 80026fe:	fa93 f3a3 	rbit	r3, r3
 8002702:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 8002706:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800270a:	fab3 f383 	clz	r3, r3
 800270e:	b2db      	uxtb	r3, r3
 8002710:	095b      	lsrs	r3, r3, #5
 8002712:	b2db      	uxtb	r3, r3
 8002714:	f043 0301 	orr.w	r3, r3, #1
 8002718:	b2db      	uxtb	r3, r3
 800271a:	2b01      	cmp	r3, #1
 800271c:	d102      	bne.n	8002724 <HAL_RCC_OscConfig+0x4d8>
 800271e:	4b45      	ldr	r3, [pc, #276]	@ (8002834 <HAL_RCC_OscConfig+0x5e8>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	e013      	b.n	800274c <HAL_RCC_OscConfig+0x500>
 8002724:	2302      	movs	r3, #2
 8002726:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800272a:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 800272e:	fa93 f3a3 	rbit	r3, r3
 8002732:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8002736:	2302      	movs	r3, #2
 8002738:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 800273c:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8002740:	fa93 f3a3 	rbit	r3, r3
 8002744:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 8002748:	4b3a      	ldr	r3, [pc, #232]	@ (8002834 <HAL_RCC_OscConfig+0x5e8>)
 800274a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800274c:	2202      	movs	r2, #2
 800274e:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 8002752:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8002756:	fa92 f2a2 	rbit	r2, r2
 800275a:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 800275e:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 8002762:	fab2 f282 	clz	r2, r2
 8002766:	b2d2      	uxtb	r2, r2
 8002768:	f042 0220 	orr.w	r2, r2, #32
 800276c:	b2d2      	uxtb	r2, r2
 800276e:	f002 021f 	and.w	r2, r2, #31
 8002772:	2101      	movs	r1, #1
 8002774:	fa01 f202 	lsl.w	r2, r1, r2
 8002778:	4013      	ands	r3, r2
 800277a:	2b00      	cmp	r3, #0
 800277c:	d0af      	beq.n	80026de <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800277e:	4b2d      	ldr	r3, [pc, #180]	@ (8002834 <HAL_RCC_OscConfig+0x5e8>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002786:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800278a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	695b      	ldr	r3, [r3, #20]
 8002792:	21f8      	movs	r1, #248	@ 0xf8
 8002794:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002798:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 800279c:	fa91 f1a1 	rbit	r1, r1
 80027a0:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 80027a4:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 80027a8:	fab1 f181 	clz	r1, r1
 80027ac:	b2c9      	uxtb	r1, r1
 80027ae:	408b      	lsls	r3, r1
 80027b0:	4920      	ldr	r1, [pc, #128]	@ (8002834 <HAL_RCC_OscConfig+0x5e8>)
 80027b2:	4313      	orrs	r3, r2
 80027b4:	600b      	str	r3, [r1, #0]
 80027b6:	e06c      	b.n	8002892 <HAL_RCC_OscConfig+0x646>
 80027b8:	2301      	movs	r3, #1
 80027ba:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027be:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80027c2:	fa93 f3a3 	rbit	r3, r3
 80027c6:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 80027ca:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80027ce:	fab3 f383 	clz	r3, r3
 80027d2:	b2db      	uxtb	r3, r3
 80027d4:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80027d8:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80027dc:	009b      	lsls	r3, r3, #2
 80027de:	461a      	mov	r2, r3
 80027e0:	2300      	movs	r3, #0
 80027e2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027e4:	f7ff f8fa 	bl	80019dc <HAL_GetTick>
 80027e8:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027ec:	e00a      	b.n	8002804 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80027ee:	f7ff f8f5 	bl	80019dc <HAL_GetTick>
 80027f2:	4602      	mov	r2, r0
 80027f4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80027f8:	1ad3      	subs	r3, r2, r3
 80027fa:	2b02      	cmp	r3, #2
 80027fc:	d902      	bls.n	8002804 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 80027fe:	2303      	movs	r3, #3
 8002800:	f000 bd5a 	b.w	80032b8 <HAL_RCC_OscConfig+0x106c>
 8002804:	2302      	movs	r3, #2
 8002806:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800280a:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800280e:	fa93 f3a3 	rbit	r3, r3
 8002812:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 8002816:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800281a:	fab3 f383 	clz	r3, r3
 800281e:	b2db      	uxtb	r3, r3
 8002820:	095b      	lsrs	r3, r3, #5
 8002822:	b2db      	uxtb	r3, r3
 8002824:	f043 0301 	orr.w	r3, r3, #1
 8002828:	b2db      	uxtb	r3, r3
 800282a:	2b01      	cmp	r3, #1
 800282c:	d104      	bne.n	8002838 <HAL_RCC_OscConfig+0x5ec>
 800282e:	4b01      	ldr	r3, [pc, #4]	@ (8002834 <HAL_RCC_OscConfig+0x5e8>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	e015      	b.n	8002860 <HAL_RCC_OscConfig+0x614>
 8002834:	40021000 	.word	0x40021000
 8002838:	2302      	movs	r3, #2
 800283a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800283e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8002842:	fa93 f3a3 	rbit	r3, r3
 8002846:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 800284a:	2302      	movs	r3, #2
 800284c:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8002850:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8002854:	fa93 f3a3 	rbit	r3, r3
 8002858:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 800285c:	4bc8      	ldr	r3, [pc, #800]	@ (8002b80 <HAL_RCC_OscConfig+0x934>)
 800285e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002860:	2202      	movs	r2, #2
 8002862:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 8002866:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 800286a:	fa92 f2a2 	rbit	r2, r2
 800286e:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 8002872:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8002876:	fab2 f282 	clz	r2, r2
 800287a:	b2d2      	uxtb	r2, r2
 800287c:	f042 0220 	orr.w	r2, r2, #32
 8002880:	b2d2      	uxtb	r2, r2
 8002882:	f002 021f 	and.w	r2, r2, #31
 8002886:	2101      	movs	r1, #1
 8002888:	fa01 f202 	lsl.w	r2, r1, r2
 800288c:	4013      	ands	r3, r2
 800288e:	2b00      	cmp	r3, #0
 8002890:	d1ad      	bne.n	80027ee <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002892:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002896:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f003 0308 	and.w	r3, r3, #8
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	f000 8110 	beq.w	8002ac8 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80028a8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028ac:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	699b      	ldr	r3, [r3, #24]
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d079      	beq.n	80029ac <HAL_RCC_OscConfig+0x760>
 80028b8:	2301      	movs	r3, #1
 80028ba:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028be:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80028c2:	fa93 f3a3 	rbit	r3, r3
 80028c6:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 80028ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80028ce:	fab3 f383 	clz	r3, r3
 80028d2:	b2db      	uxtb	r3, r3
 80028d4:	461a      	mov	r2, r3
 80028d6:	4bab      	ldr	r3, [pc, #684]	@ (8002b84 <HAL_RCC_OscConfig+0x938>)
 80028d8:	4413      	add	r3, r2
 80028da:	009b      	lsls	r3, r3, #2
 80028dc:	461a      	mov	r2, r3
 80028de:	2301      	movs	r3, #1
 80028e0:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028e2:	f7ff f87b 	bl	80019dc <HAL_GetTick>
 80028e6:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80028ea:	e00a      	b.n	8002902 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80028ec:	f7ff f876 	bl	80019dc <HAL_GetTick>
 80028f0:	4602      	mov	r2, r0
 80028f2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80028f6:	1ad3      	subs	r3, r2, r3
 80028f8:	2b02      	cmp	r3, #2
 80028fa:	d902      	bls.n	8002902 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 80028fc:	2303      	movs	r3, #3
 80028fe:	f000 bcdb 	b.w	80032b8 <HAL_RCC_OscConfig+0x106c>
 8002902:	2302      	movs	r3, #2
 8002904:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002908:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 800290c:	fa93 f3a3 	rbit	r3, r3
 8002910:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8002914:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002918:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800291c:	2202      	movs	r2, #2
 800291e:	601a      	str	r2, [r3, #0]
 8002920:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002924:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	fa93 f2a3 	rbit	r2, r3
 800292e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002932:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002936:	601a      	str	r2, [r3, #0]
 8002938:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800293c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002940:	2202      	movs	r2, #2
 8002942:	601a      	str	r2, [r3, #0]
 8002944:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002948:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	fa93 f2a3 	rbit	r2, r3
 8002952:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002956:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800295a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800295c:	4b88      	ldr	r3, [pc, #544]	@ (8002b80 <HAL_RCC_OscConfig+0x934>)
 800295e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002960:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002964:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002968:	2102      	movs	r1, #2
 800296a:	6019      	str	r1, [r3, #0]
 800296c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002970:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	fa93 f1a3 	rbit	r1, r3
 800297a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800297e:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002982:	6019      	str	r1, [r3, #0]
  return result;
 8002984:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002988:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	fab3 f383 	clz	r3, r3
 8002992:	b2db      	uxtb	r3, r3
 8002994:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8002998:	b2db      	uxtb	r3, r3
 800299a:	f003 031f 	and.w	r3, r3, #31
 800299e:	2101      	movs	r1, #1
 80029a0:	fa01 f303 	lsl.w	r3, r1, r3
 80029a4:	4013      	ands	r3, r2
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d0a0      	beq.n	80028ec <HAL_RCC_OscConfig+0x6a0>
 80029aa:	e08d      	b.n	8002ac8 <HAL_RCC_OscConfig+0x87c>
 80029ac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029b0:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80029b4:	2201      	movs	r2, #1
 80029b6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029b8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029bc:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	fa93 f2a3 	rbit	r2, r3
 80029c6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029ca:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80029ce:	601a      	str	r2, [r3, #0]
  return result;
 80029d0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029d4:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80029d8:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80029da:	fab3 f383 	clz	r3, r3
 80029de:	b2db      	uxtb	r3, r3
 80029e0:	461a      	mov	r2, r3
 80029e2:	4b68      	ldr	r3, [pc, #416]	@ (8002b84 <HAL_RCC_OscConfig+0x938>)
 80029e4:	4413      	add	r3, r2
 80029e6:	009b      	lsls	r3, r3, #2
 80029e8:	461a      	mov	r2, r3
 80029ea:	2300      	movs	r3, #0
 80029ec:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029ee:	f7fe fff5 	bl	80019dc <HAL_GetTick>
 80029f2:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029f6:	e00a      	b.n	8002a0e <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80029f8:	f7fe fff0 	bl	80019dc <HAL_GetTick>
 80029fc:	4602      	mov	r2, r0
 80029fe:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002a02:	1ad3      	subs	r3, r2, r3
 8002a04:	2b02      	cmp	r3, #2
 8002a06:	d902      	bls.n	8002a0e <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8002a08:	2303      	movs	r3, #3
 8002a0a:	f000 bc55 	b.w	80032b8 <HAL_RCC_OscConfig+0x106c>
 8002a0e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a12:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8002a16:	2202      	movs	r2, #2
 8002a18:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a1a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a1e:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	fa93 f2a3 	rbit	r2, r3
 8002a28:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a2c:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8002a30:	601a      	str	r2, [r3, #0]
 8002a32:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a36:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8002a3a:	2202      	movs	r2, #2
 8002a3c:	601a      	str	r2, [r3, #0]
 8002a3e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a42:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	fa93 f2a3 	rbit	r2, r3
 8002a4c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a50:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8002a54:	601a      	str	r2, [r3, #0]
 8002a56:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a5a:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8002a5e:	2202      	movs	r2, #2
 8002a60:	601a      	str	r2, [r3, #0]
 8002a62:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a66:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	fa93 f2a3 	rbit	r2, r3
 8002a70:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a74:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8002a78:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a7a:	4b41      	ldr	r3, [pc, #260]	@ (8002b80 <HAL_RCC_OscConfig+0x934>)
 8002a7c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002a7e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a82:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8002a86:	2102      	movs	r1, #2
 8002a88:	6019      	str	r1, [r3, #0]
 8002a8a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a8e:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	fa93 f1a3 	rbit	r1, r3
 8002a98:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a9c:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002aa0:	6019      	str	r1, [r3, #0]
  return result;
 8002aa2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002aa6:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	fab3 f383 	clz	r3, r3
 8002ab0:	b2db      	uxtb	r3, r3
 8002ab2:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8002ab6:	b2db      	uxtb	r3, r3
 8002ab8:	f003 031f 	and.w	r3, r3, #31
 8002abc:	2101      	movs	r1, #1
 8002abe:	fa01 f303 	lsl.w	r3, r1, r3
 8002ac2:	4013      	ands	r3, r2
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d197      	bne.n	80029f8 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ac8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002acc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f003 0304 	and.w	r3, r3, #4
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	f000 81a1 	beq.w	8002e20 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ade:	2300      	movs	r3, #0
 8002ae0:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ae4:	4b26      	ldr	r3, [pc, #152]	@ (8002b80 <HAL_RCC_OscConfig+0x934>)
 8002ae6:	69db      	ldr	r3, [r3, #28]
 8002ae8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d116      	bne.n	8002b1e <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002af0:	4b23      	ldr	r3, [pc, #140]	@ (8002b80 <HAL_RCC_OscConfig+0x934>)
 8002af2:	69db      	ldr	r3, [r3, #28]
 8002af4:	4a22      	ldr	r2, [pc, #136]	@ (8002b80 <HAL_RCC_OscConfig+0x934>)
 8002af6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002afa:	61d3      	str	r3, [r2, #28]
 8002afc:	4b20      	ldr	r3, [pc, #128]	@ (8002b80 <HAL_RCC_OscConfig+0x934>)
 8002afe:	69db      	ldr	r3, [r3, #28]
 8002b00:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8002b04:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b08:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8002b0c:	601a      	str	r2, [r3, #0]
 8002b0e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b12:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8002b16:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002b18:	2301      	movs	r3, #1
 8002b1a:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b1e:	4b1a      	ldr	r3, [pc, #104]	@ (8002b88 <HAL_RCC_OscConfig+0x93c>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d11a      	bne.n	8002b60 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b2a:	4b17      	ldr	r3, [pc, #92]	@ (8002b88 <HAL_RCC_OscConfig+0x93c>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	4a16      	ldr	r2, [pc, #88]	@ (8002b88 <HAL_RCC_OscConfig+0x93c>)
 8002b30:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002b34:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b36:	f7fe ff51 	bl	80019dc <HAL_GetTick>
 8002b3a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b3e:	e009      	b.n	8002b54 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b40:	f7fe ff4c 	bl	80019dc <HAL_GetTick>
 8002b44:	4602      	mov	r2, r0
 8002b46:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002b4a:	1ad3      	subs	r3, r2, r3
 8002b4c:	2b64      	cmp	r3, #100	@ 0x64
 8002b4e:	d901      	bls.n	8002b54 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8002b50:	2303      	movs	r3, #3
 8002b52:	e3b1      	b.n	80032b8 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b54:	4b0c      	ldr	r3, [pc, #48]	@ (8002b88 <HAL_RCC_OscConfig+0x93c>)
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d0ef      	beq.n	8002b40 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b60:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b64:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	68db      	ldr	r3, [r3, #12]
 8002b6c:	2b01      	cmp	r3, #1
 8002b6e:	d10d      	bne.n	8002b8c <HAL_RCC_OscConfig+0x940>
 8002b70:	4b03      	ldr	r3, [pc, #12]	@ (8002b80 <HAL_RCC_OscConfig+0x934>)
 8002b72:	6a1b      	ldr	r3, [r3, #32]
 8002b74:	4a02      	ldr	r2, [pc, #8]	@ (8002b80 <HAL_RCC_OscConfig+0x934>)
 8002b76:	f043 0301 	orr.w	r3, r3, #1
 8002b7a:	6213      	str	r3, [r2, #32]
 8002b7c:	e03c      	b.n	8002bf8 <HAL_RCC_OscConfig+0x9ac>
 8002b7e:	bf00      	nop
 8002b80:	40021000 	.word	0x40021000
 8002b84:	10908120 	.word	0x10908120
 8002b88:	40007000 	.word	0x40007000
 8002b8c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b90:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	68db      	ldr	r3, [r3, #12]
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d10c      	bne.n	8002bb6 <HAL_RCC_OscConfig+0x96a>
 8002b9c:	4bc1      	ldr	r3, [pc, #772]	@ (8002ea4 <HAL_RCC_OscConfig+0xc58>)
 8002b9e:	6a1b      	ldr	r3, [r3, #32]
 8002ba0:	4ac0      	ldr	r2, [pc, #768]	@ (8002ea4 <HAL_RCC_OscConfig+0xc58>)
 8002ba2:	f023 0301 	bic.w	r3, r3, #1
 8002ba6:	6213      	str	r3, [r2, #32]
 8002ba8:	4bbe      	ldr	r3, [pc, #760]	@ (8002ea4 <HAL_RCC_OscConfig+0xc58>)
 8002baa:	6a1b      	ldr	r3, [r3, #32]
 8002bac:	4abd      	ldr	r2, [pc, #756]	@ (8002ea4 <HAL_RCC_OscConfig+0xc58>)
 8002bae:	f023 0304 	bic.w	r3, r3, #4
 8002bb2:	6213      	str	r3, [r2, #32]
 8002bb4:	e020      	b.n	8002bf8 <HAL_RCC_OscConfig+0x9ac>
 8002bb6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002bba:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	68db      	ldr	r3, [r3, #12]
 8002bc2:	2b05      	cmp	r3, #5
 8002bc4:	d10c      	bne.n	8002be0 <HAL_RCC_OscConfig+0x994>
 8002bc6:	4bb7      	ldr	r3, [pc, #732]	@ (8002ea4 <HAL_RCC_OscConfig+0xc58>)
 8002bc8:	6a1b      	ldr	r3, [r3, #32]
 8002bca:	4ab6      	ldr	r2, [pc, #728]	@ (8002ea4 <HAL_RCC_OscConfig+0xc58>)
 8002bcc:	f043 0304 	orr.w	r3, r3, #4
 8002bd0:	6213      	str	r3, [r2, #32]
 8002bd2:	4bb4      	ldr	r3, [pc, #720]	@ (8002ea4 <HAL_RCC_OscConfig+0xc58>)
 8002bd4:	6a1b      	ldr	r3, [r3, #32]
 8002bd6:	4ab3      	ldr	r2, [pc, #716]	@ (8002ea4 <HAL_RCC_OscConfig+0xc58>)
 8002bd8:	f043 0301 	orr.w	r3, r3, #1
 8002bdc:	6213      	str	r3, [r2, #32]
 8002bde:	e00b      	b.n	8002bf8 <HAL_RCC_OscConfig+0x9ac>
 8002be0:	4bb0      	ldr	r3, [pc, #704]	@ (8002ea4 <HAL_RCC_OscConfig+0xc58>)
 8002be2:	6a1b      	ldr	r3, [r3, #32]
 8002be4:	4aaf      	ldr	r2, [pc, #700]	@ (8002ea4 <HAL_RCC_OscConfig+0xc58>)
 8002be6:	f023 0301 	bic.w	r3, r3, #1
 8002bea:	6213      	str	r3, [r2, #32]
 8002bec:	4bad      	ldr	r3, [pc, #692]	@ (8002ea4 <HAL_RCC_OscConfig+0xc58>)
 8002bee:	6a1b      	ldr	r3, [r3, #32]
 8002bf0:	4aac      	ldr	r2, [pc, #688]	@ (8002ea4 <HAL_RCC_OscConfig+0xc58>)
 8002bf2:	f023 0304 	bic.w	r3, r3, #4
 8002bf6:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002bf8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002bfc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	68db      	ldr	r3, [r3, #12]
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	f000 8081 	beq.w	8002d0c <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c0a:	f7fe fee7 	bl	80019dc <HAL_GetTick>
 8002c0e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c12:	e00b      	b.n	8002c2c <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c14:	f7fe fee2 	bl	80019dc <HAL_GetTick>
 8002c18:	4602      	mov	r2, r0
 8002c1a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002c1e:	1ad3      	subs	r3, r2, r3
 8002c20:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c24:	4293      	cmp	r3, r2
 8002c26:	d901      	bls.n	8002c2c <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8002c28:	2303      	movs	r3, #3
 8002c2a:	e345      	b.n	80032b8 <HAL_RCC_OscConfig+0x106c>
 8002c2c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c30:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002c34:	2202      	movs	r2, #2
 8002c36:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c38:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c3c:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	fa93 f2a3 	rbit	r2, r3
 8002c46:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c4a:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8002c4e:	601a      	str	r2, [r3, #0]
 8002c50:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c54:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8002c58:	2202      	movs	r2, #2
 8002c5a:	601a      	str	r2, [r3, #0]
 8002c5c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c60:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	fa93 f2a3 	rbit	r2, r3
 8002c6a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c6e:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8002c72:	601a      	str	r2, [r3, #0]
  return result;
 8002c74:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c78:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8002c7c:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c7e:	fab3 f383 	clz	r3, r3
 8002c82:	b2db      	uxtb	r3, r3
 8002c84:	095b      	lsrs	r3, r3, #5
 8002c86:	b2db      	uxtb	r3, r3
 8002c88:	f043 0302 	orr.w	r3, r3, #2
 8002c8c:	b2db      	uxtb	r3, r3
 8002c8e:	2b02      	cmp	r3, #2
 8002c90:	d102      	bne.n	8002c98 <HAL_RCC_OscConfig+0xa4c>
 8002c92:	4b84      	ldr	r3, [pc, #528]	@ (8002ea4 <HAL_RCC_OscConfig+0xc58>)
 8002c94:	6a1b      	ldr	r3, [r3, #32]
 8002c96:	e013      	b.n	8002cc0 <HAL_RCC_OscConfig+0xa74>
 8002c98:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c9c:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8002ca0:	2202      	movs	r2, #2
 8002ca2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ca4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ca8:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	fa93 f2a3 	rbit	r2, r3
 8002cb2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002cb6:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8002cba:	601a      	str	r2, [r3, #0]
 8002cbc:	4b79      	ldr	r3, [pc, #484]	@ (8002ea4 <HAL_RCC_OscConfig+0xc58>)
 8002cbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cc0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002cc4:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8002cc8:	2102      	movs	r1, #2
 8002cca:	6011      	str	r1, [r2, #0]
 8002ccc:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002cd0:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8002cd4:	6812      	ldr	r2, [r2, #0]
 8002cd6:	fa92 f1a2 	rbit	r1, r2
 8002cda:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002cde:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8002ce2:	6011      	str	r1, [r2, #0]
  return result;
 8002ce4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002ce8:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8002cec:	6812      	ldr	r2, [r2, #0]
 8002cee:	fab2 f282 	clz	r2, r2
 8002cf2:	b2d2      	uxtb	r2, r2
 8002cf4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002cf8:	b2d2      	uxtb	r2, r2
 8002cfa:	f002 021f 	and.w	r2, r2, #31
 8002cfe:	2101      	movs	r1, #1
 8002d00:	fa01 f202 	lsl.w	r2, r1, r2
 8002d04:	4013      	ands	r3, r2
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d084      	beq.n	8002c14 <HAL_RCC_OscConfig+0x9c8>
 8002d0a:	e07f      	b.n	8002e0c <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d0c:	f7fe fe66 	bl	80019dc <HAL_GetTick>
 8002d10:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d14:	e00b      	b.n	8002d2e <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d16:	f7fe fe61 	bl	80019dc <HAL_GetTick>
 8002d1a:	4602      	mov	r2, r0
 8002d1c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002d20:	1ad3      	subs	r3, r2, r3
 8002d22:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d26:	4293      	cmp	r3, r2
 8002d28:	d901      	bls.n	8002d2e <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8002d2a:	2303      	movs	r3, #3
 8002d2c:	e2c4      	b.n	80032b8 <HAL_RCC_OscConfig+0x106c>
 8002d2e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d32:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8002d36:	2202      	movs	r2, #2
 8002d38:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d3a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d3e:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	fa93 f2a3 	rbit	r2, r3
 8002d48:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d4c:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8002d50:	601a      	str	r2, [r3, #0]
 8002d52:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d56:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8002d5a:	2202      	movs	r2, #2
 8002d5c:	601a      	str	r2, [r3, #0]
 8002d5e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d62:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	fa93 f2a3 	rbit	r2, r3
 8002d6c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d70:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8002d74:	601a      	str	r2, [r3, #0]
  return result;
 8002d76:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d7a:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8002d7e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d80:	fab3 f383 	clz	r3, r3
 8002d84:	b2db      	uxtb	r3, r3
 8002d86:	095b      	lsrs	r3, r3, #5
 8002d88:	b2db      	uxtb	r3, r3
 8002d8a:	f043 0302 	orr.w	r3, r3, #2
 8002d8e:	b2db      	uxtb	r3, r3
 8002d90:	2b02      	cmp	r3, #2
 8002d92:	d102      	bne.n	8002d9a <HAL_RCC_OscConfig+0xb4e>
 8002d94:	4b43      	ldr	r3, [pc, #268]	@ (8002ea4 <HAL_RCC_OscConfig+0xc58>)
 8002d96:	6a1b      	ldr	r3, [r3, #32]
 8002d98:	e013      	b.n	8002dc2 <HAL_RCC_OscConfig+0xb76>
 8002d9a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d9e:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8002da2:	2202      	movs	r2, #2
 8002da4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002da6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002daa:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	fa93 f2a3 	rbit	r2, r3
 8002db4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002db8:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8002dbc:	601a      	str	r2, [r3, #0]
 8002dbe:	4b39      	ldr	r3, [pc, #228]	@ (8002ea4 <HAL_RCC_OscConfig+0xc58>)
 8002dc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dc2:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002dc6:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8002dca:	2102      	movs	r1, #2
 8002dcc:	6011      	str	r1, [r2, #0]
 8002dce:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002dd2:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8002dd6:	6812      	ldr	r2, [r2, #0]
 8002dd8:	fa92 f1a2 	rbit	r1, r2
 8002ddc:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002de0:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8002de4:	6011      	str	r1, [r2, #0]
  return result;
 8002de6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002dea:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8002dee:	6812      	ldr	r2, [r2, #0]
 8002df0:	fab2 f282 	clz	r2, r2
 8002df4:	b2d2      	uxtb	r2, r2
 8002df6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002dfa:	b2d2      	uxtb	r2, r2
 8002dfc:	f002 021f 	and.w	r2, r2, #31
 8002e00:	2101      	movs	r1, #1
 8002e02:	fa01 f202 	lsl.w	r2, r1, r2
 8002e06:	4013      	ands	r3, r2
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d184      	bne.n	8002d16 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002e0c:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 8002e10:	2b01      	cmp	r3, #1
 8002e12:	d105      	bne.n	8002e20 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e14:	4b23      	ldr	r3, [pc, #140]	@ (8002ea4 <HAL_RCC_OscConfig+0xc58>)
 8002e16:	69db      	ldr	r3, [r3, #28]
 8002e18:	4a22      	ldr	r2, [pc, #136]	@ (8002ea4 <HAL_RCC_OscConfig+0xc58>)
 8002e1a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002e1e:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002e20:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e24:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	69db      	ldr	r3, [r3, #28]
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	f000 8242 	beq.w	80032b6 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002e32:	4b1c      	ldr	r3, [pc, #112]	@ (8002ea4 <HAL_RCC_OscConfig+0xc58>)
 8002e34:	685b      	ldr	r3, [r3, #4]
 8002e36:	f003 030c 	and.w	r3, r3, #12
 8002e3a:	2b08      	cmp	r3, #8
 8002e3c:	f000 8213 	beq.w	8003266 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e40:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e44:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	69db      	ldr	r3, [r3, #28]
 8002e4c:	2b02      	cmp	r3, #2
 8002e4e:	f040 8162 	bne.w	8003116 <HAL_RCC_OscConfig+0xeca>
 8002e52:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e56:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8002e5a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002e5e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e60:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e64:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	fa93 f2a3 	rbit	r2, r3
 8002e6e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e72:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8002e76:	601a      	str	r2, [r3, #0]
  return result;
 8002e78:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e7c:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8002e80:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e82:	fab3 f383 	clz	r3, r3
 8002e86:	b2db      	uxtb	r3, r3
 8002e88:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002e8c:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002e90:	009b      	lsls	r3, r3, #2
 8002e92:	461a      	mov	r2, r3
 8002e94:	2300      	movs	r3, #0
 8002e96:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e98:	f7fe fda0 	bl	80019dc <HAL_GetTick>
 8002e9c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ea0:	e00c      	b.n	8002ebc <HAL_RCC_OscConfig+0xc70>
 8002ea2:	bf00      	nop
 8002ea4:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ea8:	f7fe fd98 	bl	80019dc <HAL_GetTick>
 8002eac:	4602      	mov	r2, r0
 8002eae:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002eb2:	1ad3      	subs	r3, r2, r3
 8002eb4:	2b02      	cmp	r3, #2
 8002eb6:	d901      	bls.n	8002ebc <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8002eb8:	2303      	movs	r3, #3
 8002eba:	e1fd      	b.n	80032b8 <HAL_RCC_OscConfig+0x106c>
 8002ebc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ec0:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8002ec4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002ec8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ece:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	fa93 f2a3 	rbit	r2, r3
 8002ed8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002edc:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8002ee0:	601a      	str	r2, [r3, #0]
  return result;
 8002ee2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ee6:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8002eea:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002eec:	fab3 f383 	clz	r3, r3
 8002ef0:	b2db      	uxtb	r3, r3
 8002ef2:	095b      	lsrs	r3, r3, #5
 8002ef4:	b2db      	uxtb	r3, r3
 8002ef6:	f043 0301 	orr.w	r3, r3, #1
 8002efa:	b2db      	uxtb	r3, r3
 8002efc:	2b01      	cmp	r3, #1
 8002efe:	d102      	bne.n	8002f06 <HAL_RCC_OscConfig+0xcba>
 8002f00:	4bb0      	ldr	r3, [pc, #704]	@ (80031c4 <HAL_RCC_OscConfig+0xf78>)
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	e027      	b.n	8002f56 <HAL_RCC_OscConfig+0xd0a>
 8002f06:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f0a:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8002f0e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002f12:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f14:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f18:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	fa93 f2a3 	rbit	r2, r3
 8002f22:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f26:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8002f2a:	601a      	str	r2, [r3, #0]
 8002f2c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f30:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8002f34:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002f38:	601a      	str	r2, [r3, #0]
 8002f3a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f3e:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	fa93 f2a3 	rbit	r2, r3
 8002f48:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f4c:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8002f50:	601a      	str	r2, [r3, #0]
 8002f52:	4b9c      	ldr	r3, [pc, #624]	@ (80031c4 <HAL_RCC_OscConfig+0xf78>)
 8002f54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f56:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002f5a:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8002f5e:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002f62:	6011      	str	r1, [r2, #0]
 8002f64:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002f68:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8002f6c:	6812      	ldr	r2, [r2, #0]
 8002f6e:	fa92 f1a2 	rbit	r1, r2
 8002f72:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002f76:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8002f7a:	6011      	str	r1, [r2, #0]
  return result;
 8002f7c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002f80:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8002f84:	6812      	ldr	r2, [r2, #0]
 8002f86:	fab2 f282 	clz	r2, r2
 8002f8a:	b2d2      	uxtb	r2, r2
 8002f8c:	f042 0220 	orr.w	r2, r2, #32
 8002f90:	b2d2      	uxtb	r2, r2
 8002f92:	f002 021f 	and.w	r2, r2, #31
 8002f96:	2101      	movs	r1, #1
 8002f98:	fa01 f202 	lsl.w	r2, r1, r2
 8002f9c:	4013      	ands	r3, r2
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d182      	bne.n	8002ea8 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002fa2:	4b88      	ldr	r3, [pc, #544]	@ (80031c4 <HAL_RCC_OscConfig+0xf78>)
 8002fa4:	685b      	ldr	r3, [r3, #4]
 8002fa6:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002faa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002fae:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8002fb6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002fba:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	6a1b      	ldr	r3, [r3, #32]
 8002fc2:	430b      	orrs	r3, r1
 8002fc4:	497f      	ldr	r1, [pc, #508]	@ (80031c4 <HAL_RCC_OscConfig+0xf78>)
 8002fc6:	4313      	orrs	r3, r2
 8002fc8:	604b      	str	r3, [r1, #4]
 8002fca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002fce:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8002fd2:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002fd6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fd8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002fdc:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	fa93 f2a3 	rbit	r2, r3
 8002fe6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002fea:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8002fee:	601a      	str	r2, [r3, #0]
  return result;
 8002ff0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ff4:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8002ff8:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ffa:	fab3 f383 	clz	r3, r3
 8002ffe:	b2db      	uxtb	r3, r3
 8003000:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003004:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003008:	009b      	lsls	r3, r3, #2
 800300a:	461a      	mov	r2, r3
 800300c:	2301      	movs	r3, #1
 800300e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003010:	f7fe fce4 	bl	80019dc <HAL_GetTick>
 8003014:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003018:	e009      	b.n	800302e <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800301a:	f7fe fcdf 	bl	80019dc <HAL_GetTick>
 800301e:	4602      	mov	r2, r0
 8003020:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003024:	1ad3      	subs	r3, r2, r3
 8003026:	2b02      	cmp	r3, #2
 8003028:	d901      	bls.n	800302e <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 800302a:	2303      	movs	r3, #3
 800302c:	e144      	b.n	80032b8 <HAL_RCC_OscConfig+0x106c>
 800302e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003032:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8003036:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800303a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800303c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003040:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	fa93 f2a3 	rbit	r2, r3
 800304a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800304e:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8003052:	601a      	str	r2, [r3, #0]
  return result;
 8003054:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003058:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 800305c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800305e:	fab3 f383 	clz	r3, r3
 8003062:	b2db      	uxtb	r3, r3
 8003064:	095b      	lsrs	r3, r3, #5
 8003066:	b2db      	uxtb	r3, r3
 8003068:	f043 0301 	orr.w	r3, r3, #1
 800306c:	b2db      	uxtb	r3, r3
 800306e:	2b01      	cmp	r3, #1
 8003070:	d102      	bne.n	8003078 <HAL_RCC_OscConfig+0xe2c>
 8003072:	4b54      	ldr	r3, [pc, #336]	@ (80031c4 <HAL_RCC_OscConfig+0xf78>)
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	e027      	b.n	80030c8 <HAL_RCC_OscConfig+0xe7c>
 8003078:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800307c:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8003080:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003084:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003086:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800308a:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	fa93 f2a3 	rbit	r2, r3
 8003094:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003098:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800309c:	601a      	str	r2, [r3, #0]
 800309e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030a2:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 80030a6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80030aa:	601a      	str	r2, [r3, #0]
 80030ac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030b0:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	fa93 f2a3 	rbit	r2, r3
 80030ba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030be:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 80030c2:	601a      	str	r2, [r3, #0]
 80030c4:	4b3f      	ldr	r3, [pc, #252]	@ (80031c4 <HAL_RCC_OscConfig+0xf78>)
 80030c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030c8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80030cc:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 80030d0:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80030d4:	6011      	str	r1, [r2, #0]
 80030d6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80030da:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 80030de:	6812      	ldr	r2, [r2, #0]
 80030e0:	fa92 f1a2 	rbit	r1, r2
 80030e4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80030e8:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 80030ec:	6011      	str	r1, [r2, #0]
  return result;
 80030ee:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80030f2:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 80030f6:	6812      	ldr	r2, [r2, #0]
 80030f8:	fab2 f282 	clz	r2, r2
 80030fc:	b2d2      	uxtb	r2, r2
 80030fe:	f042 0220 	orr.w	r2, r2, #32
 8003102:	b2d2      	uxtb	r2, r2
 8003104:	f002 021f 	and.w	r2, r2, #31
 8003108:	2101      	movs	r1, #1
 800310a:	fa01 f202 	lsl.w	r2, r1, r2
 800310e:	4013      	ands	r3, r2
 8003110:	2b00      	cmp	r3, #0
 8003112:	d082      	beq.n	800301a <HAL_RCC_OscConfig+0xdce>
 8003114:	e0cf      	b.n	80032b6 <HAL_RCC_OscConfig+0x106a>
 8003116:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800311a:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 800311e:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003122:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003124:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003128:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	fa93 f2a3 	rbit	r2, r3
 8003132:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003136:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 800313a:	601a      	str	r2, [r3, #0]
  return result;
 800313c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003140:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8003144:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003146:	fab3 f383 	clz	r3, r3
 800314a:	b2db      	uxtb	r3, r3
 800314c:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003150:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003154:	009b      	lsls	r3, r3, #2
 8003156:	461a      	mov	r2, r3
 8003158:	2300      	movs	r3, #0
 800315a:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800315c:	f7fe fc3e 	bl	80019dc <HAL_GetTick>
 8003160:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003164:	e009      	b.n	800317a <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003166:	f7fe fc39 	bl	80019dc <HAL_GetTick>
 800316a:	4602      	mov	r2, r0
 800316c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003170:	1ad3      	subs	r3, r2, r3
 8003172:	2b02      	cmp	r3, #2
 8003174:	d901      	bls.n	800317a <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8003176:	2303      	movs	r3, #3
 8003178:	e09e      	b.n	80032b8 <HAL_RCC_OscConfig+0x106c>
 800317a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800317e:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8003182:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003186:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003188:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800318c:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	fa93 f2a3 	rbit	r2, r3
 8003196:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800319a:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 800319e:	601a      	str	r2, [r3, #0]
  return result;
 80031a0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031a4:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 80031a8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80031aa:	fab3 f383 	clz	r3, r3
 80031ae:	b2db      	uxtb	r3, r3
 80031b0:	095b      	lsrs	r3, r3, #5
 80031b2:	b2db      	uxtb	r3, r3
 80031b4:	f043 0301 	orr.w	r3, r3, #1
 80031b8:	b2db      	uxtb	r3, r3
 80031ba:	2b01      	cmp	r3, #1
 80031bc:	d104      	bne.n	80031c8 <HAL_RCC_OscConfig+0xf7c>
 80031be:	4b01      	ldr	r3, [pc, #4]	@ (80031c4 <HAL_RCC_OscConfig+0xf78>)
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	e029      	b.n	8003218 <HAL_RCC_OscConfig+0xfcc>
 80031c4:	40021000 	.word	0x40021000
 80031c8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031cc:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 80031d0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80031d4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031d6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031da:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	fa93 f2a3 	rbit	r2, r3
 80031e4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031e8:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 80031ec:	601a      	str	r2, [r3, #0]
 80031ee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031f2:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 80031f6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80031fa:	601a      	str	r2, [r3, #0]
 80031fc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003200:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	fa93 f2a3 	rbit	r2, r3
 800320a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800320e:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8003212:	601a      	str	r2, [r3, #0]
 8003214:	4b2b      	ldr	r3, [pc, #172]	@ (80032c4 <HAL_RCC_OscConfig+0x1078>)
 8003216:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003218:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800321c:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8003220:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8003224:	6011      	str	r1, [r2, #0]
 8003226:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800322a:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 800322e:	6812      	ldr	r2, [r2, #0]
 8003230:	fa92 f1a2 	rbit	r1, r2
 8003234:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003238:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 800323c:	6011      	str	r1, [r2, #0]
  return result;
 800323e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003242:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8003246:	6812      	ldr	r2, [r2, #0]
 8003248:	fab2 f282 	clz	r2, r2
 800324c:	b2d2      	uxtb	r2, r2
 800324e:	f042 0220 	orr.w	r2, r2, #32
 8003252:	b2d2      	uxtb	r2, r2
 8003254:	f002 021f 	and.w	r2, r2, #31
 8003258:	2101      	movs	r1, #1
 800325a:	fa01 f202 	lsl.w	r2, r1, r2
 800325e:	4013      	ands	r3, r2
 8003260:	2b00      	cmp	r3, #0
 8003262:	d180      	bne.n	8003166 <HAL_RCC_OscConfig+0xf1a>
 8003264:	e027      	b.n	80032b6 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003266:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800326a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	69db      	ldr	r3, [r3, #28]
 8003272:	2b01      	cmp	r3, #1
 8003274:	d101      	bne.n	800327a <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8003276:	2301      	movs	r3, #1
 8003278:	e01e      	b.n	80032b8 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800327a:	4b12      	ldr	r3, [pc, #72]	@ (80032c4 <HAL_RCC_OscConfig+0x1078>)
 800327c:	685b      	ldr	r3, [r3, #4]
 800327e:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003282:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8003286:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800328a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800328e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	6a1b      	ldr	r3, [r3, #32]
 8003296:	429a      	cmp	r2, r3
 8003298:	d10b      	bne.n	80032b2 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 800329a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 800329e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80032a2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80032a6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80032ae:	429a      	cmp	r2, r3
 80032b0:	d001      	beq.n	80032b6 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 80032b2:	2301      	movs	r3, #1
 80032b4:	e000      	b.n	80032b8 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 80032b6:	2300      	movs	r3, #0
}
 80032b8:	4618      	mov	r0, r3
 80032ba:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 80032be:	46bd      	mov	sp, r7
 80032c0:	bd80      	pop	{r7, pc}
 80032c2:	bf00      	nop
 80032c4:	40021000 	.word	0x40021000

080032c8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80032c8:	b580      	push	{r7, lr}
 80032ca:	b09e      	sub	sp, #120	@ 0x78
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]
 80032d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80032d2:	2300      	movs	r3, #0
 80032d4:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d101      	bne.n	80032e0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80032dc:	2301      	movs	r3, #1
 80032de:	e162      	b.n	80035a6 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80032e0:	4b90      	ldr	r3, [pc, #576]	@ (8003524 <HAL_RCC_ClockConfig+0x25c>)
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f003 0307 	and.w	r3, r3, #7
 80032e8:	683a      	ldr	r2, [r7, #0]
 80032ea:	429a      	cmp	r2, r3
 80032ec:	d910      	bls.n	8003310 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032ee:	4b8d      	ldr	r3, [pc, #564]	@ (8003524 <HAL_RCC_ClockConfig+0x25c>)
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f023 0207 	bic.w	r2, r3, #7
 80032f6:	498b      	ldr	r1, [pc, #556]	@ (8003524 <HAL_RCC_ClockConfig+0x25c>)
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	4313      	orrs	r3, r2
 80032fc:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80032fe:	4b89      	ldr	r3, [pc, #548]	@ (8003524 <HAL_RCC_ClockConfig+0x25c>)
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f003 0307 	and.w	r3, r3, #7
 8003306:	683a      	ldr	r2, [r7, #0]
 8003308:	429a      	cmp	r2, r3
 800330a:	d001      	beq.n	8003310 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800330c:	2301      	movs	r3, #1
 800330e:	e14a      	b.n	80035a6 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f003 0302 	and.w	r3, r3, #2
 8003318:	2b00      	cmp	r3, #0
 800331a:	d008      	beq.n	800332e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800331c:	4b82      	ldr	r3, [pc, #520]	@ (8003528 <HAL_RCC_ClockConfig+0x260>)
 800331e:	685b      	ldr	r3, [r3, #4]
 8003320:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	689b      	ldr	r3, [r3, #8]
 8003328:	497f      	ldr	r1, [pc, #508]	@ (8003528 <HAL_RCC_ClockConfig+0x260>)
 800332a:	4313      	orrs	r3, r2
 800332c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f003 0301 	and.w	r3, r3, #1
 8003336:	2b00      	cmp	r3, #0
 8003338:	f000 80dc 	beq.w	80034f4 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	685b      	ldr	r3, [r3, #4]
 8003340:	2b01      	cmp	r3, #1
 8003342:	d13c      	bne.n	80033be <HAL_RCC_ClockConfig+0xf6>
 8003344:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003348:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800334a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800334c:	fa93 f3a3 	rbit	r3, r3
 8003350:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8003352:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003354:	fab3 f383 	clz	r3, r3
 8003358:	b2db      	uxtb	r3, r3
 800335a:	095b      	lsrs	r3, r3, #5
 800335c:	b2db      	uxtb	r3, r3
 800335e:	f043 0301 	orr.w	r3, r3, #1
 8003362:	b2db      	uxtb	r3, r3
 8003364:	2b01      	cmp	r3, #1
 8003366:	d102      	bne.n	800336e <HAL_RCC_ClockConfig+0xa6>
 8003368:	4b6f      	ldr	r3, [pc, #444]	@ (8003528 <HAL_RCC_ClockConfig+0x260>)
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	e00f      	b.n	800338e <HAL_RCC_ClockConfig+0xc6>
 800336e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003372:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003374:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003376:	fa93 f3a3 	rbit	r3, r3
 800337a:	667b      	str	r3, [r7, #100]	@ 0x64
 800337c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003380:	663b      	str	r3, [r7, #96]	@ 0x60
 8003382:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003384:	fa93 f3a3 	rbit	r3, r3
 8003388:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800338a:	4b67      	ldr	r3, [pc, #412]	@ (8003528 <HAL_RCC_ClockConfig+0x260>)
 800338c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800338e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003392:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003394:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003396:	fa92 f2a2 	rbit	r2, r2
 800339a:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 800339c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800339e:	fab2 f282 	clz	r2, r2
 80033a2:	b2d2      	uxtb	r2, r2
 80033a4:	f042 0220 	orr.w	r2, r2, #32
 80033a8:	b2d2      	uxtb	r2, r2
 80033aa:	f002 021f 	and.w	r2, r2, #31
 80033ae:	2101      	movs	r1, #1
 80033b0:	fa01 f202 	lsl.w	r2, r1, r2
 80033b4:	4013      	ands	r3, r2
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d17b      	bne.n	80034b2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80033ba:	2301      	movs	r3, #1
 80033bc:	e0f3      	b.n	80035a6 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	685b      	ldr	r3, [r3, #4]
 80033c2:	2b02      	cmp	r3, #2
 80033c4:	d13c      	bne.n	8003440 <HAL_RCC_ClockConfig+0x178>
 80033c6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80033ca:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033cc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80033ce:	fa93 f3a3 	rbit	r3, r3
 80033d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 80033d4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033d6:	fab3 f383 	clz	r3, r3
 80033da:	b2db      	uxtb	r3, r3
 80033dc:	095b      	lsrs	r3, r3, #5
 80033de:	b2db      	uxtb	r3, r3
 80033e0:	f043 0301 	orr.w	r3, r3, #1
 80033e4:	b2db      	uxtb	r3, r3
 80033e6:	2b01      	cmp	r3, #1
 80033e8:	d102      	bne.n	80033f0 <HAL_RCC_ClockConfig+0x128>
 80033ea:	4b4f      	ldr	r3, [pc, #316]	@ (8003528 <HAL_RCC_ClockConfig+0x260>)
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	e00f      	b.n	8003410 <HAL_RCC_ClockConfig+0x148>
 80033f0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80033f4:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033f6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80033f8:	fa93 f3a3 	rbit	r3, r3
 80033fc:	647b      	str	r3, [r7, #68]	@ 0x44
 80033fe:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003402:	643b      	str	r3, [r7, #64]	@ 0x40
 8003404:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003406:	fa93 f3a3 	rbit	r3, r3
 800340a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800340c:	4b46      	ldr	r3, [pc, #280]	@ (8003528 <HAL_RCC_ClockConfig+0x260>)
 800340e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003410:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003414:	63ba      	str	r2, [r7, #56]	@ 0x38
 8003416:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003418:	fa92 f2a2 	rbit	r2, r2
 800341c:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 800341e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003420:	fab2 f282 	clz	r2, r2
 8003424:	b2d2      	uxtb	r2, r2
 8003426:	f042 0220 	orr.w	r2, r2, #32
 800342a:	b2d2      	uxtb	r2, r2
 800342c:	f002 021f 	and.w	r2, r2, #31
 8003430:	2101      	movs	r1, #1
 8003432:	fa01 f202 	lsl.w	r2, r1, r2
 8003436:	4013      	ands	r3, r2
 8003438:	2b00      	cmp	r3, #0
 800343a:	d13a      	bne.n	80034b2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800343c:	2301      	movs	r3, #1
 800343e:	e0b2      	b.n	80035a6 <HAL_RCC_ClockConfig+0x2de>
 8003440:	2302      	movs	r3, #2
 8003442:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003444:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003446:	fa93 f3a3 	rbit	r3, r3
 800344a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 800344c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800344e:	fab3 f383 	clz	r3, r3
 8003452:	b2db      	uxtb	r3, r3
 8003454:	095b      	lsrs	r3, r3, #5
 8003456:	b2db      	uxtb	r3, r3
 8003458:	f043 0301 	orr.w	r3, r3, #1
 800345c:	b2db      	uxtb	r3, r3
 800345e:	2b01      	cmp	r3, #1
 8003460:	d102      	bne.n	8003468 <HAL_RCC_ClockConfig+0x1a0>
 8003462:	4b31      	ldr	r3, [pc, #196]	@ (8003528 <HAL_RCC_ClockConfig+0x260>)
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	e00d      	b.n	8003484 <HAL_RCC_ClockConfig+0x1bc>
 8003468:	2302      	movs	r3, #2
 800346a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800346c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800346e:	fa93 f3a3 	rbit	r3, r3
 8003472:	627b      	str	r3, [r7, #36]	@ 0x24
 8003474:	2302      	movs	r3, #2
 8003476:	623b      	str	r3, [r7, #32]
 8003478:	6a3b      	ldr	r3, [r7, #32]
 800347a:	fa93 f3a3 	rbit	r3, r3
 800347e:	61fb      	str	r3, [r7, #28]
 8003480:	4b29      	ldr	r3, [pc, #164]	@ (8003528 <HAL_RCC_ClockConfig+0x260>)
 8003482:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003484:	2202      	movs	r2, #2
 8003486:	61ba      	str	r2, [r7, #24]
 8003488:	69ba      	ldr	r2, [r7, #24]
 800348a:	fa92 f2a2 	rbit	r2, r2
 800348e:	617a      	str	r2, [r7, #20]
  return result;
 8003490:	697a      	ldr	r2, [r7, #20]
 8003492:	fab2 f282 	clz	r2, r2
 8003496:	b2d2      	uxtb	r2, r2
 8003498:	f042 0220 	orr.w	r2, r2, #32
 800349c:	b2d2      	uxtb	r2, r2
 800349e:	f002 021f 	and.w	r2, r2, #31
 80034a2:	2101      	movs	r1, #1
 80034a4:	fa01 f202 	lsl.w	r2, r1, r2
 80034a8:	4013      	ands	r3, r2
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d101      	bne.n	80034b2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80034ae:	2301      	movs	r3, #1
 80034b0:	e079      	b.n	80035a6 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80034b2:	4b1d      	ldr	r3, [pc, #116]	@ (8003528 <HAL_RCC_ClockConfig+0x260>)
 80034b4:	685b      	ldr	r3, [r3, #4]
 80034b6:	f023 0203 	bic.w	r2, r3, #3
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	685b      	ldr	r3, [r3, #4]
 80034be:	491a      	ldr	r1, [pc, #104]	@ (8003528 <HAL_RCC_ClockConfig+0x260>)
 80034c0:	4313      	orrs	r3, r2
 80034c2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80034c4:	f7fe fa8a 	bl	80019dc <HAL_GetTick>
 80034c8:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034ca:	e00a      	b.n	80034e2 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80034cc:	f7fe fa86 	bl	80019dc <HAL_GetTick>
 80034d0:	4602      	mov	r2, r0
 80034d2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80034d4:	1ad3      	subs	r3, r2, r3
 80034d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80034da:	4293      	cmp	r3, r2
 80034dc:	d901      	bls.n	80034e2 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80034de:	2303      	movs	r3, #3
 80034e0:	e061      	b.n	80035a6 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034e2:	4b11      	ldr	r3, [pc, #68]	@ (8003528 <HAL_RCC_ClockConfig+0x260>)
 80034e4:	685b      	ldr	r3, [r3, #4]
 80034e6:	f003 020c 	and.w	r2, r3, #12
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	685b      	ldr	r3, [r3, #4]
 80034ee:	009b      	lsls	r3, r3, #2
 80034f0:	429a      	cmp	r2, r3
 80034f2:	d1eb      	bne.n	80034cc <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80034f4:	4b0b      	ldr	r3, [pc, #44]	@ (8003524 <HAL_RCC_ClockConfig+0x25c>)
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f003 0307 	and.w	r3, r3, #7
 80034fc:	683a      	ldr	r2, [r7, #0]
 80034fe:	429a      	cmp	r2, r3
 8003500:	d214      	bcs.n	800352c <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003502:	4b08      	ldr	r3, [pc, #32]	@ (8003524 <HAL_RCC_ClockConfig+0x25c>)
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f023 0207 	bic.w	r2, r3, #7
 800350a:	4906      	ldr	r1, [pc, #24]	@ (8003524 <HAL_RCC_ClockConfig+0x25c>)
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	4313      	orrs	r3, r2
 8003510:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003512:	4b04      	ldr	r3, [pc, #16]	@ (8003524 <HAL_RCC_ClockConfig+0x25c>)
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f003 0307 	and.w	r3, r3, #7
 800351a:	683a      	ldr	r2, [r7, #0]
 800351c:	429a      	cmp	r2, r3
 800351e:	d005      	beq.n	800352c <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003520:	2301      	movs	r3, #1
 8003522:	e040      	b.n	80035a6 <HAL_RCC_ClockConfig+0x2de>
 8003524:	40022000 	.word	0x40022000
 8003528:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f003 0304 	and.w	r3, r3, #4
 8003534:	2b00      	cmp	r3, #0
 8003536:	d008      	beq.n	800354a <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003538:	4b1d      	ldr	r3, [pc, #116]	@ (80035b0 <HAL_RCC_ClockConfig+0x2e8>)
 800353a:	685b      	ldr	r3, [r3, #4]
 800353c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	68db      	ldr	r3, [r3, #12]
 8003544:	491a      	ldr	r1, [pc, #104]	@ (80035b0 <HAL_RCC_ClockConfig+0x2e8>)
 8003546:	4313      	orrs	r3, r2
 8003548:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f003 0308 	and.w	r3, r3, #8
 8003552:	2b00      	cmp	r3, #0
 8003554:	d009      	beq.n	800356a <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003556:	4b16      	ldr	r3, [pc, #88]	@ (80035b0 <HAL_RCC_ClockConfig+0x2e8>)
 8003558:	685b      	ldr	r3, [r3, #4]
 800355a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	691b      	ldr	r3, [r3, #16]
 8003562:	00db      	lsls	r3, r3, #3
 8003564:	4912      	ldr	r1, [pc, #72]	@ (80035b0 <HAL_RCC_ClockConfig+0x2e8>)
 8003566:	4313      	orrs	r3, r2
 8003568:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800356a:	f000 f829 	bl	80035c0 <HAL_RCC_GetSysClockFreq>
 800356e:	4601      	mov	r1, r0
 8003570:	4b0f      	ldr	r3, [pc, #60]	@ (80035b0 <HAL_RCC_ClockConfig+0x2e8>)
 8003572:	685b      	ldr	r3, [r3, #4]
 8003574:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003578:	22f0      	movs	r2, #240	@ 0xf0
 800357a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800357c:	693a      	ldr	r2, [r7, #16]
 800357e:	fa92 f2a2 	rbit	r2, r2
 8003582:	60fa      	str	r2, [r7, #12]
  return result;
 8003584:	68fa      	ldr	r2, [r7, #12]
 8003586:	fab2 f282 	clz	r2, r2
 800358a:	b2d2      	uxtb	r2, r2
 800358c:	40d3      	lsrs	r3, r2
 800358e:	4a09      	ldr	r2, [pc, #36]	@ (80035b4 <HAL_RCC_ClockConfig+0x2ec>)
 8003590:	5cd3      	ldrb	r3, [r2, r3]
 8003592:	fa21 f303 	lsr.w	r3, r1, r3
 8003596:	4a08      	ldr	r2, [pc, #32]	@ (80035b8 <HAL_RCC_ClockConfig+0x2f0>)
 8003598:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800359a:	4b08      	ldr	r3, [pc, #32]	@ (80035bc <HAL_RCC_ClockConfig+0x2f4>)
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	4618      	mov	r0, r3
 80035a0:	f7fe f9d8 	bl	8001954 <HAL_InitTick>
  
  return HAL_OK;
 80035a4:	2300      	movs	r3, #0
}
 80035a6:	4618      	mov	r0, r3
 80035a8:	3778      	adds	r7, #120	@ 0x78
 80035aa:	46bd      	mov	sp, r7
 80035ac:	bd80      	pop	{r7, pc}
 80035ae:	bf00      	nop
 80035b0:	40021000 	.word	0x40021000
 80035b4:	08006dd0 	.word	0x08006dd0
 80035b8:	20000000 	.word	0x20000000
 80035bc:	20000004 	.word	0x20000004

080035c0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80035c0:	b480      	push	{r7}
 80035c2:	b087      	sub	sp, #28
 80035c4:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80035c6:	2300      	movs	r3, #0
 80035c8:	60fb      	str	r3, [r7, #12]
 80035ca:	2300      	movs	r3, #0
 80035cc:	60bb      	str	r3, [r7, #8]
 80035ce:	2300      	movs	r3, #0
 80035d0:	617b      	str	r3, [r7, #20]
 80035d2:	2300      	movs	r3, #0
 80035d4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80035d6:	2300      	movs	r3, #0
 80035d8:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 80035da:	4b1e      	ldr	r3, [pc, #120]	@ (8003654 <HAL_RCC_GetSysClockFreq+0x94>)
 80035dc:	685b      	ldr	r3, [r3, #4]
 80035de:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	f003 030c 	and.w	r3, r3, #12
 80035e6:	2b04      	cmp	r3, #4
 80035e8:	d002      	beq.n	80035f0 <HAL_RCC_GetSysClockFreq+0x30>
 80035ea:	2b08      	cmp	r3, #8
 80035ec:	d003      	beq.n	80035f6 <HAL_RCC_GetSysClockFreq+0x36>
 80035ee:	e026      	b.n	800363e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80035f0:	4b19      	ldr	r3, [pc, #100]	@ (8003658 <HAL_RCC_GetSysClockFreq+0x98>)
 80035f2:	613b      	str	r3, [r7, #16]
      break;
 80035f4:	e026      	b.n	8003644 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	0c9b      	lsrs	r3, r3, #18
 80035fa:	f003 030f 	and.w	r3, r3, #15
 80035fe:	4a17      	ldr	r2, [pc, #92]	@ (800365c <HAL_RCC_GetSysClockFreq+0x9c>)
 8003600:	5cd3      	ldrb	r3, [r2, r3]
 8003602:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8003604:	4b13      	ldr	r3, [pc, #76]	@ (8003654 <HAL_RCC_GetSysClockFreq+0x94>)
 8003606:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003608:	f003 030f 	and.w	r3, r3, #15
 800360c:	4a14      	ldr	r2, [pc, #80]	@ (8003660 <HAL_RCC_GetSysClockFreq+0xa0>)
 800360e:	5cd3      	ldrb	r3, [r2, r3]
 8003610:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003618:	2b00      	cmp	r3, #0
 800361a:	d008      	beq.n	800362e <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800361c:	4a0e      	ldr	r2, [pc, #56]	@ (8003658 <HAL_RCC_GetSysClockFreq+0x98>)
 800361e:	68bb      	ldr	r3, [r7, #8]
 8003620:	fbb2 f2f3 	udiv	r2, r2, r3
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	fb02 f303 	mul.w	r3, r2, r3
 800362a:	617b      	str	r3, [r7, #20]
 800362c:	e004      	b.n	8003638 <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	4a0c      	ldr	r2, [pc, #48]	@ (8003664 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003632:	fb02 f303 	mul.w	r3, r2, r3
 8003636:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003638:	697b      	ldr	r3, [r7, #20]
 800363a:	613b      	str	r3, [r7, #16]
      break;
 800363c:	e002      	b.n	8003644 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800363e:	4b06      	ldr	r3, [pc, #24]	@ (8003658 <HAL_RCC_GetSysClockFreq+0x98>)
 8003640:	613b      	str	r3, [r7, #16]
      break;
 8003642:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003644:	693b      	ldr	r3, [r7, #16]
}
 8003646:	4618      	mov	r0, r3
 8003648:	371c      	adds	r7, #28
 800364a:	46bd      	mov	sp, r7
 800364c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003650:	4770      	bx	lr
 8003652:	bf00      	nop
 8003654:	40021000 	.word	0x40021000
 8003658:	007a1200 	.word	0x007a1200
 800365c:	08006de8 	.word	0x08006de8
 8003660:	08006df8 	.word	0x08006df8
 8003664:	003d0900 	.word	0x003d0900

08003668 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003668:	b480      	push	{r7}
 800366a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800366c:	4b03      	ldr	r3, [pc, #12]	@ (800367c <HAL_RCC_GetHCLKFreq+0x14>)
 800366e:	681b      	ldr	r3, [r3, #0]
}
 8003670:	4618      	mov	r0, r3
 8003672:	46bd      	mov	sp, r7
 8003674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003678:	4770      	bx	lr
 800367a:	bf00      	nop
 800367c:	20000000 	.word	0x20000000

08003680 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	b082      	sub	sp, #8
 8003684:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8003686:	f7ff ffef 	bl	8003668 <HAL_RCC_GetHCLKFreq>
 800368a:	4601      	mov	r1, r0
 800368c:	4b0b      	ldr	r3, [pc, #44]	@ (80036bc <HAL_RCC_GetPCLK1Freq+0x3c>)
 800368e:	685b      	ldr	r3, [r3, #4]
 8003690:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003694:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8003698:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800369a:	687a      	ldr	r2, [r7, #4]
 800369c:	fa92 f2a2 	rbit	r2, r2
 80036a0:	603a      	str	r2, [r7, #0]
  return result;
 80036a2:	683a      	ldr	r2, [r7, #0]
 80036a4:	fab2 f282 	clz	r2, r2
 80036a8:	b2d2      	uxtb	r2, r2
 80036aa:	40d3      	lsrs	r3, r2
 80036ac:	4a04      	ldr	r2, [pc, #16]	@ (80036c0 <HAL_RCC_GetPCLK1Freq+0x40>)
 80036ae:	5cd3      	ldrb	r3, [r2, r3]
 80036b0:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80036b4:	4618      	mov	r0, r3
 80036b6:	3708      	adds	r7, #8
 80036b8:	46bd      	mov	sp, r7
 80036ba:	bd80      	pop	{r7, pc}
 80036bc:	40021000 	.word	0x40021000
 80036c0:	08006de0 	.word	0x08006de0

080036c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80036c4:	b580      	push	{r7, lr}
 80036c6:	b082      	sub	sp, #8
 80036c8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80036ca:	f7ff ffcd 	bl	8003668 <HAL_RCC_GetHCLKFreq>
 80036ce:	4601      	mov	r1, r0
 80036d0:	4b0b      	ldr	r3, [pc, #44]	@ (8003700 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80036d2:	685b      	ldr	r3, [r3, #4]
 80036d4:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 80036d8:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 80036dc:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036de:	687a      	ldr	r2, [r7, #4]
 80036e0:	fa92 f2a2 	rbit	r2, r2
 80036e4:	603a      	str	r2, [r7, #0]
  return result;
 80036e6:	683a      	ldr	r2, [r7, #0]
 80036e8:	fab2 f282 	clz	r2, r2
 80036ec:	b2d2      	uxtb	r2, r2
 80036ee:	40d3      	lsrs	r3, r2
 80036f0:	4a04      	ldr	r2, [pc, #16]	@ (8003704 <HAL_RCC_GetPCLK2Freq+0x40>)
 80036f2:	5cd3      	ldrb	r3, [r2, r3]
 80036f4:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80036f8:	4618      	mov	r0, r3
 80036fa:	3708      	adds	r7, #8
 80036fc:	46bd      	mov	sp, r7
 80036fe:	bd80      	pop	{r7, pc}
 8003700:	40021000 	.word	0x40021000
 8003704:	08006de0 	.word	0x08006de0

08003708 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003708:	b580      	push	{r7, lr}
 800370a:	b092      	sub	sp, #72	@ 0x48
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003710:	2300      	movs	r3, #0
 8003712:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 8003714:	2300      	movs	r3, #0
 8003716:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003718:	2300      	movs	r3, #0
 800371a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003726:	2b00      	cmp	r3, #0
 8003728:	f000 80cd 	beq.w	80038c6 <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800372c:	4b86      	ldr	r3, [pc, #536]	@ (8003948 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800372e:	69db      	ldr	r3, [r3, #28]
 8003730:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003734:	2b00      	cmp	r3, #0
 8003736:	d10e      	bne.n	8003756 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003738:	4b83      	ldr	r3, [pc, #524]	@ (8003948 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800373a:	69db      	ldr	r3, [r3, #28]
 800373c:	4a82      	ldr	r2, [pc, #520]	@ (8003948 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800373e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003742:	61d3      	str	r3, [r2, #28]
 8003744:	4b80      	ldr	r3, [pc, #512]	@ (8003948 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003746:	69db      	ldr	r3, [r3, #28]
 8003748:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800374c:	60bb      	str	r3, [r7, #8]
 800374e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003750:	2301      	movs	r3, #1
 8003752:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003756:	4b7d      	ldr	r3, [pc, #500]	@ (800394c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800375e:	2b00      	cmp	r3, #0
 8003760:	d118      	bne.n	8003794 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003762:	4b7a      	ldr	r3, [pc, #488]	@ (800394c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	4a79      	ldr	r2, [pc, #484]	@ (800394c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003768:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800376c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800376e:	f7fe f935 	bl	80019dc <HAL_GetTick>
 8003772:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003774:	e008      	b.n	8003788 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003776:	f7fe f931 	bl	80019dc <HAL_GetTick>
 800377a:	4602      	mov	r2, r0
 800377c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800377e:	1ad3      	subs	r3, r2, r3
 8003780:	2b64      	cmp	r3, #100	@ 0x64
 8003782:	d901      	bls.n	8003788 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003784:	2303      	movs	r3, #3
 8003786:	e0db      	b.n	8003940 <HAL_RCCEx_PeriphCLKConfig+0x238>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003788:	4b70      	ldr	r3, [pc, #448]	@ (800394c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003790:	2b00      	cmp	r3, #0
 8003792:	d0f0      	beq.n	8003776 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003794:	4b6c      	ldr	r3, [pc, #432]	@ (8003948 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003796:	6a1b      	ldr	r3, [r3, #32]
 8003798:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800379c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800379e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d07d      	beq.n	80038a0 <HAL_RCCEx_PeriphCLKConfig+0x198>
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	685b      	ldr	r3, [r3, #4]
 80037a8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80037ac:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80037ae:	429a      	cmp	r2, r3
 80037b0:	d076      	beq.n	80038a0 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80037b2:	4b65      	ldr	r3, [pc, #404]	@ (8003948 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80037b4:	6a1b      	ldr	r3, [r3, #32]
 80037b6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80037ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80037bc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80037c0:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037c4:	fa93 f3a3 	rbit	r3, r3
 80037c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 80037ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80037cc:	fab3 f383 	clz	r3, r3
 80037d0:	b2db      	uxtb	r3, r3
 80037d2:	461a      	mov	r2, r3
 80037d4:	4b5e      	ldr	r3, [pc, #376]	@ (8003950 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80037d6:	4413      	add	r3, r2
 80037d8:	009b      	lsls	r3, r3, #2
 80037da:	461a      	mov	r2, r3
 80037dc:	2301      	movs	r3, #1
 80037de:	6013      	str	r3, [r2, #0]
 80037e0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80037e4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80037e8:	fa93 f3a3 	rbit	r3, r3
 80037ec:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 80037ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80037f0:	fab3 f383 	clz	r3, r3
 80037f4:	b2db      	uxtb	r3, r3
 80037f6:	461a      	mov	r2, r3
 80037f8:	4b55      	ldr	r3, [pc, #340]	@ (8003950 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80037fa:	4413      	add	r3, r2
 80037fc:	009b      	lsls	r3, r3, #2
 80037fe:	461a      	mov	r2, r3
 8003800:	2300      	movs	r3, #0
 8003802:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003804:	4a50      	ldr	r2, [pc, #320]	@ (8003948 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003806:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003808:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800380a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800380c:	f003 0301 	and.w	r3, r3, #1
 8003810:	2b00      	cmp	r3, #0
 8003812:	d045      	beq.n	80038a0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003814:	f7fe f8e2 	bl	80019dc <HAL_GetTick>
 8003818:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800381a:	e00a      	b.n	8003832 <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800381c:	f7fe f8de 	bl	80019dc <HAL_GetTick>
 8003820:	4602      	mov	r2, r0
 8003822:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003824:	1ad3      	subs	r3, r2, r3
 8003826:	f241 3288 	movw	r2, #5000	@ 0x1388
 800382a:	4293      	cmp	r3, r2
 800382c:	d901      	bls.n	8003832 <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 800382e:	2303      	movs	r3, #3
 8003830:	e086      	b.n	8003940 <HAL_RCCEx_PeriphCLKConfig+0x238>
 8003832:	2302      	movs	r3, #2
 8003834:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003836:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003838:	fa93 f3a3 	rbit	r3, r3
 800383c:	627b      	str	r3, [r7, #36]	@ 0x24
 800383e:	2302      	movs	r3, #2
 8003840:	623b      	str	r3, [r7, #32]
 8003842:	6a3b      	ldr	r3, [r7, #32]
 8003844:	fa93 f3a3 	rbit	r3, r3
 8003848:	61fb      	str	r3, [r7, #28]
  return result;
 800384a:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800384c:	fab3 f383 	clz	r3, r3
 8003850:	b2db      	uxtb	r3, r3
 8003852:	095b      	lsrs	r3, r3, #5
 8003854:	b2db      	uxtb	r3, r3
 8003856:	f043 0302 	orr.w	r3, r3, #2
 800385a:	b2db      	uxtb	r3, r3
 800385c:	2b02      	cmp	r3, #2
 800385e:	d102      	bne.n	8003866 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8003860:	4b39      	ldr	r3, [pc, #228]	@ (8003948 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003862:	6a1b      	ldr	r3, [r3, #32]
 8003864:	e007      	b.n	8003876 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8003866:	2302      	movs	r3, #2
 8003868:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800386a:	69bb      	ldr	r3, [r7, #24]
 800386c:	fa93 f3a3 	rbit	r3, r3
 8003870:	617b      	str	r3, [r7, #20]
 8003872:	4b35      	ldr	r3, [pc, #212]	@ (8003948 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003874:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003876:	2202      	movs	r2, #2
 8003878:	613a      	str	r2, [r7, #16]
 800387a:	693a      	ldr	r2, [r7, #16]
 800387c:	fa92 f2a2 	rbit	r2, r2
 8003880:	60fa      	str	r2, [r7, #12]
  return result;
 8003882:	68fa      	ldr	r2, [r7, #12]
 8003884:	fab2 f282 	clz	r2, r2
 8003888:	b2d2      	uxtb	r2, r2
 800388a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800388e:	b2d2      	uxtb	r2, r2
 8003890:	f002 021f 	and.w	r2, r2, #31
 8003894:	2101      	movs	r1, #1
 8003896:	fa01 f202 	lsl.w	r2, r1, r2
 800389a:	4013      	ands	r3, r2
 800389c:	2b00      	cmp	r3, #0
 800389e:	d0bd      	beq.n	800381c <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80038a0:	4b29      	ldr	r3, [pc, #164]	@ (8003948 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80038a2:	6a1b      	ldr	r3, [r3, #32]
 80038a4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	685b      	ldr	r3, [r3, #4]
 80038ac:	4926      	ldr	r1, [pc, #152]	@ (8003948 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80038ae:	4313      	orrs	r3, r2
 80038b0:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80038b2:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80038b6:	2b01      	cmp	r3, #1
 80038b8:	d105      	bne.n	80038c6 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80038ba:	4b23      	ldr	r3, [pc, #140]	@ (8003948 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80038bc:	69db      	ldr	r3, [r3, #28]
 80038be:	4a22      	ldr	r2, [pc, #136]	@ (8003948 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80038c0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80038c4:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f003 0301 	and.w	r3, r3, #1
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d008      	beq.n	80038e4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80038d2:	4b1d      	ldr	r3, [pc, #116]	@ (8003948 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80038d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038d6:	f023 0203 	bic.w	r2, r3, #3
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	689b      	ldr	r3, [r3, #8]
 80038de:	491a      	ldr	r1, [pc, #104]	@ (8003948 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80038e0:	4313      	orrs	r3, r2
 80038e2:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f003 0320 	and.w	r3, r3, #32
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d008      	beq.n	8003902 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80038f0:	4b15      	ldr	r3, [pc, #84]	@ (8003948 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80038f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038f4:	f023 0210 	bic.w	r2, r3, #16
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	68db      	ldr	r3, [r3, #12]
 80038fc:	4912      	ldr	r1, [pc, #72]	@ (8003948 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80038fe:	4313      	orrs	r3, r2
 8003900:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800390a:	2b00      	cmp	r3, #0
 800390c:	d008      	beq.n	8003920 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800390e:	4b0e      	ldr	r3, [pc, #56]	@ (8003948 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003910:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003912:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	691b      	ldr	r3, [r3, #16]
 800391a:	490b      	ldr	r1, [pc, #44]	@ (8003948 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800391c:	4313      	orrs	r3, r2
 800391e:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003928:	2b00      	cmp	r3, #0
 800392a:	d008      	beq.n	800393e <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800392c:	4b06      	ldr	r3, [pc, #24]	@ (8003948 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800392e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003930:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	695b      	ldr	r3, [r3, #20]
 8003938:	4903      	ldr	r1, [pc, #12]	@ (8003948 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800393a:	4313      	orrs	r3, r2
 800393c:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800393e:	2300      	movs	r3, #0
}
 8003940:	4618      	mov	r0, r3
 8003942:	3748      	adds	r7, #72	@ 0x48
 8003944:	46bd      	mov	sp, r7
 8003946:	bd80      	pop	{r7, pc}
 8003948:	40021000 	.word	0x40021000
 800394c:	40007000 	.word	0x40007000
 8003950:	10908100 	.word	0x10908100

08003954 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003954:	b580      	push	{r7, lr}
 8003956:	b082      	sub	sp, #8
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2b00      	cmp	r3, #0
 8003960:	d101      	bne.n	8003966 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003962:	2301      	movs	r3, #1
 8003964:	e049      	b.n	80039fa <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800396c:	b2db      	uxtb	r3, r3
 800396e:	2b00      	cmp	r3, #0
 8003970:	d106      	bne.n	8003980 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	2200      	movs	r2, #0
 8003976:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800397a:	6878      	ldr	r0, [r7, #4]
 800397c:	f7fd fdf8 	bl	8001570 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2202      	movs	r2, #2
 8003984:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681a      	ldr	r2, [r3, #0]
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	3304      	adds	r3, #4
 8003990:	4619      	mov	r1, r3
 8003992:	4610      	mov	r0, r2
 8003994:	f000 fc90 	bl	80042b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2201      	movs	r2, #1
 800399c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2201      	movs	r2, #1
 80039a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2201      	movs	r2, #1
 80039ac:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2201      	movs	r2, #1
 80039b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2201      	movs	r2, #1
 80039bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2201      	movs	r2, #1
 80039c4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2201      	movs	r2, #1
 80039cc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2201      	movs	r2, #1
 80039d4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2201      	movs	r2, #1
 80039dc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2201      	movs	r2, #1
 80039e4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2201      	movs	r2, #1
 80039ec:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2201      	movs	r2, #1
 80039f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80039f8:	2300      	movs	r3, #0
}
 80039fa:	4618      	mov	r0, r3
 80039fc:	3708      	adds	r7, #8
 80039fe:	46bd      	mov	sp, r7
 8003a00:	bd80      	pop	{r7, pc}
	...

08003a04 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003a04:	b480      	push	{r7}
 8003a06:	b085      	sub	sp, #20
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003a12:	b2db      	uxtb	r3, r3
 8003a14:	2b01      	cmp	r3, #1
 8003a16:	d001      	beq.n	8003a1c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003a18:	2301      	movs	r3, #1
 8003a1a:	e038      	b.n	8003a8e <HAL_TIM_Base_Start+0x8a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	2202      	movs	r2, #2
 8003a20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	4a1c      	ldr	r2, [pc, #112]	@ (8003a9c <HAL_TIM_Base_Start+0x98>)
 8003a2a:	4293      	cmp	r3, r2
 8003a2c:	d00e      	beq.n	8003a4c <HAL_TIM_Base_Start+0x48>
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003a36:	d009      	beq.n	8003a4c <HAL_TIM_Base_Start+0x48>
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	4a18      	ldr	r2, [pc, #96]	@ (8003aa0 <HAL_TIM_Base_Start+0x9c>)
 8003a3e:	4293      	cmp	r3, r2
 8003a40:	d004      	beq.n	8003a4c <HAL_TIM_Base_Start+0x48>
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	4a17      	ldr	r2, [pc, #92]	@ (8003aa4 <HAL_TIM_Base_Start+0xa0>)
 8003a48:	4293      	cmp	r3, r2
 8003a4a:	d115      	bne.n	8003a78 <HAL_TIM_Base_Start+0x74>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	689a      	ldr	r2, [r3, #8]
 8003a52:	4b15      	ldr	r3, [pc, #84]	@ (8003aa8 <HAL_TIM_Base_Start+0xa4>)
 8003a54:	4013      	ands	r3, r2
 8003a56:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	2b06      	cmp	r3, #6
 8003a5c:	d015      	beq.n	8003a8a <HAL_TIM_Base_Start+0x86>
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003a64:	d011      	beq.n	8003a8a <HAL_TIM_Base_Start+0x86>
    {
      __HAL_TIM_ENABLE(htim);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	681a      	ldr	r2, [r3, #0]
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f042 0201 	orr.w	r2, r2, #1
 8003a74:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a76:	e008      	b.n	8003a8a <HAL_TIM_Base_Start+0x86>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	681a      	ldr	r2, [r3, #0]
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f042 0201 	orr.w	r2, r2, #1
 8003a86:	601a      	str	r2, [r3, #0]
 8003a88:	e000      	b.n	8003a8c <HAL_TIM_Base_Start+0x88>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a8a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003a8c:	2300      	movs	r3, #0
}
 8003a8e:	4618      	mov	r0, r3
 8003a90:	3714      	adds	r7, #20
 8003a92:	46bd      	mov	sp, r7
 8003a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a98:	4770      	bx	lr
 8003a9a:	bf00      	nop
 8003a9c:	40012c00 	.word	0x40012c00
 8003aa0:	40000400 	.word	0x40000400
 8003aa4:	40014000 	.word	0x40014000
 8003aa8:	00010007 	.word	0x00010007

08003aac <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8003aac:	b580      	push	{r7, lr}
 8003aae:	b082      	sub	sp, #8
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d101      	bne.n	8003abe <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8003aba:	2301      	movs	r3, #1
 8003abc:	e049      	b.n	8003b52 <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003ac4:	b2db      	uxtb	r3, r3
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d106      	bne.n	8003ad8 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	2200      	movs	r2, #0
 8003ace:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8003ad2:	6878      	ldr	r0, [r7, #4]
 8003ad4:	f000 f841 	bl	8003b5a <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2202      	movs	r2, #2
 8003adc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681a      	ldr	r2, [r3, #0]
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	3304      	adds	r3, #4
 8003ae8:	4619      	mov	r1, r3
 8003aea:	4610      	mov	r0, r2
 8003aec:	f000 fbe4 	bl	80042b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2201      	movs	r2, #1
 8003af4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2201      	movs	r2, #1
 8003afc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2201      	movs	r2, #1
 8003b04:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2201      	movs	r2, #1
 8003b0c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2201      	movs	r2, #1
 8003b14:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2201      	movs	r2, #1
 8003b1c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2201      	movs	r2, #1
 8003b24:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2201      	movs	r2, #1
 8003b2c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2201      	movs	r2, #1
 8003b34:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2201      	movs	r2, #1
 8003b3c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2201      	movs	r2, #1
 8003b44:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2201      	movs	r2, #1
 8003b4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003b50:	2300      	movs	r3, #0
}
 8003b52:	4618      	mov	r0, r3
 8003b54:	3708      	adds	r7, #8
 8003b56:	46bd      	mov	sp, r7
 8003b58:	bd80      	pop	{r7, pc}

08003b5a <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8003b5a:	b480      	push	{r7}
 8003b5c:	b083      	sub	sp, #12
 8003b5e:	af00      	add	r7, sp, #0
 8003b60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8003b62:	bf00      	nop
 8003b64:	370c      	adds	r7, #12
 8003b66:	46bd      	mov	sp, r7
 8003b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6c:	4770      	bx	lr

08003b6e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003b6e:	b580      	push	{r7, lr}
 8003b70:	b082      	sub	sp, #8
 8003b72:	af00      	add	r7, sp, #0
 8003b74:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d101      	bne.n	8003b80 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003b7c:	2301      	movs	r3, #1
 8003b7e:	e049      	b.n	8003c14 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003b86:	b2db      	uxtb	r3, r3
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d106      	bne.n	8003b9a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2200      	movs	r2, #0
 8003b90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003b94:	6878      	ldr	r0, [r7, #4]
 8003b96:	f000 f841 	bl	8003c1c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	2202      	movs	r2, #2
 8003b9e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681a      	ldr	r2, [r3, #0]
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	3304      	adds	r3, #4
 8003baa:	4619      	mov	r1, r3
 8003bac:	4610      	mov	r0, r2
 8003bae:	f000 fb83 	bl	80042b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	2201      	movs	r2, #1
 8003bb6:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	2201      	movs	r2, #1
 8003bbe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	2201      	movs	r2, #1
 8003bc6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	2201      	movs	r2, #1
 8003bce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	2201      	movs	r2, #1
 8003bd6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	2201      	movs	r2, #1
 8003bde:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	2201      	movs	r2, #1
 8003be6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	2201      	movs	r2, #1
 8003bee:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	2201      	movs	r2, #1
 8003bf6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	2201      	movs	r2, #1
 8003bfe:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	2201      	movs	r2, #1
 8003c06:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	2201      	movs	r2, #1
 8003c0e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003c12:	2300      	movs	r3, #0
}
 8003c14:	4618      	mov	r0, r3
 8003c16:	3708      	adds	r7, #8
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	bd80      	pop	{r7, pc}

08003c1c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003c1c:	b480      	push	{r7}
 8003c1e:	b083      	sub	sp, #12
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003c24:	bf00      	nop
 8003c26:	370c      	adds	r7, #12
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2e:	4770      	bx	lr

08003c30 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b084      	sub	sp, #16
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
 8003c38:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003c3a:	683b      	ldr	r3, [r7, #0]
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d109      	bne.n	8003c54 <HAL_TIM_PWM_Start+0x24>
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003c46:	b2db      	uxtb	r3, r3
 8003c48:	2b01      	cmp	r3, #1
 8003c4a:	bf14      	ite	ne
 8003c4c:	2301      	movne	r3, #1
 8003c4e:	2300      	moveq	r3, #0
 8003c50:	b2db      	uxtb	r3, r3
 8003c52:	e03c      	b.n	8003cce <HAL_TIM_PWM_Start+0x9e>
 8003c54:	683b      	ldr	r3, [r7, #0]
 8003c56:	2b04      	cmp	r3, #4
 8003c58:	d109      	bne.n	8003c6e <HAL_TIM_PWM_Start+0x3e>
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003c60:	b2db      	uxtb	r3, r3
 8003c62:	2b01      	cmp	r3, #1
 8003c64:	bf14      	ite	ne
 8003c66:	2301      	movne	r3, #1
 8003c68:	2300      	moveq	r3, #0
 8003c6a:	b2db      	uxtb	r3, r3
 8003c6c:	e02f      	b.n	8003cce <HAL_TIM_PWM_Start+0x9e>
 8003c6e:	683b      	ldr	r3, [r7, #0]
 8003c70:	2b08      	cmp	r3, #8
 8003c72:	d109      	bne.n	8003c88 <HAL_TIM_PWM_Start+0x58>
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003c7a:	b2db      	uxtb	r3, r3
 8003c7c:	2b01      	cmp	r3, #1
 8003c7e:	bf14      	ite	ne
 8003c80:	2301      	movne	r3, #1
 8003c82:	2300      	moveq	r3, #0
 8003c84:	b2db      	uxtb	r3, r3
 8003c86:	e022      	b.n	8003cce <HAL_TIM_PWM_Start+0x9e>
 8003c88:	683b      	ldr	r3, [r7, #0]
 8003c8a:	2b0c      	cmp	r3, #12
 8003c8c:	d109      	bne.n	8003ca2 <HAL_TIM_PWM_Start+0x72>
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003c94:	b2db      	uxtb	r3, r3
 8003c96:	2b01      	cmp	r3, #1
 8003c98:	bf14      	ite	ne
 8003c9a:	2301      	movne	r3, #1
 8003c9c:	2300      	moveq	r3, #0
 8003c9e:	b2db      	uxtb	r3, r3
 8003ca0:	e015      	b.n	8003cce <HAL_TIM_PWM_Start+0x9e>
 8003ca2:	683b      	ldr	r3, [r7, #0]
 8003ca4:	2b10      	cmp	r3, #16
 8003ca6:	d109      	bne.n	8003cbc <HAL_TIM_PWM_Start+0x8c>
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003cae:	b2db      	uxtb	r3, r3
 8003cb0:	2b01      	cmp	r3, #1
 8003cb2:	bf14      	ite	ne
 8003cb4:	2301      	movne	r3, #1
 8003cb6:	2300      	moveq	r3, #0
 8003cb8:	b2db      	uxtb	r3, r3
 8003cba:	e008      	b.n	8003cce <HAL_TIM_PWM_Start+0x9e>
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8003cc2:	b2db      	uxtb	r3, r3
 8003cc4:	2b01      	cmp	r3, #1
 8003cc6:	bf14      	ite	ne
 8003cc8:	2301      	movne	r3, #1
 8003cca:	2300      	moveq	r3, #0
 8003ccc:	b2db      	uxtb	r3, r3
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d001      	beq.n	8003cd6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8003cd2:	2301      	movs	r3, #1
 8003cd4:	e088      	b.n	8003de8 <HAL_TIM_PWM_Start+0x1b8>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003cd6:	683b      	ldr	r3, [r7, #0]
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d104      	bne.n	8003ce6 <HAL_TIM_PWM_Start+0xb6>
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2202      	movs	r2, #2
 8003ce0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003ce4:	e023      	b.n	8003d2e <HAL_TIM_PWM_Start+0xfe>
 8003ce6:	683b      	ldr	r3, [r7, #0]
 8003ce8:	2b04      	cmp	r3, #4
 8003cea:	d104      	bne.n	8003cf6 <HAL_TIM_PWM_Start+0xc6>
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2202      	movs	r2, #2
 8003cf0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003cf4:	e01b      	b.n	8003d2e <HAL_TIM_PWM_Start+0xfe>
 8003cf6:	683b      	ldr	r3, [r7, #0]
 8003cf8:	2b08      	cmp	r3, #8
 8003cfa:	d104      	bne.n	8003d06 <HAL_TIM_PWM_Start+0xd6>
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2202      	movs	r2, #2
 8003d00:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003d04:	e013      	b.n	8003d2e <HAL_TIM_PWM_Start+0xfe>
 8003d06:	683b      	ldr	r3, [r7, #0]
 8003d08:	2b0c      	cmp	r3, #12
 8003d0a:	d104      	bne.n	8003d16 <HAL_TIM_PWM_Start+0xe6>
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2202      	movs	r2, #2
 8003d10:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003d14:	e00b      	b.n	8003d2e <HAL_TIM_PWM_Start+0xfe>
 8003d16:	683b      	ldr	r3, [r7, #0]
 8003d18:	2b10      	cmp	r3, #16
 8003d1a:	d104      	bne.n	8003d26 <HAL_TIM_PWM_Start+0xf6>
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2202      	movs	r2, #2
 8003d20:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003d24:	e003      	b.n	8003d2e <HAL_TIM_PWM_Start+0xfe>
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	2202      	movs	r2, #2
 8003d2a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	2201      	movs	r2, #1
 8003d34:	6839      	ldr	r1, [r7, #0]
 8003d36:	4618      	mov	r0, r3
 8003d38:	f000 fe82 	bl	8004a40 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	4a2b      	ldr	r2, [pc, #172]	@ (8003df0 <HAL_TIM_PWM_Start+0x1c0>)
 8003d42:	4293      	cmp	r3, r2
 8003d44:	d00e      	beq.n	8003d64 <HAL_TIM_PWM_Start+0x134>
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	4a2a      	ldr	r2, [pc, #168]	@ (8003df4 <HAL_TIM_PWM_Start+0x1c4>)
 8003d4c:	4293      	cmp	r3, r2
 8003d4e:	d009      	beq.n	8003d64 <HAL_TIM_PWM_Start+0x134>
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	4a28      	ldr	r2, [pc, #160]	@ (8003df8 <HAL_TIM_PWM_Start+0x1c8>)
 8003d56:	4293      	cmp	r3, r2
 8003d58:	d004      	beq.n	8003d64 <HAL_TIM_PWM_Start+0x134>
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	4a27      	ldr	r2, [pc, #156]	@ (8003dfc <HAL_TIM_PWM_Start+0x1cc>)
 8003d60:	4293      	cmp	r3, r2
 8003d62:	d101      	bne.n	8003d68 <HAL_TIM_PWM_Start+0x138>
 8003d64:	2301      	movs	r3, #1
 8003d66:	e000      	b.n	8003d6a <HAL_TIM_PWM_Start+0x13a>
 8003d68:	2300      	movs	r3, #0
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d007      	beq.n	8003d7e <HAL_TIM_PWM_Start+0x14e>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003d7c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	4a1b      	ldr	r2, [pc, #108]	@ (8003df0 <HAL_TIM_PWM_Start+0x1c0>)
 8003d84:	4293      	cmp	r3, r2
 8003d86:	d00e      	beq.n	8003da6 <HAL_TIM_PWM_Start+0x176>
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003d90:	d009      	beq.n	8003da6 <HAL_TIM_PWM_Start+0x176>
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	4a1a      	ldr	r2, [pc, #104]	@ (8003e00 <HAL_TIM_PWM_Start+0x1d0>)
 8003d98:	4293      	cmp	r3, r2
 8003d9a:	d004      	beq.n	8003da6 <HAL_TIM_PWM_Start+0x176>
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	4a14      	ldr	r2, [pc, #80]	@ (8003df4 <HAL_TIM_PWM_Start+0x1c4>)
 8003da2:	4293      	cmp	r3, r2
 8003da4:	d115      	bne.n	8003dd2 <HAL_TIM_PWM_Start+0x1a2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	689a      	ldr	r2, [r3, #8]
 8003dac:	4b15      	ldr	r3, [pc, #84]	@ (8003e04 <HAL_TIM_PWM_Start+0x1d4>)
 8003dae:	4013      	ands	r3, r2
 8003db0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	2b06      	cmp	r3, #6
 8003db6:	d015      	beq.n	8003de4 <HAL_TIM_PWM_Start+0x1b4>
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003dbe:	d011      	beq.n	8003de4 <HAL_TIM_PWM_Start+0x1b4>
    {
      __HAL_TIM_ENABLE(htim);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	681a      	ldr	r2, [r3, #0]
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f042 0201 	orr.w	r2, r2, #1
 8003dce:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003dd0:	e008      	b.n	8003de4 <HAL_TIM_PWM_Start+0x1b4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	681a      	ldr	r2, [r3, #0]
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f042 0201 	orr.w	r2, r2, #1
 8003de0:	601a      	str	r2, [r3, #0]
 8003de2:	e000      	b.n	8003de6 <HAL_TIM_PWM_Start+0x1b6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003de4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003de6:	2300      	movs	r3, #0
}
 8003de8:	4618      	mov	r0, r3
 8003dea:	3710      	adds	r7, #16
 8003dec:	46bd      	mov	sp, r7
 8003dee:	bd80      	pop	{r7, pc}
 8003df0:	40012c00 	.word	0x40012c00
 8003df4:	40014000 	.word	0x40014000
 8003df8:	40014400 	.word	0x40014400
 8003dfc:	40014800 	.word	0x40014800
 8003e00:	40000400 	.word	0x40000400
 8003e04:	00010007 	.word	0x00010007

08003e08 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	b086      	sub	sp, #24
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	60f8      	str	r0, [r7, #12]
 8003e10:	60b9      	str	r1, [r7, #8]
 8003e12:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003e14:	2300      	movs	r3, #0
 8003e16:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003e1e:	2b01      	cmp	r3, #1
 8003e20:	d101      	bne.n	8003e26 <HAL_TIM_OC_ConfigChannel+0x1e>
 8003e22:	2302      	movs	r3, #2
 8003e24:	e066      	b.n	8003ef4 <HAL_TIM_OC_ConfigChannel+0xec>
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	2201      	movs	r2, #1
 8003e2a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	2b14      	cmp	r3, #20
 8003e32:	d857      	bhi.n	8003ee4 <HAL_TIM_OC_ConfigChannel+0xdc>
 8003e34:	a201      	add	r2, pc, #4	@ (adr r2, 8003e3c <HAL_TIM_OC_ConfigChannel+0x34>)
 8003e36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e3a:	bf00      	nop
 8003e3c:	08003e91 	.word	0x08003e91
 8003e40:	08003ee5 	.word	0x08003ee5
 8003e44:	08003ee5 	.word	0x08003ee5
 8003e48:	08003ee5 	.word	0x08003ee5
 8003e4c:	08003e9f 	.word	0x08003e9f
 8003e50:	08003ee5 	.word	0x08003ee5
 8003e54:	08003ee5 	.word	0x08003ee5
 8003e58:	08003ee5 	.word	0x08003ee5
 8003e5c:	08003ead 	.word	0x08003ead
 8003e60:	08003ee5 	.word	0x08003ee5
 8003e64:	08003ee5 	.word	0x08003ee5
 8003e68:	08003ee5 	.word	0x08003ee5
 8003e6c:	08003ebb 	.word	0x08003ebb
 8003e70:	08003ee5 	.word	0x08003ee5
 8003e74:	08003ee5 	.word	0x08003ee5
 8003e78:	08003ee5 	.word	0x08003ee5
 8003e7c:	08003ec9 	.word	0x08003ec9
 8003e80:	08003ee5 	.word	0x08003ee5
 8003e84:	08003ee5 	.word	0x08003ee5
 8003e88:	08003ee5 	.word	0x08003ee5
 8003e8c:	08003ed7 	.word	0x08003ed7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	68b9      	ldr	r1, [r7, #8]
 8003e96:	4618      	mov	r0, r3
 8003e98:	f000 fa92 	bl	80043c0 <TIM_OC1_SetConfig>
      break;
 8003e9c:	e025      	b.n	8003eea <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	68b9      	ldr	r1, [r7, #8]
 8003ea4:	4618      	mov	r0, r3
 8003ea6:	f000 fb11 	bl	80044cc <TIM_OC2_SetConfig>
      break;
 8003eaa:	e01e      	b.n	8003eea <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	68b9      	ldr	r1, [r7, #8]
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	f000 fb8a 	bl	80045cc <TIM_OC3_SetConfig>
      break;
 8003eb8:	e017      	b.n	8003eea <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	68b9      	ldr	r1, [r7, #8]
 8003ec0:	4618      	mov	r0, r3
 8003ec2:	f000 fc01 	bl	80046c8 <TIM_OC4_SetConfig>
      break;
 8003ec6:	e010      	b.n	8003eea <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	68b9      	ldr	r1, [r7, #8]
 8003ece:	4618      	mov	r0, r3
 8003ed0:	f000 fc5e 	bl	8004790 <TIM_OC5_SetConfig>
      break;
 8003ed4:	e009      	b.n	8003eea <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	68b9      	ldr	r1, [r7, #8]
 8003edc:	4618      	mov	r0, r3
 8003ede:	f000 fcb5 	bl	800484c <TIM_OC6_SetConfig>
      break;
 8003ee2:	e002      	b.n	8003eea <HAL_TIM_OC_ConfigChannel+0xe2>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8003ee4:	2301      	movs	r3, #1
 8003ee6:	75fb      	strb	r3, [r7, #23]
      break;
 8003ee8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	2200      	movs	r2, #0
 8003eee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003ef2:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ef4:	4618      	mov	r0, r3
 8003ef6:	3718      	adds	r7, #24
 8003ef8:	46bd      	mov	sp, r7
 8003efa:	bd80      	pop	{r7, pc}

08003efc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003efc:	b580      	push	{r7, lr}
 8003efe:	b086      	sub	sp, #24
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	60f8      	str	r0, [r7, #12]
 8003f04:	60b9      	str	r1, [r7, #8]
 8003f06:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003f08:	2300      	movs	r3, #0
 8003f0a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003f12:	2b01      	cmp	r3, #1
 8003f14:	d101      	bne.n	8003f1a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003f16:	2302      	movs	r3, #2
 8003f18:	e0ff      	b.n	800411a <HAL_TIM_PWM_ConfigChannel+0x21e>
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	2201      	movs	r2, #1
 8003f1e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	2b14      	cmp	r3, #20
 8003f26:	f200 80f0 	bhi.w	800410a <HAL_TIM_PWM_ConfigChannel+0x20e>
 8003f2a:	a201      	add	r2, pc, #4	@ (adr r2, 8003f30 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003f2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f30:	08003f85 	.word	0x08003f85
 8003f34:	0800410b 	.word	0x0800410b
 8003f38:	0800410b 	.word	0x0800410b
 8003f3c:	0800410b 	.word	0x0800410b
 8003f40:	08003fc5 	.word	0x08003fc5
 8003f44:	0800410b 	.word	0x0800410b
 8003f48:	0800410b 	.word	0x0800410b
 8003f4c:	0800410b 	.word	0x0800410b
 8003f50:	08004007 	.word	0x08004007
 8003f54:	0800410b 	.word	0x0800410b
 8003f58:	0800410b 	.word	0x0800410b
 8003f5c:	0800410b 	.word	0x0800410b
 8003f60:	08004047 	.word	0x08004047
 8003f64:	0800410b 	.word	0x0800410b
 8003f68:	0800410b 	.word	0x0800410b
 8003f6c:	0800410b 	.word	0x0800410b
 8003f70:	08004089 	.word	0x08004089
 8003f74:	0800410b 	.word	0x0800410b
 8003f78:	0800410b 	.word	0x0800410b
 8003f7c:	0800410b 	.word	0x0800410b
 8003f80:	080040c9 	.word	0x080040c9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	68b9      	ldr	r1, [r7, #8]
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	f000 fa18 	bl	80043c0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	699a      	ldr	r2, [r3, #24]
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f042 0208 	orr.w	r2, r2, #8
 8003f9e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	699a      	ldr	r2, [r3, #24]
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f022 0204 	bic.w	r2, r2, #4
 8003fae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	6999      	ldr	r1, [r3, #24]
 8003fb6:	68bb      	ldr	r3, [r7, #8]
 8003fb8:	691a      	ldr	r2, [r3, #16]
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	430a      	orrs	r2, r1
 8003fc0:	619a      	str	r2, [r3, #24]
      break;
 8003fc2:	e0a5      	b.n	8004110 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	68b9      	ldr	r1, [r7, #8]
 8003fca:	4618      	mov	r0, r3
 8003fcc:	f000 fa7e 	bl	80044cc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	699a      	ldr	r2, [r3, #24]
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003fde:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	699a      	ldr	r2, [r3, #24]
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003fee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	6999      	ldr	r1, [r3, #24]
 8003ff6:	68bb      	ldr	r3, [r7, #8]
 8003ff8:	691b      	ldr	r3, [r3, #16]
 8003ffa:	021a      	lsls	r2, r3, #8
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	430a      	orrs	r2, r1
 8004002:	619a      	str	r2, [r3, #24]
      break;
 8004004:	e084      	b.n	8004110 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	68b9      	ldr	r1, [r7, #8]
 800400c:	4618      	mov	r0, r3
 800400e:	f000 fadd 	bl	80045cc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	69da      	ldr	r2, [r3, #28]
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f042 0208 	orr.w	r2, r2, #8
 8004020:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	69da      	ldr	r2, [r3, #28]
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f022 0204 	bic.w	r2, r2, #4
 8004030:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	69d9      	ldr	r1, [r3, #28]
 8004038:	68bb      	ldr	r3, [r7, #8]
 800403a:	691a      	ldr	r2, [r3, #16]
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	430a      	orrs	r2, r1
 8004042:	61da      	str	r2, [r3, #28]
      break;
 8004044:	e064      	b.n	8004110 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	68b9      	ldr	r1, [r7, #8]
 800404c:	4618      	mov	r0, r3
 800404e:	f000 fb3b 	bl	80046c8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	69da      	ldr	r2, [r3, #28]
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004060:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	69da      	ldr	r2, [r3, #28]
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004070:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	69d9      	ldr	r1, [r3, #28]
 8004078:	68bb      	ldr	r3, [r7, #8]
 800407a:	691b      	ldr	r3, [r3, #16]
 800407c:	021a      	lsls	r2, r3, #8
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	430a      	orrs	r2, r1
 8004084:	61da      	str	r2, [r3, #28]
      break;
 8004086:	e043      	b.n	8004110 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	68b9      	ldr	r1, [r7, #8]
 800408e:	4618      	mov	r0, r3
 8004090:	f000 fb7e 	bl	8004790 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f042 0208 	orr.w	r2, r2, #8
 80040a2:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f022 0204 	bic.w	r2, r2, #4
 80040b2:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80040ba:	68bb      	ldr	r3, [r7, #8]
 80040bc:	691a      	ldr	r2, [r3, #16]
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	430a      	orrs	r2, r1
 80040c4:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80040c6:	e023      	b.n	8004110 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	68b9      	ldr	r1, [r7, #8]
 80040ce:	4618      	mov	r0, r3
 80040d0:	f000 fbbc 	bl	800484c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80040e2:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80040f2:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80040fa:	68bb      	ldr	r3, [r7, #8]
 80040fc:	691b      	ldr	r3, [r3, #16]
 80040fe:	021a      	lsls	r2, r3, #8
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	430a      	orrs	r2, r1
 8004106:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8004108:	e002      	b.n	8004110 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 800410a:	2301      	movs	r3, #1
 800410c:	75fb      	strb	r3, [r7, #23]
      break;
 800410e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	2200      	movs	r2, #0
 8004114:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004118:	7dfb      	ldrb	r3, [r7, #23]
}
 800411a:	4618      	mov	r0, r3
 800411c:	3718      	adds	r7, #24
 800411e:	46bd      	mov	sp, r7
 8004120:	bd80      	pop	{r7, pc}
 8004122:	bf00      	nop

08004124 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004124:	b580      	push	{r7, lr}
 8004126:	b084      	sub	sp, #16
 8004128:	af00      	add	r7, sp, #0
 800412a:	6078      	str	r0, [r7, #4]
 800412c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800412e:	2300      	movs	r3, #0
 8004130:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004138:	2b01      	cmp	r3, #1
 800413a:	d101      	bne.n	8004140 <HAL_TIM_ConfigClockSource+0x1c>
 800413c:	2302      	movs	r3, #2
 800413e:	e0b6      	b.n	80042ae <HAL_TIM_ConfigClockSource+0x18a>
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2201      	movs	r2, #1
 8004144:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2202      	movs	r2, #2
 800414c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	689b      	ldr	r3, [r3, #8]
 8004156:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004158:	68bb      	ldr	r3, [r7, #8]
 800415a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800415e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004162:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004164:	68bb      	ldr	r3, [r7, #8]
 8004166:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800416a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	68ba      	ldr	r2, [r7, #8]
 8004172:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004174:	683b      	ldr	r3, [r7, #0]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800417c:	d03e      	beq.n	80041fc <HAL_TIM_ConfigClockSource+0xd8>
 800417e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004182:	f200 8087 	bhi.w	8004294 <HAL_TIM_ConfigClockSource+0x170>
 8004186:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800418a:	f000 8086 	beq.w	800429a <HAL_TIM_ConfigClockSource+0x176>
 800418e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004192:	d87f      	bhi.n	8004294 <HAL_TIM_ConfigClockSource+0x170>
 8004194:	2b70      	cmp	r3, #112	@ 0x70
 8004196:	d01a      	beq.n	80041ce <HAL_TIM_ConfigClockSource+0xaa>
 8004198:	2b70      	cmp	r3, #112	@ 0x70
 800419a:	d87b      	bhi.n	8004294 <HAL_TIM_ConfigClockSource+0x170>
 800419c:	2b60      	cmp	r3, #96	@ 0x60
 800419e:	d050      	beq.n	8004242 <HAL_TIM_ConfigClockSource+0x11e>
 80041a0:	2b60      	cmp	r3, #96	@ 0x60
 80041a2:	d877      	bhi.n	8004294 <HAL_TIM_ConfigClockSource+0x170>
 80041a4:	2b50      	cmp	r3, #80	@ 0x50
 80041a6:	d03c      	beq.n	8004222 <HAL_TIM_ConfigClockSource+0xfe>
 80041a8:	2b50      	cmp	r3, #80	@ 0x50
 80041aa:	d873      	bhi.n	8004294 <HAL_TIM_ConfigClockSource+0x170>
 80041ac:	2b40      	cmp	r3, #64	@ 0x40
 80041ae:	d058      	beq.n	8004262 <HAL_TIM_ConfigClockSource+0x13e>
 80041b0:	2b40      	cmp	r3, #64	@ 0x40
 80041b2:	d86f      	bhi.n	8004294 <HAL_TIM_ConfigClockSource+0x170>
 80041b4:	2b30      	cmp	r3, #48	@ 0x30
 80041b6:	d064      	beq.n	8004282 <HAL_TIM_ConfigClockSource+0x15e>
 80041b8:	2b30      	cmp	r3, #48	@ 0x30
 80041ba:	d86b      	bhi.n	8004294 <HAL_TIM_ConfigClockSource+0x170>
 80041bc:	2b20      	cmp	r3, #32
 80041be:	d060      	beq.n	8004282 <HAL_TIM_ConfigClockSource+0x15e>
 80041c0:	2b20      	cmp	r3, #32
 80041c2:	d867      	bhi.n	8004294 <HAL_TIM_ConfigClockSource+0x170>
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d05c      	beq.n	8004282 <HAL_TIM_ConfigClockSource+0x15e>
 80041c8:	2b10      	cmp	r3, #16
 80041ca:	d05a      	beq.n	8004282 <HAL_TIM_ConfigClockSource+0x15e>
 80041cc:	e062      	b.n	8004294 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80041d2:	683b      	ldr	r3, [r7, #0]
 80041d4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80041d6:	683b      	ldr	r3, [r7, #0]
 80041d8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80041da:	683b      	ldr	r3, [r7, #0]
 80041dc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80041de:	f000 fc0f 	bl	8004a00 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	689b      	ldr	r3, [r3, #8]
 80041e8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80041ea:	68bb      	ldr	r3, [r7, #8]
 80041ec:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80041f0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	68ba      	ldr	r2, [r7, #8]
 80041f8:	609a      	str	r2, [r3, #8]
      break;
 80041fa:	e04f      	b.n	800429c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004200:	683b      	ldr	r3, [r7, #0]
 8004202:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004204:	683b      	ldr	r3, [r7, #0]
 8004206:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004208:	683b      	ldr	r3, [r7, #0]
 800420a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800420c:	f000 fbf8 	bl	8004a00 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	689a      	ldr	r2, [r3, #8]
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800421e:	609a      	str	r2, [r3, #8]
      break;
 8004220:	e03c      	b.n	800429c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004226:	683b      	ldr	r3, [r7, #0]
 8004228:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800422a:	683b      	ldr	r3, [r7, #0]
 800422c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800422e:	461a      	mov	r2, r3
 8004230:	f000 fb6c 	bl	800490c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	2150      	movs	r1, #80	@ 0x50
 800423a:	4618      	mov	r0, r3
 800423c:	f000 fbc5 	bl	80049ca <TIM_ITRx_SetConfig>
      break;
 8004240:	e02c      	b.n	800429c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004246:	683b      	ldr	r3, [r7, #0]
 8004248:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800424a:	683b      	ldr	r3, [r7, #0]
 800424c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800424e:	461a      	mov	r2, r3
 8004250:	f000 fb8b 	bl	800496a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	2160      	movs	r1, #96	@ 0x60
 800425a:	4618      	mov	r0, r3
 800425c:	f000 fbb5 	bl	80049ca <TIM_ITRx_SetConfig>
      break;
 8004260:	e01c      	b.n	800429c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004266:	683b      	ldr	r3, [r7, #0]
 8004268:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800426a:	683b      	ldr	r3, [r7, #0]
 800426c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800426e:	461a      	mov	r2, r3
 8004270:	f000 fb4c 	bl	800490c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	2140      	movs	r1, #64	@ 0x40
 800427a:	4618      	mov	r0, r3
 800427c:	f000 fba5 	bl	80049ca <TIM_ITRx_SetConfig>
      break;
 8004280:	e00c      	b.n	800429c <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681a      	ldr	r2, [r3, #0]
 8004286:	683b      	ldr	r3, [r7, #0]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	4619      	mov	r1, r3
 800428c:	4610      	mov	r0, r2
 800428e:	f000 fb9c 	bl	80049ca <TIM_ITRx_SetConfig>
      break;
 8004292:	e003      	b.n	800429c <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8004294:	2301      	movs	r3, #1
 8004296:	73fb      	strb	r3, [r7, #15]
      break;
 8004298:	e000      	b.n	800429c <HAL_TIM_ConfigClockSource+0x178>
      break;
 800429a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2201      	movs	r2, #1
 80042a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2200      	movs	r2, #0
 80042a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80042ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80042ae:	4618      	mov	r0, r3
 80042b0:	3710      	adds	r7, #16
 80042b2:	46bd      	mov	sp, r7
 80042b4:	bd80      	pop	{r7, pc}
	...

080042b8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80042b8:	b480      	push	{r7}
 80042ba:	b085      	sub	sp, #20
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
 80042c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	4a38      	ldr	r2, [pc, #224]	@ (80043ac <TIM_Base_SetConfig+0xf4>)
 80042cc:	4293      	cmp	r3, r2
 80042ce:	d007      	beq.n	80042e0 <TIM_Base_SetConfig+0x28>
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80042d6:	d003      	beq.n	80042e0 <TIM_Base_SetConfig+0x28>
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	4a35      	ldr	r2, [pc, #212]	@ (80043b0 <TIM_Base_SetConfig+0xf8>)
 80042dc:	4293      	cmp	r3, r2
 80042de:	d108      	bne.n	80042f2 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80042e6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80042e8:	683b      	ldr	r3, [r7, #0]
 80042ea:	685b      	ldr	r3, [r3, #4]
 80042ec:	68fa      	ldr	r2, [r7, #12]
 80042ee:	4313      	orrs	r3, r2
 80042f0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	4a2d      	ldr	r2, [pc, #180]	@ (80043ac <TIM_Base_SetConfig+0xf4>)
 80042f6:	4293      	cmp	r3, r2
 80042f8:	d013      	beq.n	8004322 <TIM_Base_SetConfig+0x6a>
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004300:	d00f      	beq.n	8004322 <TIM_Base_SetConfig+0x6a>
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	4a2a      	ldr	r2, [pc, #168]	@ (80043b0 <TIM_Base_SetConfig+0xf8>)
 8004306:	4293      	cmp	r3, r2
 8004308:	d00b      	beq.n	8004322 <TIM_Base_SetConfig+0x6a>
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	4a29      	ldr	r2, [pc, #164]	@ (80043b4 <TIM_Base_SetConfig+0xfc>)
 800430e:	4293      	cmp	r3, r2
 8004310:	d007      	beq.n	8004322 <TIM_Base_SetConfig+0x6a>
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	4a28      	ldr	r2, [pc, #160]	@ (80043b8 <TIM_Base_SetConfig+0x100>)
 8004316:	4293      	cmp	r3, r2
 8004318:	d003      	beq.n	8004322 <TIM_Base_SetConfig+0x6a>
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	4a27      	ldr	r2, [pc, #156]	@ (80043bc <TIM_Base_SetConfig+0x104>)
 800431e:	4293      	cmp	r3, r2
 8004320:	d108      	bne.n	8004334 <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004328:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800432a:	683b      	ldr	r3, [r7, #0]
 800432c:	68db      	ldr	r3, [r3, #12]
 800432e:	68fa      	ldr	r2, [r7, #12]
 8004330:	4313      	orrs	r3, r2
 8004332:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800433a:	683b      	ldr	r3, [r7, #0]
 800433c:	695b      	ldr	r3, [r3, #20]
 800433e:	4313      	orrs	r3, r2
 8004340:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	68fa      	ldr	r2, [r7, #12]
 8004346:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004348:	683b      	ldr	r3, [r7, #0]
 800434a:	689a      	ldr	r2, [r3, #8]
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004350:	683b      	ldr	r3, [r7, #0]
 8004352:	681a      	ldr	r2, [r3, #0]
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	4a14      	ldr	r2, [pc, #80]	@ (80043ac <TIM_Base_SetConfig+0xf4>)
 800435c:	4293      	cmp	r3, r2
 800435e:	d00b      	beq.n	8004378 <TIM_Base_SetConfig+0xc0>
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	4a14      	ldr	r2, [pc, #80]	@ (80043b4 <TIM_Base_SetConfig+0xfc>)
 8004364:	4293      	cmp	r3, r2
 8004366:	d007      	beq.n	8004378 <TIM_Base_SetConfig+0xc0>
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	4a13      	ldr	r2, [pc, #76]	@ (80043b8 <TIM_Base_SetConfig+0x100>)
 800436c:	4293      	cmp	r3, r2
 800436e:	d003      	beq.n	8004378 <TIM_Base_SetConfig+0xc0>
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	4a12      	ldr	r2, [pc, #72]	@ (80043bc <TIM_Base_SetConfig+0x104>)
 8004374:	4293      	cmp	r3, r2
 8004376:	d103      	bne.n	8004380 <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004378:	683b      	ldr	r3, [r7, #0]
 800437a:	691a      	ldr	r2, [r3, #16]
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2201      	movs	r2, #1
 8004384:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	691b      	ldr	r3, [r3, #16]
 800438a:	f003 0301 	and.w	r3, r3, #1
 800438e:	2b01      	cmp	r3, #1
 8004390:	d105      	bne.n	800439e <TIM_Base_SetConfig+0xe6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	691b      	ldr	r3, [r3, #16]
 8004396:	f023 0201 	bic.w	r2, r3, #1
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	611a      	str	r2, [r3, #16]
  }
}
 800439e:	bf00      	nop
 80043a0:	3714      	adds	r7, #20
 80043a2:	46bd      	mov	sp, r7
 80043a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a8:	4770      	bx	lr
 80043aa:	bf00      	nop
 80043ac:	40012c00 	.word	0x40012c00
 80043b0:	40000400 	.word	0x40000400
 80043b4:	40014000 	.word	0x40014000
 80043b8:	40014400 	.word	0x40014400
 80043bc:	40014800 	.word	0x40014800

080043c0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80043c0:	b480      	push	{r7}
 80043c2:	b087      	sub	sp, #28
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	6078      	str	r0, [r7, #4]
 80043c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	6a1b      	ldr	r3, [r3, #32]
 80043ce:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	6a1b      	ldr	r3, [r3, #32]
 80043d4:	f023 0201 	bic.w	r2, r3, #1
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	685b      	ldr	r3, [r3, #4]
 80043e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	699b      	ldr	r3, [r3, #24]
 80043e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80043ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80043f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	f023 0303 	bic.w	r3, r3, #3
 80043fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80043fc:	683b      	ldr	r3, [r7, #0]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	68fa      	ldr	r2, [r7, #12]
 8004402:	4313      	orrs	r3, r2
 8004404:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004406:	697b      	ldr	r3, [r7, #20]
 8004408:	f023 0302 	bic.w	r3, r3, #2
 800440c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800440e:	683b      	ldr	r3, [r7, #0]
 8004410:	689b      	ldr	r3, [r3, #8]
 8004412:	697a      	ldr	r2, [r7, #20]
 8004414:	4313      	orrs	r3, r2
 8004416:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	4a28      	ldr	r2, [pc, #160]	@ (80044bc <TIM_OC1_SetConfig+0xfc>)
 800441c:	4293      	cmp	r3, r2
 800441e:	d00b      	beq.n	8004438 <TIM_OC1_SetConfig+0x78>
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	4a27      	ldr	r2, [pc, #156]	@ (80044c0 <TIM_OC1_SetConfig+0x100>)
 8004424:	4293      	cmp	r3, r2
 8004426:	d007      	beq.n	8004438 <TIM_OC1_SetConfig+0x78>
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	4a26      	ldr	r2, [pc, #152]	@ (80044c4 <TIM_OC1_SetConfig+0x104>)
 800442c:	4293      	cmp	r3, r2
 800442e:	d003      	beq.n	8004438 <TIM_OC1_SetConfig+0x78>
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	4a25      	ldr	r2, [pc, #148]	@ (80044c8 <TIM_OC1_SetConfig+0x108>)
 8004434:	4293      	cmp	r3, r2
 8004436:	d10c      	bne.n	8004452 <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004438:	697b      	ldr	r3, [r7, #20]
 800443a:	f023 0308 	bic.w	r3, r3, #8
 800443e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004440:	683b      	ldr	r3, [r7, #0]
 8004442:	68db      	ldr	r3, [r3, #12]
 8004444:	697a      	ldr	r2, [r7, #20]
 8004446:	4313      	orrs	r3, r2
 8004448:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800444a:	697b      	ldr	r3, [r7, #20]
 800444c:	f023 0304 	bic.w	r3, r3, #4
 8004450:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	4a19      	ldr	r2, [pc, #100]	@ (80044bc <TIM_OC1_SetConfig+0xfc>)
 8004456:	4293      	cmp	r3, r2
 8004458:	d00b      	beq.n	8004472 <TIM_OC1_SetConfig+0xb2>
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	4a18      	ldr	r2, [pc, #96]	@ (80044c0 <TIM_OC1_SetConfig+0x100>)
 800445e:	4293      	cmp	r3, r2
 8004460:	d007      	beq.n	8004472 <TIM_OC1_SetConfig+0xb2>
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	4a17      	ldr	r2, [pc, #92]	@ (80044c4 <TIM_OC1_SetConfig+0x104>)
 8004466:	4293      	cmp	r3, r2
 8004468:	d003      	beq.n	8004472 <TIM_OC1_SetConfig+0xb2>
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	4a16      	ldr	r2, [pc, #88]	@ (80044c8 <TIM_OC1_SetConfig+0x108>)
 800446e:	4293      	cmp	r3, r2
 8004470:	d111      	bne.n	8004496 <TIM_OC1_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004472:	693b      	ldr	r3, [r7, #16]
 8004474:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004478:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800447a:	693b      	ldr	r3, [r7, #16]
 800447c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004480:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004482:	683b      	ldr	r3, [r7, #0]
 8004484:	695b      	ldr	r3, [r3, #20]
 8004486:	693a      	ldr	r2, [r7, #16]
 8004488:	4313      	orrs	r3, r2
 800448a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800448c:	683b      	ldr	r3, [r7, #0]
 800448e:	699b      	ldr	r3, [r3, #24]
 8004490:	693a      	ldr	r2, [r7, #16]
 8004492:	4313      	orrs	r3, r2
 8004494:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	693a      	ldr	r2, [r7, #16]
 800449a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	68fa      	ldr	r2, [r7, #12]
 80044a0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80044a2:	683b      	ldr	r3, [r7, #0]
 80044a4:	685a      	ldr	r2, [r3, #4]
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	697a      	ldr	r2, [r7, #20]
 80044ae:	621a      	str	r2, [r3, #32]
}
 80044b0:	bf00      	nop
 80044b2:	371c      	adds	r7, #28
 80044b4:	46bd      	mov	sp, r7
 80044b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ba:	4770      	bx	lr
 80044bc:	40012c00 	.word	0x40012c00
 80044c0:	40014000 	.word	0x40014000
 80044c4:	40014400 	.word	0x40014400
 80044c8:	40014800 	.word	0x40014800

080044cc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80044cc:	b480      	push	{r7}
 80044ce:	b087      	sub	sp, #28
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]
 80044d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	6a1b      	ldr	r3, [r3, #32]
 80044da:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	6a1b      	ldr	r3, [r3, #32]
 80044e0:	f023 0210 	bic.w	r2, r3, #16
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	685b      	ldr	r3, [r3, #4]
 80044ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	699b      	ldr	r3, [r3, #24]
 80044f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80044fa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80044fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004506:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004508:	683b      	ldr	r3, [r7, #0]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	021b      	lsls	r3, r3, #8
 800450e:	68fa      	ldr	r2, [r7, #12]
 8004510:	4313      	orrs	r3, r2
 8004512:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004514:	697b      	ldr	r3, [r7, #20]
 8004516:	f023 0320 	bic.w	r3, r3, #32
 800451a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800451c:	683b      	ldr	r3, [r7, #0]
 800451e:	689b      	ldr	r3, [r3, #8]
 8004520:	011b      	lsls	r3, r3, #4
 8004522:	697a      	ldr	r2, [r7, #20]
 8004524:	4313      	orrs	r3, r2
 8004526:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	4a24      	ldr	r2, [pc, #144]	@ (80045bc <TIM_OC2_SetConfig+0xf0>)
 800452c:	4293      	cmp	r3, r2
 800452e:	d10d      	bne.n	800454c <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004530:	697b      	ldr	r3, [r7, #20]
 8004532:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004536:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004538:	683b      	ldr	r3, [r7, #0]
 800453a:	68db      	ldr	r3, [r3, #12]
 800453c:	011b      	lsls	r3, r3, #4
 800453e:	697a      	ldr	r2, [r7, #20]
 8004540:	4313      	orrs	r3, r2
 8004542:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004544:	697b      	ldr	r3, [r7, #20]
 8004546:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800454a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	4a1b      	ldr	r2, [pc, #108]	@ (80045bc <TIM_OC2_SetConfig+0xf0>)
 8004550:	4293      	cmp	r3, r2
 8004552:	d00b      	beq.n	800456c <TIM_OC2_SetConfig+0xa0>
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	4a1a      	ldr	r2, [pc, #104]	@ (80045c0 <TIM_OC2_SetConfig+0xf4>)
 8004558:	4293      	cmp	r3, r2
 800455a:	d007      	beq.n	800456c <TIM_OC2_SetConfig+0xa0>
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	4a19      	ldr	r2, [pc, #100]	@ (80045c4 <TIM_OC2_SetConfig+0xf8>)
 8004560:	4293      	cmp	r3, r2
 8004562:	d003      	beq.n	800456c <TIM_OC2_SetConfig+0xa0>
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	4a18      	ldr	r2, [pc, #96]	@ (80045c8 <TIM_OC2_SetConfig+0xfc>)
 8004568:	4293      	cmp	r3, r2
 800456a:	d113      	bne.n	8004594 <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800456c:	693b      	ldr	r3, [r7, #16]
 800456e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004572:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004574:	693b      	ldr	r3, [r7, #16]
 8004576:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800457a:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800457c:	683b      	ldr	r3, [r7, #0]
 800457e:	695b      	ldr	r3, [r3, #20]
 8004580:	009b      	lsls	r3, r3, #2
 8004582:	693a      	ldr	r2, [r7, #16]
 8004584:	4313      	orrs	r3, r2
 8004586:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004588:	683b      	ldr	r3, [r7, #0]
 800458a:	699b      	ldr	r3, [r3, #24]
 800458c:	009b      	lsls	r3, r3, #2
 800458e:	693a      	ldr	r2, [r7, #16]
 8004590:	4313      	orrs	r3, r2
 8004592:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	693a      	ldr	r2, [r7, #16]
 8004598:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	68fa      	ldr	r2, [r7, #12]
 800459e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80045a0:	683b      	ldr	r3, [r7, #0]
 80045a2:	685a      	ldr	r2, [r3, #4]
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	697a      	ldr	r2, [r7, #20]
 80045ac:	621a      	str	r2, [r3, #32]
}
 80045ae:	bf00      	nop
 80045b0:	371c      	adds	r7, #28
 80045b2:	46bd      	mov	sp, r7
 80045b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b8:	4770      	bx	lr
 80045ba:	bf00      	nop
 80045bc:	40012c00 	.word	0x40012c00
 80045c0:	40014000 	.word	0x40014000
 80045c4:	40014400 	.word	0x40014400
 80045c8:	40014800 	.word	0x40014800

080045cc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80045cc:	b480      	push	{r7}
 80045ce:	b087      	sub	sp, #28
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	6078      	str	r0, [r7, #4]
 80045d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	6a1b      	ldr	r3, [r3, #32]
 80045da:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	6a1b      	ldr	r3, [r3, #32]
 80045e0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	685b      	ldr	r3, [r3, #4]
 80045ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	69db      	ldr	r3, [r3, #28]
 80045f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80045fa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80045fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	f023 0303 	bic.w	r3, r3, #3
 8004606:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004608:	683b      	ldr	r3, [r7, #0]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	68fa      	ldr	r2, [r7, #12]
 800460e:	4313      	orrs	r3, r2
 8004610:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004612:	697b      	ldr	r3, [r7, #20]
 8004614:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004618:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800461a:	683b      	ldr	r3, [r7, #0]
 800461c:	689b      	ldr	r3, [r3, #8]
 800461e:	021b      	lsls	r3, r3, #8
 8004620:	697a      	ldr	r2, [r7, #20]
 8004622:	4313      	orrs	r3, r2
 8004624:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	4a23      	ldr	r2, [pc, #140]	@ (80046b8 <TIM_OC3_SetConfig+0xec>)
 800462a:	4293      	cmp	r3, r2
 800462c:	d10d      	bne.n	800464a <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800462e:	697b      	ldr	r3, [r7, #20]
 8004630:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004634:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004636:	683b      	ldr	r3, [r7, #0]
 8004638:	68db      	ldr	r3, [r3, #12]
 800463a:	021b      	lsls	r3, r3, #8
 800463c:	697a      	ldr	r2, [r7, #20]
 800463e:	4313      	orrs	r3, r2
 8004640:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004642:	697b      	ldr	r3, [r7, #20]
 8004644:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004648:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	4a1a      	ldr	r2, [pc, #104]	@ (80046b8 <TIM_OC3_SetConfig+0xec>)
 800464e:	4293      	cmp	r3, r2
 8004650:	d00b      	beq.n	800466a <TIM_OC3_SetConfig+0x9e>
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	4a19      	ldr	r2, [pc, #100]	@ (80046bc <TIM_OC3_SetConfig+0xf0>)
 8004656:	4293      	cmp	r3, r2
 8004658:	d007      	beq.n	800466a <TIM_OC3_SetConfig+0x9e>
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	4a18      	ldr	r2, [pc, #96]	@ (80046c0 <TIM_OC3_SetConfig+0xf4>)
 800465e:	4293      	cmp	r3, r2
 8004660:	d003      	beq.n	800466a <TIM_OC3_SetConfig+0x9e>
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	4a17      	ldr	r2, [pc, #92]	@ (80046c4 <TIM_OC3_SetConfig+0xf8>)
 8004666:	4293      	cmp	r3, r2
 8004668:	d113      	bne.n	8004692 <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800466a:	693b      	ldr	r3, [r7, #16]
 800466c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004670:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004672:	693b      	ldr	r3, [r7, #16]
 8004674:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004678:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800467a:	683b      	ldr	r3, [r7, #0]
 800467c:	695b      	ldr	r3, [r3, #20]
 800467e:	011b      	lsls	r3, r3, #4
 8004680:	693a      	ldr	r2, [r7, #16]
 8004682:	4313      	orrs	r3, r2
 8004684:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004686:	683b      	ldr	r3, [r7, #0]
 8004688:	699b      	ldr	r3, [r3, #24]
 800468a:	011b      	lsls	r3, r3, #4
 800468c:	693a      	ldr	r2, [r7, #16]
 800468e:	4313      	orrs	r3, r2
 8004690:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	693a      	ldr	r2, [r7, #16]
 8004696:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	68fa      	ldr	r2, [r7, #12]
 800469c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800469e:	683b      	ldr	r3, [r7, #0]
 80046a0:	685a      	ldr	r2, [r3, #4]
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	697a      	ldr	r2, [r7, #20]
 80046aa:	621a      	str	r2, [r3, #32]
}
 80046ac:	bf00      	nop
 80046ae:	371c      	adds	r7, #28
 80046b0:	46bd      	mov	sp, r7
 80046b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b6:	4770      	bx	lr
 80046b8:	40012c00 	.word	0x40012c00
 80046bc:	40014000 	.word	0x40014000
 80046c0:	40014400 	.word	0x40014400
 80046c4:	40014800 	.word	0x40014800

080046c8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80046c8:	b480      	push	{r7}
 80046ca:	b087      	sub	sp, #28
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	6078      	str	r0, [r7, #4]
 80046d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	6a1b      	ldr	r3, [r3, #32]
 80046d6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	6a1b      	ldr	r3, [r3, #32]
 80046dc:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	685b      	ldr	r3, [r3, #4]
 80046e8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	69db      	ldr	r3, [r3, #28]
 80046ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80046f6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80046fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004702:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004704:	683b      	ldr	r3, [r7, #0]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	021b      	lsls	r3, r3, #8
 800470a:	68fa      	ldr	r2, [r7, #12]
 800470c:	4313      	orrs	r3, r2
 800470e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004710:	693b      	ldr	r3, [r7, #16]
 8004712:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004716:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004718:	683b      	ldr	r3, [r7, #0]
 800471a:	689b      	ldr	r3, [r3, #8]
 800471c:	031b      	lsls	r3, r3, #12
 800471e:	693a      	ldr	r2, [r7, #16]
 8004720:	4313      	orrs	r3, r2
 8004722:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	4a16      	ldr	r2, [pc, #88]	@ (8004780 <TIM_OC4_SetConfig+0xb8>)
 8004728:	4293      	cmp	r3, r2
 800472a:	d00b      	beq.n	8004744 <TIM_OC4_SetConfig+0x7c>
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	4a15      	ldr	r2, [pc, #84]	@ (8004784 <TIM_OC4_SetConfig+0xbc>)
 8004730:	4293      	cmp	r3, r2
 8004732:	d007      	beq.n	8004744 <TIM_OC4_SetConfig+0x7c>
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	4a14      	ldr	r2, [pc, #80]	@ (8004788 <TIM_OC4_SetConfig+0xc0>)
 8004738:	4293      	cmp	r3, r2
 800473a:	d003      	beq.n	8004744 <TIM_OC4_SetConfig+0x7c>
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	4a13      	ldr	r2, [pc, #76]	@ (800478c <TIM_OC4_SetConfig+0xc4>)
 8004740:	4293      	cmp	r3, r2
 8004742:	d109      	bne.n	8004758 <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004744:	697b      	ldr	r3, [r7, #20]
 8004746:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800474a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800474c:	683b      	ldr	r3, [r7, #0]
 800474e:	695b      	ldr	r3, [r3, #20]
 8004750:	019b      	lsls	r3, r3, #6
 8004752:	697a      	ldr	r2, [r7, #20]
 8004754:	4313      	orrs	r3, r2
 8004756:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	697a      	ldr	r2, [r7, #20]
 800475c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	68fa      	ldr	r2, [r7, #12]
 8004762:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004764:	683b      	ldr	r3, [r7, #0]
 8004766:	685a      	ldr	r2, [r3, #4]
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	693a      	ldr	r2, [r7, #16]
 8004770:	621a      	str	r2, [r3, #32]
}
 8004772:	bf00      	nop
 8004774:	371c      	adds	r7, #28
 8004776:	46bd      	mov	sp, r7
 8004778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477c:	4770      	bx	lr
 800477e:	bf00      	nop
 8004780:	40012c00 	.word	0x40012c00
 8004784:	40014000 	.word	0x40014000
 8004788:	40014400 	.word	0x40014400
 800478c:	40014800 	.word	0x40014800

08004790 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004790:	b480      	push	{r7}
 8004792:	b087      	sub	sp, #28
 8004794:	af00      	add	r7, sp, #0
 8004796:	6078      	str	r0, [r7, #4]
 8004798:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	6a1b      	ldr	r3, [r3, #32]
 800479e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	6a1b      	ldr	r3, [r3, #32]
 80047a4:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	685b      	ldr	r3, [r3, #4]
 80047b0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80047b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80047be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80047c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80047c4:	683b      	ldr	r3, [r7, #0]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	68fa      	ldr	r2, [r7, #12]
 80047ca:	4313      	orrs	r3, r2
 80047cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80047ce:	693b      	ldr	r3, [r7, #16]
 80047d0:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80047d4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80047d6:	683b      	ldr	r3, [r7, #0]
 80047d8:	689b      	ldr	r3, [r3, #8]
 80047da:	041b      	lsls	r3, r3, #16
 80047dc:	693a      	ldr	r2, [r7, #16]
 80047de:	4313      	orrs	r3, r2
 80047e0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	4a15      	ldr	r2, [pc, #84]	@ (800483c <TIM_OC5_SetConfig+0xac>)
 80047e6:	4293      	cmp	r3, r2
 80047e8:	d00b      	beq.n	8004802 <TIM_OC5_SetConfig+0x72>
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	4a14      	ldr	r2, [pc, #80]	@ (8004840 <TIM_OC5_SetConfig+0xb0>)
 80047ee:	4293      	cmp	r3, r2
 80047f0:	d007      	beq.n	8004802 <TIM_OC5_SetConfig+0x72>
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	4a13      	ldr	r2, [pc, #76]	@ (8004844 <TIM_OC5_SetConfig+0xb4>)
 80047f6:	4293      	cmp	r3, r2
 80047f8:	d003      	beq.n	8004802 <TIM_OC5_SetConfig+0x72>
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	4a12      	ldr	r2, [pc, #72]	@ (8004848 <TIM_OC5_SetConfig+0xb8>)
 80047fe:	4293      	cmp	r3, r2
 8004800:	d109      	bne.n	8004816 <TIM_OC5_SetConfig+0x86>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004802:	697b      	ldr	r3, [r7, #20]
 8004804:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004808:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800480a:	683b      	ldr	r3, [r7, #0]
 800480c:	695b      	ldr	r3, [r3, #20]
 800480e:	021b      	lsls	r3, r3, #8
 8004810:	697a      	ldr	r2, [r7, #20]
 8004812:	4313      	orrs	r3, r2
 8004814:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	697a      	ldr	r2, [r7, #20]
 800481a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	68fa      	ldr	r2, [r7, #12]
 8004820:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004822:	683b      	ldr	r3, [r7, #0]
 8004824:	685a      	ldr	r2, [r3, #4]
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	693a      	ldr	r2, [r7, #16]
 800482e:	621a      	str	r2, [r3, #32]
}
 8004830:	bf00      	nop
 8004832:	371c      	adds	r7, #28
 8004834:	46bd      	mov	sp, r7
 8004836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483a:	4770      	bx	lr
 800483c:	40012c00 	.word	0x40012c00
 8004840:	40014000 	.word	0x40014000
 8004844:	40014400 	.word	0x40014400
 8004848:	40014800 	.word	0x40014800

0800484c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800484c:	b480      	push	{r7}
 800484e:	b087      	sub	sp, #28
 8004850:	af00      	add	r7, sp, #0
 8004852:	6078      	str	r0, [r7, #4]
 8004854:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	6a1b      	ldr	r3, [r3, #32]
 800485a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	6a1b      	ldr	r3, [r3, #32]
 8004860:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	685b      	ldr	r3, [r3, #4]
 800486c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004872:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800487a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800487e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004880:	683b      	ldr	r3, [r7, #0]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	021b      	lsls	r3, r3, #8
 8004886:	68fa      	ldr	r2, [r7, #12]
 8004888:	4313      	orrs	r3, r2
 800488a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800488c:	693b      	ldr	r3, [r7, #16]
 800488e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004892:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004894:	683b      	ldr	r3, [r7, #0]
 8004896:	689b      	ldr	r3, [r3, #8]
 8004898:	051b      	lsls	r3, r3, #20
 800489a:	693a      	ldr	r2, [r7, #16]
 800489c:	4313      	orrs	r3, r2
 800489e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	4a16      	ldr	r2, [pc, #88]	@ (80048fc <TIM_OC6_SetConfig+0xb0>)
 80048a4:	4293      	cmp	r3, r2
 80048a6:	d00b      	beq.n	80048c0 <TIM_OC6_SetConfig+0x74>
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	4a15      	ldr	r2, [pc, #84]	@ (8004900 <TIM_OC6_SetConfig+0xb4>)
 80048ac:	4293      	cmp	r3, r2
 80048ae:	d007      	beq.n	80048c0 <TIM_OC6_SetConfig+0x74>
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	4a14      	ldr	r2, [pc, #80]	@ (8004904 <TIM_OC6_SetConfig+0xb8>)
 80048b4:	4293      	cmp	r3, r2
 80048b6:	d003      	beq.n	80048c0 <TIM_OC6_SetConfig+0x74>
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	4a13      	ldr	r2, [pc, #76]	@ (8004908 <TIM_OC6_SetConfig+0xbc>)
 80048bc:	4293      	cmp	r3, r2
 80048be:	d109      	bne.n	80048d4 <TIM_OC6_SetConfig+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80048c0:	697b      	ldr	r3, [r7, #20]
 80048c2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80048c6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	695b      	ldr	r3, [r3, #20]
 80048cc:	029b      	lsls	r3, r3, #10
 80048ce:	697a      	ldr	r2, [r7, #20]
 80048d0:	4313      	orrs	r3, r2
 80048d2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	697a      	ldr	r2, [r7, #20]
 80048d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	68fa      	ldr	r2, [r7, #12]
 80048de:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80048e0:	683b      	ldr	r3, [r7, #0]
 80048e2:	685a      	ldr	r2, [r3, #4]
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	693a      	ldr	r2, [r7, #16]
 80048ec:	621a      	str	r2, [r3, #32]
}
 80048ee:	bf00      	nop
 80048f0:	371c      	adds	r7, #28
 80048f2:	46bd      	mov	sp, r7
 80048f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f8:	4770      	bx	lr
 80048fa:	bf00      	nop
 80048fc:	40012c00 	.word	0x40012c00
 8004900:	40014000 	.word	0x40014000
 8004904:	40014400 	.word	0x40014400
 8004908:	40014800 	.word	0x40014800

0800490c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800490c:	b480      	push	{r7}
 800490e:	b087      	sub	sp, #28
 8004910:	af00      	add	r7, sp, #0
 8004912:	60f8      	str	r0, [r7, #12]
 8004914:	60b9      	str	r1, [r7, #8]
 8004916:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	6a1b      	ldr	r3, [r3, #32]
 800491c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	6a1b      	ldr	r3, [r3, #32]
 8004922:	f023 0201 	bic.w	r2, r3, #1
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	699b      	ldr	r3, [r3, #24]
 800492e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004930:	693b      	ldr	r3, [r7, #16]
 8004932:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004936:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	011b      	lsls	r3, r3, #4
 800493c:	693a      	ldr	r2, [r7, #16]
 800493e:	4313      	orrs	r3, r2
 8004940:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004942:	697b      	ldr	r3, [r7, #20]
 8004944:	f023 030a 	bic.w	r3, r3, #10
 8004948:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800494a:	697a      	ldr	r2, [r7, #20]
 800494c:	68bb      	ldr	r3, [r7, #8]
 800494e:	4313      	orrs	r3, r2
 8004950:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	693a      	ldr	r2, [r7, #16]
 8004956:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	697a      	ldr	r2, [r7, #20]
 800495c:	621a      	str	r2, [r3, #32]
}
 800495e:	bf00      	nop
 8004960:	371c      	adds	r7, #28
 8004962:	46bd      	mov	sp, r7
 8004964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004968:	4770      	bx	lr

0800496a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800496a:	b480      	push	{r7}
 800496c:	b087      	sub	sp, #28
 800496e:	af00      	add	r7, sp, #0
 8004970:	60f8      	str	r0, [r7, #12]
 8004972:	60b9      	str	r1, [r7, #8]
 8004974:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	6a1b      	ldr	r3, [r3, #32]
 800497a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	6a1b      	ldr	r3, [r3, #32]
 8004980:	f023 0210 	bic.w	r2, r3, #16
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	699b      	ldr	r3, [r3, #24]
 800498c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800498e:	693b      	ldr	r3, [r7, #16]
 8004990:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004994:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	031b      	lsls	r3, r3, #12
 800499a:	693a      	ldr	r2, [r7, #16]
 800499c:	4313      	orrs	r3, r2
 800499e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80049a0:	697b      	ldr	r3, [r7, #20]
 80049a2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80049a6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80049a8:	68bb      	ldr	r3, [r7, #8]
 80049aa:	011b      	lsls	r3, r3, #4
 80049ac:	697a      	ldr	r2, [r7, #20]
 80049ae:	4313      	orrs	r3, r2
 80049b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	693a      	ldr	r2, [r7, #16]
 80049b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	697a      	ldr	r2, [r7, #20]
 80049bc:	621a      	str	r2, [r3, #32]
}
 80049be:	bf00      	nop
 80049c0:	371c      	adds	r7, #28
 80049c2:	46bd      	mov	sp, r7
 80049c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c8:	4770      	bx	lr

080049ca <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80049ca:	b480      	push	{r7}
 80049cc:	b085      	sub	sp, #20
 80049ce:	af00      	add	r7, sp, #0
 80049d0:	6078      	str	r0, [r7, #4]
 80049d2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	689b      	ldr	r3, [r3, #8]
 80049d8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80049e0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80049e2:	683a      	ldr	r2, [r7, #0]
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	4313      	orrs	r3, r2
 80049e8:	f043 0307 	orr.w	r3, r3, #7
 80049ec:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	68fa      	ldr	r2, [r7, #12]
 80049f2:	609a      	str	r2, [r3, #8]
}
 80049f4:	bf00      	nop
 80049f6:	3714      	adds	r7, #20
 80049f8:	46bd      	mov	sp, r7
 80049fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fe:	4770      	bx	lr

08004a00 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004a00:	b480      	push	{r7}
 8004a02:	b087      	sub	sp, #28
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	60f8      	str	r0, [r7, #12]
 8004a08:	60b9      	str	r1, [r7, #8]
 8004a0a:	607a      	str	r2, [r7, #4]
 8004a0c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	689b      	ldr	r3, [r3, #8]
 8004a12:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004a14:	697b      	ldr	r3, [r7, #20]
 8004a16:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004a1a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004a1c:	683b      	ldr	r3, [r7, #0]
 8004a1e:	021a      	lsls	r2, r3, #8
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	431a      	orrs	r2, r3
 8004a24:	68bb      	ldr	r3, [r7, #8]
 8004a26:	4313      	orrs	r3, r2
 8004a28:	697a      	ldr	r2, [r7, #20]
 8004a2a:	4313      	orrs	r3, r2
 8004a2c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	697a      	ldr	r2, [r7, #20]
 8004a32:	609a      	str	r2, [r3, #8]
}
 8004a34:	bf00      	nop
 8004a36:	371c      	adds	r7, #28
 8004a38:	46bd      	mov	sp, r7
 8004a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3e:	4770      	bx	lr

08004a40 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004a40:	b480      	push	{r7}
 8004a42:	b087      	sub	sp, #28
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	60f8      	str	r0, [r7, #12]
 8004a48:	60b9      	str	r1, [r7, #8]
 8004a4a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004a4c:	68bb      	ldr	r3, [r7, #8]
 8004a4e:	f003 031f 	and.w	r3, r3, #31
 8004a52:	2201      	movs	r2, #1
 8004a54:	fa02 f303 	lsl.w	r3, r2, r3
 8004a58:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	6a1a      	ldr	r2, [r3, #32]
 8004a5e:	697b      	ldr	r3, [r7, #20]
 8004a60:	43db      	mvns	r3, r3
 8004a62:	401a      	ands	r2, r3
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	6a1a      	ldr	r2, [r3, #32]
 8004a6c:	68bb      	ldr	r3, [r7, #8]
 8004a6e:	f003 031f 	and.w	r3, r3, #31
 8004a72:	6879      	ldr	r1, [r7, #4]
 8004a74:	fa01 f303 	lsl.w	r3, r1, r3
 8004a78:	431a      	orrs	r2, r3
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	621a      	str	r2, [r3, #32]
}
 8004a7e:	bf00      	nop
 8004a80:	371c      	adds	r7, #28
 8004a82:	46bd      	mov	sp, r7
 8004a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a88:	4770      	bx	lr
	...

08004a8c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004a8c:	b480      	push	{r7}
 8004a8e:	b085      	sub	sp, #20
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	6078      	str	r0, [r7, #4]
 8004a94:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004a9c:	2b01      	cmp	r3, #1
 8004a9e:	d101      	bne.n	8004aa4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004aa0:	2302      	movs	r3, #2
 8004aa2:	e054      	b.n	8004b4e <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	2201      	movs	r2, #1
 8004aa8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	2202      	movs	r2, #2
 8004ab0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	685b      	ldr	r3, [r3, #4]
 8004aba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	689b      	ldr	r3, [r3, #8]
 8004ac2:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	4a24      	ldr	r2, [pc, #144]	@ (8004b5c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004aca:	4293      	cmp	r3, r2
 8004acc:	d108      	bne.n	8004ae0 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8004ad4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004ad6:	683b      	ldr	r3, [r7, #0]
 8004ad8:	685b      	ldr	r3, [r3, #4]
 8004ada:	68fa      	ldr	r2, [r7, #12]
 8004adc:	4313      	orrs	r3, r2
 8004ade:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004ae6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004ae8:	683b      	ldr	r3, [r7, #0]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	68fa      	ldr	r2, [r7, #12]
 8004aee:	4313      	orrs	r3, r2
 8004af0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	68fa      	ldr	r2, [r7, #12]
 8004af8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	4a17      	ldr	r2, [pc, #92]	@ (8004b5c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004b00:	4293      	cmp	r3, r2
 8004b02:	d00e      	beq.n	8004b22 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004b0c:	d009      	beq.n	8004b22 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	4a13      	ldr	r2, [pc, #76]	@ (8004b60 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004b14:	4293      	cmp	r3, r2
 8004b16:	d004      	beq.n	8004b22 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	4a11      	ldr	r2, [pc, #68]	@ (8004b64 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004b1e:	4293      	cmp	r3, r2
 8004b20:	d10c      	bne.n	8004b3c <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004b22:	68bb      	ldr	r3, [r7, #8]
 8004b24:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004b28:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004b2a:	683b      	ldr	r3, [r7, #0]
 8004b2c:	689b      	ldr	r3, [r3, #8]
 8004b2e:	68ba      	ldr	r2, [r7, #8]
 8004b30:	4313      	orrs	r3, r2
 8004b32:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	68ba      	ldr	r2, [r7, #8]
 8004b3a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2201      	movs	r2, #1
 8004b40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2200      	movs	r2, #0
 8004b48:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004b4c:	2300      	movs	r3, #0
}
 8004b4e:	4618      	mov	r0, r3
 8004b50:	3714      	adds	r7, #20
 8004b52:	46bd      	mov	sp, r7
 8004b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b58:	4770      	bx	lr
 8004b5a:	bf00      	nop
 8004b5c:	40012c00 	.word	0x40012c00
 8004b60:	40000400 	.word	0x40000400
 8004b64:	40014000 	.word	0x40014000

08004b68 <HAL_MultiProcessor_Init>:
  *        HAL_MultiProcessorEx_AddressLength_Set() must be called after
  *        HAL_MultiProcessor_Init().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MultiProcessor_Init(UART_HandleTypeDef *huart, uint8_t Address, uint32_t WakeUpMethod)
{
 8004b68:	b580      	push	{r7, lr}
 8004b6a:	b084      	sub	sp, #16
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	60f8      	str	r0, [r7, #12]
 8004b70:	460b      	mov	r3, r1
 8004b72:	607a      	str	r2, [r7, #4]
 8004b74:	72fb      	strb	r3, [r7, #11]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d101      	bne.n	8004b80 <HAL_MultiProcessor_Init+0x18>
  {
    return HAL_ERROR;
 8004b7c:	2301      	movs	r3, #1
 8004b7e:	e059      	b.n	8004c34 <HAL_MultiProcessor_Init+0xcc>
  }

  /* Check the wake up method parameter */
  assert_param(IS_UART_WAKEUPMETHOD(WakeUpMethod));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d106      	bne.n	8004b96 <HAL_MultiProcessor_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	2200      	movs	r2, #0
 8004b8c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004b90:	68f8      	ldr	r0, [r7, #12]
 8004b92:	f7fc fda1 	bl	80016d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	2224      	movs	r2, #36	@ 0x24
 8004b9a:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	681a      	ldr	r2, [r3, #0]
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f022 0201 	bic.w	r2, r2, #1
 8004baa:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d002      	beq.n	8004bba <HAL_MultiProcessor_Init+0x52>
  {
    UART_AdvFeatureConfig(huart);
 8004bb4:	68f8      	ldr	r0, [r7, #12]
 8004bb6:	f000 fd07 	bl	80055c8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004bba:	68f8      	ldr	r0, [r7, #12]
 8004bbc:	f000 fbce 	bl	800535c <UART_SetConfig>
 8004bc0:	4603      	mov	r3, r0
 8004bc2:	2b01      	cmp	r3, #1
 8004bc4:	d101      	bne.n	8004bca <HAL_MultiProcessor_Init+0x62>
  {
    return HAL_ERROR;
 8004bc6:	2301      	movs	r3, #1
 8004bc8:	e034      	b.n	8004c34 <HAL_MultiProcessor_Init+0xcc>
  }

  /* In multiprocessor mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register. */
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	685a      	ldr	r2, [r3, #4]
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004bd8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	689a      	ldr	r2, [r3, #8]
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004be8:	609a      	str	r2, [r3, #8]

  if (WakeUpMethod == UART_WAKEUPMETHOD_ADDRESSMARK)
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004bf0:	d10a      	bne.n	8004c08 <HAL_MultiProcessor_Init+0xa0>
  {
    /* If address mark wake up method is chosen, set the USART address node */
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ADD, ((uint32_t)Address << UART_CR2_ADDRESS_LSB_POS));
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	685b      	ldr	r3, [r3, #4]
 8004bf8:	f023 417f 	bic.w	r1, r3, #4278190080	@ 0xff000000
 8004bfc:	7afb      	ldrb	r3, [r7, #11]
 8004bfe:	061a      	lsls	r2, r3, #24
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	430a      	orrs	r2, r1
 8004c06:	605a      	str	r2, [r3, #4]
  }

  /* Set the wake up method by setting the WAKE bit in the CR1 register */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_WAKE, WakeUpMethod);
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f423 6100 	bic.w	r1, r3, #2048	@ 0x800
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	687a      	ldr	r2, [r7, #4]
 8004c18:	430a      	orrs	r2, r1
 8004c1a:	601a      	str	r2, [r3, #0]

  __HAL_UART_ENABLE(huart);
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	681a      	ldr	r2, [r3, #0]
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f042 0201 	orr.w	r2, r2, #1
 8004c2a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004c2c:	68f8      	ldr	r0, [r7, #12]
 8004c2e:	f000 fd6d 	bl	800570c <UART_CheckIdleState>
 8004c32:	4603      	mov	r3, r0
}
 8004c34:	4618      	mov	r0, r3
 8004c36:	3710      	adds	r7, #16
 8004c38:	46bd      	mov	sp, r7
 8004c3a:	bd80      	pop	{r7, pc}

08004c3c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c3c:	b580      	push	{r7, lr}
 8004c3e:	b08a      	sub	sp, #40	@ 0x28
 8004c40:	af02      	add	r7, sp, #8
 8004c42:	60f8      	str	r0, [r7, #12]
 8004c44:	60b9      	str	r1, [r7, #8]
 8004c46:	603b      	str	r3, [r7, #0]
 8004c48:	4613      	mov	r3, r2
 8004c4a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004c50:	2b20      	cmp	r3, #32
 8004c52:	d177      	bne.n	8004d44 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8004c54:	68bb      	ldr	r3, [r7, #8]
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d002      	beq.n	8004c60 <HAL_UART_Transmit+0x24>
 8004c5a:	88fb      	ldrh	r3, [r7, #6]
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d101      	bne.n	8004c64 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004c60:	2301      	movs	r3, #1
 8004c62:	e070      	b.n	8004d46 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	2200      	movs	r2, #0
 8004c68:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	2221      	movs	r2, #33	@ 0x21
 8004c70:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004c72:	f7fc feb3 	bl	80019dc <HAL_GetTick>
 8004c76:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	88fa      	ldrh	r2, [r7, #6]
 8004c7c:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	88fa      	ldrh	r2, [r7, #6]
 8004c84:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	689b      	ldr	r3, [r3, #8]
 8004c8c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004c90:	d108      	bne.n	8004ca4 <HAL_UART_Transmit+0x68>
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	691b      	ldr	r3, [r3, #16]
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d104      	bne.n	8004ca4 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8004c9a:	2300      	movs	r3, #0
 8004c9c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004c9e:	68bb      	ldr	r3, [r7, #8]
 8004ca0:	61bb      	str	r3, [r7, #24]
 8004ca2:	e003      	b.n	8004cac <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8004ca4:	68bb      	ldr	r3, [r7, #8]
 8004ca6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004ca8:	2300      	movs	r3, #0
 8004caa:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004cac:	e02f      	b.n	8004d0e <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004cae:	683b      	ldr	r3, [r7, #0]
 8004cb0:	9300      	str	r3, [sp, #0]
 8004cb2:	697b      	ldr	r3, [r7, #20]
 8004cb4:	2200      	movs	r2, #0
 8004cb6:	2180      	movs	r1, #128	@ 0x80
 8004cb8:	68f8      	ldr	r0, [r7, #12]
 8004cba:	f000 fdcf 	bl	800585c <UART_WaitOnFlagUntilTimeout>
 8004cbe:	4603      	mov	r3, r0
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d004      	beq.n	8004cce <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	2220      	movs	r2, #32
 8004cc8:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8004cca:	2303      	movs	r3, #3
 8004ccc:	e03b      	b.n	8004d46 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8004cce:	69fb      	ldr	r3, [r7, #28]
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d10b      	bne.n	8004cec <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004cd4:	69bb      	ldr	r3, [r7, #24]
 8004cd6:	881a      	ldrh	r2, [r3, #0]
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004ce0:	b292      	uxth	r2, r2
 8004ce2:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8004ce4:	69bb      	ldr	r3, [r7, #24]
 8004ce6:	3302      	adds	r3, #2
 8004ce8:	61bb      	str	r3, [r7, #24]
 8004cea:	e007      	b.n	8004cfc <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004cec:	69fb      	ldr	r3, [r7, #28]
 8004cee:	781a      	ldrb	r2, [r3, #0]
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8004cf6:	69fb      	ldr	r3, [r7, #28]
 8004cf8:	3301      	adds	r3, #1
 8004cfa:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004d02:	b29b      	uxth	r3, r3
 8004d04:	3b01      	subs	r3, #1
 8004d06:	b29a      	uxth	r2, r3
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004d14:	b29b      	uxth	r3, r3
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d1c9      	bne.n	8004cae <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004d1a:	683b      	ldr	r3, [r7, #0]
 8004d1c:	9300      	str	r3, [sp, #0]
 8004d1e:	697b      	ldr	r3, [r7, #20]
 8004d20:	2200      	movs	r2, #0
 8004d22:	2140      	movs	r1, #64	@ 0x40
 8004d24:	68f8      	ldr	r0, [r7, #12]
 8004d26:	f000 fd99 	bl	800585c <UART_WaitOnFlagUntilTimeout>
 8004d2a:	4603      	mov	r3, r0
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d004      	beq.n	8004d3a <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	2220      	movs	r2, #32
 8004d34:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8004d36:	2303      	movs	r3, #3
 8004d38:	e005      	b.n	8004d46 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	2220      	movs	r2, #32
 8004d3e:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8004d40:	2300      	movs	r3, #0
 8004d42:	e000      	b.n	8004d46 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8004d44:	2302      	movs	r3, #2
  }
}
 8004d46:	4618      	mov	r0, r3
 8004d48:	3720      	adds	r7, #32
 8004d4a:	46bd      	mov	sp, r7
 8004d4c:	bd80      	pop	{r7, pc}
	...

08004d50 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004d50:	b580      	push	{r7, lr}
 8004d52:	b0ba      	sub	sp, #232	@ 0xe8
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	69db      	ldr	r3, [r3, #28]
 8004d5e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	689b      	ldr	r3, [r3, #8]
 8004d72:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004d76:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8004d7a:	f640 030f 	movw	r3, #2063	@ 0x80f
 8004d7e:	4013      	ands	r3, r2
 8004d80:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8004d84:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d115      	bne.n	8004db8 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004d8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004d90:	f003 0320 	and.w	r3, r3, #32
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d00f      	beq.n	8004db8 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004d98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004d9c:	f003 0320 	and.w	r3, r3, #32
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d009      	beq.n	8004db8 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	f000 82ab 	beq.w	8005304 <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004db2:	6878      	ldr	r0, [r7, #4]
 8004db4:	4798      	blx	r3
      }
      return;
 8004db6:	e2a5      	b.n	8005304 <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004db8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	f000 8117 	beq.w	8004ff0 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004dc2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004dc6:	f003 0301 	and.w	r3, r3, #1
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d106      	bne.n	8004ddc <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004dce:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8004dd2:	4b85      	ldr	r3, [pc, #532]	@ (8004fe8 <HAL_UART_IRQHandler+0x298>)
 8004dd4:	4013      	ands	r3, r2
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	f000 810a 	beq.w	8004ff0 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004ddc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004de0:	f003 0301 	and.w	r3, r3, #1
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d011      	beq.n	8004e0c <HAL_UART_IRQHandler+0xbc>
 8004de8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004dec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d00b      	beq.n	8004e0c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	2201      	movs	r2, #1
 8004dfa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004e02:	f043 0201 	orr.w	r2, r3, #1
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004e0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004e10:	f003 0302 	and.w	r3, r3, #2
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d011      	beq.n	8004e3c <HAL_UART_IRQHandler+0xec>
 8004e18:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004e1c:	f003 0301 	and.w	r3, r3, #1
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d00b      	beq.n	8004e3c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	2202      	movs	r2, #2
 8004e2a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004e32:	f043 0204 	orr.w	r2, r3, #4
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004e3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004e40:	f003 0304 	and.w	r3, r3, #4
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d011      	beq.n	8004e6c <HAL_UART_IRQHandler+0x11c>
 8004e48:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004e4c:	f003 0301 	and.w	r3, r3, #1
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d00b      	beq.n	8004e6c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	2204      	movs	r2, #4
 8004e5a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004e62:	f043 0202 	orr.w	r2, r3, #2
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004e6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004e70:	f003 0308 	and.w	r3, r3, #8
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d017      	beq.n	8004ea8 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004e78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004e7c:	f003 0320 	and.w	r3, r3, #32
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d105      	bne.n	8004e90 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004e84:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004e88:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d00b      	beq.n	8004ea8 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	2208      	movs	r2, #8
 8004e96:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004e9e:	f043 0208 	orr.w	r2, r3, #8
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004ea8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004eac:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d012      	beq.n	8004eda <HAL_UART_IRQHandler+0x18a>
 8004eb4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004eb8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d00c      	beq.n	8004eda <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004ec8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004ed0:	f043 0220 	orr.w	r2, r3, #32
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	f000 8211 	beq.w	8005308 <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004ee6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004eea:	f003 0320 	and.w	r3, r3, #32
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d00d      	beq.n	8004f0e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004ef2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004ef6:	f003 0320 	and.w	r3, r3, #32
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d007      	beq.n	8004f0e <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d003      	beq.n	8004f0e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004f0a:	6878      	ldr	r0, [r7, #4]
 8004f0c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004f14:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	689b      	ldr	r3, [r3, #8]
 8004f1e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f22:	2b40      	cmp	r3, #64	@ 0x40
 8004f24:	d005      	beq.n	8004f32 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004f26:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004f2a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d04f      	beq.n	8004fd2 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004f32:	6878      	ldr	r0, [r7, #4]
 8004f34:	f000 fcff 	bl	8005936 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	689b      	ldr	r3, [r3, #8]
 8004f3e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f42:	2b40      	cmp	r3, #64	@ 0x40
 8004f44:	d141      	bne.n	8004fca <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	3308      	adds	r3, #8
 8004f4c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f50:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004f54:	e853 3f00 	ldrex	r3, [r3]
 8004f58:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004f5c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004f60:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004f64:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	3308      	adds	r3, #8
 8004f6e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004f72:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004f76:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f7a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004f7e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004f82:	e841 2300 	strex	r3, r2, [r1]
 8004f86:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004f8a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d1d9      	bne.n	8004f46 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d013      	beq.n	8004fc2 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004f9e:	4a13      	ldr	r2, [pc, #76]	@ (8004fec <HAL_UART_IRQHandler+0x29c>)
 8004fa0:	635a      	str	r2, [r3, #52]	@ 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004fa6:	4618      	mov	r0, r3
 8004fa8:	f7fc ff6f 	bl	8001e8a <HAL_DMA_Abort_IT>
 8004fac:	4603      	mov	r3, r0
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d017      	beq.n	8004fe2 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004fb6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004fb8:	687a      	ldr	r2, [r7, #4]
 8004fba:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8004fbc:	4610      	mov	r0, r2
 8004fbe:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004fc0:	e00f      	b.n	8004fe2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004fc2:	6878      	ldr	r0, [r7, #4]
 8004fc4:	f000 f9b4 	bl	8005330 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004fc8:	e00b      	b.n	8004fe2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004fca:	6878      	ldr	r0, [r7, #4]
 8004fcc:	f000 f9b0 	bl	8005330 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004fd0:	e007      	b.n	8004fe2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004fd2:	6878      	ldr	r0, [r7, #4]
 8004fd4:	f000 f9ac 	bl	8005330 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	2200      	movs	r2, #0
 8004fdc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8004fe0:	e192      	b.n	8005308 <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004fe2:	bf00      	nop
    return;
 8004fe4:	e190      	b.n	8005308 <HAL_UART_IRQHandler+0x5b8>
 8004fe6:	bf00      	nop
 8004fe8:	04000120 	.word	0x04000120
 8004fec:	080059ff 	.word	0x080059ff

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004ff4:	2b01      	cmp	r3, #1
 8004ff6:	f040 814b 	bne.w	8005290 <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004ffa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004ffe:	f003 0310 	and.w	r3, r3, #16
 8005002:	2b00      	cmp	r3, #0
 8005004:	f000 8144 	beq.w	8005290 <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005008:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800500c:	f003 0310 	and.w	r3, r3, #16
 8005010:	2b00      	cmp	r3, #0
 8005012:	f000 813d 	beq.w	8005290 <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	2210      	movs	r2, #16
 800501c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	689b      	ldr	r3, [r3, #8]
 8005024:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005028:	2b40      	cmp	r3, #64	@ 0x40
 800502a:	f040 80b5 	bne.w	8005198 <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	685b      	ldr	r3, [r3, #4]
 8005036:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800503a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800503e:	2b00      	cmp	r3, #0
 8005040:	f000 8164 	beq.w	800530c <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800504a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800504e:	429a      	cmp	r2, r3
 8005050:	f080 815c 	bcs.w	800530c <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800505a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005062:	699b      	ldr	r3, [r3, #24]
 8005064:	2b20      	cmp	r3, #32
 8005066:	f000 8086 	beq.w	8005176 <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005072:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005076:	e853 3f00 	ldrex	r3, [r3]
 800507a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800507e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005082:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005086:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	461a      	mov	r2, r3
 8005090:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8005094:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005098:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800509c:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80050a0:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80050a4:	e841 2300 	strex	r3, r2, [r1]
 80050a8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80050ac:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d1da      	bne.n	800506a <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	3308      	adds	r3, #8
 80050ba:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050bc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80050be:	e853 3f00 	ldrex	r3, [r3]
 80050c2:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80050c4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80050c6:	f023 0301 	bic.w	r3, r3, #1
 80050ca:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	3308      	adds	r3, #8
 80050d4:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80050d8:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80050dc:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050de:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80050e0:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80050e4:	e841 2300 	strex	r3, r2, [r1]
 80050e8:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80050ea:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d1e1      	bne.n	80050b4 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	3308      	adds	r3, #8
 80050f6:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050f8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80050fa:	e853 3f00 	ldrex	r3, [r3]
 80050fe:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005100:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005102:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005106:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	3308      	adds	r3, #8
 8005110:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005114:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005116:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005118:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800511a:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800511c:	e841 2300 	strex	r3, r2, [r1]
 8005120:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005122:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005124:	2b00      	cmp	r3, #0
 8005126:	d1e3      	bne.n	80050f0 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	2220      	movs	r2, #32
 800512c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	2200      	movs	r2, #0
 8005134:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800513c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800513e:	e853 3f00 	ldrex	r3, [r3]
 8005142:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005144:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005146:	f023 0310 	bic.w	r3, r3, #16
 800514a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	461a      	mov	r2, r3
 8005154:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005158:	65bb      	str	r3, [r7, #88]	@ 0x58
 800515a:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800515c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800515e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005160:	e841 2300 	strex	r3, r2, [r1]
 8005164:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005166:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005168:	2b00      	cmp	r3, #0
 800516a:	d1e4      	bne.n	8005136 <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005170:	4618      	mov	r0, r3
 8005172:	f7fc fe4c 	bl	8001e0e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	2202      	movs	r2, #2
 800517a:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005188:	b29b      	uxth	r3, r3
 800518a:	1ad3      	subs	r3, r2, r3
 800518c:	b29b      	uxth	r3, r3
 800518e:	4619      	mov	r1, r3
 8005190:	6878      	ldr	r0, [r7, #4]
 8005192:	f000 f8d7 	bl	8005344 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005196:	e0b9      	b.n	800530c <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80051a4:	b29b      	uxth	r3, r3
 80051a6:	1ad3      	subs	r3, r2, r3
 80051a8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80051b2:	b29b      	uxth	r3, r3
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	f000 80ab 	beq.w	8005310 <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 80051ba:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80051be:	2b00      	cmp	r3, #0
 80051c0:	f000 80a6 	beq.w	8005310 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80051cc:	e853 3f00 	ldrex	r3, [r3]
 80051d0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80051d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80051d4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80051d8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	461a      	mov	r2, r3
 80051e2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80051e6:	647b      	str	r3, [r7, #68]	@ 0x44
 80051e8:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051ea:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80051ec:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80051ee:	e841 2300 	strex	r3, r2, [r1]
 80051f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80051f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d1e4      	bne.n	80051c4 <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	3308      	adds	r3, #8
 8005200:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005202:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005204:	e853 3f00 	ldrex	r3, [r3]
 8005208:	623b      	str	r3, [r7, #32]
   return(result);
 800520a:	6a3b      	ldr	r3, [r7, #32]
 800520c:	f023 0301 	bic.w	r3, r3, #1
 8005210:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	3308      	adds	r3, #8
 800521a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800521e:	633a      	str	r2, [r7, #48]	@ 0x30
 8005220:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005222:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005224:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005226:	e841 2300 	strex	r3, r2, [r1]
 800522a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800522c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800522e:	2b00      	cmp	r3, #0
 8005230:	d1e3      	bne.n	80051fa <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	2220      	movs	r2, #32
 8005236:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	2200      	movs	r2, #0
 800523e:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	2200      	movs	r2, #0
 8005244:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800524c:	693b      	ldr	r3, [r7, #16]
 800524e:	e853 3f00 	ldrex	r3, [r3]
 8005252:	60fb      	str	r3, [r7, #12]
   return(result);
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	f023 0310 	bic.w	r3, r3, #16
 800525a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	461a      	mov	r2, r3
 8005264:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8005268:	61fb      	str	r3, [r7, #28]
 800526a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800526c:	69b9      	ldr	r1, [r7, #24]
 800526e:	69fa      	ldr	r2, [r7, #28]
 8005270:	e841 2300 	strex	r3, r2, [r1]
 8005274:	617b      	str	r3, [r7, #20]
   return(result);
 8005276:	697b      	ldr	r3, [r7, #20]
 8005278:	2b00      	cmp	r3, #0
 800527a:	d1e4      	bne.n	8005246 <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	2202      	movs	r2, #2
 8005280:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005282:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005286:	4619      	mov	r1, r3
 8005288:	6878      	ldr	r0, [r7, #4]
 800528a:	f000 f85b 	bl	8005344 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800528e:	e03f      	b.n	8005310 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005290:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005294:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005298:	2b00      	cmp	r3, #0
 800529a:	d00e      	beq.n	80052ba <HAL_UART_IRQHandler+0x56a>
 800529c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80052a0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d008      	beq.n	80052ba <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80052b0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80052b2:	6878      	ldr	r0, [r7, #4]
 80052b4:	f000 fbe3 	bl	8005a7e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80052b8:	e02d      	b.n	8005316 <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80052ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80052be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d00e      	beq.n	80052e4 <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80052c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80052ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d008      	beq.n	80052e4 <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d01c      	beq.n	8005314 <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80052de:	6878      	ldr	r0, [r7, #4]
 80052e0:	4798      	blx	r3
    }
    return;
 80052e2:	e017      	b.n	8005314 <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80052e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80052e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d012      	beq.n	8005316 <HAL_UART_IRQHandler+0x5c6>
 80052f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80052f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d00c      	beq.n	8005316 <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 80052fc:	6878      	ldr	r0, [r7, #4]
 80052fe:	f000 fb94 	bl	8005a2a <UART_EndTransmit_IT>
    return;
 8005302:	e008      	b.n	8005316 <HAL_UART_IRQHandler+0x5c6>
      return;
 8005304:	bf00      	nop
 8005306:	e006      	b.n	8005316 <HAL_UART_IRQHandler+0x5c6>
    return;
 8005308:	bf00      	nop
 800530a:	e004      	b.n	8005316 <HAL_UART_IRQHandler+0x5c6>
      return;
 800530c:	bf00      	nop
 800530e:	e002      	b.n	8005316 <HAL_UART_IRQHandler+0x5c6>
      return;
 8005310:	bf00      	nop
 8005312:	e000      	b.n	8005316 <HAL_UART_IRQHandler+0x5c6>
    return;
 8005314:	bf00      	nop
  }

}
 8005316:	37e8      	adds	r7, #232	@ 0xe8
 8005318:	46bd      	mov	sp, r7
 800531a:	bd80      	pop	{r7, pc}

0800531c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800531c:	b480      	push	{r7}
 800531e:	b083      	sub	sp, #12
 8005320:	af00      	add	r7, sp, #0
 8005322:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005324:	bf00      	nop
 8005326:	370c      	adds	r7, #12
 8005328:	46bd      	mov	sp, r7
 800532a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532e:	4770      	bx	lr

08005330 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005330:	b480      	push	{r7}
 8005332:	b083      	sub	sp, #12
 8005334:	af00      	add	r7, sp, #0
 8005336:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005338:	bf00      	nop
 800533a:	370c      	adds	r7, #12
 800533c:	46bd      	mov	sp, r7
 800533e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005342:	4770      	bx	lr

08005344 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005344:	b480      	push	{r7}
 8005346:	b083      	sub	sp, #12
 8005348:	af00      	add	r7, sp, #0
 800534a:	6078      	str	r0, [r7, #4]
 800534c:	460b      	mov	r3, r1
 800534e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005350:	bf00      	nop
 8005352:	370c      	adds	r7, #12
 8005354:	46bd      	mov	sp, r7
 8005356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535a:	4770      	bx	lr

0800535c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800535c:	b580      	push	{r7, lr}
 800535e:	b088      	sub	sp, #32
 8005360:	af00      	add	r7, sp, #0
 8005362:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005364:	2300      	movs	r3, #0
 8005366:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	689a      	ldr	r2, [r3, #8]
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	691b      	ldr	r3, [r3, #16]
 8005370:	431a      	orrs	r2, r3
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	695b      	ldr	r3, [r3, #20]
 8005376:	431a      	orrs	r2, r3
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	69db      	ldr	r3, [r3, #28]
 800537c:	4313      	orrs	r3, r2
 800537e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	681a      	ldr	r2, [r3, #0]
 8005386:	4b8a      	ldr	r3, [pc, #552]	@ (80055b0 <UART_SetConfig+0x254>)
 8005388:	4013      	ands	r3, r2
 800538a:	687a      	ldr	r2, [r7, #4]
 800538c:	6812      	ldr	r2, [r2, #0]
 800538e:	6979      	ldr	r1, [r7, #20]
 8005390:	430b      	orrs	r3, r1
 8005392:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	685b      	ldr	r3, [r3, #4]
 800539a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	68da      	ldr	r2, [r3, #12]
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	430a      	orrs	r2, r1
 80053a8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	699b      	ldr	r3, [r3, #24]
 80053ae:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	6a1b      	ldr	r3, [r3, #32]
 80053b4:	697a      	ldr	r2, [r7, #20]
 80053b6:	4313      	orrs	r3, r2
 80053b8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	689b      	ldr	r3, [r3, #8]
 80053c0:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	697a      	ldr	r2, [r7, #20]
 80053ca:	430a      	orrs	r2, r1
 80053cc:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	4a78      	ldr	r2, [pc, #480]	@ (80055b4 <UART_SetConfig+0x258>)
 80053d4:	4293      	cmp	r3, r2
 80053d6:	d120      	bne.n	800541a <UART_SetConfig+0xbe>
 80053d8:	4b77      	ldr	r3, [pc, #476]	@ (80055b8 <UART_SetConfig+0x25c>)
 80053da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053dc:	f003 0303 	and.w	r3, r3, #3
 80053e0:	2b03      	cmp	r3, #3
 80053e2:	d817      	bhi.n	8005414 <UART_SetConfig+0xb8>
 80053e4:	a201      	add	r2, pc, #4	@ (adr r2, 80053ec <UART_SetConfig+0x90>)
 80053e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053ea:	bf00      	nop
 80053ec:	080053fd 	.word	0x080053fd
 80053f0:	08005409 	.word	0x08005409
 80053f4:	0800540f 	.word	0x0800540f
 80053f8:	08005403 	.word	0x08005403
 80053fc:	2300      	movs	r3, #0
 80053fe:	77fb      	strb	r3, [r7, #31]
 8005400:	e01d      	b.n	800543e <UART_SetConfig+0xe2>
 8005402:	2302      	movs	r3, #2
 8005404:	77fb      	strb	r3, [r7, #31]
 8005406:	e01a      	b.n	800543e <UART_SetConfig+0xe2>
 8005408:	2304      	movs	r3, #4
 800540a:	77fb      	strb	r3, [r7, #31]
 800540c:	e017      	b.n	800543e <UART_SetConfig+0xe2>
 800540e:	2308      	movs	r3, #8
 8005410:	77fb      	strb	r3, [r7, #31]
 8005412:	e014      	b.n	800543e <UART_SetConfig+0xe2>
 8005414:	2310      	movs	r3, #16
 8005416:	77fb      	strb	r3, [r7, #31]
 8005418:	e011      	b.n	800543e <UART_SetConfig+0xe2>
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	4a67      	ldr	r2, [pc, #412]	@ (80055bc <UART_SetConfig+0x260>)
 8005420:	4293      	cmp	r3, r2
 8005422:	d102      	bne.n	800542a <UART_SetConfig+0xce>
 8005424:	2300      	movs	r3, #0
 8005426:	77fb      	strb	r3, [r7, #31]
 8005428:	e009      	b.n	800543e <UART_SetConfig+0xe2>
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	4a64      	ldr	r2, [pc, #400]	@ (80055c0 <UART_SetConfig+0x264>)
 8005430:	4293      	cmp	r3, r2
 8005432:	d102      	bne.n	800543a <UART_SetConfig+0xde>
 8005434:	2300      	movs	r3, #0
 8005436:	77fb      	strb	r3, [r7, #31]
 8005438:	e001      	b.n	800543e <UART_SetConfig+0xe2>
 800543a:	2310      	movs	r3, #16
 800543c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	69db      	ldr	r3, [r3, #28]
 8005442:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005446:	d15a      	bne.n	80054fe <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 8005448:	7ffb      	ldrb	r3, [r7, #31]
 800544a:	2b08      	cmp	r3, #8
 800544c:	d827      	bhi.n	800549e <UART_SetConfig+0x142>
 800544e:	a201      	add	r2, pc, #4	@ (adr r2, 8005454 <UART_SetConfig+0xf8>)
 8005450:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005454:	08005479 	.word	0x08005479
 8005458:	08005481 	.word	0x08005481
 800545c:	08005489 	.word	0x08005489
 8005460:	0800549f 	.word	0x0800549f
 8005464:	0800548f 	.word	0x0800548f
 8005468:	0800549f 	.word	0x0800549f
 800546c:	0800549f 	.word	0x0800549f
 8005470:	0800549f 	.word	0x0800549f
 8005474:	08005497 	.word	0x08005497
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005478:	f7fe f902 	bl	8003680 <HAL_RCC_GetPCLK1Freq>
 800547c:	61b8      	str	r0, [r7, #24]
        break;
 800547e:	e013      	b.n	80054a8 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005480:	f7fe f920 	bl	80036c4 <HAL_RCC_GetPCLK2Freq>
 8005484:	61b8      	str	r0, [r7, #24]
        break;
 8005486:	e00f      	b.n	80054a8 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005488:	4b4e      	ldr	r3, [pc, #312]	@ (80055c4 <UART_SetConfig+0x268>)
 800548a:	61bb      	str	r3, [r7, #24]
        break;
 800548c:	e00c      	b.n	80054a8 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800548e:	f7fe f897 	bl	80035c0 <HAL_RCC_GetSysClockFreq>
 8005492:	61b8      	str	r0, [r7, #24]
        break;
 8005494:	e008      	b.n	80054a8 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005496:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800549a:	61bb      	str	r3, [r7, #24]
        break;
 800549c:	e004      	b.n	80054a8 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 800549e:	2300      	movs	r3, #0
 80054a0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80054a2:	2301      	movs	r3, #1
 80054a4:	77bb      	strb	r3, [r7, #30]
        break;
 80054a6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80054a8:	69bb      	ldr	r3, [r7, #24]
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d074      	beq.n	8005598 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80054ae:	69bb      	ldr	r3, [r7, #24]
 80054b0:	005a      	lsls	r2, r3, #1
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	685b      	ldr	r3, [r3, #4]
 80054b6:	085b      	lsrs	r3, r3, #1
 80054b8:	441a      	add	r2, r3
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	685b      	ldr	r3, [r3, #4]
 80054be:	fbb2 f3f3 	udiv	r3, r2, r3
 80054c2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80054c4:	693b      	ldr	r3, [r7, #16]
 80054c6:	2b0f      	cmp	r3, #15
 80054c8:	d916      	bls.n	80054f8 <UART_SetConfig+0x19c>
 80054ca:	693b      	ldr	r3, [r7, #16]
 80054cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80054d0:	d212      	bcs.n	80054f8 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80054d2:	693b      	ldr	r3, [r7, #16]
 80054d4:	b29b      	uxth	r3, r3
 80054d6:	f023 030f 	bic.w	r3, r3, #15
 80054da:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80054dc:	693b      	ldr	r3, [r7, #16]
 80054de:	085b      	lsrs	r3, r3, #1
 80054e0:	b29b      	uxth	r3, r3
 80054e2:	f003 0307 	and.w	r3, r3, #7
 80054e6:	b29a      	uxth	r2, r3
 80054e8:	89fb      	ldrh	r3, [r7, #14]
 80054ea:	4313      	orrs	r3, r2
 80054ec:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	89fa      	ldrh	r2, [r7, #14]
 80054f4:	60da      	str	r2, [r3, #12]
 80054f6:	e04f      	b.n	8005598 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 80054f8:	2301      	movs	r3, #1
 80054fa:	77bb      	strb	r3, [r7, #30]
 80054fc:	e04c      	b.n	8005598 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80054fe:	7ffb      	ldrb	r3, [r7, #31]
 8005500:	2b08      	cmp	r3, #8
 8005502:	d828      	bhi.n	8005556 <UART_SetConfig+0x1fa>
 8005504:	a201      	add	r2, pc, #4	@ (adr r2, 800550c <UART_SetConfig+0x1b0>)
 8005506:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800550a:	bf00      	nop
 800550c:	08005531 	.word	0x08005531
 8005510:	08005539 	.word	0x08005539
 8005514:	08005541 	.word	0x08005541
 8005518:	08005557 	.word	0x08005557
 800551c:	08005547 	.word	0x08005547
 8005520:	08005557 	.word	0x08005557
 8005524:	08005557 	.word	0x08005557
 8005528:	08005557 	.word	0x08005557
 800552c:	0800554f 	.word	0x0800554f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005530:	f7fe f8a6 	bl	8003680 <HAL_RCC_GetPCLK1Freq>
 8005534:	61b8      	str	r0, [r7, #24]
        break;
 8005536:	e013      	b.n	8005560 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005538:	f7fe f8c4 	bl	80036c4 <HAL_RCC_GetPCLK2Freq>
 800553c:	61b8      	str	r0, [r7, #24]
        break;
 800553e:	e00f      	b.n	8005560 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005540:	4b20      	ldr	r3, [pc, #128]	@ (80055c4 <UART_SetConfig+0x268>)
 8005542:	61bb      	str	r3, [r7, #24]
        break;
 8005544:	e00c      	b.n	8005560 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005546:	f7fe f83b 	bl	80035c0 <HAL_RCC_GetSysClockFreq>
 800554a:	61b8      	str	r0, [r7, #24]
        break;
 800554c:	e008      	b.n	8005560 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800554e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005552:	61bb      	str	r3, [r7, #24]
        break;
 8005554:	e004      	b.n	8005560 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8005556:	2300      	movs	r3, #0
 8005558:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800555a:	2301      	movs	r3, #1
 800555c:	77bb      	strb	r3, [r7, #30]
        break;
 800555e:	bf00      	nop
    }

    if (pclk != 0U)
 8005560:	69bb      	ldr	r3, [r7, #24]
 8005562:	2b00      	cmp	r3, #0
 8005564:	d018      	beq.n	8005598 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	685b      	ldr	r3, [r3, #4]
 800556a:	085a      	lsrs	r2, r3, #1
 800556c:	69bb      	ldr	r3, [r7, #24]
 800556e:	441a      	add	r2, r3
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	685b      	ldr	r3, [r3, #4]
 8005574:	fbb2 f3f3 	udiv	r3, r2, r3
 8005578:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800557a:	693b      	ldr	r3, [r7, #16]
 800557c:	2b0f      	cmp	r3, #15
 800557e:	d909      	bls.n	8005594 <UART_SetConfig+0x238>
 8005580:	693b      	ldr	r3, [r7, #16]
 8005582:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005586:	d205      	bcs.n	8005594 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005588:	693b      	ldr	r3, [r7, #16]
 800558a:	b29a      	uxth	r2, r3
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	60da      	str	r2, [r3, #12]
 8005592:	e001      	b.n	8005598 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8005594:	2301      	movs	r3, #1
 8005596:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	2200      	movs	r2, #0
 800559c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	2200      	movs	r2, #0
 80055a2:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80055a4:	7fbb      	ldrb	r3, [r7, #30]
}
 80055a6:	4618      	mov	r0, r3
 80055a8:	3720      	adds	r7, #32
 80055aa:	46bd      	mov	sp, r7
 80055ac:	bd80      	pop	{r7, pc}
 80055ae:	bf00      	nop
 80055b0:	efff69f3 	.word	0xefff69f3
 80055b4:	40013800 	.word	0x40013800
 80055b8:	40021000 	.word	0x40021000
 80055bc:	40004400 	.word	0x40004400
 80055c0:	40004800 	.word	0x40004800
 80055c4:	007a1200 	.word	0x007a1200

080055c8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80055c8:	b480      	push	{r7}
 80055ca:	b083      	sub	sp, #12
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055d4:	f003 0308 	and.w	r3, r3, #8
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d00a      	beq.n	80055f2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	685b      	ldr	r3, [r3, #4]
 80055e2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	430a      	orrs	r2, r1
 80055f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055f6:	f003 0301 	and.w	r3, r3, #1
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d00a      	beq.n	8005614 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	685b      	ldr	r3, [r3, #4]
 8005604:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	430a      	orrs	r2, r1
 8005612:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005618:	f003 0302 	and.w	r3, r3, #2
 800561c:	2b00      	cmp	r3, #0
 800561e:	d00a      	beq.n	8005636 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	685b      	ldr	r3, [r3, #4]
 8005626:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	430a      	orrs	r2, r1
 8005634:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800563a:	f003 0304 	and.w	r3, r3, #4
 800563e:	2b00      	cmp	r3, #0
 8005640:	d00a      	beq.n	8005658 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	685b      	ldr	r3, [r3, #4]
 8005648:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	430a      	orrs	r2, r1
 8005656:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800565c:	f003 0310 	and.w	r3, r3, #16
 8005660:	2b00      	cmp	r3, #0
 8005662:	d00a      	beq.n	800567a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	689b      	ldr	r3, [r3, #8]
 800566a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	430a      	orrs	r2, r1
 8005678:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800567e:	f003 0320 	and.w	r3, r3, #32
 8005682:	2b00      	cmp	r3, #0
 8005684:	d00a      	beq.n	800569c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	689b      	ldr	r3, [r3, #8]
 800568c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	430a      	orrs	r2, r1
 800569a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d01a      	beq.n	80056de <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	685b      	ldr	r3, [r3, #4]
 80056ae:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	430a      	orrs	r2, r1
 80056bc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056c2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80056c6:	d10a      	bne.n	80056de <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	685b      	ldr	r3, [r3, #4]
 80056ce:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	430a      	orrs	r2, r1
 80056dc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d00a      	beq.n	8005700 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	685b      	ldr	r3, [r3, #4]
 80056f0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	430a      	orrs	r2, r1
 80056fe:	605a      	str	r2, [r3, #4]
  }
}
 8005700:	bf00      	nop
 8005702:	370c      	adds	r7, #12
 8005704:	46bd      	mov	sp, r7
 8005706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800570a:	4770      	bx	lr

0800570c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800570c:	b580      	push	{r7, lr}
 800570e:	b098      	sub	sp, #96	@ 0x60
 8005710:	af02      	add	r7, sp, #8
 8005712:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	2200      	movs	r2, #0
 8005718:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800571c:	f7fc f95e 	bl	80019dc <HAL_GetTick>
 8005720:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	f003 0308 	and.w	r3, r3, #8
 800572c:	2b08      	cmp	r3, #8
 800572e:	d12e      	bne.n	800578e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005730:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005734:	9300      	str	r3, [sp, #0]
 8005736:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005738:	2200      	movs	r2, #0
 800573a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800573e:	6878      	ldr	r0, [r7, #4]
 8005740:	f000 f88c 	bl	800585c <UART_WaitOnFlagUntilTimeout>
 8005744:	4603      	mov	r3, r0
 8005746:	2b00      	cmp	r3, #0
 8005748:	d021      	beq.n	800578e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005750:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005752:	e853 3f00 	ldrex	r3, [r3]
 8005756:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005758:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800575a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800575e:	653b      	str	r3, [r7, #80]	@ 0x50
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	461a      	mov	r2, r3
 8005766:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005768:	647b      	str	r3, [r7, #68]	@ 0x44
 800576a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800576c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800576e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005770:	e841 2300 	strex	r3, r2, [r1]
 8005774:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005776:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005778:	2b00      	cmp	r3, #0
 800577a:	d1e6      	bne.n	800574a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	2220      	movs	r2, #32
 8005780:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	2200      	movs	r2, #0
 8005786:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800578a:	2303      	movs	r3, #3
 800578c:	e062      	b.n	8005854 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	f003 0304 	and.w	r3, r3, #4
 8005798:	2b04      	cmp	r3, #4
 800579a:	d149      	bne.n	8005830 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800579c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80057a0:	9300      	str	r3, [sp, #0]
 80057a2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80057a4:	2200      	movs	r2, #0
 80057a6:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80057aa:	6878      	ldr	r0, [r7, #4]
 80057ac:	f000 f856 	bl	800585c <UART_WaitOnFlagUntilTimeout>
 80057b0:	4603      	mov	r3, r0
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d03c      	beq.n	8005830 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057be:	e853 3f00 	ldrex	r3, [r3]
 80057c2:	623b      	str	r3, [r7, #32]
   return(result);
 80057c4:	6a3b      	ldr	r3, [r7, #32]
 80057c6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80057ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	461a      	mov	r2, r3
 80057d2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80057d4:	633b      	str	r3, [r7, #48]	@ 0x30
 80057d6:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057d8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80057da:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80057dc:	e841 2300 	strex	r3, r2, [r1]
 80057e0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80057e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d1e6      	bne.n	80057b6 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	3308      	adds	r3, #8
 80057ee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057f0:	693b      	ldr	r3, [r7, #16]
 80057f2:	e853 3f00 	ldrex	r3, [r3]
 80057f6:	60fb      	str	r3, [r7, #12]
   return(result);
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	f023 0301 	bic.w	r3, r3, #1
 80057fe:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	3308      	adds	r3, #8
 8005806:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005808:	61fa      	str	r2, [r7, #28]
 800580a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800580c:	69b9      	ldr	r1, [r7, #24]
 800580e:	69fa      	ldr	r2, [r7, #28]
 8005810:	e841 2300 	strex	r3, r2, [r1]
 8005814:	617b      	str	r3, [r7, #20]
   return(result);
 8005816:	697b      	ldr	r3, [r7, #20]
 8005818:	2b00      	cmp	r3, #0
 800581a:	d1e5      	bne.n	80057e8 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	2220      	movs	r2, #32
 8005820:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	2200      	movs	r2, #0
 8005828:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800582c:	2303      	movs	r3, #3
 800582e:	e011      	b.n	8005854 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	2220      	movs	r2, #32
 8005834:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	2220      	movs	r2, #32
 800583a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	2200      	movs	r2, #0
 8005842:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	2200      	movs	r2, #0
 8005848:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	2200      	movs	r2, #0
 800584e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8005852:	2300      	movs	r3, #0
}
 8005854:	4618      	mov	r0, r3
 8005856:	3758      	adds	r7, #88	@ 0x58
 8005858:	46bd      	mov	sp, r7
 800585a:	bd80      	pop	{r7, pc}

0800585c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800585c:	b580      	push	{r7, lr}
 800585e:	b084      	sub	sp, #16
 8005860:	af00      	add	r7, sp, #0
 8005862:	60f8      	str	r0, [r7, #12]
 8005864:	60b9      	str	r1, [r7, #8]
 8005866:	603b      	str	r3, [r7, #0]
 8005868:	4613      	mov	r3, r2
 800586a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800586c:	e04f      	b.n	800590e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800586e:	69bb      	ldr	r3, [r7, #24]
 8005870:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005874:	d04b      	beq.n	800590e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005876:	f7fc f8b1 	bl	80019dc <HAL_GetTick>
 800587a:	4602      	mov	r2, r0
 800587c:	683b      	ldr	r3, [r7, #0]
 800587e:	1ad3      	subs	r3, r2, r3
 8005880:	69ba      	ldr	r2, [r7, #24]
 8005882:	429a      	cmp	r2, r3
 8005884:	d302      	bcc.n	800588c <UART_WaitOnFlagUntilTimeout+0x30>
 8005886:	69bb      	ldr	r3, [r7, #24]
 8005888:	2b00      	cmp	r3, #0
 800588a:	d101      	bne.n	8005890 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800588c:	2303      	movs	r3, #3
 800588e:	e04e      	b.n	800592e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	f003 0304 	and.w	r3, r3, #4
 800589a:	2b00      	cmp	r3, #0
 800589c:	d037      	beq.n	800590e <UART_WaitOnFlagUntilTimeout+0xb2>
 800589e:	68bb      	ldr	r3, [r7, #8]
 80058a0:	2b80      	cmp	r3, #128	@ 0x80
 80058a2:	d034      	beq.n	800590e <UART_WaitOnFlagUntilTimeout+0xb2>
 80058a4:	68bb      	ldr	r3, [r7, #8]
 80058a6:	2b40      	cmp	r3, #64	@ 0x40
 80058a8:	d031      	beq.n	800590e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	69db      	ldr	r3, [r3, #28]
 80058b0:	f003 0308 	and.w	r3, r3, #8
 80058b4:	2b08      	cmp	r3, #8
 80058b6:	d110      	bne.n	80058da <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	2208      	movs	r2, #8
 80058be:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80058c0:	68f8      	ldr	r0, [r7, #12]
 80058c2:	f000 f838 	bl	8005936 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	2208      	movs	r2, #8
 80058ca:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	2200      	movs	r2, #0
 80058d2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80058d6:	2301      	movs	r3, #1
 80058d8:	e029      	b.n	800592e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	69db      	ldr	r3, [r3, #28]
 80058e0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80058e4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80058e8:	d111      	bne.n	800590e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80058f2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80058f4:	68f8      	ldr	r0, [r7, #12]
 80058f6:	f000 f81e 	bl	8005936 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	2220      	movs	r2, #32
 80058fe:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	2200      	movs	r2, #0
 8005906:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800590a:	2303      	movs	r3, #3
 800590c:	e00f      	b.n	800592e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	69da      	ldr	r2, [r3, #28]
 8005914:	68bb      	ldr	r3, [r7, #8]
 8005916:	4013      	ands	r3, r2
 8005918:	68ba      	ldr	r2, [r7, #8]
 800591a:	429a      	cmp	r2, r3
 800591c:	bf0c      	ite	eq
 800591e:	2301      	moveq	r3, #1
 8005920:	2300      	movne	r3, #0
 8005922:	b2db      	uxtb	r3, r3
 8005924:	461a      	mov	r2, r3
 8005926:	79fb      	ldrb	r3, [r7, #7]
 8005928:	429a      	cmp	r2, r3
 800592a:	d0a0      	beq.n	800586e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800592c:	2300      	movs	r3, #0
}
 800592e:	4618      	mov	r0, r3
 8005930:	3710      	adds	r7, #16
 8005932:	46bd      	mov	sp, r7
 8005934:	bd80      	pop	{r7, pc}

08005936 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005936:	b480      	push	{r7}
 8005938:	b095      	sub	sp, #84	@ 0x54
 800593a:	af00      	add	r7, sp, #0
 800593c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005944:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005946:	e853 3f00 	ldrex	r3, [r3]
 800594a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800594c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800594e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005952:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	461a      	mov	r2, r3
 800595a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800595c:	643b      	str	r3, [r7, #64]	@ 0x40
 800595e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005960:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005962:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005964:	e841 2300 	strex	r3, r2, [r1]
 8005968:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800596a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800596c:	2b00      	cmp	r3, #0
 800596e:	d1e6      	bne.n	800593e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	3308      	adds	r3, #8
 8005976:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005978:	6a3b      	ldr	r3, [r7, #32]
 800597a:	e853 3f00 	ldrex	r3, [r3]
 800597e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005980:	69fb      	ldr	r3, [r7, #28]
 8005982:	f023 0301 	bic.w	r3, r3, #1
 8005986:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	3308      	adds	r3, #8
 800598e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005990:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005992:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005994:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005996:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005998:	e841 2300 	strex	r3, r2, [r1]
 800599c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800599e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d1e5      	bne.n	8005970 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80059a8:	2b01      	cmp	r3, #1
 80059aa:	d118      	bne.n	80059de <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	e853 3f00 	ldrex	r3, [r3]
 80059b8:	60bb      	str	r3, [r7, #8]
   return(result);
 80059ba:	68bb      	ldr	r3, [r7, #8]
 80059bc:	f023 0310 	bic.w	r3, r3, #16
 80059c0:	647b      	str	r3, [r7, #68]	@ 0x44
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	461a      	mov	r2, r3
 80059c8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80059ca:	61bb      	str	r3, [r7, #24]
 80059cc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059ce:	6979      	ldr	r1, [r7, #20]
 80059d0:	69ba      	ldr	r2, [r7, #24]
 80059d2:	e841 2300 	strex	r3, r2, [r1]
 80059d6:	613b      	str	r3, [r7, #16]
   return(result);
 80059d8:	693b      	ldr	r3, [r7, #16]
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d1e6      	bne.n	80059ac <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	2220      	movs	r2, #32
 80059e2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	2200      	movs	r2, #0
 80059ea:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	2200      	movs	r2, #0
 80059f0:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80059f2:	bf00      	nop
 80059f4:	3754      	adds	r7, #84	@ 0x54
 80059f6:	46bd      	mov	sp, r7
 80059f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059fc:	4770      	bx	lr

080059fe <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80059fe:	b580      	push	{r7, lr}
 8005a00:	b084      	sub	sp, #16
 8005a02:	af00      	add	r7, sp, #0
 8005a04:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a0a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	2200      	movs	r2, #0
 8005a10:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	2200      	movs	r2, #0
 8005a18:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005a1c:	68f8      	ldr	r0, [r7, #12]
 8005a1e:	f7ff fc87 	bl	8005330 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005a22:	bf00      	nop
 8005a24:	3710      	adds	r7, #16
 8005a26:	46bd      	mov	sp, r7
 8005a28:	bd80      	pop	{r7, pc}

08005a2a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005a2a:	b580      	push	{r7, lr}
 8005a2c:	b088      	sub	sp, #32
 8005a2e:	af00      	add	r7, sp, #0
 8005a30:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	e853 3f00 	ldrex	r3, [r3]
 8005a3e:	60bb      	str	r3, [r7, #8]
   return(result);
 8005a40:	68bb      	ldr	r3, [r7, #8]
 8005a42:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005a46:	61fb      	str	r3, [r7, #28]
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	461a      	mov	r2, r3
 8005a4e:	69fb      	ldr	r3, [r7, #28]
 8005a50:	61bb      	str	r3, [r7, #24]
 8005a52:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a54:	6979      	ldr	r1, [r7, #20]
 8005a56:	69ba      	ldr	r2, [r7, #24]
 8005a58:	e841 2300 	strex	r3, r2, [r1]
 8005a5c:	613b      	str	r3, [r7, #16]
   return(result);
 8005a5e:	693b      	ldr	r3, [r7, #16]
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d1e6      	bne.n	8005a32 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	2220      	movs	r2, #32
 8005a68:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	2200      	movs	r2, #0
 8005a6e:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005a70:	6878      	ldr	r0, [r7, #4]
 8005a72:	f7ff fc53 	bl	800531c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005a76:	bf00      	nop
 8005a78:	3720      	adds	r7, #32
 8005a7a:	46bd      	mov	sp, r7
 8005a7c:	bd80      	pop	{r7, pc}

08005a7e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005a7e:	b480      	push	{r7}
 8005a80:	b083      	sub	sp, #12
 8005a82:	af00      	add	r7, sp, #0
 8005a84:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005a86:	bf00      	nop
 8005a88:	370c      	adds	r7, #12
 8005a8a:	46bd      	mov	sp, r7
 8005a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a90:	4770      	bx	lr
	...

08005a94 <siprintf>:
 8005a94:	b40e      	push	{r1, r2, r3}
 8005a96:	b500      	push	{lr}
 8005a98:	b09c      	sub	sp, #112	@ 0x70
 8005a9a:	ab1d      	add	r3, sp, #116	@ 0x74
 8005a9c:	9002      	str	r0, [sp, #8]
 8005a9e:	9006      	str	r0, [sp, #24]
 8005aa0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8005aa4:	4809      	ldr	r0, [pc, #36]	@ (8005acc <siprintf+0x38>)
 8005aa6:	9107      	str	r1, [sp, #28]
 8005aa8:	9104      	str	r1, [sp, #16]
 8005aaa:	4909      	ldr	r1, [pc, #36]	@ (8005ad0 <siprintf+0x3c>)
 8005aac:	f853 2b04 	ldr.w	r2, [r3], #4
 8005ab0:	9105      	str	r1, [sp, #20]
 8005ab2:	6800      	ldr	r0, [r0, #0]
 8005ab4:	9301      	str	r3, [sp, #4]
 8005ab6:	a902      	add	r1, sp, #8
 8005ab8:	f000 f9a4 	bl	8005e04 <_svfiprintf_r>
 8005abc:	9b02      	ldr	r3, [sp, #8]
 8005abe:	2200      	movs	r2, #0
 8005ac0:	701a      	strb	r2, [r3, #0]
 8005ac2:	b01c      	add	sp, #112	@ 0x70
 8005ac4:	f85d eb04 	ldr.w	lr, [sp], #4
 8005ac8:	b003      	add	sp, #12
 8005aca:	4770      	bx	lr
 8005acc:	2000000c 	.word	0x2000000c
 8005ad0:	ffff0208 	.word	0xffff0208

08005ad4 <memset>:
 8005ad4:	4402      	add	r2, r0
 8005ad6:	4603      	mov	r3, r0
 8005ad8:	4293      	cmp	r3, r2
 8005ada:	d100      	bne.n	8005ade <memset+0xa>
 8005adc:	4770      	bx	lr
 8005ade:	f803 1b01 	strb.w	r1, [r3], #1
 8005ae2:	e7f9      	b.n	8005ad8 <memset+0x4>

08005ae4 <strcat>:
 8005ae4:	b510      	push	{r4, lr}
 8005ae6:	4602      	mov	r2, r0
 8005ae8:	7814      	ldrb	r4, [r2, #0]
 8005aea:	4613      	mov	r3, r2
 8005aec:	3201      	adds	r2, #1
 8005aee:	2c00      	cmp	r4, #0
 8005af0:	d1fa      	bne.n	8005ae8 <strcat+0x4>
 8005af2:	3b01      	subs	r3, #1
 8005af4:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005af8:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005afc:	2a00      	cmp	r2, #0
 8005afe:	d1f9      	bne.n	8005af4 <strcat+0x10>
 8005b00:	bd10      	pop	{r4, pc}
	...

08005b04 <__errno>:
 8005b04:	4b01      	ldr	r3, [pc, #4]	@ (8005b0c <__errno+0x8>)
 8005b06:	6818      	ldr	r0, [r3, #0]
 8005b08:	4770      	bx	lr
 8005b0a:	bf00      	nop
 8005b0c:	2000000c 	.word	0x2000000c

08005b10 <__libc_init_array>:
 8005b10:	b570      	push	{r4, r5, r6, lr}
 8005b12:	4d0d      	ldr	r5, [pc, #52]	@ (8005b48 <__libc_init_array+0x38>)
 8005b14:	4c0d      	ldr	r4, [pc, #52]	@ (8005b4c <__libc_init_array+0x3c>)
 8005b16:	1b64      	subs	r4, r4, r5
 8005b18:	10a4      	asrs	r4, r4, #2
 8005b1a:	2600      	movs	r6, #0
 8005b1c:	42a6      	cmp	r6, r4
 8005b1e:	d109      	bne.n	8005b34 <__libc_init_array+0x24>
 8005b20:	4d0b      	ldr	r5, [pc, #44]	@ (8005b50 <__libc_init_array+0x40>)
 8005b22:	4c0c      	ldr	r4, [pc, #48]	@ (8005b54 <__libc_init_array+0x44>)
 8005b24:	f000 fc66 	bl	80063f4 <_init>
 8005b28:	1b64      	subs	r4, r4, r5
 8005b2a:	10a4      	asrs	r4, r4, #2
 8005b2c:	2600      	movs	r6, #0
 8005b2e:	42a6      	cmp	r6, r4
 8005b30:	d105      	bne.n	8005b3e <__libc_init_array+0x2e>
 8005b32:	bd70      	pop	{r4, r5, r6, pc}
 8005b34:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b38:	4798      	blx	r3
 8005b3a:	3601      	adds	r6, #1
 8005b3c:	e7ee      	b.n	8005b1c <__libc_init_array+0xc>
 8005b3e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b42:	4798      	blx	r3
 8005b44:	3601      	adds	r6, #1
 8005b46:	e7f2      	b.n	8005b2e <__libc_init_array+0x1e>
 8005b48:	08006e44 	.word	0x08006e44
 8005b4c:	08006e44 	.word	0x08006e44
 8005b50:	08006e44 	.word	0x08006e44
 8005b54:	08006e48 	.word	0x08006e48

08005b58 <__retarget_lock_acquire_recursive>:
 8005b58:	4770      	bx	lr

08005b5a <__retarget_lock_release_recursive>:
 8005b5a:	4770      	bx	lr

08005b5c <_free_r>:
 8005b5c:	b538      	push	{r3, r4, r5, lr}
 8005b5e:	4605      	mov	r5, r0
 8005b60:	2900      	cmp	r1, #0
 8005b62:	d041      	beq.n	8005be8 <_free_r+0x8c>
 8005b64:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005b68:	1f0c      	subs	r4, r1, #4
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	bfb8      	it	lt
 8005b6e:	18e4      	addlt	r4, r4, r3
 8005b70:	f000 f8e0 	bl	8005d34 <__malloc_lock>
 8005b74:	4a1d      	ldr	r2, [pc, #116]	@ (8005bec <_free_r+0x90>)
 8005b76:	6813      	ldr	r3, [r2, #0]
 8005b78:	b933      	cbnz	r3, 8005b88 <_free_r+0x2c>
 8005b7a:	6063      	str	r3, [r4, #4]
 8005b7c:	6014      	str	r4, [r2, #0]
 8005b7e:	4628      	mov	r0, r5
 8005b80:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005b84:	f000 b8dc 	b.w	8005d40 <__malloc_unlock>
 8005b88:	42a3      	cmp	r3, r4
 8005b8a:	d908      	bls.n	8005b9e <_free_r+0x42>
 8005b8c:	6820      	ldr	r0, [r4, #0]
 8005b8e:	1821      	adds	r1, r4, r0
 8005b90:	428b      	cmp	r3, r1
 8005b92:	bf01      	itttt	eq
 8005b94:	6819      	ldreq	r1, [r3, #0]
 8005b96:	685b      	ldreq	r3, [r3, #4]
 8005b98:	1809      	addeq	r1, r1, r0
 8005b9a:	6021      	streq	r1, [r4, #0]
 8005b9c:	e7ed      	b.n	8005b7a <_free_r+0x1e>
 8005b9e:	461a      	mov	r2, r3
 8005ba0:	685b      	ldr	r3, [r3, #4]
 8005ba2:	b10b      	cbz	r3, 8005ba8 <_free_r+0x4c>
 8005ba4:	42a3      	cmp	r3, r4
 8005ba6:	d9fa      	bls.n	8005b9e <_free_r+0x42>
 8005ba8:	6811      	ldr	r1, [r2, #0]
 8005baa:	1850      	adds	r0, r2, r1
 8005bac:	42a0      	cmp	r0, r4
 8005bae:	d10b      	bne.n	8005bc8 <_free_r+0x6c>
 8005bb0:	6820      	ldr	r0, [r4, #0]
 8005bb2:	4401      	add	r1, r0
 8005bb4:	1850      	adds	r0, r2, r1
 8005bb6:	4283      	cmp	r3, r0
 8005bb8:	6011      	str	r1, [r2, #0]
 8005bba:	d1e0      	bne.n	8005b7e <_free_r+0x22>
 8005bbc:	6818      	ldr	r0, [r3, #0]
 8005bbe:	685b      	ldr	r3, [r3, #4]
 8005bc0:	6053      	str	r3, [r2, #4]
 8005bc2:	4408      	add	r0, r1
 8005bc4:	6010      	str	r0, [r2, #0]
 8005bc6:	e7da      	b.n	8005b7e <_free_r+0x22>
 8005bc8:	d902      	bls.n	8005bd0 <_free_r+0x74>
 8005bca:	230c      	movs	r3, #12
 8005bcc:	602b      	str	r3, [r5, #0]
 8005bce:	e7d6      	b.n	8005b7e <_free_r+0x22>
 8005bd0:	6820      	ldr	r0, [r4, #0]
 8005bd2:	1821      	adds	r1, r4, r0
 8005bd4:	428b      	cmp	r3, r1
 8005bd6:	bf04      	itt	eq
 8005bd8:	6819      	ldreq	r1, [r3, #0]
 8005bda:	685b      	ldreq	r3, [r3, #4]
 8005bdc:	6063      	str	r3, [r4, #4]
 8005bde:	bf04      	itt	eq
 8005be0:	1809      	addeq	r1, r1, r0
 8005be2:	6021      	streq	r1, [r4, #0]
 8005be4:	6054      	str	r4, [r2, #4]
 8005be6:	e7ca      	b.n	8005b7e <_free_r+0x22>
 8005be8:	bd38      	pop	{r3, r4, r5, pc}
 8005bea:	bf00      	nop
 8005bec:	200004e4 	.word	0x200004e4

08005bf0 <sbrk_aligned>:
 8005bf0:	b570      	push	{r4, r5, r6, lr}
 8005bf2:	4e0f      	ldr	r6, [pc, #60]	@ (8005c30 <sbrk_aligned+0x40>)
 8005bf4:	460c      	mov	r4, r1
 8005bf6:	6831      	ldr	r1, [r6, #0]
 8005bf8:	4605      	mov	r5, r0
 8005bfa:	b911      	cbnz	r1, 8005c02 <sbrk_aligned+0x12>
 8005bfc:	f000 fba6 	bl	800634c <_sbrk_r>
 8005c00:	6030      	str	r0, [r6, #0]
 8005c02:	4621      	mov	r1, r4
 8005c04:	4628      	mov	r0, r5
 8005c06:	f000 fba1 	bl	800634c <_sbrk_r>
 8005c0a:	1c43      	adds	r3, r0, #1
 8005c0c:	d103      	bne.n	8005c16 <sbrk_aligned+0x26>
 8005c0e:	f04f 34ff 	mov.w	r4, #4294967295
 8005c12:	4620      	mov	r0, r4
 8005c14:	bd70      	pop	{r4, r5, r6, pc}
 8005c16:	1cc4      	adds	r4, r0, #3
 8005c18:	f024 0403 	bic.w	r4, r4, #3
 8005c1c:	42a0      	cmp	r0, r4
 8005c1e:	d0f8      	beq.n	8005c12 <sbrk_aligned+0x22>
 8005c20:	1a21      	subs	r1, r4, r0
 8005c22:	4628      	mov	r0, r5
 8005c24:	f000 fb92 	bl	800634c <_sbrk_r>
 8005c28:	3001      	adds	r0, #1
 8005c2a:	d1f2      	bne.n	8005c12 <sbrk_aligned+0x22>
 8005c2c:	e7ef      	b.n	8005c0e <sbrk_aligned+0x1e>
 8005c2e:	bf00      	nop
 8005c30:	200004e0 	.word	0x200004e0

08005c34 <_malloc_r>:
 8005c34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005c38:	1ccd      	adds	r5, r1, #3
 8005c3a:	f025 0503 	bic.w	r5, r5, #3
 8005c3e:	3508      	adds	r5, #8
 8005c40:	2d0c      	cmp	r5, #12
 8005c42:	bf38      	it	cc
 8005c44:	250c      	movcc	r5, #12
 8005c46:	2d00      	cmp	r5, #0
 8005c48:	4606      	mov	r6, r0
 8005c4a:	db01      	blt.n	8005c50 <_malloc_r+0x1c>
 8005c4c:	42a9      	cmp	r1, r5
 8005c4e:	d904      	bls.n	8005c5a <_malloc_r+0x26>
 8005c50:	230c      	movs	r3, #12
 8005c52:	6033      	str	r3, [r6, #0]
 8005c54:	2000      	movs	r0, #0
 8005c56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005c5a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005d30 <_malloc_r+0xfc>
 8005c5e:	f000 f869 	bl	8005d34 <__malloc_lock>
 8005c62:	f8d8 3000 	ldr.w	r3, [r8]
 8005c66:	461c      	mov	r4, r3
 8005c68:	bb44      	cbnz	r4, 8005cbc <_malloc_r+0x88>
 8005c6a:	4629      	mov	r1, r5
 8005c6c:	4630      	mov	r0, r6
 8005c6e:	f7ff ffbf 	bl	8005bf0 <sbrk_aligned>
 8005c72:	1c43      	adds	r3, r0, #1
 8005c74:	4604      	mov	r4, r0
 8005c76:	d158      	bne.n	8005d2a <_malloc_r+0xf6>
 8005c78:	f8d8 4000 	ldr.w	r4, [r8]
 8005c7c:	4627      	mov	r7, r4
 8005c7e:	2f00      	cmp	r7, #0
 8005c80:	d143      	bne.n	8005d0a <_malloc_r+0xd6>
 8005c82:	2c00      	cmp	r4, #0
 8005c84:	d04b      	beq.n	8005d1e <_malloc_r+0xea>
 8005c86:	6823      	ldr	r3, [r4, #0]
 8005c88:	4639      	mov	r1, r7
 8005c8a:	4630      	mov	r0, r6
 8005c8c:	eb04 0903 	add.w	r9, r4, r3
 8005c90:	f000 fb5c 	bl	800634c <_sbrk_r>
 8005c94:	4581      	cmp	r9, r0
 8005c96:	d142      	bne.n	8005d1e <_malloc_r+0xea>
 8005c98:	6821      	ldr	r1, [r4, #0]
 8005c9a:	1a6d      	subs	r5, r5, r1
 8005c9c:	4629      	mov	r1, r5
 8005c9e:	4630      	mov	r0, r6
 8005ca0:	f7ff ffa6 	bl	8005bf0 <sbrk_aligned>
 8005ca4:	3001      	adds	r0, #1
 8005ca6:	d03a      	beq.n	8005d1e <_malloc_r+0xea>
 8005ca8:	6823      	ldr	r3, [r4, #0]
 8005caa:	442b      	add	r3, r5
 8005cac:	6023      	str	r3, [r4, #0]
 8005cae:	f8d8 3000 	ldr.w	r3, [r8]
 8005cb2:	685a      	ldr	r2, [r3, #4]
 8005cb4:	bb62      	cbnz	r2, 8005d10 <_malloc_r+0xdc>
 8005cb6:	f8c8 7000 	str.w	r7, [r8]
 8005cba:	e00f      	b.n	8005cdc <_malloc_r+0xa8>
 8005cbc:	6822      	ldr	r2, [r4, #0]
 8005cbe:	1b52      	subs	r2, r2, r5
 8005cc0:	d420      	bmi.n	8005d04 <_malloc_r+0xd0>
 8005cc2:	2a0b      	cmp	r2, #11
 8005cc4:	d917      	bls.n	8005cf6 <_malloc_r+0xc2>
 8005cc6:	1961      	adds	r1, r4, r5
 8005cc8:	42a3      	cmp	r3, r4
 8005cca:	6025      	str	r5, [r4, #0]
 8005ccc:	bf18      	it	ne
 8005cce:	6059      	strne	r1, [r3, #4]
 8005cd0:	6863      	ldr	r3, [r4, #4]
 8005cd2:	bf08      	it	eq
 8005cd4:	f8c8 1000 	streq.w	r1, [r8]
 8005cd8:	5162      	str	r2, [r4, r5]
 8005cda:	604b      	str	r3, [r1, #4]
 8005cdc:	4630      	mov	r0, r6
 8005cde:	f000 f82f 	bl	8005d40 <__malloc_unlock>
 8005ce2:	f104 000b 	add.w	r0, r4, #11
 8005ce6:	1d23      	adds	r3, r4, #4
 8005ce8:	f020 0007 	bic.w	r0, r0, #7
 8005cec:	1ac2      	subs	r2, r0, r3
 8005cee:	bf1c      	itt	ne
 8005cf0:	1a1b      	subne	r3, r3, r0
 8005cf2:	50a3      	strne	r3, [r4, r2]
 8005cf4:	e7af      	b.n	8005c56 <_malloc_r+0x22>
 8005cf6:	6862      	ldr	r2, [r4, #4]
 8005cf8:	42a3      	cmp	r3, r4
 8005cfa:	bf0c      	ite	eq
 8005cfc:	f8c8 2000 	streq.w	r2, [r8]
 8005d00:	605a      	strne	r2, [r3, #4]
 8005d02:	e7eb      	b.n	8005cdc <_malloc_r+0xa8>
 8005d04:	4623      	mov	r3, r4
 8005d06:	6864      	ldr	r4, [r4, #4]
 8005d08:	e7ae      	b.n	8005c68 <_malloc_r+0x34>
 8005d0a:	463c      	mov	r4, r7
 8005d0c:	687f      	ldr	r7, [r7, #4]
 8005d0e:	e7b6      	b.n	8005c7e <_malloc_r+0x4a>
 8005d10:	461a      	mov	r2, r3
 8005d12:	685b      	ldr	r3, [r3, #4]
 8005d14:	42a3      	cmp	r3, r4
 8005d16:	d1fb      	bne.n	8005d10 <_malloc_r+0xdc>
 8005d18:	2300      	movs	r3, #0
 8005d1a:	6053      	str	r3, [r2, #4]
 8005d1c:	e7de      	b.n	8005cdc <_malloc_r+0xa8>
 8005d1e:	230c      	movs	r3, #12
 8005d20:	6033      	str	r3, [r6, #0]
 8005d22:	4630      	mov	r0, r6
 8005d24:	f000 f80c 	bl	8005d40 <__malloc_unlock>
 8005d28:	e794      	b.n	8005c54 <_malloc_r+0x20>
 8005d2a:	6005      	str	r5, [r0, #0]
 8005d2c:	e7d6      	b.n	8005cdc <_malloc_r+0xa8>
 8005d2e:	bf00      	nop
 8005d30:	200004e4 	.word	0x200004e4

08005d34 <__malloc_lock>:
 8005d34:	4801      	ldr	r0, [pc, #4]	@ (8005d3c <__malloc_lock+0x8>)
 8005d36:	f7ff bf0f 	b.w	8005b58 <__retarget_lock_acquire_recursive>
 8005d3a:	bf00      	nop
 8005d3c:	200004dc 	.word	0x200004dc

08005d40 <__malloc_unlock>:
 8005d40:	4801      	ldr	r0, [pc, #4]	@ (8005d48 <__malloc_unlock+0x8>)
 8005d42:	f7ff bf0a 	b.w	8005b5a <__retarget_lock_release_recursive>
 8005d46:	bf00      	nop
 8005d48:	200004dc 	.word	0x200004dc

08005d4c <__ssputs_r>:
 8005d4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005d50:	688e      	ldr	r6, [r1, #8]
 8005d52:	461f      	mov	r7, r3
 8005d54:	42be      	cmp	r6, r7
 8005d56:	680b      	ldr	r3, [r1, #0]
 8005d58:	4682      	mov	sl, r0
 8005d5a:	460c      	mov	r4, r1
 8005d5c:	4690      	mov	r8, r2
 8005d5e:	d82d      	bhi.n	8005dbc <__ssputs_r+0x70>
 8005d60:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005d64:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8005d68:	d026      	beq.n	8005db8 <__ssputs_r+0x6c>
 8005d6a:	6965      	ldr	r5, [r4, #20]
 8005d6c:	6909      	ldr	r1, [r1, #16]
 8005d6e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005d72:	eba3 0901 	sub.w	r9, r3, r1
 8005d76:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005d7a:	1c7b      	adds	r3, r7, #1
 8005d7c:	444b      	add	r3, r9
 8005d7e:	106d      	asrs	r5, r5, #1
 8005d80:	429d      	cmp	r5, r3
 8005d82:	bf38      	it	cc
 8005d84:	461d      	movcc	r5, r3
 8005d86:	0553      	lsls	r3, r2, #21
 8005d88:	d527      	bpl.n	8005dda <__ssputs_r+0x8e>
 8005d8a:	4629      	mov	r1, r5
 8005d8c:	f7ff ff52 	bl	8005c34 <_malloc_r>
 8005d90:	4606      	mov	r6, r0
 8005d92:	b360      	cbz	r0, 8005dee <__ssputs_r+0xa2>
 8005d94:	6921      	ldr	r1, [r4, #16]
 8005d96:	464a      	mov	r2, r9
 8005d98:	f000 fae8 	bl	800636c <memcpy>
 8005d9c:	89a3      	ldrh	r3, [r4, #12]
 8005d9e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8005da2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005da6:	81a3      	strh	r3, [r4, #12]
 8005da8:	6126      	str	r6, [r4, #16]
 8005daa:	6165      	str	r5, [r4, #20]
 8005dac:	444e      	add	r6, r9
 8005dae:	eba5 0509 	sub.w	r5, r5, r9
 8005db2:	6026      	str	r6, [r4, #0]
 8005db4:	60a5      	str	r5, [r4, #8]
 8005db6:	463e      	mov	r6, r7
 8005db8:	42be      	cmp	r6, r7
 8005dba:	d900      	bls.n	8005dbe <__ssputs_r+0x72>
 8005dbc:	463e      	mov	r6, r7
 8005dbe:	6820      	ldr	r0, [r4, #0]
 8005dc0:	4632      	mov	r2, r6
 8005dc2:	4641      	mov	r1, r8
 8005dc4:	f000 faa8 	bl	8006318 <memmove>
 8005dc8:	68a3      	ldr	r3, [r4, #8]
 8005dca:	1b9b      	subs	r3, r3, r6
 8005dcc:	60a3      	str	r3, [r4, #8]
 8005dce:	6823      	ldr	r3, [r4, #0]
 8005dd0:	4433      	add	r3, r6
 8005dd2:	6023      	str	r3, [r4, #0]
 8005dd4:	2000      	movs	r0, #0
 8005dd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005dda:	462a      	mov	r2, r5
 8005ddc:	f000 fad4 	bl	8006388 <_realloc_r>
 8005de0:	4606      	mov	r6, r0
 8005de2:	2800      	cmp	r0, #0
 8005de4:	d1e0      	bne.n	8005da8 <__ssputs_r+0x5c>
 8005de6:	6921      	ldr	r1, [r4, #16]
 8005de8:	4650      	mov	r0, sl
 8005dea:	f7ff feb7 	bl	8005b5c <_free_r>
 8005dee:	230c      	movs	r3, #12
 8005df0:	f8ca 3000 	str.w	r3, [sl]
 8005df4:	89a3      	ldrh	r3, [r4, #12]
 8005df6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005dfa:	81a3      	strh	r3, [r4, #12]
 8005dfc:	f04f 30ff 	mov.w	r0, #4294967295
 8005e00:	e7e9      	b.n	8005dd6 <__ssputs_r+0x8a>
	...

08005e04 <_svfiprintf_r>:
 8005e04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e08:	4698      	mov	r8, r3
 8005e0a:	898b      	ldrh	r3, [r1, #12]
 8005e0c:	061b      	lsls	r3, r3, #24
 8005e0e:	b09d      	sub	sp, #116	@ 0x74
 8005e10:	4607      	mov	r7, r0
 8005e12:	460d      	mov	r5, r1
 8005e14:	4614      	mov	r4, r2
 8005e16:	d510      	bpl.n	8005e3a <_svfiprintf_r+0x36>
 8005e18:	690b      	ldr	r3, [r1, #16]
 8005e1a:	b973      	cbnz	r3, 8005e3a <_svfiprintf_r+0x36>
 8005e1c:	2140      	movs	r1, #64	@ 0x40
 8005e1e:	f7ff ff09 	bl	8005c34 <_malloc_r>
 8005e22:	6028      	str	r0, [r5, #0]
 8005e24:	6128      	str	r0, [r5, #16]
 8005e26:	b930      	cbnz	r0, 8005e36 <_svfiprintf_r+0x32>
 8005e28:	230c      	movs	r3, #12
 8005e2a:	603b      	str	r3, [r7, #0]
 8005e2c:	f04f 30ff 	mov.w	r0, #4294967295
 8005e30:	b01d      	add	sp, #116	@ 0x74
 8005e32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e36:	2340      	movs	r3, #64	@ 0x40
 8005e38:	616b      	str	r3, [r5, #20]
 8005e3a:	2300      	movs	r3, #0
 8005e3c:	9309      	str	r3, [sp, #36]	@ 0x24
 8005e3e:	2320      	movs	r3, #32
 8005e40:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005e44:	f8cd 800c 	str.w	r8, [sp, #12]
 8005e48:	2330      	movs	r3, #48	@ 0x30
 8005e4a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8005fe8 <_svfiprintf_r+0x1e4>
 8005e4e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005e52:	f04f 0901 	mov.w	r9, #1
 8005e56:	4623      	mov	r3, r4
 8005e58:	469a      	mov	sl, r3
 8005e5a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005e5e:	b10a      	cbz	r2, 8005e64 <_svfiprintf_r+0x60>
 8005e60:	2a25      	cmp	r2, #37	@ 0x25
 8005e62:	d1f9      	bne.n	8005e58 <_svfiprintf_r+0x54>
 8005e64:	ebba 0b04 	subs.w	fp, sl, r4
 8005e68:	d00b      	beq.n	8005e82 <_svfiprintf_r+0x7e>
 8005e6a:	465b      	mov	r3, fp
 8005e6c:	4622      	mov	r2, r4
 8005e6e:	4629      	mov	r1, r5
 8005e70:	4638      	mov	r0, r7
 8005e72:	f7ff ff6b 	bl	8005d4c <__ssputs_r>
 8005e76:	3001      	adds	r0, #1
 8005e78:	f000 80a7 	beq.w	8005fca <_svfiprintf_r+0x1c6>
 8005e7c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005e7e:	445a      	add	r2, fp
 8005e80:	9209      	str	r2, [sp, #36]	@ 0x24
 8005e82:	f89a 3000 	ldrb.w	r3, [sl]
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	f000 809f 	beq.w	8005fca <_svfiprintf_r+0x1c6>
 8005e8c:	2300      	movs	r3, #0
 8005e8e:	f04f 32ff 	mov.w	r2, #4294967295
 8005e92:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005e96:	f10a 0a01 	add.w	sl, sl, #1
 8005e9a:	9304      	str	r3, [sp, #16]
 8005e9c:	9307      	str	r3, [sp, #28]
 8005e9e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005ea2:	931a      	str	r3, [sp, #104]	@ 0x68
 8005ea4:	4654      	mov	r4, sl
 8005ea6:	2205      	movs	r2, #5
 8005ea8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005eac:	484e      	ldr	r0, [pc, #312]	@ (8005fe8 <_svfiprintf_r+0x1e4>)
 8005eae:	f7fa f997 	bl	80001e0 <memchr>
 8005eb2:	9a04      	ldr	r2, [sp, #16]
 8005eb4:	b9d8      	cbnz	r0, 8005eee <_svfiprintf_r+0xea>
 8005eb6:	06d0      	lsls	r0, r2, #27
 8005eb8:	bf44      	itt	mi
 8005eba:	2320      	movmi	r3, #32
 8005ebc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005ec0:	0711      	lsls	r1, r2, #28
 8005ec2:	bf44      	itt	mi
 8005ec4:	232b      	movmi	r3, #43	@ 0x2b
 8005ec6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005eca:	f89a 3000 	ldrb.w	r3, [sl]
 8005ece:	2b2a      	cmp	r3, #42	@ 0x2a
 8005ed0:	d015      	beq.n	8005efe <_svfiprintf_r+0xfa>
 8005ed2:	9a07      	ldr	r2, [sp, #28]
 8005ed4:	4654      	mov	r4, sl
 8005ed6:	2000      	movs	r0, #0
 8005ed8:	f04f 0c0a 	mov.w	ip, #10
 8005edc:	4621      	mov	r1, r4
 8005ede:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005ee2:	3b30      	subs	r3, #48	@ 0x30
 8005ee4:	2b09      	cmp	r3, #9
 8005ee6:	d94b      	bls.n	8005f80 <_svfiprintf_r+0x17c>
 8005ee8:	b1b0      	cbz	r0, 8005f18 <_svfiprintf_r+0x114>
 8005eea:	9207      	str	r2, [sp, #28]
 8005eec:	e014      	b.n	8005f18 <_svfiprintf_r+0x114>
 8005eee:	eba0 0308 	sub.w	r3, r0, r8
 8005ef2:	fa09 f303 	lsl.w	r3, r9, r3
 8005ef6:	4313      	orrs	r3, r2
 8005ef8:	9304      	str	r3, [sp, #16]
 8005efa:	46a2      	mov	sl, r4
 8005efc:	e7d2      	b.n	8005ea4 <_svfiprintf_r+0xa0>
 8005efe:	9b03      	ldr	r3, [sp, #12]
 8005f00:	1d19      	adds	r1, r3, #4
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	9103      	str	r1, [sp, #12]
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	bfbb      	ittet	lt
 8005f0a:	425b      	neglt	r3, r3
 8005f0c:	f042 0202 	orrlt.w	r2, r2, #2
 8005f10:	9307      	strge	r3, [sp, #28]
 8005f12:	9307      	strlt	r3, [sp, #28]
 8005f14:	bfb8      	it	lt
 8005f16:	9204      	strlt	r2, [sp, #16]
 8005f18:	7823      	ldrb	r3, [r4, #0]
 8005f1a:	2b2e      	cmp	r3, #46	@ 0x2e
 8005f1c:	d10a      	bne.n	8005f34 <_svfiprintf_r+0x130>
 8005f1e:	7863      	ldrb	r3, [r4, #1]
 8005f20:	2b2a      	cmp	r3, #42	@ 0x2a
 8005f22:	d132      	bne.n	8005f8a <_svfiprintf_r+0x186>
 8005f24:	9b03      	ldr	r3, [sp, #12]
 8005f26:	1d1a      	adds	r2, r3, #4
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	9203      	str	r2, [sp, #12]
 8005f2c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005f30:	3402      	adds	r4, #2
 8005f32:	9305      	str	r3, [sp, #20]
 8005f34:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8005ff8 <_svfiprintf_r+0x1f4>
 8005f38:	7821      	ldrb	r1, [r4, #0]
 8005f3a:	2203      	movs	r2, #3
 8005f3c:	4650      	mov	r0, sl
 8005f3e:	f7fa f94f 	bl	80001e0 <memchr>
 8005f42:	b138      	cbz	r0, 8005f54 <_svfiprintf_r+0x150>
 8005f44:	9b04      	ldr	r3, [sp, #16]
 8005f46:	eba0 000a 	sub.w	r0, r0, sl
 8005f4a:	2240      	movs	r2, #64	@ 0x40
 8005f4c:	4082      	lsls	r2, r0
 8005f4e:	4313      	orrs	r3, r2
 8005f50:	3401      	adds	r4, #1
 8005f52:	9304      	str	r3, [sp, #16]
 8005f54:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005f58:	4824      	ldr	r0, [pc, #144]	@ (8005fec <_svfiprintf_r+0x1e8>)
 8005f5a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005f5e:	2206      	movs	r2, #6
 8005f60:	f7fa f93e 	bl	80001e0 <memchr>
 8005f64:	2800      	cmp	r0, #0
 8005f66:	d036      	beq.n	8005fd6 <_svfiprintf_r+0x1d2>
 8005f68:	4b21      	ldr	r3, [pc, #132]	@ (8005ff0 <_svfiprintf_r+0x1ec>)
 8005f6a:	bb1b      	cbnz	r3, 8005fb4 <_svfiprintf_r+0x1b0>
 8005f6c:	9b03      	ldr	r3, [sp, #12]
 8005f6e:	3307      	adds	r3, #7
 8005f70:	f023 0307 	bic.w	r3, r3, #7
 8005f74:	3308      	adds	r3, #8
 8005f76:	9303      	str	r3, [sp, #12]
 8005f78:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005f7a:	4433      	add	r3, r6
 8005f7c:	9309      	str	r3, [sp, #36]	@ 0x24
 8005f7e:	e76a      	b.n	8005e56 <_svfiprintf_r+0x52>
 8005f80:	fb0c 3202 	mla	r2, ip, r2, r3
 8005f84:	460c      	mov	r4, r1
 8005f86:	2001      	movs	r0, #1
 8005f88:	e7a8      	b.n	8005edc <_svfiprintf_r+0xd8>
 8005f8a:	2300      	movs	r3, #0
 8005f8c:	3401      	adds	r4, #1
 8005f8e:	9305      	str	r3, [sp, #20]
 8005f90:	4619      	mov	r1, r3
 8005f92:	f04f 0c0a 	mov.w	ip, #10
 8005f96:	4620      	mov	r0, r4
 8005f98:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005f9c:	3a30      	subs	r2, #48	@ 0x30
 8005f9e:	2a09      	cmp	r2, #9
 8005fa0:	d903      	bls.n	8005faa <_svfiprintf_r+0x1a6>
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d0c6      	beq.n	8005f34 <_svfiprintf_r+0x130>
 8005fa6:	9105      	str	r1, [sp, #20]
 8005fa8:	e7c4      	b.n	8005f34 <_svfiprintf_r+0x130>
 8005faa:	fb0c 2101 	mla	r1, ip, r1, r2
 8005fae:	4604      	mov	r4, r0
 8005fb0:	2301      	movs	r3, #1
 8005fb2:	e7f0      	b.n	8005f96 <_svfiprintf_r+0x192>
 8005fb4:	ab03      	add	r3, sp, #12
 8005fb6:	9300      	str	r3, [sp, #0]
 8005fb8:	462a      	mov	r2, r5
 8005fba:	4b0e      	ldr	r3, [pc, #56]	@ (8005ff4 <_svfiprintf_r+0x1f0>)
 8005fbc:	a904      	add	r1, sp, #16
 8005fbe:	4638      	mov	r0, r7
 8005fc0:	f3af 8000 	nop.w
 8005fc4:	1c42      	adds	r2, r0, #1
 8005fc6:	4606      	mov	r6, r0
 8005fc8:	d1d6      	bne.n	8005f78 <_svfiprintf_r+0x174>
 8005fca:	89ab      	ldrh	r3, [r5, #12]
 8005fcc:	065b      	lsls	r3, r3, #25
 8005fce:	f53f af2d 	bmi.w	8005e2c <_svfiprintf_r+0x28>
 8005fd2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005fd4:	e72c      	b.n	8005e30 <_svfiprintf_r+0x2c>
 8005fd6:	ab03      	add	r3, sp, #12
 8005fd8:	9300      	str	r3, [sp, #0]
 8005fda:	462a      	mov	r2, r5
 8005fdc:	4b05      	ldr	r3, [pc, #20]	@ (8005ff4 <_svfiprintf_r+0x1f0>)
 8005fde:	a904      	add	r1, sp, #16
 8005fe0:	4638      	mov	r0, r7
 8005fe2:	f000 f879 	bl	80060d8 <_printf_i>
 8005fe6:	e7ed      	b.n	8005fc4 <_svfiprintf_r+0x1c0>
 8005fe8:	08006e08 	.word	0x08006e08
 8005fec:	08006e12 	.word	0x08006e12
 8005ff0:	00000000 	.word	0x00000000
 8005ff4:	08005d4d 	.word	0x08005d4d
 8005ff8:	08006e0e 	.word	0x08006e0e

08005ffc <_printf_common>:
 8005ffc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006000:	4616      	mov	r6, r2
 8006002:	4698      	mov	r8, r3
 8006004:	688a      	ldr	r2, [r1, #8]
 8006006:	690b      	ldr	r3, [r1, #16]
 8006008:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800600c:	4293      	cmp	r3, r2
 800600e:	bfb8      	it	lt
 8006010:	4613      	movlt	r3, r2
 8006012:	6033      	str	r3, [r6, #0]
 8006014:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006018:	4607      	mov	r7, r0
 800601a:	460c      	mov	r4, r1
 800601c:	b10a      	cbz	r2, 8006022 <_printf_common+0x26>
 800601e:	3301      	adds	r3, #1
 8006020:	6033      	str	r3, [r6, #0]
 8006022:	6823      	ldr	r3, [r4, #0]
 8006024:	0699      	lsls	r1, r3, #26
 8006026:	bf42      	ittt	mi
 8006028:	6833      	ldrmi	r3, [r6, #0]
 800602a:	3302      	addmi	r3, #2
 800602c:	6033      	strmi	r3, [r6, #0]
 800602e:	6825      	ldr	r5, [r4, #0]
 8006030:	f015 0506 	ands.w	r5, r5, #6
 8006034:	d106      	bne.n	8006044 <_printf_common+0x48>
 8006036:	f104 0a19 	add.w	sl, r4, #25
 800603a:	68e3      	ldr	r3, [r4, #12]
 800603c:	6832      	ldr	r2, [r6, #0]
 800603e:	1a9b      	subs	r3, r3, r2
 8006040:	42ab      	cmp	r3, r5
 8006042:	dc26      	bgt.n	8006092 <_printf_common+0x96>
 8006044:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006048:	6822      	ldr	r2, [r4, #0]
 800604a:	3b00      	subs	r3, #0
 800604c:	bf18      	it	ne
 800604e:	2301      	movne	r3, #1
 8006050:	0692      	lsls	r2, r2, #26
 8006052:	d42b      	bmi.n	80060ac <_printf_common+0xb0>
 8006054:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006058:	4641      	mov	r1, r8
 800605a:	4638      	mov	r0, r7
 800605c:	47c8      	blx	r9
 800605e:	3001      	adds	r0, #1
 8006060:	d01e      	beq.n	80060a0 <_printf_common+0xa4>
 8006062:	6823      	ldr	r3, [r4, #0]
 8006064:	6922      	ldr	r2, [r4, #16]
 8006066:	f003 0306 	and.w	r3, r3, #6
 800606a:	2b04      	cmp	r3, #4
 800606c:	bf02      	ittt	eq
 800606e:	68e5      	ldreq	r5, [r4, #12]
 8006070:	6833      	ldreq	r3, [r6, #0]
 8006072:	1aed      	subeq	r5, r5, r3
 8006074:	68a3      	ldr	r3, [r4, #8]
 8006076:	bf0c      	ite	eq
 8006078:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800607c:	2500      	movne	r5, #0
 800607e:	4293      	cmp	r3, r2
 8006080:	bfc4      	itt	gt
 8006082:	1a9b      	subgt	r3, r3, r2
 8006084:	18ed      	addgt	r5, r5, r3
 8006086:	2600      	movs	r6, #0
 8006088:	341a      	adds	r4, #26
 800608a:	42b5      	cmp	r5, r6
 800608c:	d11a      	bne.n	80060c4 <_printf_common+0xc8>
 800608e:	2000      	movs	r0, #0
 8006090:	e008      	b.n	80060a4 <_printf_common+0xa8>
 8006092:	2301      	movs	r3, #1
 8006094:	4652      	mov	r2, sl
 8006096:	4641      	mov	r1, r8
 8006098:	4638      	mov	r0, r7
 800609a:	47c8      	blx	r9
 800609c:	3001      	adds	r0, #1
 800609e:	d103      	bne.n	80060a8 <_printf_common+0xac>
 80060a0:	f04f 30ff 	mov.w	r0, #4294967295
 80060a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80060a8:	3501      	adds	r5, #1
 80060aa:	e7c6      	b.n	800603a <_printf_common+0x3e>
 80060ac:	18e1      	adds	r1, r4, r3
 80060ae:	1c5a      	adds	r2, r3, #1
 80060b0:	2030      	movs	r0, #48	@ 0x30
 80060b2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80060b6:	4422      	add	r2, r4
 80060b8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80060bc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80060c0:	3302      	adds	r3, #2
 80060c2:	e7c7      	b.n	8006054 <_printf_common+0x58>
 80060c4:	2301      	movs	r3, #1
 80060c6:	4622      	mov	r2, r4
 80060c8:	4641      	mov	r1, r8
 80060ca:	4638      	mov	r0, r7
 80060cc:	47c8      	blx	r9
 80060ce:	3001      	adds	r0, #1
 80060d0:	d0e6      	beq.n	80060a0 <_printf_common+0xa4>
 80060d2:	3601      	adds	r6, #1
 80060d4:	e7d9      	b.n	800608a <_printf_common+0x8e>
	...

080060d8 <_printf_i>:
 80060d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80060dc:	7e0f      	ldrb	r7, [r1, #24]
 80060de:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80060e0:	2f78      	cmp	r7, #120	@ 0x78
 80060e2:	4691      	mov	r9, r2
 80060e4:	4680      	mov	r8, r0
 80060e6:	460c      	mov	r4, r1
 80060e8:	469a      	mov	sl, r3
 80060ea:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80060ee:	d807      	bhi.n	8006100 <_printf_i+0x28>
 80060f0:	2f62      	cmp	r7, #98	@ 0x62
 80060f2:	d80a      	bhi.n	800610a <_printf_i+0x32>
 80060f4:	2f00      	cmp	r7, #0
 80060f6:	f000 80d2 	beq.w	800629e <_printf_i+0x1c6>
 80060fa:	2f58      	cmp	r7, #88	@ 0x58
 80060fc:	f000 80b9 	beq.w	8006272 <_printf_i+0x19a>
 8006100:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006104:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006108:	e03a      	b.n	8006180 <_printf_i+0xa8>
 800610a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800610e:	2b15      	cmp	r3, #21
 8006110:	d8f6      	bhi.n	8006100 <_printf_i+0x28>
 8006112:	a101      	add	r1, pc, #4	@ (adr r1, 8006118 <_printf_i+0x40>)
 8006114:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006118:	08006171 	.word	0x08006171
 800611c:	08006185 	.word	0x08006185
 8006120:	08006101 	.word	0x08006101
 8006124:	08006101 	.word	0x08006101
 8006128:	08006101 	.word	0x08006101
 800612c:	08006101 	.word	0x08006101
 8006130:	08006185 	.word	0x08006185
 8006134:	08006101 	.word	0x08006101
 8006138:	08006101 	.word	0x08006101
 800613c:	08006101 	.word	0x08006101
 8006140:	08006101 	.word	0x08006101
 8006144:	08006285 	.word	0x08006285
 8006148:	080061af 	.word	0x080061af
 800614c:	0800623f 	.word	0x0800623f
 8006150:	08006101 	.word	0x08006101
 8006154:	08006101 	.word	0x08006101
 8006158:	080062a7 	.word	0x080062a7
 800615c:	08006101 	.word	0x08006101
 8006160:	080061af 	.word	0x080061af
 8006164:	08006101 	.word	0x08006101
 8006168:	08006101 	.word	0x08006101
 800616c:	08006247 	.word	0x08006247
 8006170:	6833      	ldr	r3, [r6, #0]
 8006172:	1d1a      	adds	r2, r3, #4
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	6032      	str	r2, [r6, #0]
 8006178:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800617c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006180:	2301      	movs	r3, #1
 8006182:	e09d      	b.n	80062c0 <_printf_i+0x1e8>
 8006184:	6833      	ldr	r3, [r6, #0]
 8006186:	6820      	ldr	r0, [r4, #0]
 8006188:	1d19      	adds	r1, r3, #4
 800618a:	6031      	str	r1, [r6, #0]
 800618c:	0606      	lsls	r6, r0, #24
 800618e:	d501      	bpl.n	8006194 <_printf_i+0xbc>
 8006190:	681d      	ldr	r5, [r3, #0]
 8006192:	e003      	b.n	800619c <_printf_i+0xc4>
 8006194:	0645      	lsls	r5, r0, #25
 8006196:	d5fb      	bpl.n	8006190 <_printf_i+0xb8>
 8006198:	f9b3 5000 	ldrsh.w	r5, [r3]
 800619c:	2d00      	cmp	r5, #0
 800619e:	da03      	bge.n	80061a8 <_printf_i+0xd0>
 80061a0:	232d      	movs	r3, #45	@ 0x2d
 80061a2:	426d      	negs	r5, r5
 80061a4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80061a8:	4859      	ldr	r0, [pc, #356]	@ (8006310 <_printf_i+0x238>)
 80061aa:	230a      	movs	r3, #10
 80061ac:	e011      	b.n	80061d2 <_printf_i+0xfa>
 80061ae:	6821      	ldr	r1, [r4, #0]
 80061b0:	6833      	ldr	r3, [r6, #0]
 80061b2:	0608      	lsls	r0, r1, #24
 80061b4:	f853 5b04 	ldr.w	r5, [r3], #4
 80061b8:	d402      	bmi.n	80061c0 <_printf_i+0xe8>
 80061ba:	0649      	lsls	r1, r1, #25
 80061bc:	bf48      	it	mi
 80061be:	b2ad      	uxthmi	r5, r5
 80061c0:	2f6f      	cmp	r7, #111	@ 0x6f
 80061c2:	4853      	ldr	r0, [pc, #332]	@ (8006310 <_printf_i+0x238>)
 80061c4:	6033      	str	r3, [r6, #0]
 80061c6:	bf14      	ite	ne
 80061c8:	230a      	movne	r3, #10
 80061ca:	2308      	moveq	r3, #8
 80061cc:	2100      	movs	r1, #0
 80061ce:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80061d2:	6866      	ldr	r6, [r4, #4]
 80061d4:	60a6      	str	r6, [r4, #8]
 80061d6:	2e00      	cmp	r6, #0
 80061d8:	bfa2      	ittt	ge
 80061da:	6821      	ldrge	r1, [r4, #0]
 80061dc:	f021 0104 	bicge.w	r1, r1, #4
 80061e0:	6021      	strge	r1, [r4, #0]
 80061e2:	b90d      	cbnz	r5, 80061e8 <_printf_i+0x110>
 80061e4:	2e00      	cmp	r6, #0
 80061e6:	d04b      	beq.n	8006280 <_printf_i+0x1a8>
 80061e8:	4616      	mov	r6, r2
 80061ea:	fbb5 f1f3 	udiv	r1, r5, r3
 80061ee:	fb03 5711 	mls	r7, r3, r1, r5
 80061f2:	5dc7      	ldrb	r7, [r0, r7]
 80061f4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80061f8:	462f      	mov	r7, r5
 80061fa:	42bb      	cmp	r3, r7
 80061fc:	460d      	mov	r5, r1
 80061fe:	d9f4      	bls.n	80061ea <_printf_i+0x112>
 8006200:	2b08      	cmp	r3, #8
 8006202:	d10b      	bne.n	800621c <_printf_i+0x144>
 8006204:	6823      	ldr	r3, [r4, #0]
 8006206:	07df      	lsls	r7, r3, #31
 8006208:	d508      	bpl.n	800621c <_printf_i+0x144>
 800620a:	6923      	ldr	r3, [r4, #16]
 800620c:	6861      	ldr	r1, [r4, #4]
 800620e:	4299      	cmp	r1, r3
 8006210:	bfde      	ittt	le
 8006212:	2330      	movle	r3, #48	@ 0x30
 8006214:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006218:	f106 36ff 	addle.w	r6, r6, #4294967295
 800621c:	1b92      	subs	r2, r2, r6
 800621e:	6122      	str	r2, [r4, #16]
 8006220:	f8cd a000 	str.w	sl, [sp]
 8006224:	464b      	mov	r3, r9
 8006226:	aa03      	add	r2, sp, #12
 8006228:	4621      	mov	r1, r4
 800622a:	4640      	mov	r0, r8
 800622c:	f7ff fee6 	bl	8005ffc <_printf_common>
 8006230:	3001      	adds	r0, #1
 8006232:	d14a      	bne.n	80062ca <_printf_i+0x1f2>
 8006234:	f04f 30ff 	mov.w	r0, #4294967295
 8006238:	b004      	add	sp, #16
 800623a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800623e:	6823      	ldr	r3, [r4, #0]
 8006240:	f043 0320 	orr.w	r3, r3, #32
 8006244:	6023      	str	r3, [r4, #0]
 8006246:	4833      	ldr	r0, [pc, #204]	@ (8006314 <_printf_i+0x23c>)
 8006248:	2778      	movs	r7, #120	@ 0x78
 800624a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800624e:	6823      	ldr	r3, [r4, #0]
 8006250:	6831      	ldr	r1, [r6, #0]
 8006252:	061f      	lsls	r7, r3, #24
 8006254:	f851 5b04 	ldr.w	r5, [r1], #4
 8006258:	d402      	bmi.n	8006260 <_printf_i+0x188>
 800625a:	065f      	lsls	r7, r3, #25
 800625c:	bf48      	it	mi
 800625e:	b2ad      	uxthmi	r5, r5
 8006260:	6031      	str	r1, [r6, #0]
 8006262:	07d9      	lsls	r1, r3, #31
 8006264:	bf44      	itt	mi
 8006266:	f043 0320 	orrmi.w	r3, r3, #32
 800626a:	6023      	strmi	r3, [r4, #0]
 800626c:	b11d      	cbz	r5, 8006276 <_printf_i+0x19e>
 800626e:	2310      	movs	r3, #16
 8006270:	e7ac      	b.n	80061cc <_printf_i+0xf4>
 8006272:	4827      	ldr	r0, [pc, #156]	@ (8006310 <_printf_i+0x238>)
 8006274:	e7e9      	b.n	800624a <_printf_i+0x172>
 8006276:	6823      	ldr	r3, [r4, #0]
 8006278:	f023 0320 	bic.w	r3, r3, #32
 800627c:	6023      	str	r3, [r4, #0]
 800627e:	e7f6      	b.n	800626e <_printf_i+0x196>
 8006280:	4616      	mov	r6, r2
 8006282:	e7bd      	b.n	8006200 <_printf_i+0x128>
 8006284:	6833      	ldr	r3, [r6, #0]
 8006286:	6825      	ldr	r5, [r4, #0]
 8006288:	6961      	ldr	r1, [r4, #20]
 800628a:	1d18      	adds	r0, r3, #4
 800628c:	6030      	str	r0, [r6, #0]
 800628e:	062e      	lsls	r6, r5, #24
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	d501      	bpl.n	8006298 <_printf_i+0x1c0>
 8006294:	6019      	str	r1, [r3, #0]
 8006296:	e002      	b.n	800629e <_printf_i+0x1c6>
 8006298:	0668      	lsls	r0, r5, #25
 800629a:	d5fb      	bpl.n	8006294 <_printf_i+0x1bc>
 800629c:	8019      	strh	r1, [r3, #0]
 800629e:	2300      	movs	r3, #0
 80062a0:	6123      	str	r3, [r4, #16]
 80062a2:	4616      	mov	r6, r2
 80062a4:	e7bc      	b.n	8006220 <_printf_i+0x148>
 80062a6:	6833      	ldr	r3, [r6, #0]
 80062a8:	1d1a      	adds	r2, r3, #4
 80062aa:	6032      	str	r2, [r6, #0]
 80062ac:	681e      	ldr	r6, [r3, #0]
 80062ae:	6862      	ldr	r2, [r4, #4]
 80062b0:	2100      	movs	r1, #0
 80062b2:	4630      	mov	r0, r6
 80062b4:	f7f9 ff94 	bl	80001e0 <memchr>
 80062b8:	b108      	cbz	r0, 80062be <_printf_i+0x1e6>
 80062ba:	1b80      	subs	r0, r0, r6
 80062bc:	6060      	str	r0, [r4, #4]
 80062be:	6863      	ldr	r3, [r4, #4]
 80062c0:	6123      	str	r3, [r4, #16]
 80062c2:	2300      	movs	r3, #0
 80062c4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80062c8:	e7aa      	b.n	8006220 <_printf_i+0x148>
 80062ca:	6923      	ldr	r3, [r4, #16]
 80062cc:	4632      	mov	r2, r6
 80062ce:	4649      	mov	r1, r9
 80062d0:	4640      	mov	r0, r8
 80062d2:	47d0      	blx	sl
 80062d4:	3001      	adds	r0, #1
 80062d6:	d0ad      	beq.n	8006234 <_printf_i+0x15c>
 80062d8:	6823      	ldr	r3, [r4, #0]
 80062da:	079b      	lsls	r3, r3, #30
 80062dc:	d413      	bmi.n	8006306 <_printf_i+0x22e>
 80062de:	68e0      	ldr	r0, [r4, #12]
 80062e0:	9b03      	ldr	r3, [sp, #12]
 80062e2:	4298      	cmp	r0, r3
 80062e4:	bfb8      	it	lt
 80062e6:	4618      	movlt	r0, r3
 80062e8:	e7a6      	b.n	8006238 <_printf_i+0x160>
 80062ea:	2301      	movs	r3, #1
 80062ec:	4632      	mov	r2, r6
 80062ee:	4649      	mov	r1, r9
 80062f0:	4640      	mov	r0, r8
 80062f2:	47d0      	blx	sl
 80062f4:	3001      	adds	r0, #1
 80062f6:	d09d      	beq.n	8006234 <_printf_i+0x15c>
 80062f8:	3501      	adds	r5, #1
 80062fa:	68e3      	ldr	r3, [r4, #12]
 80062fc:	9903      	ldr	r1, [sp, #12]
 80062fe:	1a5b      	subs	r3, r3, r1
 8006300:	42ab      	cmp	r3, r5
 8006302:	dcf2      	bgt.n	80062ea <_printf_i+0x212>
 8006304:	e7eb      	b.n	80062de <_printf_i+0x206>
 8006306:	2500      	movs	r5, #0
 8006308:	f104 0619 	add.w	r6, r4, #25
 800630c:	e7f5      	b.n	80062fa <_printf_i+0x222>
 800630e:	bf00      	nop
 8006310:	08006e19 	.word	0x08006e19
 8006314:	08006e2a 	.word	0x08006e2a

08006318 <memmove>:
 8006318:	4288      	cmp	r0, r1
 800631a:	b510      	push	{r4, lr}
 800631c:	eb01 0402 	add.w	r4, r1, r2
 8006320:	d902      	bls.n	8006328 <memmove+0x10>
 8006322:	4284      	cmp	r4, r0
 8006324:	4623      	mov	r3, r4
 8006326:	d807      	bhi.n	8006338 <memmove+0x20>
 8006328:	1e43      	subs	r3, r0, #1
 800632a:	42a1      	cmp	r1, r4
 800632c:	d008      	beq.n	8006340 <memmove+0x28>
 800632e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006332:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006336:	e7f8      	b.n	800632a <memmove+0x12>
 8006338:	4402      	add	r2, r0
 800633a:	4601      	mov	r1, r0
 800633c:	428a      	cmp	r2, r1
 800633e:	d100      	bne.n	8006342 <memmove+0x2a>
 8006340:	bd10      	pop	{r4, pc}
 8006342:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006346:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800634a:	e7f7      	b.n	800633c <memmove+0x24>

0800634c <_sbrk_r>:
 800634c:	b538      	push	{r3, r4, r5, lr}
 800634e:	4d06      	ldr	r5, [pc, #24]	@ (8006368 <_sbrk_r+0x1c>)
 8006350:	2300      	movs	r3, #0
 8006352:	4604      	mov	r4, r0
 8006354:	4608      	mov	r0, r1
 8006356:	602b      	str	r3, [r5, #0]
 8006358:	f7fb fa74 	bl	8001844 <_sbrk>
 800635c:	1c43      	adds	r3, r0, #1
 800635e:	d102      	bne.n	8006366 <_sbrk_r+0x1a>
 8006360:	682b      	ldr	r3, [r5, #0]
 8006362:	b103      	cbz	r3, 8006366 <_sbrk_r+0x1a>
 8006364:	6023      	str	r3, [r4, #0]
 8006366:	bd38      	pop	{r3, r4, r5, pc}
 8006368:	200004d8 	.word	0x200004d8

0800636c <memcpy>:
 800636c:	440a      	add	r2, r1
 800636e:	4291      	cmp	r1, r2
 8006370:	f100 33ff 	add.w	r3, r0, #4294967295
 8006374:	d100      	bne.n	8006378 <memcpy+0xc>
 8006376:	4770      	bx	lr
 8006378:	b510      	push	{r4, lr}
 800637a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800637e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006382:	4291      	cmp	r1, r2
 8006384:	d1f9      	bne.n	800637a <memcpy+0xe>
 8006386:	bd10      	pop	{r4, pc}

08006388 <_realloc_r>:
 8006388:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800638c:	4680      	mov	r8, r0
 800638e:	4615      	mov	r5, r2
 8006390:	460c      	mov	r4, r1
 8006392:	b921      	cbnz	r1, 800639e <_realloc_r+0x16>
 8006394:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006398:	4611      	mov	r1, r2
 800639a:	f7ff bc4b 	b.w	8005c34 <_malloc_r>
 800639e:	b92a      	cbnz	r2, 80063ac <_realloc_r+0x24>
 80063a0:	f7ff fbdc 	bl	8005b5c <_free_r>
 80063a4:	2400      	movs	r4, #0
 80063a6:	4620      	mov	r0, r4
 80063a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80063ac:	f000 f81a 	bl	80063e4 <_malloc_usable_size_r>
 80063b0:	4285      	cmp	r5, r0
 80063b2:	4606      	mov	r6, r0
 80063b4:	d802      	bhi.n	80063bc <_realloc_r+0x34>
 80063b6:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80063ba:	d8f4      	bhi.n	80063a6 <_realloc_r+0x1e>
 80063bc:	4629      	mov	r1, r5
 80063be:	4640      	mov	r0, r8
 80063c0:	f7ff fc38 	bl	8005c34 <_malloc_r>
 80063c4:	4607      	mov	r7, r0
 80063c6:	2800      	cmp	r0, #0
 80063c8:	d0ec      	beq.n	80063a4 <_realloc_r+0x1c>
 80063ca:	42b5      	cmp	r5, r6
 80063cc:	462a      	mov	r2, r5
 80063ce:	4621      	mov	r1, r4
 80063d0:	bf28      	it	cs
 80063d2:	4632      	movcs	r2, r6
 80063d4:	f7ff ffca 	bl	800636c <memcpy>
 80063d8:	4621      	mov	r1, r4
 80063da:	4640      	mov	r0, r8
 80063dc:	f7ff fbbe 	bl	8005b5c <_free_r>
 80063e0:	463c      	mov	r4, r7
 80063e2:	e7e0      	b.n	80063a6 <_realloc_r+0x1e>

080063e4 <_malloc_usable_size_r>:
 80063e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80063e8:	1f18      	subs	r0, r3, #4
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	bfbc      	itt	lt
 80063ee:	580b      	ldrlt	r3, [r1, r0]
 80063f0:	18c0      	addlt	r0, r0, r3
 80063f2:	4770      	bx	lr

080063f4 <_init>:
 80063f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063f6:	bf00      	nop
 80063f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80063fa:	bc08      	pop	{r3}
 80063fc:	469e      	mov	lr, r3
 80063fe:	4770      	bx	lr

08006400 <_fini>:
 8006400:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006402:	bf00      	nop
 8006404:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006406:	bc08      	pop	{r3}
 8006408:	469e      	mov	lr, r3
 800640a:	4770      	bx	lr
