
Ditel_MotorDriver_005.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006158  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000007c  080062e8  080062e8  000072e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006364  08006364  0000805c  2**0
                  CONTENTS
  4 .ARM          00000008  08006364  08006364  00007364  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800636c  0800636c  0000805c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800636c  0800636c  0000736c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006370  08006370  00007370  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08006374  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000805c  2**0
                  CONTENTS
 10 .bss          0000048c  2000005c  2000005c  0000805c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200004e8  200004e8  0000805c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000805c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001272a  00000000  00000000  0000808c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002c28  00000000  00000000  0001a7b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f70  00000000  00000000  0001d3e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000bf6  00000000  00000000  0001e350  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001d590  00000000  00000000  0001ef46  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00015e04  00000000  00000000  0003c4d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a8385  00000000  00000000  000522da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000fa65f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000447c  00000000  00000000  000fa6a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006a  00000000  00000000  000feb20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000005c 	.word	0x2000005c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080062d0 	.word	0x080062d0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000060 	.word	0x20000060
 80001cc:	080062d0 	.word	0x080062d0

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <_7SegInit>:

#include <D-M-005/7Seg.h>

_7SEG_SETTING _7SegSetting;

void _7SegInit(_7SEG_SETTING *__7SegSetting){
 8000280:	b580      	push	{r7, lr}
 8000282:	b082      	sub	sp, #8
 8000284:	af00      	add	r7, sp, #0
 8000286:	6078      	str	r0, [r7, #4]
	_7SegSetting.__7SegSi_GpioPort = __7SegSetting->__7SegSi_GpioPort;
 8000288:	687b      	ldr	r3, [r7, #4]
 800028a:	681b      	ldr	r3, [r3, #0]
 800028c:	4a18      	ldr	r2, [pc, #96]	@ (80002f0 <_7SegInit+0x70>)
 800028e:	6013      	str	r3, [r2, #0]
	_7SegSetting.__7SegSi_Pin = __7SegSetting->__7SegSi_Pin;
 8000290:	687b      	ldr	r3, [r7, #4]
 8000292:	889a      	ldrh	r2, [r3, #4]
 8000294:	4b16      	ldr	r3, [pc, #88]	@ (80002f0 <_7SegInit+0x70>)
 8000296:	809a      	strh	r2, [r3, #4]
	_7SegSetting.__7SegRck_GpioPort = __7SegSetting->__7SegRck_GpioPort;
 8000298:	687b      	ldr	r3, [r7, #4]
 800029a:	689b      	ldr	r3, [r3, #8]
 800029c:	4a14      	ldr	r2, [pc, #80]	@ (80002f0 <_7SegInit+0x70>)
 800029e:	6093      	str	r3, [r2, #8]
	_7SegSetting.__7SegRck_Pin = __7SegSetting->__7SegRck_Pin;
 80002a0:	687b      	ldr	r3, [r7, #4]
 80002a2:	899a      	ldrh	r2, [r3, #12]
 80002a4:	4b12      	ldr	r3, [pc, #72]	@ (80002f0 <_7SegInit+0x70>)
 80002a6:	819a      	strh	r2, [r3, #12]
	_7SegSetting.__7SegSck_GpioPort = __7SegSetting->__7SegSck_GpioPort;
 80002a8:	687b      	ldr	r3, [r7, #4]
 80002aa:	691b      	ldr	r3, [r3, #16]
 80002ac:	4a10      	ldr	r2, [pc, #64]	@ (80002f0 <_7SegInit+0x70>)
 80002ae:	6113      	str	r3, [r2, #16]
	_7SegSetting.__7SegSck_Pin = __7SegSetting->__7SegSck_Pin;
 80002b0:	687b      	ldr	r3, [r7, #4]
 80002b2:	8a9a      	ldrh	r2, [r3, #20]
 80002b4:	4b0e      	ldr	r3, [pc, #56]	@ (80002f0 <_7SegInit+0x70>)
 80002b6:	829a      	strh	r2, [r3, #20]

	HAL_GPIO_WritePin(_7SegSetting.__7SegSi_GpioPort, _7SegSetting.__7SegSi_Pin, GPIO_PIN_RESET);
 80002b8:	4b0d      	ldr	r3, [pc, #52]	@ (80002f0 <_7SegInit+0x70>)
 80002ba:	681b      	ldr	r3, [r3, #0]
 80002bc:	4a0c      	ldr	r2, [pc, #48]	@ (80002f0 <_7SegInit+0x70>)
 80002be:	8891      	ldrh	r1, [r2, #4]
 80002c0:	2200      	movs	r2, #0
 80002c2:	4618      	mov	r0, r3
 80002c4:	f001 ff18 	bl	80020f8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(_7SegSetting.__7SegRck_GpioPort, _7SegSetting.__7SegRck_Pin, GPIO_PIN_RESET);
 80002c8:	4b09      	ldr	r3, [pc, #36]	@ (80002f0 <_7SegInit+0x70>)
 80002ca:	689b      	ldr	r3, [r3, #8]
 80002cc:	4a08      	ldr	r2, [pc, #32]	@ (80002f0 <_7SegInit+0x70>)
 80002ce:	8991      	ldrh	r1, [r2, #12]
 80002d0:	2200      	movs	r2, #0
 80002d2:	4618      	mov	r0, r3
 80002d4:	f001 ff10 	bl	80020f8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(_7SegSetting.__7SegSck_GpioPort, _7SegSetting.__7SegSck_Pin, GPIO_PIN_RESET);
 80002d8:	4b05      	ldr	r3, [pc, #20]	@ (80002f0 <_7SegInit+0x70>)
 80002da:	691b      	ldr	r3, [r3, #16]
 80002dc:	4a04      	ldr	r2, [pc, #16]	@ (80002f0 <_7SegInit+0x70>)
 80002de:	8a91      	ldrh	r1, [r2, #20]
 80002e0:	2200      	movs	r2, #0
 80002e2:	4618      	mov	r0, r3
 80002e4:	f001 ff08 	bl	80020f8 <HAL_GPIO_WritePin>
}
 80002e8:	bf00      	nop
 80002ea:	3708      	adds	r7, #8
 80002ec:	46bd      	mov	sp, r7
 80002ee:	bd80      	pop	{r7, pc}
 80002f0:	20000078 	.word	0x20000078

080002f4 <_7SegReset>:
            __7Seg1byteDisplay(~(0b00011110 | (isDisplayDp ? 0b10000000 : 0b00000000)));
            break;
    }
}

void _7SegReset(){
 80002f4:	b580      	push	{r7, lr}
 80002f6:	af00      	add	r7, sp, #0
    __7Seg1byteDisplay(~(0b00000000));
 80002f8:	f04f 30ff 	mov.w	r0, #4294967295
 80002fc:	f000 f878 	bl	80003f0 <__7Seg1byteDisplay>
    __7Seg1byteDisplay(~(0b00000000));
 8000300:	f04f 30ff 	mov.w	r0, #4294967295
 8000304:	f000 f874 	bl	80003f0 <__7Seg1byteDisplay>
}
 8000308:	bf00      	nop
 800030a:	bd80      	pop	{r7, pc}

0800030c <_7SegSetUpAnimation>:

void _7SegSetUpAnimation(_SETUP_STEP_FOR_7SEG __SetupStep){
 800030c:	b580      	push	{r7, lr}
 800030e:	b082      	sub	sp, #8
 8000310:	af00      	add	r7, sp, #0
 8000312:	4603      	mov	r3, r0
 8000314:	71fb      	strb	r3, [r7, #7]
	switch (__SetupStep) {
 8000316:	79fb      	ldrb	r3, [r7, #7]
 8000318:	3b01      	subs	r3, #1
 800031a:	2b08      	cmp	r3, #8
 800031c:	d863      	bhi.n	80003e6 <_7SegSetUpAnimation+0xda>
 800031e:	a201      	add	r2, pc, #4	@ (adr r2, 8000324 <_7SegSetUpAnimation+0x18>)
 8000320:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000324:	08000349 	.word	0x08000349
 8000328:	0800035b 	.word	0x0800035b
 800032c:	0800036d 	.word	0x0800036d
 8000330:	0800037f 	.word	0x0800037f
 8000334:	08000391 	.word	0x08000391
 8000338:	080003a3 	.word	0x080003a3
 800033c:	080003b5 	.word	0x080003b5
 8000340:	080003c7 	.word	0x080003c7
 8000344:	080003d9 	.word	0x080003d9
		case _SETUP_STEP_START_PROGRAM:
			__7Seg1byteDisplay(__7SEG_NULL_1Byte);
 8000348:	f04f 30ff 	mov.w	r0, #4294967295
 800034c:	f000 f850 	bl	80003f0 <__7Seg1byteDisplay>
			__7Seg1byteDisplay(__7SEG_ONLY_A_1Byte);
 8000350:	f06f 0002 	mvn.w	r0, #2
 8000354:	f000 f84c 	bl	80003f0 <__7Seg1byteDisplay>
			break;
 8000358:	e045      	b.n	80003e6 <_7SegSetUpAnimation+0xda>
		case _SETUP_STEP_SETUP_MOTOR:
			__7Seg1byteDisplay(__7SEG_ONLY_A_1Byte);
 800035a:	f06f 0002 	mvn.w	r0, #2
 800035e:	f000 f847 	bl	80003f0 <__7Seg1byteDisplay>
			__7Seg1byteDisplay(__7SEG_NULL_1Byte);
 8000362:	f04f 30ff 	mov.w	r0, #4294967295
 8000366:	f000 f843 	bl	80003f0 <__7Seg1byteDisplay>
			break;
 800036a:	e03c      	b.n	80003e6 <_7SegSetUpAnimation+0xda>
		case _SETUP_STEP_SETUP_AND_READ_SWICH:
			__7Seg1byteDisplay(__7SEG_ONLY_B_1Byte);
 800036c:	f06f 0001 	mvn.w	r0, #1
 8000370:	f000 f83e 	bl	80003f0 <__7Seg1byteDisplay>
			__7Seg1byteDisplay(__7SEG_NULL_1Byte);
 8000374:	f04f 30ff 	mov.w	r0, #4294967295
 8000378:	f000 f83a 	bl	80003f0 <__7Seg1byteDisplay>
			break;
 800037c:	e033      	b.n	80003e6 <_7SegSetUpAnimation+0xda>
		case _SETUP_STEP_SETUP_CONSOLE:
			__7Seg1byteDisplay(__7SEG_ONLY_C_1Byte);
 800037e:	f06f 0040 	mvn.w	r0, #64	@ 0x40
 8000382:	f000 f835 	bl	80003f0 <__7Seg1byteDisplay>
			__7Seg1byteDisplay(__7SEG_NULL_1Byte);
 8000386:	f04f 30ff 	mov.w	r0, #4294967295
 800038a:	f000 f831 	bl	80003f0 <__7Seg1byteDisplay>
			break;
 800038e:	e02a      	b.n	80003e6 <_7SegSetUpAnimation+0xda>
		case _SETUP_STEP_NULL3:
			__7Seg1byteDisplay(__7SEG_ONLY_D_1Byte);
 8000390:	f06f 0020 	mvn.w	r0, #32
 8000394:	f000 f82c 	bl	80003f0 <__7Seg1byteDisplay>
			__7Seg1byteDisplay(__7SEG_NULL_1Byte);
 8000398:	f04f 30ff 	mov.w	r0, #4294967295
 800039c:	f000 f828 	bl	80003f0 <__7Seg1byteDisplay>
			break;
 80003a0:	e021      	b.n	80003e6 <_7SegSetUpAnimation+0xda>
		case _SETUP_STEP_NULL4:
			__7Seg1byteDisplay(__7SEG_NULL_1Byte);
 80003a2:	f04f 30ff 	mov.w	r0, #4294967295
 80003a6:	f000 f823 	bl	80003f0 <__7Seg1byteDisplay>
			__7Seg1byteDisplay(__7SEG_ONLY_D_1Byte);
 80003aa:	f06f 0020 	mvn.w	r0, #32
 80003ae:	f000 f81f 	bl	80003f0 <__7Seg1byteDisplay>
			break;
 80003b2:	e018      	b.n	80003e6 <_7SegSetUpAnimation+0xda>
		case _SETUP_STEP_NULL5:
			__7Seg1byteDisplay(__7SEG_NULL_1Byte);
 80003b4:	f04f 30ff 	mov.w	r0, #4294967295
 80003b8:	f000 f81a 	bl	80003f0 <__7Seg1byteDisplay>
			__7Seg1byteDisplay(__7SEG_ONLY_E_1Byte);
 80003bc:	f06f 0010 	mvn.w	r0, #16
 80003c0:	f000 f816 	bl	80003f0 <__7Seg1byteDisplay>
			break;
 80003c4:	e00f      	b.n	80003e6 <_7SegSetUpAnimation+0xda>
		case _SETUP_STEP_NULL6:
			__7Seg1byteDisplay(__7SEG_NULL_1Byte);
 80003c6:	f04f 30ff 	mov.w	r0, #4294967295
 80003ca:	f000 f811 	bl	80003f0 <__7Seg1byteDisplay>
			__7Seg1byteDisplay(__7SEG_ONLY_F_1Byte);
 80003ce:	f06f 0004 	mvn.w	r0, #4
 80003d2:	f000 f80d 	bl	80003f0 <__7Seg1byteDisplay>
			break;
 80003d6:	e006      	b.n	80003e6 <_7SegSetUpAnimation+0xda>
		case _SETUP_STEP_FINISH:
			__7Seg1byteDisplay(~__7SEG_ONLY_G_1Byte | ~__7SEG_ONLY_DP_1Byte);
 80003d8:	2088      	movs	r0, #136	@ 0x88
 80003da:	f000 f809 	bl	80003f0 <__7Seg1byteDisplay>
			__7Seg1byteDisplay(~__7SEG_ONLY_G_1Byte | ~__7SEG_ONLY_DP_1Byte);
 80003de:	2088      	movs	r0, #136	@ 0x88
 80003e0:	f000 f806 	bl	80003f0 <__7Seg1byteDisplay>
			break;
 80003e4:	bf00      	nop
	}
}
 80003e6:	bf00      	nop
 80003e8:	3708      	adds	r7, #8
 80003ea:	46bd      	mov	sp, r7
 80003ec:	bd80      	pop	{r7, pc}
 80003ee:	bf00      	nop

080003f0 <__7Seg1byteDisplay>:

void __7Seg1byteDisplay(uint8_t _displayContent){
 80003f0:	b580      	push	{r7, lr}
 80003f2:	b084      	sub	sp, #16
 80003f4:	af00      	add	r7, sp, #0
 80003f6:	4603      	mov	r3, r0
 80003f8:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(_7SegSetting.__7SegRck_GpioPort, _7SegSetting.__7SegRck_Pin, GPIO_PIN_RESET);
 80003fa:	4b1e      	ldr	r3, [pc, #120]	@ (8000474 <__7Seg1byteDisplay+0x84>)
 80003fc:	689b      	ldr	r3, [r3, #8]
 80003fe:	4a1d      	ldr	r2, [pc, #116]	@ (8000474 <__7Seg1byteDisplay+0x84>)
 8000400:	8991      	ldrh	r1, [r2, #12]
 8000402:	2200      	movs	r2, #0
 8000404:	4618      	mov	r0, r3
 8000406:	f001 fe77 	bl	80020f8 <HAL_GPIO_WritePin>
    for (int i = 0; i < 8; i++){
 800040a:	2300      	movs	r3, #0
 800040c:	60fb      	str	r3, [r7, #12]
 800040e:	e021      	b.n	8000454 <__7Seg1byteDisplay+0x64>
        HAL_GPIO_WritePin(_7SegSetting.__7SegSi_GpioPort, _7SegSetting.__7SegSi_Pin, (_displayContent & (1U << i)) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000410:	4b18      	ldr	r3, [pc, #96]	@ (8000474 <__7Seg1byteDisplay+0x84>)
 8000412:	6818      	ldr	r0, [r3, #0]
 8000414:	4b17      	ldr	r3, [pc, #92]	@ (8000474 <__7Seg1byteDisplay+0x84>)
 8000416:	8899      	ldrh	r1, [r3, #4]
 8000418:	79fa      	ldrb	r2, [r7, #7]
 800041a:	68fb      	ldr	r3, [r7, #12]
 800041c:	fa22 f303 	lsr.w	r3, r2, r3
 8000420:	b2db      	uxtb	r3, r3
 8000422:	f003 0301 	and.w	r3, r3, #1
 8000426:	b2db      	uxtb	r3, r3
 8000428:	461a      	mov	r2, r3
 800042a:	f001 fe65 	bl	80020f8 <HAL_GPIO_WritePin>

        HAL_GPIO_WritePin(_7SegSetting.__7SegSck_GpioPort, _7SegSetting.__7SegSck_Pin, GPIO_PIN_SET);
 800042e:	4b11      	ldr	r3, [pc, #68]	@ (8000474 <__7Seg1byteDisplay+0x84>)
 8000430:	691b      	ldr	r3, [r3, #16]
 8000432:	4a10      	ldr	r2, [pc, #64]	@ (8000474 <__7Seg1byteDisplay+0x84>)
 8000434:	8a91      	ldrh	r1, [r2, #20]
 8000436:	2201      	movs	r2, #1
 8000438:	4618      	mov	r0, r3
 800043a:	f001 fe5d 	bl	80020f8 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(_7SegSetting.__7SegSck_GpioPort, _7SegSetting.__7SegSck_Pin, GPIO_PIN_RESET);
 800043e:	4b0d      	ldr	r3, [pc, #52]	@ (8000474 <__7Seg1byteDisplay+0x84>)
 8000440:	691b      	ldr	r3, [r3, #16]
 8000442:	4a0c      	ldr	r2, [pc, #48]	@ (8000474 <__7Seg1byteDisplay+0x84>)
 8000444:	8a91      	ldrh	r1, [r2, #20]
 8000446:	2200      	movs	r2, #0
 8000448:	4618      	mov	r0, r3
 800044a:	f001 fe55 	bl	80020f8 <HAL_GPIO_WritePin>
    for (int i = 0; i < 8; i++){
 800044e:	68fb      	ldr	r3, [r7, #12]
 8000450:	3301      	adds	r3, #1
 8000452:	60fb      	str	r3, [r7, #12]
 8000454:	68fb      	ldr	r3, [r7, #12]
 8000456:	2b07      	cmp	r3, #7
 8000458:	ddda      	ble.n	8000410 <__7Seg1byteDisplay+0x20>
    }

    HAL_GPIO_WritePin(_7SegSetting.__7SegRck_GpioPort, _7SegSetting.__7SegRck_Pin, GPIO_PIN_SET);
 800045a:	4b06      	ldr	r3, [pc, #24]	@ (8000474 <__7Seg1byteDisplay+0x84>)
 800045c:	689b      	ldr	r3, [r3, #8]
 800045e:	4a05      	ldr	r2, [pc, #20]	@ (8000474 <__7Seg1byteDisplay+0x84>)
 8000460:	8991      	ldrh	r1, [r2, #12]
 8000462:	2201      	movs	r2, #1
 8000464:	4618      	mov	r0, r3
 8000466:	f001 fe47 	bl	80020f8 <HAL_GPIO_WritePin>
}
 800046a:	bf00      	nop
 800046c:	3710      	adds	r7, #16
 800046e:	46bd      	mov	sp, r7
 8000470:	bd80      	pop	{r7, pc}
 8000472:	bf00      	nop
 8000474:	20000078 	.word	0x20000078

08000478 <_MotorInit>:

#include "D-M-005/Motor.h"

_MOTOR_SETTING _MotorSetting;

void _MotorInit(_MOTOR_SETTING *__MotorSetting){
 8000478:	b580      	push	{r7, lr}
 800047a:	b082      	sub	sp, #8
 800047c:	af00      	add	r7, sp, #0
 800047e:	6078      	str	r0, [r7, #4]
	_MotorSetting.__MotorN1_Tim = __MotorSetting->__MotorN1_Tim;
 8000480:	687b      	ldr	r3, [r7, #4]
 8000482:	681b      	ldr	r3, [r3, #0]
 8000484:	4a5c      	ldr	r2, [pc, #368]	@ (80005f8 <_MotorInit+0x180>)
 8000486:	6013      	str	r3, [r2, #0]
	_MotorSetting.__MotorN1_TimChannel = __MotorSetting->__MotorN1_TimChannel;
 8000488:	687b      	ldr	r3, [r7, #4]
 800048a:	685b      	ldr	r3, [r3, #4]
 800048c:	4a5a      	ldr	r2, [pc, #360]	@ (80005f8 <_MotorInit+0x180>)
 800048e:	6053      	str	r3, [r2, #4]
	_MotorSetting.__MotorN2_Tim = __MotorSetting->__MotorN2_Tim;
 8000490:	687b      	ldr	r3, [r7, #4]
 8000492:	689b      	ldr	r3, [r3, #8]
 8000494:	4a58      	ldr	r2, [pc, #352]	@ (80005f8 <_MotorInit+0x180>)
 8000496:	6093      	str	r3, [r2, #8]
	_MotorSetting.__MotorN2_TimChannel = __MotorSetting->__MotorN2_TimChannel;
 8000498:	687b      	ldr	r3, [r7, #4]
 800049a:	68db      	ldr	r3, [r3, #12]
 800049c:	4a56      	ldr	r2, [pc, #344]	@ (80005f8 <_MotorInit+0x180>)
 800049e:	60d3      	str	r3, [r2, #12]

	_MotorSetting.__MotorP1_GpioPort = __MotorSetting->__MotorP1_GpioPort;
 80004a0:	687b      	ldr	r3, [r7, #4]
 80004a2:	691b      	ldr	r3, [r3, #16]
 80004a4:	4a54      	ldr	r2, [pc, #336]	@ (80005f8 <_MotorInit+0x180>)
 80004a6:	6113      	str	r3, [r2, #16]
	_MotorSetting.__MotorP1_Pin = __MotorSetting->__MotorP1_Pin;
 80004a8:	687b      	ldr	r3, [r7, #4]
 80004aa:	8a9a      	ldrh	r2, [r3, #20]
 80004ac:	4b52      	ldr	r3, [pc, #328]	@ (80005f8 <_MotorInit+0x180>)
 80004ae:	829a      	strh	r2, [r3, #20]
	_MotorSetting.__MotorP2_GpioPort = __MotorSetting->__MotorP2_GpioPort;
 80004b0:	687b      	ldr	r3, [r7, #4]
 80004b2:	699b      	ldr	r3, [r3, #24]
 80004b4:	4a50      	ldr	r2, [pc, #320]	@ (80005f8 <_MotorInit+0x180>)
 80004b6:	6193      	str	r3, [r2, #24]
	_MotorSetting.__MotorP2_Pin = __MotorSetting->__MotorP2_Pin;
 80004b8:	687b      	ldr	r3, [r7, #4]
 80004ba:	8b9a      	ldrh	r2, [r3, #28]
 80004bc:	4b4e      	ldr	r3, [pc, #312]	@ (80005f8 <_MotorInit+0x180>)
 80004be:	839a      	strh	r2, [r3, #28]

	_MotorSetting.__DeadTime_TIM = __MotorSetting->__DeadTime_TIM;
 80004c0:	687b      	ldr	r3, [r7, #4]
 80004c2:	6a1b      	ldr	r3, [r3, #32]
 80004c4:	4a4c      	ldr	r2, [pc, #304]	@ (80005f8 <_MotorInit+0x180>)
 80004c6:	6213      	str	r3, [r2, #32]

	HAL_GPIO_WritePin(_MotorSetting.__MotorP1_GpioPort, _MotorSetting.__MotorP1_Pin, GPIO_PIN_RESET);
 80004c8:	4b4b      	ldr	r3, [pc, #300]	@ (80005f8 <_MotorInit+0x180>)
 80004ca:	691b      	ldr	r3, [r3, #16]
 80004cc:	4a4a      	ldr	r2, [pc, #296]	@ (80005f8 <_MotorInit+0x180>)
 80004ce:	8a91      	ldrh	r1, [r2, #20]
 80004d0:	2200      	movs	r2, #0
 80004d2:	4618      	mov	r0, r3
 80004d4:	f001 fe10 	bl	80020f8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(_MotorSetting.__MotorP2_GpioPort, _MotorSetting.__MotorP2_Pin, GPIO_PIN_RESET);
 80004d8:	4b47      	ldr	r3, [pc, #284]	@ (80005f8 <_MotorInit+0x180>)
 80004da:	699b      	ldr	r3, [r3, #24]
 80004dc:	4a46      	ldr	r2, [pc, #280]	@ (80005f8 <_MotorInit+0x180>)
 80004de:	8b91      	ldrh	r1, [r2, #28]
 80004e0:	2200      	movs	r2, #0
 80004e2:	4618      	mov	r0, r3
 80004e4:	f001 fe08 	bl	80020f8 <HAL_GPIO_WritePin>

	HAL_TIM_PWM_Start(_MotorSetting.__MotorN1_Tim, _MotorSetting.__MotorN1_TimChannel);
 80004e8:	4b43      	ldr	r3, [pc, #268]	@ (80005f8 <_MotorInit+0x180>)
 80004ea:	681b      	ldr	r3, [r3, #0]
 80004ec:	4a42      	ldr	r2, [pc, #264]	@ (80005f8 <_MotorInit+0x180>)
 80004ee:	6852      	ldr	r2, [r2, #4]
 80004f0:	4611      	mov	r1, r2
 80004f2:	4618      	mov	r0, r3
 80004f4:	f003 fb0a 	bl	8003b0c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(_MotorSetting.__MotorN2_Tim, _MotorSetting.__MotorN2_TimChannel);
 80004f8:	4b3f      	ldr	r3, [pc, #252]	@ (80005f8 <_MotorInit+0x180>)
 80004fa:	689b      	ldr	r3, [r3, #8]
 80004fc:	4a3e      	ldr	r2, [pc, #248]	@ (80005f8 <_MotorInit+0x180>)
 80004fe:	68d2      	ldr	r2, [r2, #12]
 8000500:	4611      	mov	r1, r2
 8000502:	4618      	mov	r0, r3
 8000504:	f003 fb02 	bl	8003b0c <HAL_TIM_PWM_Start>

	HAL_TIM_Base_Start(_MotorSetting.__DeadTime_TIM);
 8000508:	4b3b      	ldr	r3, [pc, #236]	@ (80005f8 <_MotorInit+0x180>)
 800050a:	6a1b      	ldr	r3, [r3, #32]
 800050c:	4618      	mov	r0, r3
 800050e:	f003 f9e7 	bl	80038e0 <HAL_TIM_Base_Start>

	__HAL_TIM_SET_COMPARE(_MotorSetting.__MotorN1_Tim, _MotorSetting.__MotorN1_TimChannel, 0);
 8000512:	4b39      	ldr	r3, [pc, #228]	@ (80005f8 <_MotorInit+0x180>)
 8000514:	685b      	ldr	r3, [r3, #4]
 8000516:	2b00      	cmp	r3, #0
 8000518:	d105      	bne.n	8000526 <_MotorInit+0xae>
 800051a:	4b37      	ldr	r3, [pc, #220]	@ (80005f8 <_MotorInit+0x180>)
 800051c:	681b      	ldr	r3, [r3, #0]
 800051e:	681b      	ldr	r3, [r3, #0]
 8000520:	2200      	movs	r2, #0
 8000522:	635a      	str	r2, [r3, #52]	@ 0x34
 8000524:	e02c      	b.n	8000580 <_MotorInit+0x108>
 8000526:	4b34      	ldr	r3, [pc, #208]	@ (80005f8 <_MotorInit+0x180>)
 8000528:	685b      	ldr	r3, [r3, #4]
 800052a:	2b04      	cmp	r3, #4
 800052c:	d105      	bne.n	800053a <_MotorInit+0xc2>
 800052e:	4b32      	ldr	r3, [pc, #200]	@ (80005f8 <_MotorInit+0x180>)
 8000530:	681b      	ldr	r3, [r3, #0]
 8000532:	681a      	ldr	r2, [r3, #0]
 8000534:	2300      	movs	r3, #0
 8000536:	6393      	str	r3, [r2, #56]	@ 0x38
 8000538:	e022      	b.n	8000580 <_MotorInit+0x108>
 800053a:	4b2f      	ldr	r3, [pc, #188]	@ (80005f8 <_MotorInit+0x180>)
 800053c:	685b      	ldr	r3, [r3, #4]
 800053e:	2b08      	cmp	r3, #8
 8000540:	d105      	bne.n	800054e <_MotorInit+0xd6>
 8000542:	4b2d      	ldr	r3, [pc, #180]	@ (80005f8 <_MotorInit+0x180>)
 8000544:	681b      	ldr	r3, [r3, #0]
 8000546:	681a      	ldr	r2, [r3, #0]
 8000548:	2300      	movs	r3, #0
 800054a:	63d3      	str	r3, [r2, #60]	@ 0x3c
 800054c:	e018      	b.n	8000580 <_MotorInit+0x108>
 800054e:	4b2a      	ldr	r3, [pc, #168]	@ (80005f8 <_MotorInit+0x180>)
 8000550:	685b      	ldr	r3, [r3, #4]
 8000552:	2b0c      	cmp	r3, #12
 8000554:	d105      	bne.n	8000562 <_MotorInit+0xea>
 8000556:	4b28      	ldr	r3, [pc, #160]	@ (80005f8 <_MotorInit+0x180>)
 8000558:	681b      	ldr	r3, [r3, #0]
 800055a:	681a      	ldr	r2, [r3, #0]
 800055c:	2300      	movs	r3, #0
 800055e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000560:	e00e      	b.n	8000580 <_MotorInit+0x108>
 8000562:	4b25      	ldr	r3, [pc, #148]	@ (80005f8 <_MotorInit+0x180>)
 8000564:	685b      	ldr	r3, [r3, #4]
 8000566:	2b10      	cmp	r3, #16
 8000568:	d105      	bne.n	8000576 <_MotorInit+0xfe>
 800056a:	4b23      	ldr	r3, [pc, #140]	@ (80005f8 <_MotorInit+0x180>)
 800056c:	681b      	ldr	r3, [r3, #0]
 800056e:	681a      	ldr	r2, [r3, #0]
 8000570:	2300      	movs	r3, #0
 8000572:	6593      	str	r3, [r2, #88]	@ 0x58
 8000574:	e004      	b.n	8000580 <_MotorInit+0x108>
 8000576:	4b20      	ldr	r3, [pc, #128]	@ (80005f8 <_MotorInit+0x180>)
 8000578:	681b      	ldr	r3, [r3, #0]
 800057a:	681a      	ldr	r2, [r3, #0]
 800057c:	2300      	movs	r3, #0
 800057e:	65d3      	str	r3, [r2, #92]	@ 0x5c
	__HAL_TIM_SET_COMPARE(_MotorSetting.__MotorN2_Tim, _MotorSetting.__MotorN2_TimChannel, 0);
 8000580:	4b1d      	ldr	r3, [pc, #116]	@ (80005f8 <_MotorInit+0x180>)
 8000582:	68db      	ldr	r3, [r3, #12]
 8000584:	2b00      	cmp	r3, #0
 8000586:	d105      	bne.n	8000594 <_MotorInit+0x11c>
 8000588:	4b1b      	ldr	r3, [pc, #108]	@ (80005f8 <_MotorInit+0x180>)
 800058a:	689b      	ldr	r3, [r3, #8]
 800058c:	681b      	ldr	r3, [r3, #0]
 800058e:	2200      	movs	r2, #0
 8000590:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8000592:	e02c      	b.n	80005ee <_MotorInit+0x176>
	__HAL_TIM_SET_COMPARE(_MotorSetting.__MotorN2_Tim, _MotorSetting.__MotorN2_TimChannel, 0);
 8000594:	4b18      	ldr	r3, [pc, #96]	@ (80005f8 <_MotorInit+0x180>)
 8000596:	68db      	ldr	r3, [r3, #12]
 8000598:	2b04      	cmp	r3, #4
 800059a:	d105      	bne.n	80005a8 <_MotorInit+0x130>
 800059c:	4b16      	ldr	r3, [pc, #88]	@ (80005f8 <_MotorInit+0x180>)
 800059e:	689b      	ldr	r3, [r3, #8]
 80005a0:	681a      	ldr	r2, [r3, #0]
 80005a2:	2300      	movs	r3, #0
 80005a4:	6393      	str	r3, [r2, #56]	@ 0x38
}
 80005a6:	e022      	b.n	80005ee <_MotorInit+0x176>
	__HAL_TIM_SET_COMPARE(_MotorSetting.__MotorN2_Tim, _MotorSetting.__MotorN2_TimChannel, 0);
 80005a8:	4b13      	ldr	r3, [pc, #76]	@ (80005f8 <_MotorInit+0x180>)
 80005aa:	68db      	ldr	r3, [r3, #12]
 80005ac:	2b08      	cmp	r3, #8
 80005ae:	d105      	bne.n	80005bc <_MotorInit+0x144>
 80005b0:	4b11      	ldr	r3, [pc, #68]	@ (80005f8 <_MotorInit+0x180>)
 80005b2:	689b      	ldr	r3, [r3, #8]
 80005b4:	681a      	ldr	r2, [r3, #0]
 80005b6:	2300      	movs	r3, #0
 80005b8:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 80005ba:	e018      	b.n	80005ee <_MotorInit+0x176>
	__HAL_TIM_SET_COMPARE(_MotorSetting.__MotorN2_Tim, _MotorSetting.__MotorN2_TimChannel, 0);
 80005bc:	4b0e      	ldr	r3, [pc, #56]	@ (80005f8 <_MotorInit+0x180>)
 80005be:	68db      	ldr	r3, [r3, #12]
 80005c0:	2b0c      	cmp	r3, #12
 80005c2:	d105      	bne.n	80005d0 <_MotorInit+0x158>
 80005c4:	4b0c      	ldr	r3, [pc, #48]	@ (80005f8 <_MotorInit+0x180>)
 80005c6:	689b      	ldr	r3, [r3, #8]
 80005c8:	681a      	ldr	r2, [r3, #0]
 80005ca:	2300      	movs	r3, #0
 80005cc:	6413      	str	r3, [r2, #64]	@ 0x40
}
 80005ce:	e00e      	b.n	80005ee <_MotorInit+0x176>
	__HAL_TIM_SET_COMPARE(_MotorSetting.__MotorN2_Tim, _MotorSetting.__MotorN2_TimChannel, 0);
 80005d0:	4b09      	ldr	r3, [pc, #36]	@ (80005f8 <_MotorInit+0x180>)
 80005d2:	68db      	ldr	r3, [r3, #12]
 80005d4:	2b10      	cmp	r3, #16
 80005d6:	d105      	bne.n	80005e4 <_MotorInit+0x16c>
 80005d8:	4b07      	ldr	r3, [pc, #28]	@ (80005f8 <_MotorInit+0x180>)
 80005da:	689b      	ldr	r3, [r3, #8]
 80005dc:	681a      	ldr	r2, [r3, #0]
 80005de:	2300      	movs	r3, #0
 80005e0:	6593      	str	r3, [r2, #88]	@ 0x58
}
 80005e2:	e004      	b.n	80005ee <_MotorInit+0x176>
	__HAL_TIM_SET_COMPARE(_MotorSetting.__MotorN2_Tim, _MotorSetting.__MotorN2_TimChannel, 0);
 80005e4:	4b04      	ldr	r3, [pc, #16]	@ (80005f8 <_MotorInit+0x180>)
 80005e6:	689b      	ldr	r3, [r3, #8]
 80005e8:	681a      	ldr	r2, [r3, #0]
 80005ea:	2300      	movs	r3, #0
 80005ec:	65d3      	str	r3, [r2, #92]	@ 0x5c
}
 80005ee:	bf00      	nop
 80005f0:	3708      	adds	r7, #8
 80005f2:	46bd      	mov	sp, r7
 80005f4:	bd80      	pop	{r7, pc}
 80005f6:	bf00      	nop
 80005f8:	20000090 	.word	0x20000090

080005fc <_SwitchInit>:

#include "D-M-005/Switch.h"

_SWITCH_SETTING _SwitchSetting;

void _SwitchInit(_SWITCH_SETTING *__SwitchSetting){
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b082      	sub	sp, #8
 8000600:	af00      	add	r7, sp, #0
 8000602:	6078      	str	r0, [r7, #4]
	_SwitchSetting.__ShiftRegisterClk_GpioPort = __SwitchSetting->__ShiftRegisterClk_GpioPort;
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	4a14      	ldr	r2, [pc, #80]	@ (800065c <_SwitchInit+0x60>)
 800060a:	6013      	str	r3, [r2, #0]
	_SwitchSetting.__ShiftRegisterClk_Pin = __SwitchSetting->__ShiftRegisterClk_Pin;
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	889a      	ldrh	r2, [r3, #4]
 8000610:	4b12      	ldr	r3, [pc, #72]	@ (800065c <_SwitchInit+0x60>)
 8000612:	809a      	strh	r2, [r3, #4]
	_SwitchSetting.__ShiftRegisterQh_GpioPort = __SwitchSetting->__ShiftRegisterQh_GpioPort;
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	691b      	ldr	r3, [r3, #16]
 8000618:	4a10      	ldr	r2, [pc, #64]	@ (800065c <_SwitchInit+0x60>)
 800061a:	6113      	str	r3, [r2, #16]
	_SwitchSetting.__ShiftRegisterQh_Pin = __SwitchSetting->__ShiftRegisterQh_Pin;
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	8a9a      	ldrh	r2, [r3, #20]
 8000620:	4b0e      	ldr	r3, [pc, #56]	@ (800065c <_SwitchInit+0x60>)
 8000622:	829a      	strh	r2, [r3, #20]
	_SwitchSetting.__ShiftRegisterShLd_GpioPort = __SwitchSetting->__ShiftRegisterShLd_GpioPort;
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	689b      	ldr	r3, [r3, #8]
 8000628:	4a0c      	ldr	r2, [pc, #48]	@ (800065c <_SwitchInit+0x60>)
 800062a:	6093      	str	r3, [r2, #8]
	_SwitchSetting.__ShiftRegisterShLd_Pin = __SwitchSetting->__ShiftRegisterShLd_Pin;
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	899a      	ldrh	r2, [r3, #12]
 8000630:	4b0a      	ldr	r3, [pc, #40]	@ (800065c <_SwitchInit+0x60>)
 8000632:	819a      	strh	r2, [r3, #12]

	HAL_GPIO_WritePin(_SwitchSetting.__ShiftRegisterClk_GpioPort, _SwitchSetting.__ShiftRegisterClk_Pin, GPIO_PIN_RESET);
 8000634:	4b09      	ldr	r3, [pc, #36]	@ (800065c <_SwitchInit+0x60>)
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	4a08      	ldr	r2, [pc, #32]	@ (800065c <_SwitchInit+0x60>)
 800063a:	8891      	ldrh	r1, [r2, #4]
 800063c:	2200      	movs	r2, #0
 800063e:	4618      	mov	r0, r3
 8000640:	f001 fd5a 	bl	80020f8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(_SwitchSetting.__ShiftRegisterShLd_GpioPort, _SwitchSetting.__ShiftRegisterShLd_Pin, GPIO_PIN_RESET);
 8000644:	4b05      	ldr	r3, [pc, #20]	@ (800065c <_SwitchInit+0x60>)
 8000646:	689b      	ldr	r3, [r3, #8]
 8000648:	4a04      	ldr	r2, [pc, #16]	@ (800065c <_SwitchInit+0x60>)
 800064a:	8991      	ldrh	r1, [r2, #12]
 800064c:	2200      	movs	r2, #0
 800064e:	4618      	mov	r0, r3
 8000650:	f001 fd52 	bl	80020f8 <HAL_GPIO_WritePin>
}
 8000654:	bf00      	nop
 8000656:	3708      	adds	r7, #8
 8000658:	46bd      	mov	sp, r7
 800065a:	bd80      	pop	{r7, pc}
 800065c:	200000b4 	.word	0x200000b4

08000660 <_SwitchRead>:

void _SwitchRead(_SWITCH_READ_DATA *__SwitchReadData){
 8000660:	b580      	push	{r7, lr}
 8000662:	b084      	sub	sp, #16
 8000664:	af00      	add	r7, sp, #0
 8000666:	6078      	str	r0, [r7, #4]
	uint8_t _readSwData = 0;
 8000668:	2300      	movs	r3, #0
 800066a:	73fb      	strb	r3, [r7, #15]

	HAL_GPIO_WritePin(_SwitchSetting.__ShiftRegisterShLd_GpioPort, _SwitchSetting.__ShiftRegisterShLd_Pin, GPIO_PIN_RESET);
 800066c:	4b5a      	ldr	r3, [pc, #360]	@ (80007d8 <_SwitchRead+0x178>)
 800066e:	689b      	ldr	r3, [r3, #8]
 8000670:	4a59      	ldr	r2, [pc, #356]	@ (80007d8 <_SwitchRead+0x178>)
 8000672:	8991      	ldrh	r1, [r2, #12]
 8000674:	2200      	movs	r2, #0
 8000676:	4618      	mov	r0, r3
 8000678:	f001 fd3e 	bl	80020f8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(_SwitchSetting.__ShiftRegisterClk_GpioPort, _SwitchSetting.__ShiftRegisterClk_Pin, GPIO_PIN_SET);
 800067c:	4b56      	ldr	r3, [pc, #344]	@ (80007d8 <_SwitchRead+0x178>)
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	4a55      	ldr	r2, [pc, #340]	@ (80007d8 <_SwitchRead+0x178>)
 8000682:	8891      	ldrh	r1, [r2, #4]
 8000684:	2201      	movs	r2, #1
 8000686:	4618      	mov	r0, r3
 8000688:	f001 fd36 	bl	80020f8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(_SwitchSetting.__ShiftRegisterClk_GpioPort, _SwitchSetting.__ShiftRegisterClk_Pin, GPIO_PIN_RESET);
 800068c:	4b52      	ldr	r3, [pc, #328]	@ (80007d8 <_SwitchRead+0x178>)
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	4a51      	ldr	r2, [pc, #324]	@ (80007d8 <_SwitchRead+0x178>)
 8000692:	8891      	ldrh	r1, [r2, #4]
 8000694:	2200      	movs	r2, #0
 8000696:	4618      	mov	r0, r3
 8000698:	f001 fd2e 	bl	80020f8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(_SwitchSetting.__ShiftRegisterShLd_GpioPort, _SwitchSetting.__ShiftRegisterShLd_Pin, GPIO_PIN_SET);
 800069c:	4b4e      	ldr	r3, [pc, #312]	@ (80007d8 <_SwitchRead+0x178>)
 800069e:	689b      	ldr	r3, [r3, #8]
 80006a0:	4a4d      	ldr	r2, [pc, #308]	@ (80007d8 <_SwitchRead+0x178>)
 80006a2:	8991      	ldrh	r1, [r2, #12]
 80006a4:	2201      	movs	r2, #1
 80006a6:	4618      	mov	r0, r3
 80006a8:	f001 fd26 	bl	80020f8 <HAL_GPIO_WritePin>

	_readSwData = _readSwData | (HAL_GPIO_ReadPin(_SwitchSetting.__ShiftRegisterQh_GpioPort, _SwitchSetting.__ShiftRegisterQh_Pin) << 7);
 80006ac:	4b4a      	ldr	r3, [pc, #296]	@ (80007d8 <_SwitchRead+0x178>)
 80006ae:	691b      	ldr	r3, [r3, #16]
 80006b0:	4a49      	ldr	r2, [pc, #292]	@ (80007d8 <_SwitchRead+0x178>)
 80006b2:	8a92      	ldrh	r2, [r2, #20]
 80006b4:	4611      	mov	r1, r2
 80006b6:	4618      	mov	r0, r3
 80006b8:	f001 fd06 	bl	80020c8 <HAL_GPIO_ReadPin>
 80006bc:	4603      	mov	r3, r0
 80006be:	01db      	lsls	r3, r3, #7
 80006c0:	b25a      	sxtb	r2, r3
 80006c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80006c6:	4313      	orrs	r3, r2
 80006c8:	b25b      	sxtb	r3, r3
 80006ca:	73fb      	strb	r3, [r7, #15]
	for(int i = 6; i >= 0; i--){
 80006cc:	2306      	movs	r3, #6
 80006ce:	60bb      	str	r3, [r7, #8]
 80006d0:	e025      	b.n	800071e <_SwitchRead+0xbe>
		HAL_GPIO_WritePin(_SwitchSetting.__ShiftRegisterClk_GpioPort, _SwitchSetting.__ShiftRegisterClk_Pin, GPIO_PIN_SET);
 80006d2:	4b41      	ldr	r3, [pc, #260]	@ (80007d8 <_SwitchRead+0x178>)
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	4a40      	ldr	r2, [pc, #256]	@ (80007d8 <_SwitchRead+0x178>)
 80006d8:	8891      	ldrh	r1, [r2, #4]
 80006da:	2201      	movs	r2, #1
 80006dc:	4618      	mov	r0, r3
 80006de:	f001 fd0b 	bl	80020f8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(_SwitchSetting.__ShiftRegisterClk_GpioPort, _SwitchSetting.__ShiftRegisterClk_Pin, GPIO_PIN_RESET);
 80006e2:	4b3d      	ldr	r3, [pc, #244]	@ (80007d8 <_SwitchRead+0x178>)
 80006e4:	681b      	ldr	r3, [r3, #0]
 80006e6:	4a3c      	ldr	r2, [pc, #240]	@ (80007d8 <_SwitchRead+0x178>)
 80006e8:	8891      	ldrh	r1, [r2, #4]
 80006ea:	2200      	movs	r2, #0
 80006ec:	4618      	mov	r0, r3
 80006ee:	f001 fd03 	bl	80020f8 <HAL_GPIO_WritePin>

		_readSwData = _readSwData | (HAL_GPIO_ReadPin(_SwitchSetting.__ShiftRegisterQh_GpioPort, _SwitchSetting.__ShiftRegisterQh_Pin) << i);
 80006f2:	4b39      	ldr	r3, [pc, #228]	@ (80007d8 <_SwitchRead+0x178>)
 80006f4:	691b      	ldr	r3, [r3, #16]
 80006f6:	4a38      	ldr	r2, [pc, #224]	@ (80007d8 <_SwitchRead+0x178>)
 80006f8:	8a92      	ldrh	r2, [r2, #20]
 80006fa:	4611      	mov	r1, r2
 80006fc:	4618      	mov	r0, r3
 80006fe:	f001 fce3 	bl	80020c8 <HAL_GPIO_ReadPin>
 8000702:	4603      	mov	r3, r0
 8000704:	461a      	mov	r2, r3
 8000706:	68bb      	ldr	r3, [r7, #8]
 8000708:	fa02 f303 	lsl.w	r3, r2, r3
 800070c:	b25a      	sxtb	r2, r3
 800070e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000712:	4313      	orrs	r3, r2
 8000714:	b25b      	sxtb	r3, r3
 8000716:	73fb      	strb	r3, [r7, #15]
	for(int i = 6; i >= 0; i--){
 8000718:	68bb      	ldr	r3, [r7, #8]
 800071a:	3b01      	subs	r3, #1
 800071c:	60bb      	str	r3, [r7, #8]
 800071e:	68bb      	ldr	r3, [r7, #8]
 8000720:	2b00      	cmp	r3, #0
 8000722:	dad6      	bge.n	80006d2 <_SwitchRead+0x72>
	}

	__SwitchReadData->_Address = 0;
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	2200      	movs	r2, #0
 8000728:	701a      	strb	r2, [r3, #0]
	__SwitchReadData->_Address |= (!!(_readSwData & (1U << __SWITCH_BIT_ADDRESS_4TH_DIGIT))) << 3;
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	781b      	ldrb	r3, [r3, #0]
 800072e:	b25a      	sxtb	r2, r3
 8000730:	7bfb      	ldrb	r3, [r7, #15]
 8000732:	00db      	lsls	r3, r3, #3
 8000734:	b25b      	sxtb	r3, r3
 8000736:	f003 0308 	and.w	r3, r3, #8
 800073a:	b25b      	sxtb	r3, r3
 800073c:	4313      	orrs	r3, r2
 800073e:	b25b      	sxtb	r3, r3
 8000740:	b2da      	uxtb	r2, r3
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	701a      	strb	r2, [r3, #0]
	__SwitchReadData->_Address |= (!!(_readSwData & (1U << __SWITCH_BIT_ADDRESS_3ND_DIGIT))) << 2;
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	781b      	ldrb	r3, [r3, #0]
 800074a:	b25a      	sxtb	r2, r3
 800074c:	7bfb      	ldrb	r3, [r7, #15]
 800074e:	005b      	lsls	r3, r3, #1
 8000750:	b25b      	sxtb	r3, r3
 8000752:	f003 0304 	and.w	r3, r3, #4
 8000756:	b25b      	sxtb	r3, r3
 8000758:	4313      	orrs	r3, r2
 800075a:	b25b      	sxtb	r3, r3
 800075c:	b2da      	uxtb	r2, r3
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	701a      	strb	r2, [r3, #0]
	__SwitchReadData->_Address |= (!!(_readSwData & (1U << __SWITCH_BIT_ADDRESS_2ND_DIGIT))) << 1;
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	781b      	ldrb	r3, [r3, #0]
 8000766:	b25a      	sxtb	r2, r3
 8000768:	7bfb      	ldrb	r3, [r7, #15]
 800076a:	085b      	lsrs	r3, r3, #1
 800076c:	b25b      	sxtb	r3, r3
 800076e:	f003 0302 	and.w	r3, r3, #2
 8000772:	b25b      	sxtb	r3, r3
 8000774:	4313      	orrs	r3, r2
 8000776:	b25b      	sxtb	r3, r3
 8000778:	b2da      	uxtb	r2, r3
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	701a      	strb	r2, [r3, #0]
	__SwitchReadData->_Address |= (!!(_readSwData & (1U << __SWITCH_BIT_ADDRESS_1ST_DIGIT))) << 0;
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	781b      	ldrb	r3, [r3, #0]
 8000782:	b25a      	sxtb	r2, r3
 8000784:	7bfb      	ldrb	r3, [r7, #15]
 8000786:	f003 0308 	and.w	r3, r3, #8
 800078a:	2b00      	cmp	r3, #0
 800078c:	bf14      	ite	ne
 800078e:	2301      	movne	r3, #1
 8000790:	2300      	moveq	r3, #0
 8000792:	b2db      	uxtb	r3, r3
 8000794:	b25b      	sxtb	r3, r3
 8000796:	4313      	orrs	r3, r2
 8000798:	b25b      	sxtb	r3, r3
 800079a:	b2da      	uxtb	r2, r3
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	701a      	strb	r2, [r3, #0]

	if(!!!(_readSwData & (1U << __SWITCH_BIT_OPERATION_MODE)))
 80007a0:	7bfb      	ldrb	r3, [r7, #15]
 80007a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d103      	bne.n	80007b2 <_SwitchRead+0x152>
		__SwitchReadData->_OperatingMode = _SWITCH_OPERATION_MODE_NORMAL;
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	2200      	movs	r2, #0
 80007ae:	705a      	strb	r2, [r3, #1]
 80007b0:	e002      	b.n	80007b8 <_SwitchRead+0x158>
	else
		__SwitchReadData->_OperatingMode = _SWITCH_OPERATION_MODE_PC_CONSOLE;
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	2201      	movs	r2, #1
 80007b6:	705a      	strb	r2, [r3, #1]

	if(!!(_readSwData & (1U << __SWITCH_BIT_COMMUNICATION_MODE)))
 80007b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007bc:	2b00      	cmp	r3, #0
 80007be:	da03      	bge.n	80007c8 <_SwitchRead+0x168>
		__SwitchReadData->_CommunicationMode = _SWITCH_COMMUNICATION_MODE_CAN;
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	2200      	movs	r2, #0
 80007c4:	709a      	strb	r2, [r3, #2]
	else
		__SwitchReadData->_CommunicationMode = _SWITCH_COMMUNICATION_MODE_UART;
}
 80007c6:	e002      	b.n	80007ce <_SwitchRead+0x16e>
		__SwitchReadData->_CommunicationMode = _SWITCH_COMMUNICATION_MODE_UART;
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	2201      	movs	r2, #1
 80007cc:	709a      	strb	r2, [r3, #2]
}
 80007ce:	bf00      	nop
 80007d0:	3710      	adds	r7, #16
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bd80      	pop	{r7, pc}
 80007d6:	bf00      	nop
 80007d8:	200000b4 	.word	0x200000b4

080007dc <_AccurateDelay>:
 */


#include "D-M-005/Utility.h"

uint32_t _AccurateDelay(uint32_t _ms, uint32_t _lastGetTick){
 80007dc:	b580      	push	{r7, lr}
 80007de:	b084      	sub	sp, #16
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]
 80007e4:	6039      	str	r1, [r7, #0]
	uint32_t _nowTick = HAL_GetTick();
 80007e6:	f001 f867 	bl	80018b8 <HAL_GetTick>
 80007ea:	60f8      	str	r0, [r7, #12]

	while((_nowTick - _lastGetTick) <= _ms){
 80007ec:	e002      	b.n	80007f4 <_AccurateDelay+0x18>
		_nowTick = HAL_GetTick();
 80007ee:	f001 f863 	bl	80018b8 <HAL_GetTick>
 80007f2:	60f8      	str	r0, [r7, #12]
	while((_nowTick - _lastGetTick) <= _ms){
 80007f4:	68fa      	ldr	r2, [r7, #12]
 80007f6:	683b      	ldr	r3, [r7, #0]
 80007f8:	1ad3      	subs	r3, r2, r3
 80007fa:	687a      	ldr	r2, [r7, #4]
 80007fc:	429a      	cmp	r2, r3
 80007fe:	d2f6      	bcs.n	80007ee <_AccurateDelay+0x12>
	}

	return _nowTick;
 8000800:	68fb      	ldr	r3, [r7, #12]
}
 8000802:	4618      	mov	r0, r3
 8000804:	3710      	adds	r7, #16
 8000806:	46bd      	mov	sp, r7
 8000808:	bd80      	pop	{r7, pc}
	...

0800080c <_ConsoleInit>:

#include "D-M-005/Console/Console.h"

_CONSOLE_SETTING _ConsoleSetting;

void _ConsoleInit(_CONSOLE_SETTING *__ConsoleSetting){
 800080c:	b580      	push	{r7, lr}
 800080e:	b082      	sub	sp, #8
 8000810:	af00      	add	r7, sp, #0
 8000812:	6078      	str	r0, [r7, #4]
	_ConsoleSetting.__PcUart = __ConsoleSetting->__PcUart;
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	4a05      	ldr	r2, [pc, #20]	@ (8000830 <_ConsoleInit+0x24>)
 800081a:	6013      	str	r3, [r2, #0]

	DprintfInit(_ConsoleSetting.__PcUart);
 800081c:	4b04      	ldr	r3, [pc, #16]	@ (8000830 <_ConsoleInit+0x24>)
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	4618      	mov	r0, r3
 8000822:	f000 f807 	bl	8000834 <DprintfInit>
}
 8000826:	bf00      	nop
 8000828:	3708      	adds	r7, #8
 800082a:	46bd      	mov	sp, r7
 800082c:	bd80      	pop	{r7, pc}
 800082e:	bf00      	nop
 8000830:	200000cc 	.word	0x200000cc

08000834 <DprintfInit>:

#include "D-M-005/Console/Ditel_Printf.h"

UART_HandleTypeDef *_DprintfUart;

void DprintfInit(UART_HandleTypeDef *hurat){
 8000834:	b480      	push	{r7}
 8000836:	b083      	sub	sp, #12
 8000838:	af00      	add	r7, sp, #0
 800083a:	6078      	str	r0, [r7, #4]
	_DprintfUart = hurat;
 800083c:	4a04      	ldr	r2, [pc, #16]	@ (8000850 <DprintfInit+0x1c>)
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	6013      	str	r3, [r2, #0]
}
 8000842:	bf00      	nop
 8000844:	370c      	adds	r7, #12
 8000846:	46bd      	mov	sp, r7
 8000848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084c:	4770      	bx	lr
 800084e:	bf00      	nop
 8000850:	200000d0 	.word	0x200000d0

08000854 <Dprintf>:

void Dprintf(char* str, ...)
{
 8000854:	b40f      	push	{r0, r1, r2, r3}
 8000856:	b590      	push	{r4, r7, lr}
 8000858:	b0b5      	sub	sp, #212	@ 0xd4
 800085a:	af00      	add	r7, sp, #0
    char resultString[128] = {0}, argString_In[32] = {0}, argString_Out[32] = {0};
 800085c:	2300      	movs	r3, #0
 800085e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8000860:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000864:	227c      	movs	r2, #124	@ 0x7c
 8000866:	2100      	movs	r1, #0
 8000868:	4618      	mov	r0, r3
 800086a:	f005 f8a1 	bl	80059b0 <memset>
 800086e:	2300      	movs	r3, #0
 8000870:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000872:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000876:	2200      	movs	r2, #0
 8000878:	601a      	str	r2, [r3, #0]
 800087a:	605a      	str	r2, [r3, #4]
 800087c:	609a      	str	r2, [r3, #8]
 800087e:	60da      	str	r2, [r3, #12]
 8000880:	611a      	str	r2, [r3, #16]
 8000882:	615a      	str	r2, [r3, #20]
 8000884:	619a      	str	r2, [r3, #24]
 8000886:	2300      	movs	r3, #0
 8000888:	60bb      	str	r3, [r7, #8]
 800088a:	f107 030c 	add.w	r3, r7, #12
 800088e:	2200      	movs	r2, #0
 8000890:	601a      	str	r2, [r3, #0]
 8000892:	605a      	str	r2, [r3, #4]
 8000894:	609a      	str	r2, [r3, #8]
 8000896:	60da      	str	r2, [r3, #12]
 8000898:	611a      	str	r2, [r3, #16]
 800089a:	615a      	str	r2, [r3, #20]
 800089c:	619a      	str	r2, [r3, #24]

    va_list ap;
    va_start(ap, str);
 800089e:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 80008a2:	607b      	str	r3, [r7, #4]

    unsigned short int count_In = 0, count_Out = 0, count_Arg = 0;
 80008a4:	2300      	movs	r3, #0
 80008a6:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
 80008aa:	2300      	movs	r3, #0
 80008ac:	f8a7 30cc 	strh.w	r3, [r7, #204]	@ 0xcc
 80008b0:	2300      	movs	r3, #0
 80008b2:	f8a7 30ca 	strh.w	r3, [r7, #202]	@ 0xca

    while(str[count_In] != '\0'){
 80008b6:	e141      	b.n	8000b3c <Dprintf+0x2e8>
        if(str[count_In] == '%'){
 80008b8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80008bc:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80008c0:	4413      	add	r3, r2
 80008c2:	781b      	ldrb	r3, [r3, #0]
 80008c4:	2b25      	cmp	r3, #37	@ 0x25
 80008c6:	f040 8123 	bne.w	8000b10 <Dprintf+0x2bc>
            count_In++;
 80008ca:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80008ce:	3301      	adds	r3, #1
 80008d0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
            count_Arg = 0;
 80008d4:	2300      	movs	r3, #0
 80008d6:	f8a7 30ca 	strh.w	r3, [r7, #202]	@ 0xca

            argString_In[count_Arg] = '%';
 80008da:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	@ 0xca
 80008de:	33d0      	adds	r3, #208	@ 0xd0
 80008e0:	443b      	add	r3, r7
 80008e2:	2225      	movs	r2, #37	@ 0x25
 80008e4:	f803 2ca8 	strb.w	r2, [r3, #-168]
            count_Arg++;
 80008e8:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	@ 0xca
 80008ec:	3301      	adds	r3, #1
 80008ee:	f8a7 30ca 	strh.w	r3, [r7, #202]	@ 0xca

            unsigned short int isArg = 1U;
 80008f2:	2301      	movs	r3, #1
 80008f4:	f8a7 30c8 	strh.w	r3, [r7, #200]	@ 0xc8

            while(1){
                if(str[count_In] == 'd'| str[count_In] == 's'| str[count_In] == 'u' | str[count_In] == 'f'){
 80008f8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80008fc:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8000900:	4413      	add	r3, r2
 8000902:	781b      	ldrb	r3, [r3, #0]
 8000904:	2b64      	cmp	r3, #100	@ 0x64
 8000906:	bf0c      	ite	eq
 8000908:	2301      	moveq	r3, #1
 800090a:	2300      	movne	r3, #0
 800090c:	b2da      	uxtb	r2, r3
 800090e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8000912:	f8d7 10e0 	ldr.w	r1, [r7, #224]	@ 0xe0
 8000916:	440b      	add	r3, r1
 8000918:	781b      	ldrb	r3, [r3, #0]
 800091a:	2b73      	cmp	r3, #115	@ 0x73
 800091c:	bf0c      	ite	eq
 800091e:	2301      	moveq	r3, #1
 8000920:	2300      	movne	r3, #0
 8000922:	b2db      	uxtb	r3, r3
 8000924:	4313      	orrs	r3, r2
 8000926:	b2db      	uxtb	r3, r3
 8000928:	4619      	mov	r1, r3
 800092a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800092e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8000932:	4413      	add	r3, r2
 8000934:	781b      	ldrb	r3, [r3, #0]
 8000936:	2b75      	cmp	r3, #117	@ 0x75
 8000938:	bf0c      	ite	eq
 800093a:	2301      	moveq	r3, #1
 800093c:	2300      	movne	r3, #0
 800093e:	b2db      	uxtb	r3, r3
 8000940:	430b      	orrs	r3, r1
 8000942:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	@ 0xce
 8000946:	f8d7 10e0 	ldr.w	r1, [r7, #224]	@ 0xe0
 800094a:	440a      	add	r2, r1
 800094c:	7812      	ldrb	r2, [r2, #0]
 800094e:	2a66      	cmp	r2, #102	@ 0x66
 8000950:	bf0c      	ite	eq
 8000952:	2201      	moveq	r2, #1
 8000954:	2200      	movne	r2, #0
 8000956:	b2d2      	uxtb	r2, r2
 8000958:	4313      	orrs	r3, r2
 800095a:	2b00      	cmp	r3, #0
 800095c:	d00c      	beq.n	8000978 <Dprintf+0x124>
                    argString_In[count_Arg] = str[count_In];
 800095e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8000962:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8000966:	441a      	add	r2, r3
 8000968:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	@ 0xca
 800096c:	7812      	ldrb	r2, [r2, #0]
 800096e:	33d0      	adds	r3, #208	@ 0xd0
 8000970:	443b      	add	r3, r7
 8000972:	f803 2ca8 	strb.w	r2, [r3, #-168]
                    break;
 8000976:	e03c      	b.n	80009f2 <Dprintf+0x19e>
                }else if(str[count_In] == '%'){
 8000978:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800097c:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8000980:	4413      	add	r3, r2
 8000982:	781b      	ldrb	r3, [r3, #0]
 8000984:	2b25      	cmp	r3, #37	@ 0x25
 8000986:	d114      	bne.n	80009b2 <Dprintf+0x15e>
                    resultString[count_Out] = '%';
 8000988:	f8b7 30cc 	ldrh.w	r3, [r7, #204]	@ 0xcc
 800098c:	33d0      	adds	r3, #208	@ 0xd0
 800098e:	443b      	add	r3, r7
 8000990:	2225      	movs	r2, #37	@ 0x25
 8000992:	f803 2c88 	strb.w	r2, [r3, #-136]
                    count_Out++;
 8000996:	f8b7 30cc 	ldrh.w	r3, [r7, #204]	@ 0xcc
 800099a:	3301      	adds	r3, #1
 800099c:	f8a7 30cc 	strh.w	r3, [r7, #204]	@ 0xcc
                    count_In++;
 80009a0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80009a4:	3301      	adds	r3, #1
 80009a6:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
                    isArg = 0U;
 80009aa:	2300      	movs	r3, #0
 80009ac:	f8a7 30c8 	strh.w	r3, [r7, #200]	@ 0xc8
                    break;
 80009b0:	e01f      	b.n	80009f2 <Dprintf+0x19e>
                }else if(str[count_In] == '\0'){
 80009b2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80009b6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80009ba:	4413      	add	r3, r2
 80009bc:	781b      	ldrb	r3, [r3, #0]
 80009be:	2b00      	cmp	r3, #0
 80009c0:	f000 80d6 	beq.w	8000b70 <Dprintf+0x31c>
                    return;
                }else{
                    argString_In[count_Arg] = str[count_In];
 80009c4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80009c8:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80009cc:	441a      	add	r2, r3
 80009ce:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	@ 0xca
 80009d2:	7812      	ldrb	r2, [r2, #0]
 80009d4:	33d0      	adds	r3, #208	@ 0xd0
 80009d6:	443b      	add	r3, r7
 80009d8:	f803 2ca8 	strb.w	r2, [r3, #-168]
                    count_Arg++;
 80009dc:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	@ 0xca
 80009e0:	3301      	adds	r3, #1
 80009e2:	f8a7 30ca 	strh.w	r3, [r7, #202]	@ 0xca
                    count_In++;
 80009e6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80009ea:	3301      	adds	r3, #1
 80009ec:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
                if(str[count_In] == 'd'| str[count_In] == 's'| str[count_In] == 'u' | str[count_In] == 'f'){
 80009f0:	e782      	b.n	80008f8 <Dprintf+0xa4>
                }
            }

            if(isArg){
 80009f2:	f8b7 30c8 	ldrh.w	r3, [r7, #200]	@ 0xc8
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	f000 80a0 	beq.w	8000b3c <Dprintf+0x2e8>
                count_Arg++;
 80009fc:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	@ 0xca
 8000a00:	3301      	adds	r3, #1
 8000a02:	f8a7 30ca 	strh.w	r3, [r7, #202]	@ 0xca
                argString_In[count_Arg] = '\0';
 8000a06:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	@ 0xca
 8000a0a:	33d0      	adds	r3, #208	@ 0xd0
 8000a0c:	443b      	add	r3, r7
 8000a0e:	2200      	movs	r2, #0
 8000a10:	f803 2ca8 	strb.w	r2, [r3, #-168]

                switch(str[count_In]){
 8000a14:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8000a18:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8000a1c:	4413      	add	r3, r2
 8000a1e:	781b      	ldrb	r3, [r3, #0]
 8000a20:	3b64      	subs	r3, #100	@ 0x64
 8000a22:	2b11      	cmp	r3, #17
 8000a24:	d85a      	bhi.n	8000adc <Dprintf+0x288>
 8000a26:	a201      	add	r2, pc, #4	@ (adr r2, 8000a2c <Dprintf+0x1d8>)
 8000a28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a2c:	08000a75 	.word	0x08000a75
 8000a30:	08000add 	.word	0x08000add
 8000a34:	08000abd 	.word	0x08000abd
 8000a38:	08000add 	.word	0x08000add
 8000a3c:	08000add 	.word	0x08000add
 8000a40:	08000add 	.word	0x08000add
 8000a44:	08000add 	.word	0x08000add
 8000a48:	08000add 	.word	0x08000add
 8000a4c:	08000add 	.word	0x08000add
 8000a50:	08000add 	.word	0x08000add
 8000a54:	08000add 	.word	0x08000add
 8000a58:	08000add 	.word	0x08000add
 8000a5c:	08000add 	.word	0x08000add
 8000a60:	08000add 	.word	0x08000add
 8000a64:	08000add 	.word	0x08000add
 8000a68:	08000a8d 	.word	0x08000a8d
 8000a6c:	08000add 	.word	0x08000add
 8000a70:	08000aa5 	.word	0x08000aa5
                case 'd':
                    sprintf(argString_Out, argString_In, va_arg(ap, int));
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	1d1a      	adds	r2, r3, #4
 8000a78:	607a      	str	r2, [r7, #4]
 8000a7a:	681a      	ldr	r2, [r3, #0]
 8000a7c:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 8000a80:	f107 0308 	add.w	r3, r7, #8
 8000a84:	4618      	mov	r0, r3
 8000a86:	f004 ff73 	bl	8005970 <siprintf>
                    break;
 8000a8a:	e027      	b.n	8000adc <Dprintf+0x288>
                case 's':
                    sprintf(argString_Out, argString_In, va_arg(ap, char*));
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	1d1a      	adds	r2, r3, #4
 8000a90:	607a      	str	r2, [r7, #4]
 8000a92:	681a      	ldr	r2, [r3, #0]
 8000a94:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 8000a98:	f107 0308 	add.w	r3, r7, #8
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	f004 ff67 	bl	8005970 <siprintf>
                    break;
 8000aa2:	e01b      	b.n	8000adc <Dprintf+0x288>
                case 'u':
                    sprintf(argString_Out, argString_In, va_arg(ap, unsigned int));
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	1d1a      	adds	r2, r3, #4
 8000aa8:	607a      	str	r2, [r7, #4]
 8000aaa:	681a      	ldr	r2, [r3, #0]
 8000aac:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 8000ab0:	f107 0308 	add.w	r3, r7, #8
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	f004 ff5b 	bl	8005970 <siprintf>
                    break;
 8000aba:	e00f      	b.n	8000adc <Dprintf+0x288>
                case 'f':
                    sprintf(argString_Out, argString_In, va_arg(ap, double));
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	3307      	adds	r3, #7
 8000ac0:	f023 0307 	bic.w	r3, r3, #7
 8000ac4:	f103 0208 	add.w	r2, r3, #8
 8000ac8:	607a      	str	r2, [r7, #4]
 8000aca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ace:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 8000ad2:	f107 0008 	add.w	r0, r7, #8
 8000ad6:	f004 ff4b 	bl	8005970 <siprintf>
                    break;
 8000ada:	bf00      	nop
                }

                strcat(resultString, argString_Out);
 8000adc:	f107 0208 	add.w	r2, r7, #8
 8000ae0:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000ae4:	4611      	mov	r1, r2
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	f004 ff6a 	bl	80059c0 <strcat>

                count_Out += strlen(argString_Out);
 8000aec:	f107 0308 	add.w	r3, r7, #8
 8000af0:	4618      	mov	r0, r3
 8000af2:	f7ff fb6d 	bl	80001d0 <strlen>
 8000af6:	4603      	mov	r3, r0
 8000af8:	b29a      	uxth	r2, r3
 8000afa:	f8b7 30cc 	ldrh.w	r3, [r7, #204]	@ 0xcc
 8000afe:	4413      	add	r3, r2
 8000b00:	f8a7 30cc 	strh.w	r3, [r7, #204]	@ 0xcc
                count_In++;
 8000b04:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8000b08:	3301      	adds	r3, #1
 8000b0a:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
 8000b0e:	e015      	b.n	8000b3c <Dprintf+0x2e8>
            }
        }else{
            resultString[count_Out] = str[count_In];
 8000b10:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8000b14:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8000b18:	441a      	add	r2, r3
 8000b1a:	f8b7 30cc 	ldrh.w	r3, [r7, #204]	@ 0xcc
 8000b1e:	7812      	ldrb	r2, [r2, #0]
 8000b20:	33d0      	adds	r3, #208	@ 0xd0
 8000b22:	443b      	add	r3, r7
 8000b24:	f803 2c88 	strb.w	r2, [r3, #-136]

            count_In++;
 8000b28:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8000b2c:	3301      	adds	r3, #1
 8000b2e:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
            count_Out++;
 8000b32:	f8b7 30cc 	ldrh.w	r3, [r7, #204]	@ 0xcc
 8000b36:	3301      	adds	r3, #1
 8000b38:	f8a7 30cc 	strh.w	r3, [r7, #204]	@ 0xcc
    while(str[count_In] != '\0'){
 8000b3c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8000b40:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8000b44:	4413      	add	r3, r2
 8000b46:	781b      	ldrb	r3, [r3, #0]
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	f47f aeb5 	bne.w	80008b8 <Dprintf+0x64>
        }
    }

    va_end(ap);

    HAL_UART_Transmit(_DprintfUart, (uint8_t *)resultString, strlen(resultString), 300);
 8000b4e:	4b0c      	ldr	r3, [pc, #48]	@ (8000b80 <Dprintf+0x32c>)
 8000b50:	681c      	ldr	r4, [r3, #0]
 8000b52:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000b56:	4618      	mov	r0, r3
 8000b58:	f7ff fb3a 	bl	80001d0 <strlen>
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	b29a      	uxth	r2, r3
 8000b60:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 8000b64:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8000b68:	4620      	mov	r0, r4
 8000b6a:	f003 ffd5 	bl	8004b18 <HAL_UART_Transmit>
 8000b6e:	e000      	b.n	8000b72 <Dprintf+0x31e>
                    return;
 8000b70:	bf00      	nop
}
 8000b72:	37d4      	adds	r7, #212	@ 0xd4
 8000b74:	46bd      	mov	sp, r7
 8000b76:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8000b7a:	b004      	add	sp, #16
 8000b7c:	4770      	bx	lr
 8000b7e:	bf00      	nop
 8000b80:	200000d0 	.word	0x200000d0

08000b84 <Init>:
static void MX_TIM2_Init(void);
static void MX_TIM3_Init(void);
static void MX_TIM1_Init(void);
static void MX_TIM15_Init(void);
/* USER CODE BEGIN PFP */
void Init(){
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b082      	sub	sp, #8
 8000b88:	af00      	add	r7, sp, #0
	uint32_t _lastReadTick;

	//Start Program
	_Init_7Seg();
 8000b8a:	f000 f85f 	bl	8000c4c <_Init_7Seg>
	_7SegReset();
 8000b8e:	f7ff fbb1 	bl	80002f4 <_7SegReset>

	_7SegSetUpAnimation(_SETUP_STEP_START_PROGRAM);
 8000b92:	2001      	movs	r0, #1
 8000b94:	f7ff fbba 	bl	800030c <_7SegSetUpAnimation>
	_lastReadTick = HAL_GetTick();
 8000b98:	f000 fe8e 	bl	80018b8 <HAL_GetTick>
 8000b9c:	6078      	str	r0, [r7, #4]

	//Init Motor
	_Init_Motor();
 8000b9e:	f000 f875 	bl	8000c8c <_Init_Motor>

	_lastReadTick = _AccurateDelay(200, _lastReadTick);
 8000ba2:	6879      	ldr	r1, [r7, #4]
 8000ba4:	20c8      	movs	r0, #200	@ 0xc8
 8000ba6:	f7ff fe19 	bl	80007dc <_AccurateDelay>
 8000baa:	6078      	str	r0, [r7, #4]
	_7SegSetUpAnimation(_SETUP_STEP_SETUP_MOTOR);
 8000bac:	2002      	movs	r0, #2
 8000bae:	f7ff fbad 	bl	800030c <_7SegSetUpAnimation>

	//Init Switch And Read State
	_Init_Switch();
 8000bb2:	f000 f899 	bl	8000ce8 <_Init_Switch>

	_lastReadTick = _AccurateDelay(200, _lastReadTick);
 8000bb6:	6879      	ldr	r1, [r7, #4]
 8000bb8:	20c8      	movs	r0, #200	@ 0xc8
 8000bba:	f7ff fe0f 	bl	80007dc <_AccurateDelay>
 8000bbe:	6078      	str	r0, [r7, #4]
	_7SegSetUpAnimation(_SETUP_STEP_SETUP_AND_READ_SWICH);
 8000bc0:	2003      	movs	r0, #3
 8000bc2:	f7ff fba3 	bl	800030c <_7SegSetUpAnimation>

	//Init Console
	_Init_Console();
 8000bc6:	f000 f8b3 	bl	8000d30 <_Init_Console>

	_lastReadTick = _AccurateDelay(200, _lastReadTick);
 8000bca:	6879      	ldr	r1, [r7, #4]
 8000bcc:	20c8      	movs	r0, #200	@ 0xc8
 8000bce:	f7ff fe05 	bl	80007dc <_AccurateDelay>
 8000bd2:	6078      	str	r0, [r7, #4]
	_7SegSetUpAnimation(_SETUP_STEP_SETUP_CONSOLE);
 8000bd4:	2004      	movs	r0, #4
 8000bd6:	f7ff fb99 	bl	800030c <_7SegSetUpAnimation>

	_lastReadTick = _AccurateDelay(200, _lastReadTick);
 8000bda:	6879      	ldr	r1, [r7, #4]
 8000bdc:	20c8      	movs	r0, #200	@ 0xc8
 8000bde:	f7ff fdfd 	bl	80007dc <_AccurateDelay>
 8000be2:	6078      	str	r0, [r7, #4]
	_7SegSetUpAnimation(_SETUP_STEP_NULL3);
 8000be4:	2005      	movs	r0, #5
 8000be6:	f7ff fb91 	bl	800030c <_7SegSetUpAnimation>

	_lastReadTick = _AccurateDelay(200, _lastReadTick);
 8000bea:	6879      	ldr	r1, [r7, #4]
 8000bec:	20c8      	movs	r0, #200	@ 0xc8
 8000bee:	f7ff fdf5 	bl	80007dc <_AccurateDelay>
 8000bf2:	6078      	str	r0, [r7, #4]
	_7SegSetUpAnimation(_SETUP_STEP_NULL4);
 8000bf4:	2006      	movs	r0, #6
 8000bf6:	f7ff fb89 	bl	800030c <_7SegSetUpAnimation>

	_lastReadTick = _AccurateDelay(200, _lastReadTick);
 8000bfa:	6879      	ldr	r1, [r7, #4]
 8000bfc:	20c8      	movs	r0, #200	@ 0xc8
 8000bfe:	f7ff fded 	bl	80007dc <_AccurateDelay>
 8000c02:	6078      	str	r0, [r7, #4]
	_7SegSetUpAnimation(_SETUP_STEP_NULL5);
 8000c04:	2007      	movs	r0, #7
 8000c06:	f7ff fb81 	bl	800030c <_7SegSetUpAnimation>

	_lastReadTick = _AccurateDelay(200, _lastReadTick);
 8000c0a:	6879      	ldr	r1, [r7, #4]
 8000c0c:	20c8      	movs	r0, #200	@ 0xc8
 8000c0e:	f7ff fde5 	bl	80007dc <_AccurateDelay>
 8000c12:	6078      	str	r0, [r7, #4]
	_7SegSetUpAnimation(_SETUP_STEP_NULL6);
 8000c14:	2008      	movs	r0, #8
 8000c16:	f7ff fb79 	bl	800030c <_7SegSetUpAnimation>

	_lastReadTick = _AccurateDelay(200, _lastReadTick);
 8000c1a:	6879      	ldr	r1, [r7, #4]
 8000c1c:	20c8      	movs	r0, #200	@ 0xc8
 8000c1e:	f7ff fddd 	bl	80007dc <_AccurateDelay>
 8000c22:	6078      	str	r0, [r7, #4]
	_7SegSetUpAnimation(_SETUP_STEP_FINISH);
 8000c24:	2009      	movs	r0, #9
 8000c26:	f7ff fb71 	bl	800030c <_7SegSetUpAnimation>

	_lastReadTick = _AccurateDelay(200, _lastReadTick);
 8000c2a:	6879      	ldr	r1, [r7, #4]
 8000c2c:	20c8      	movs	r0, #200	@ 0xc8
 8000c2e:	f7ff fdd5 	bl	80007dc <_AccurateDelay>
 8000c32:	6078      	str	r0, [r7, #4]
	_7SegReset();
 8000c34:	f7ff fb5e 	bl	80002f4 <_7SegReset>


	_lastReadTick = _AccurateDelay(200, _lastReadTick);
 8000c38:	6879      	ldr	r1, [r7, #4]
 8000c3a:	20c8      	movs	r0, #200	@ 0xc8
 8000c3c:	f7ff fdce 	bl	80007dc <_AccurateDelay>
 8000c40:	6078      	str	r0, [r7, #4]
}
 8000c42:	bf00      	nop
 8000c44:	3708      	adds	r7, #8
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bd80      	pop	{r7, pc}
	...

08000c4c <_Init_7Seg>:

void _Init_7Seg(){
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	af00      	add	r7, sp, #0
	Setting_7Seg.__7SegSi_GpioPort = _7SEG_SI_GPIO_Port;
 8000c50:	4b0c      	ldr	r3, [pc, #48]	@ (8000c84 <_Init_7Seg+0x38>)
 8000c52:	4a0d      	ldr	r2, [pc, #52]	@ (8000c88 <_Init_7Seg+0x3c>)
 8000c54:	601a      	str	r2, [r3, #0]
	Setting_7Seg.__7SegSi_Pin = _7SEG_SI_Pin;
 8000c56:	4b0b      	ldr	r3, [pc, #44]	@ (8000c84 <_Init_7Seg+0x38>)
 8000c58:	2240      	movs	r2, #64	@ 0x40
 8000c5a:	809a      	strh	r2, [r3, #4]
	Setting_7Seg.__7SegRck_GpioPort = _7SEG_RCK_GPIO_Port;
 8000c5c:	4b09      	ldr	r3, [pc, #36]	@ (8000c84 <_Init_7Seg+0x38>)
 8000c5e:	4a0a      	ldr	r2, [pc, #40]	@ (8000c88 <_Init_7Seg+0x3c>)
 8000c60:	609a      	str	r2, [r3, #8]
	Setting_7Seg.__7SegRck_Pin = _7SEG_RCK_Pin;
 8000c62:	4b08      	ldr	r3, [pc, #32]	@ (8000c84 <_Init_7Seg+0x38>)
 8000c64:	2220      	movs	r2, #32
 8000c66:	819a      	strh	r2, [r3, #12]
	Setting_7Seg.__7SegSck_GpioPort = _7SEG_SCK_GPIO_Port;
 8000c68:	4b06      	ldr	r3, [pc, #24]	@ (8000c84 <_Init_7Seg+0x38>)
 8000c6a:	4a07      	ldr	r2, [pc, #28]	@ (8000c88 <_Init_7Seg+0x3c>)
 8000c6c:	611a      	str	r2, [r3, #16]
	Setting_7Seg.__7SegSck_Pin = _7SEG_SCK_Pin;
 8000c6e:	4b05      	ldr	r3, [pc, #20]	@ (8000c84 <_Init_7Seg+0x38>)
 8000c70:	2210      	movs	r2, #16
 8000c72:	829a      	strh	r2, [r3, #20]

	_7SegInit(&Setting_7Seg);
 8000c74:	4803      	ldr	r0, [pc, #12]	@ (8000c84 <_Init_7Seg+0x38>)
 8000c76:	f7ff fb03 	bl	8000280 <_7SegInit>
	_7SegReset();
 8000c7a:	f7ff fb3b 	bl	80002f4 <_7SegReset>
}
 8000c7e:	bf00      	nop
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	bf00      	nop
 8000c84:	2000033c 	.word	0x2000033c
 8000c88:	48000400 	.word	0x48000400

08000c8c <_Init_Motor>:

void _Init_Motor(){
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	af00      	add	r7, sp, #0
	Setting_Motor.__MotorN1_Tim = &htim2;
 8000c90:	4b10      	ldr	r3, [pc, #64]	@ (8000cd4 <_Init_Motor+0x48>)
 8000c92:	4a11      	ldr	r2, [pc, #68]	@ (8000cd8 <_Init_Motor+0x4c>)
 8000c94:	601a      	str	r2, [r3, #0]
	Setting_Motor.__MotorN1_TimChannel = TIM_CHANNEL_2;
 8000c96:	4b0f      	ldr	r3, [pc, #60]	@ (8000cd4 <_Init_Motor+0x48>)
 8000c98:	2204      	movs	r2, #4
 8000c9a:	605a      	str	r2, [r3, #4]
	Setting_Motor.__MotorN2_Tim = &htim3;
 8000c9c:	4b0d      	ldr	r3, [pc, #52]	@ (8000cd4 <_Init_Motor+0x48>)
 8000c9e:	4a0f      	ldr	r2, [pc, #60]	@ (8000cdc <_Init_Motor+0x50>)
 8000ca0:	609a      	str	r2, [r3, #8]
	Setting_Motor.__MotorN2_TimChannel = TIM_CHANNEL_3;
 8000ca2:	4b0c      	ldr	r3, [pc, #48]	@ (8000cd4 <_Init_Motor+0x48>)
 8000ca4:	2208      	movs	r2, #8
 8000ca6:	60da      	str	r2, [r3, #12]

	Setting_Motor.__MotorP1_GpioPort = SIG_P1_GPIO_Port;
 8000ca8:	4b0a      	ldr	r3, [pc, #40]	@ (8000cd4 <_Init_Motor+0x48>)
 8000caa:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000cae:	611a      	str	r2, [r3, #16]
	Setting_Motor.__MotorP1_Pin = SIG_P1_Pin;
 8000cb0:	4b08      	ldr	r3, [pc, #32]	@ (8000cd4 <_Init_Motor+0x48>)
 8000cb2:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000cb6:	829a      	strh	r2, [r3, #20]
	Setting_Motor.__MotorP2_GpioPort = SIG_P2_GPIO_Port;
 8000cb8:	4b06      	ldr	r3, [pc, #24]	@ (8000cd4 <_Init_Motor+0x48>)
 8000cba:	4a09      	ldr	r2, [pc, #36]	@ (8000ce0 <_Init_Motor+0x54>)
 8000cbc:	619a      	str	r2, [r3, #24]
	Setting_Motor.__MotorP2_Pin = SIG_P2_Pin;
 8000cbe:	4b05      	ldr	r3, [pc, #20]	@ (8000cd4 <_Init_Motor+0x48>)
 8000cc0:	2202      	movs	r2, #2
 8000cc2:	839a      	strh	r2, [r3, #28]

	Setting_Motor.__DeadTime_TIM = &htim1;
 8000cc4:	4b03      	ldr	r3, [pc, #12]	@ (8000cd4 <_Init_Motor+0x48>)
 8000cc6:	4a07      	ldr	r2, [pc, #28]	@ (8000ce4 <_Init_Motor+0x58>)
 8000cc8:	621a      	str	r2, [r3, #32]

	_MotorInit(&Setting_Motor);
 8000cca:	4802      	ldr	r0, [pc, #8]	@ (8000cd4 <_Init_Motor+0x48>)
 8000ccc:	f7ff fbd4 	bl	8000478 <_MotorInit>
}
 8000cd0:	bf00      	nop
 8000cd2:	bd80      	pop	{r7, pc}
 8000cd4:	20000354 	.word	0x20000354
 8000cd8:	20000148 	.word	0x20000148
 8000cdc:	20000194 	.word	0x20000194
 8000ce0:	48000400 	.word	0x48000400
 8000ce4:	200000fc 	.word	0x200000fc

08000ce8 <_Init_Switch>:

void _Init_Switch(){
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	af00      	add	r7, sp, #0
	Setting_Swich.__ShiftRegisterClk_GpioPort = SW_CLK_GPIO_Port;
 8000cec:	4b0e      	ldr	r3, [pc, #56]	@ (8000d28 <_Init_Switch+0x40>)
 8000cee:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000cf2:	601a      	str	r2, [r3, #0]
	Setting_Swich.__ShiftRegisterClk_Pin = SW_CLK_Pin;
 8000cf4:	4b0c      	ldr	r3, [pc, #48]	@ (8000d28 <_Init_Switch+0x40>)
 8000cf6:	2210      	movs	r2, #16
 8000cf8:	809a      	strh	r2, [r3, #4]
	Setting_Swich.__ShiftRegisterQh_GpioPort = SW_QH_GPIO_Port;
 8000cfa:	4b0b      	ldr	r3, [pc, #44]	@ (8000d28 <_Init_Switch+0x40>)
 8000cfc:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000d00:	611a      	str	r2, [r3, #16]
	Setting_Swich.__ShiftRegisterQh_Pin = SW_QH_Pin;
 8000d02:	4b09      	ldr	r3, [pc, #36]	@ (8000d28 <_Init_Switch+0x40>)
 8000d04:	2201      	movs	r2, #1
 8000d06:	829a      	strh	r2, [r3, #20]
	Setting_Swich.__ShiftRegisterShLd_GpioPort = SW_SH_LD_GPIO_Port;
 8000d08:	4b07      	ldr	r3, [pc, #28]	@ (8000d28 <_Init_Switch+0x40>)
 8000d0a:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000d0e:	609a      	str	r2, [r3, #8]
	Setting_Swich.__ShiftRegisterShLd_Pin = SW_SH_LD_Pin;
 8000d10:	4b05      	ldr	r3, [pc, #20]	@ (8000d28 <_Init_Switch+0x40>)
 8000d12:	2202      	movs	r2, #2
 8000d14:	819a      	strh	r2, [r3, #12]

	_SwitchInit(&Setting_Swich);
 8000d16:	4804      	ldr	r0, [pc, #16]	@ (8000d28 <_Init_Switch+0x40>)
 8000d18:	f7ff fc70 	bl	80005fc <_SwitchInit>
	_SwitchRead(&SwitchReadData);
 8000d1c:	4803      	ldr	r0, [pc, #12]	@ (8000d2c <_Init_Switch+0x44>)
 8000d1e:	f7ff fc9f 	bl	8000660 <_SwitchRead>
}
 8000d22:	bf00      	nop
 8000d24:	bd80      	pop	{r7, pc}
 8000d26:	bf00      	nop
 8000d28:	20000378 	.word	0x20000378
 8000d2c:	20000394 	.word	0x20000394

08000d30 <_Init_Console>:

void _Init_Console(){
 8000d30:	b580      	push	{r7, lr}
 8000d32:	af00      	add	r7, sp, #0
	Setting_Console.__PcUart = &huart1;
 8000d34:	4b03      	ldr	r3, [pc, #12]	@ (8000d44 <_Init_Console+0x14>)
 8000d36:	4a04      	ldr	r2, [pc, #16]	@ (8000d48 <_Init_Console+0x18>)
 8000d38:	601a      	str	r2, [r3, #0]

	_ConsoleInit(&Setting_Console);
 8000d3a:	4802      	ldr	r0, [pc, #8]	@ (8000d44 <_Init_Console+0x14>)
 8000d3c:	f7ff fd66 	bl	800080c <_ConsoleInit>
}
 8000d40:	bf00      	nop
 8000d42:	bd80      	pop	{r7, pc}
 8000d44:	20000390 	.word	0x20000390
 8000d48:	2000022c 	.word	0x2000022c

08000d4c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d50:	f000 fd58 	bl	8001804 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d54:	f000 f820 	bl	8000d98 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d58:	f000 faa8 	bl	80012ac <MX_GPIO_Init>
  MX_CAN_Init();
 8000d5c:	f000 f878 	bl	8000e50 <MX_CAN_Init>
  MX_USART1_UART_Init();
 8000d60:	f000 fa40 	bl	80011e4 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000d64:	f000 fa70 	bl	8001248 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000d68:	f000 f8fc 	bl	8000f64 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000d6c:	f000 f970 	bl	8001050 <MX_TIM3_Init>
  MX_TIM1_Init();
 8000d70:	f000 f8a4 	bl	8000ebc <MX_TIM1_Init>
  MX_TIM15_Init();
 8000d74:	f000 f9e4 	bl	8001140 <MX_TIM15_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(LED_POWER_GPIO_Port, LED_POWER_Pin, GPIO_PIN_SET); //Power Led ON
 8000d78:	2201      	movs	r2, #1
 8000d7a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000d7e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d82:	f001 f9b9 	bl	80020f8 <HAL_GPIO_WritePin>

  Init(); //Init
 8000d86:	f7ff fefd 	bl	8000b84 <Init>

  Dprintf("Hello World!!");
 8000d8a:	4802      	ldr	r0, [pc, #8]	@ (8000d94 <main+0x48>)
 8000d8c:	f7ff fd62 	bl	8000854 <Dprintf>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000d90:	bf00      	nop
 8000d92:	e7fd      	b.n	8000d90 <main+0x44>
 8000d94:	080062e8 	.word	0x080062e8

08000d98 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b096      	sub	sp, #88	@ 0x58
 8000d9c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d9e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000da2:	2228      	movs	r2, #40	@ 0x28
 8000da4:	2100      	movs	r1, #0
 8000da6:	4618      	mov	r0, r3
 8000da8:	f004 fe02 	bl	80059b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000dac:	f107 031c 	add.w	r3, r7, #28
 8000db0:	2200      	movs	r2, #0
 8000db2:	601a      	str	r2, [r3, #0]
 8000db4:	605a      	str	r2, [r3, #4]
 8000db6:	609a      	str	r2, [r3, #8]
 8000db8:	60da      	str	r2, [r3, #12]
 8000dba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000dbc:	1d3b      	adds	r3, r7, #4
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	601a      	str	r2, [r3, #0]
 8000dc2:	605a      	str	r2, [r3, #4]
 8000dc4:	609a      	str	r2, [r3, #8]
 8000dc6:	60da      	str	r2, [r3, #12]
 8000dc8:	611a      	str	r2, [r3, #16]
 8000dca:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000dcc:	2302      	movs	r3, #2
 8000dce:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000dd0:	2301      	movs	r3, #1
 8000dd2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000dd4:	2310      	movs	r3, #16
 8000dd6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000dd8:	2302      	movs	r3, #2
 8000dda:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL15;
 8000de0:	f44f 1350 	mov.w	r3, #3407872	@ 0x340000
 8000de4:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000de6:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000dea:	4618      	mov	r0, r3
 8000dec:	f001 f99c 	bl	8002128 <HAL_RCC_OscConfig>
 8000df0:	4603      	mov	r3, r0
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d001      	beq.n	8000dfa <SystemClock_Config+0x62>
  {
    Error_Handler();
 8000df6:	f000 fabb 	bl	8001370 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000dfa:	230f      	movs	r3, #15
 8000dfc:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000dfe:	2302      	movs	r3, #2
 8000e00:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e02:	2300      	movs	r3, #0
 8000e04:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000e06:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000e0a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000e10:	f107 031c 	add.w	r3, r7, #28
 8000e14:	2102      	movs	r1, #2
 8000e16:	4618      	mov	r0, r3
 8000e18:	f002 f9c4 	bl	80031a4 <HAL_RCC_ClockConfig>
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d001      	beq.n	8000e26 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000e22:	f000 faa5 	bl	8001370 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_TIM1;
 8000e26:	f241 0301 	movw	r3, #4097	@ 0x1001
 8000e2a:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 8000e30:	2300      	movs	r3, #0
 8000e32:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e34:	1d3b      	adds	r3, r7, #4
 8000e36:	4618      	mov	r0, r3
 8000e38:	f002 fbd4 	bl	80035e4 <HAL_RCCEx_PeriphCLKConfig>
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d001      	beq.n	8000e46 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000e42:	f000 fa95 	bl	8001370 <Error_Handler>
  }
}
 8000e46:	bf00      	nop
 8000e48:	3758      	adds	r7, #88	@ 0x58
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bd80      	pop	{r7, pc}
	...

08000e50 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 8000e54:	4b17      	ldr	r3, [pc, #92]	@ (8000eb4 <MX_CAN_Init+0x64>)
 8000e56:	4a18      	ldr	r2, [pc, #96]	@ (8000eb8 <MX_CAN_Init+0x68>)
 8000e58:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 3;
 8000e5a:	4b16      	ldr	r3, [pc, #88]	@ (8000eb4 <MX_CAN_Init+0x64>)
 8000e5c:	2203      	movs	r2, #3
 8000e5e:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000e60:	4b14      	ldr	r3, [pc, #80]	@ (8000eb4 <MX_CAN_Init+0x64>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000e66:	4b13      	ldr	r3, [pc, #76]	@ (8000eb4 <MX_CAN_Init+0x64>)
 8000e68:	2200      	movs	r2, #0
 8000e6a:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_7TQ;
 8000e6c:	4b11      	ldr	r3, [pc, #68]	@ (8000eb4 <MX_CAN_Init+0x64>)
 8000e6e:	f44f 22c0 	mov.w	r2, #393216	@ 0x60000
 8000e72:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000e74:	4b0f      	ldr	r3, [pc, #60]	@ (8000eb4 <MX_CAN_Init+0x64>)
 8000e76:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8000e7a:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000e7c:	4b0d      	ldr	r3, [pc, #52]	@ (8000eb4 <MX_CAN_Init+0x64>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8000e82:	4b0c      	ldr	r3, [pc, #48]	@ (8000eb4 <MX_CAN_Init+0x64>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000e88:	4b0a      	ldr	r3, [pc, #40]	@ (8000eb4 <MX_CAN_Init+0x64>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8000e8e:	4b09      	ldr	r3, [pc, #36]	@ (8000eb4 <MX_CAN_Init+0x64>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000e94:	4b07      	ldr	r3, [pc, #28]	@ (8000eb4 <MX_CAN_Init+0x64>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8000e9a:	4b06      	ldr	r3, [pc, #24]	@ (8000eb4 <MX_CAN_Init+0x64>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000ea0:	4804      	ldr	r0, [pc, #16]	@ (8000eb4 <MX_CAN_Init+0x64>)
 8000ea2:	f000 fd15 	bl	80018d0 <HAL_CAN_Init>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d001      	beq.n	8000eb0 <MX_CAN_Init+0x60>
  {
    Error_Handler();
 8000eac:	f000 fa60 	bl	8001370 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8000eb0:	bf00      	nop
 8000eb2:	bd80      	pop	{r7, pc}
 8000eb4:	200000d4 	.word	0x200000d4
 8000eb8:	40006400 	.word	0x40006400

08000ebc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b088      	sub	sp, #32
 8000ec0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ec2:	f107 0310 	add.w	r3, r7, #16
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	601a      	str	r2, [r3, #0]
 8000eca:	605a      	str	r2, [r3, #4]
 8000ecc:	609a      	str	r2, [r3, #8]
 8000ece:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ed0:	1d3b      	adds	r3, r7, #4
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	601a      	str	r2, [r3, #0]
 8000ed6:	605a      	str	r2, [r3, #4]
 8000ed8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000eda:	4b20      	ldr	r3, [pc, #128]	@ (8000f5c <MX_TIM1_Init+0xa0>)
 8000edc:	4a20      	ldr	r2, [pc, #128]	@ (8000f60 <MX_TIM1_Init+0xa4>)
 8000ede:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 6-1;
 8000ee0:	4b1e      	ldr	r3, [pc, #120]	@ (8000f5c <MX_TIM1_Init+0xa0>)
 8000ee2:	2205      	movs	r2, #5
 8000ee4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ee6:	4b1d      	ldr	r3, [pc, #116]	@ (8000f5c <MX_TIM1_Init+0xa0>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xffff-1;
 8000eec:	4b1b      	ldr	r3, [pc, #108]	@ (8000f5c <MX_TIM1_Init+0xa0>)
 8000eee:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8000ef2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ef4:	4b19      	ldr	r3, [pc, #100]	@ (8000f5c <MX_TIM1_Init+0xa0>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000efa:	4b18      	ldr	r3, [pc, #96]	@ (8000f5c <MX_TIM1_Init+0xa0>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f00:	4b16      	ldr	r3, [pc, #88]	@ (8000f5c <MX_TIM1_Init+0xa0>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000f06:	4815      	ldr	r0, [pc, #84]	@ (8000f5c <MX_TIM1_Init+0xa0>)
 8000f08:	f002 fc92 	bl	8003830 <HAL_TIM_Base_Init>
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d001      	beq.n	8000f16 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8000f12:	f000 fa2d 	bl	8001370 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f16:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f1a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000f1c:	f107 0310 	add.w	r3, r7, #16
 8000f20:	4619      	mov	r1, r3
 8000f22:	480e      	ldr	r0, [pc, #56]	@ (8000f5c <MX_TIM1_Init+0xa0>)
 8000f24:	f003 f86c 	bl	8004000 <HAL_TIM_ConfigClockSource>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d001      	beq.n	8000f32 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8000f2e:	f000 fa1f 	bl	8001370 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f32:	2300      	movs	r3, #0
 8000f34:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000f36:	2300      	movs	r3, #0
 8000f38:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000f3e:	1d3b      	adds	r3, r7, #4
 8000f40:	4619      	mov	r1, r3
 8000f42:	4806      	ldr	r0, [pc, #24]	@ (8000f5c <MX_TIM1_Init+0xa0>)
 8000f44:	f003 fd10 	bl	8004968 <HAL_TIMEx_MasterConfigSynchronization>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d001      	beq.n	8000f52 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000f4e:	f000 fa0f 	bl	8001370 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000f52:	bf00      	nop
 8000f54:	3720      	adds	r7, #32
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd80      	pop	{r7, pc}
 8000f5a:	bf00      	nop
 8000f5c:	200000fc 	.word	0x200000fc
 8000f60:	40012c00 	.word	0x40012c00

08000f64 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b08e      	sub	sp, #56	@ 0x38
 8000f68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f6a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000f6e:	2200      	movs	r2, #0
 8000f70:	601a      	str	r2, [r3, #0]
 8000f72:	605a      	str	r2, [r3, #4]
 8000f74:	609a      	str	r2, [r3, #8]
 8000f76:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f78:	f107 031c 	add.w	r3, r7, #28
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	601a      	str	r2, [r3, #0]
 8000f80:	605a      	str	r2, [r3, #4]
 8000f82:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f84:	463b      	mov	r3, r7
 8000f86:	2200      	movs	r2, #0
 8000f88:	601a      	str	r2, [r3, #0]
 8000f8a:	605a      	str	r2, [r3, #4]
 8000f8c:	609a      	str	r2, [r3, #8]
 8000f8e:	60da      	str	r2, [r3, #12]
 8000f90:	611a      	str	r2, [r3, #16]
 8000f92:	615a      	str	r2, [r3, #20]
 8000f94:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000f96:	4b2d      	ldr	r3, [pc, #180]	@ (800104c <MX_TIM2_Init+0xe8>)
 8000f98:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000f9c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000f9e:	4b2b      	ldr	r3, [pc, #172]	@ (800104c <MX_TIM2_Init+0xe8>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fa4:	4b29      	ldr	r3, [pc, #164]	@ (800104c <MX_TIM2_Init+0xe8>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 60000-1;
 8000faa:	4b28      	ldr	r3, [pc, #160]	@ (800104c <MX_TIM2_Init+0xe8>)
 8000fac:	f64e 225f 	movw	r2, #59999	@ 0xea5f
 8000fb0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fb2:	4b26      	ldr	r3, [pc, #152]	@ (800104c <MX_TIM2_Init+0xe8>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fb8:	4b24      	ldr	r3, [pc, #144]	@ (800104c <MX_TIM2_Init+0xe8>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000fbe:	4823      	ldr	r0, [pc, #140]	@ (800104c <MX_TIM2_Init+0xe8>)
 8000fc0:	f002 fc36 	bl	8003830 <HAL_TIM_Base_Init>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d001      	beq.n	8000fce <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8000fca:	f000 f9d1 	bl	8001370 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000fce:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000fd2:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000fd4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000fd8:	4619      	mov	r1, r3
 8000fda:	481c      	ldr	r0, [pc, #112]	@ (800104c <MX_TIM2_Init+0xe8>)
 8000fdc:	f003 f810 	bl	8004000 <HAL_TIM_ConfigClockSource>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d001      	beq.n	8000fea <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8000fe6:	f000 f9c3 	bl	8001370 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000fea:	4818      	ldr	r0, [pc, #96]	@ (800104c <MX_TIM2_Init+0xe8>)
 8000fec:	f002 fd2d 	bl	8003a4a <HAL_TIM_PWM_Init>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d001      	beq.n	8000ffa <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8000ff6:	f000 f9bb 	bl	8001370 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ffe:	2300      	movs	r3, #0
 8001000:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001002:	f107 031c 	add.w	r3, r7, #28
 8001006:	4619      	mov	r1, r3
 8001008:	4810      	ldr	r0, [pc, #64]	@ (800104c <MX_TIM2_Init+0xe8>)
 800100a:	f003 fcad 	bl	8004968 <HAL_TIMEx_MasterConfigSynchronization>
 800100e:	4603      	mov	r3, r0
 8001010:	2b00      	cmp	r3, #0
 8001012:	d001      	beq.n	8001018 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8001014:	f000 f9ac 	bl	8001370 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001018:	2360      	movs	r3, #96	@ 0x60
 800101a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800101c:	2300      	movs	r3, #0
 800101e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001020:	2300      	movs	r3, #0
 8001022:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001024:	2300      	movs	r3, #0
 8001026:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001028:	463b      	mov	r3, r7
 800102a:	2204      	movs	r2, #4
 800102c:	4619      	mov	r1, r3
 800102e:	4807      	ldr	r0, [pc, #28]	@ (800104c <MX_TIM2_Init+0xe8>)
 8001030:	f002 fed2 	bl	8003dd8 <HAL_TIM_PWM_ConfigChannel>
 8001034:	4603      	mov	r3, r0
 8001036:	2b00      	cmp	r3, #0
 8001038:	d001      	beq.n	800103e <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 800103a:	f000 f999 	bl	8001370 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800103e:	4803      	ldr	r0, [pc, #12]	@ (800104c <MX_TIM2_Init+0xe8>)
 8001040:	f000 fa5e 	bl	8001500 <HAL_TIM_MspPostInit>

}
 8001044:	bf00      	nop
 8001046:	3738      	adds	r7, #56	@ 0x38
 8001048:	46bd      	mov	sp, r7
 800104a:	bd80      	pop	{r7, pc}
 800104c:	20000148 	.word	0x20000148

08001050 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b08e      	sub	sp, #56	@ 0x38
 8001054:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001056:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800105a:	2200      	movs	r2, #0
 800105c:	601a      	str	r2, [r3, #0]
 800105e:	605a      	str	r2, [r3, #4]
 8001060:	609a      	str	r2, [r3, #8]
 8001062:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001064:	f107 031c 	add.w	r3, r7, #28
 8001068:	2200      	movs	r2, #0
 800106a:	601a      	str	r2, [r3, #0]
 800106c:	605a      	str	r2, [r3, #4]
 800106e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001070:	463b      	mov	r3, r7
 8001072:	2200      	movs	r2, #0
 8001074:	601a      	str	r2, [r3, #0]
 8001076:	605a      	str	r2, [r3, #4]
 8001078:	609a      	str	r2, [r3, #8]
 800107a:	60da      	str	r2, [r3, #12]
 800107c:	611a      	str	r2, [r3, #16]
 800107e:	615a      	str	r2, [r3, #20]
 8001080:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001082:	4b2d      	ldr	r3, [pc, #180]	@ (8001138 <MX_TIM3_Init+0xe8>)
 8001084:	4a2d      	ldr	r2, [pc, #180]	@ (800113c <MX_TIM3_Init+0xec>)
 8001086:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001088:	4b2b      	ldr	r3, [pc, #172]	@ (8001138 <MX_TIM3_Init+0xe8>)
 800108a:	2200      	movs	r2, #0
 800108c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800108e:	4b2a      	ldr	r3, [pc, #168]	@ (8001138 <MX_TIM3_Init+0xe8>)
 8001090:	2200      	movs	r2, #0
 8001092:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 60000-1;
 8001094:	4b28      	ldr	r3, [pc, #160]	@ (8001138 <MX_TIM3_Init+0xe8>)
 8001096:	f64e 225f 	movw	r2, #59999	@ 0xea5f
 800109a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800109c:	4b26      	ldr	r3, [pc, #152]	@ (8001138 <MX_TIM3_Init+0xe8>)
 800109e:	2200      	movs	r2, #0
 80010a0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010a2:	4b25      	ldr	r3, [pc, #148]	@ (8001138 <MX_TIM3_Init+0xe8>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80010a8:	4823      	ldr	r0, [pc, #140]	@ (8001138 <MX_TIM3_Init+0xe8>)
 80010aa:	f002 fbc1 	bl	8003830 <HAL_TIM_Base_Init>
 80010ae:	4603      	mov	r3, r0
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d001      	beq.n	80010b8 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 80010b4:	f000 f95c 	bl	8001370 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010b8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80010bc:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80010be:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80010c2:	4619      	mov	r1, r3
 80010c4:	481c      	ldr	r0, [pc, #112]	@ (8001138 <MX_TIM3_Init+0xe8>)
 80010c6:	f002 ff9b 	bl	8004000 <HAL_TIM_ConfigClockSource>
 80010ca:	4603      	mov	r3, r0
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d001      	beq.n	80010d4 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 80010d0:	f000 f94e 	bl	8001370 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 80010d4:	4818      	ldr	r0, [pc, #96]	@ (8001138 <MX_TIM3_Init+0xe8>)
 80010d6:	f002 fc57 	bl	8003988 <HAL_TIM_OC_Init>
 80010da:	4603      	mov	r3, r0
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d001      	beq.n	80010e4 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 80010e0:	f000 f946 	bl	8001370 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010e4:	2300      	movs	r3, #0
 80010e6:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010e8:	2300      	movs	r3, #0
 80010ea:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80010ec:	f107 031c 	add.w	r3, r7, #28
 80010f0:	4619      	mov	r1, r3
 80010f2:	4811      	ldr	r0, [pc, #68]	@ (8001138 <MX_TIM3_Init+0xe8>)
 80010f4:	f003 fc38 	bl	8004968 <HAL_TIMEx_MasterConfigSynchronization>
 80010f8:	4603      	mov	r3, r0
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d001      	beq.n	8001102 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80010fe:	f000 f937 	bl	8001370 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001102:	2300      	movs	r3, #0
 8001104:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001106:	2300      	movs	r3, #0
 8001108:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800110a:	2300      	movs	r3, #0
 800110c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800110e:	2300      	movs	r3, #0
 8001110:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001112:	463b      	mov	r3, r7
 8001114:	2208      	movs	r2, #8
 8001116:	4619      	mov	r1, r3
 8001118:	4807      	ldr	r0, [pc, #28]	@ (8001138 <MX_TIM3_Init+0xe8>)
 800111a:	f002 fde3 	bl	8003ce4 <HAL_TIM_OC_ConfigChannel>
 800111e:	4603      	mov	r3, r0
 8001120:	2b00      	cmp	r3, #0
 8001122:	d001      	beq.n	8001128 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8001124:	f000 f924 	bl	8001370 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001128:	4803      	ldr	r0, [pc, #12]	@ (8001138 <MX_TIM3_Init+0xe8>)
 800112a:	f000 f9e9 	bl	8001500 <HAL_TIM_MspPostInit>

}
 800112e:	bf00      	nop
 8001130:	3738      	adds	r7, #56	@ 0x38
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}
 8001136:	bf00      	nop
 8001138:	20000194 	.word	0x20000194
 800113c:	40000400 	.word	0x40000400

08001140 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b088      	sub	sp, #32
 8001144:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001146:	f107 0310 	add.w	r3, r7, #16
 800114a:	2200      	movs	r2, #0
 800114c:	601a      	str	r2, [r3, #0]
 800114e:	605a      	str	r2, [r3, #4]
 8001150:	609a      	str	r2, [r3, #8]
 8001152:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001154:	1d3b      	adds	r3, r7, #4
 8001156:	2200      	movs	r2, #0
 8001158:	601a      	str	r2, [r3, #0]
 800115a:	605a      	str	r2, [r3, #4]
 800115c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 800115e:	4b1f      	ldr	r3, [pc, #124]	@ (80011dc <MX_TIM15_Init+0x9c>)
 8001160:	4a1f      	ldr	r2, [pc, #124]	@ (80011e0 <MX_TIM15_Init+0xa0>)
 8001162:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 8001164:	4b1d      	ldr	r3, [pc, #116]	@ (80011dc <MX_TIM15_Init+0x9c>)
 8001166:	2200      	movs	r2, #0
 8001168:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 800116a:	4b1c      	ldr	r3, [pc, #112]	@ (80011dc <MX_TIM15_Init+0x9c>)
 800116c:	2200      	movs	r2, #0
 800116e:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 8001170:	4b1a      	ldr	r3, [pc, #104]	@ (80011dc <MX_TIM15_Init+0x9c>)
 8001172:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001176:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001178:	4b18      	ldr	r3, [pc, #96]	@ (80011dc <MX_TIM15_Init+0x9c>)
 800117a:	2200      	movs	r2, #0
 800117c:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 800117e:	4b17      	ldr	r3, [pc, #92]	@ (80011dc <MX_TIM15_Init+0x9c>)
 8001180:	2200      	movs	r2, #0
 8001182:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001184:	4b15      	ldr	r3, [pc, #84]	@ (80011dc <MX_TIM15_Init+0x9c>)
 8001186:	2200      	movs	r2, #0
 8001188:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 800118a:	4814      	ldr	r0, [pc, #80]	@ (80011dc <MX_TIM15_Init+0x9c>)
 800118c:	f002 fb50 	bl	8003830 <HAL_TIM_Base_Init>
 8001190:	4603      	mov	r3, r0
 8001192:	2b00      	cmp	r3, #0
 8001194:	d001      	beq.n	800119a <MX_TIM15_Init+0x5a>
  {
    Error_Handler();
 8001196:	f000 f8eb 	bl	8001370 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800119a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800119e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 80011a0:	f107 0310 	add.w	r3, r7, #16
 80011a4:	4619      	mov	r1, r3
 80011a6:	480d      	ldr	r0, [pc, #52]	@ (80011dc <MX_TIM15_Init+0x9c>)
 80011a8:	f002 ff2a 	bl	8004000 <HAL_TIM_ConfigClockSource>
 80011ac:	4603      	mov	r3, r0
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d001      	beq.n	80011b6 <MX_TIM15_Init+0x76>
  {
    Error_Handler();
 80011b2:	f000 f8dd 	bl	8001370 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011b6:	2300      	movs	r3, #0
 80011b8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011ba:	2300      	movs	r3, #0
 80011bc:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 80011be:	1d3b      	adds	r3, r7, #4
 80011c0:	4619      	mov	r1, r3
 80011c2:	4806      	ldr	r0, [pc, #24]	@ (80011dc <MX_TIM15_Init+0x9c>)
 80011c4:	f003 fbd0 	bl	8004968 <HAL_TIMEx_MasterConfigSynchronization>
 80011c8:	4603      	mov	r3, r0
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d001      	beq.n	80011d2 <MX_TIM15_Init+0x92>
  {
    Error_Handler();
 80011ce:	f000 f8cf 	bl	8001370 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 80011d2:	bf00      	nop
 80011d4:	3720      	adds	r7, #32
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}
 80011da:	bf00      	nop
 80011dc:	200001e0 	.word	0x200001e0
 80011e0:	40014000 	.word	0x40014000

080011e4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80011e8:	4b15      	ldr	r3, [pc, #84]	@ (8001240 <MX_USART1_UART_Init+0x5c>)
 80011ea:	4a16      	ldr	r2, [pc, #88]	@ (8001244 <MX_USART1_UART_Init+0x60>)
 80011ec:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80011ee:	4b14      	ldr	r3, [pc, #80]	@ (8001240 <MX_USART1_UART_Init+0x5c>)
 80011f0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80011f4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80011f6:	4b12      	ldr	r3, [pc, #72]	@ (8001240 <MX_USART1_UART_Init+0x5c>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80011fc:	4b10      	ldr	r3, [pc, #64]	@ (8001240 <MX_USART1_UART_Init+0x5c>)
 80011fe:	2200      	movs	r2, #0
 8001200:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001202:	4b0f      	ldr	r3, [pc, #60]	@ (8001240 <MX_USART1_UART_Init+0x5c>)
 8001204:	2200      	movs	r2, #0
 8001206:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001208:	4b0d      	ldr	r3, [pc, #52]	@ (8001240 <MX_USART1_UART_Init+0x5c>)
 800120a:	220c      	movs	r2, #12
 800120c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800120e:	4b0c      	ldr	r3, [pc, #48]	@ (8001240 <MX_USART1_UART_Init+0x5c>)
 8001210:	2200      	movs	r2, #0
 8001212:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001214:	4b0a      	ldr	r3, [pc, #40]	@ (8001240 <MX_USART1_UART_Init+0x5c>)
 8001216:	2200      	movs	r2, #0
 8001218:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800121a:	4b09      	ldr	r3, [pc, #36]	@ (8001240 <MX_USART1_UART_Init+0x5c>)
 800121c:	2200      	movs	r2, #0
 800121e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001220:	4b07      	ldr	r3, [pc, #28]	@ (8001240 <MX_USART1_UART_Init+0x5c>)
 8001222:	2200      	movs	r2, #0
 8001224:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_MultiProcessor_Init(&huart1, 0, UART_WAKEUPMETHOD_IDLELINE) != HAL_OK)
 8001226:	2200      	movs	r2, #0
 8001228:	2100      	movs	r1, #0
 800122a:	4805      	ldr	r0, [pc, #20]	@ (8001240 <MX_USART1_UART_Init+0x5c>)
 800122c:	f003 fc0a 	bl	8004a44 <HAL_MultiProcessor_Init>
 8001230:	4603      	mov	r3, r0
 8001232:	2b00      	cmp	r3, #0
 8001234:	d001      	beq.n	800123a <MX_USART1_UART_Init+0x56>
  {
    Error_Handler();
 8001236:	f000 f89b 	bl	8001370 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800123a:	bf00      	nop
 800123c:	bd80      	pop	{r7, pc}
 800123e:	bf00      	nop
 8001240:	2000022c 	.word	0x2000022c
 8001244:	40013800 	.word	0x40013800

08001248 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800124c:	4b15      	ldr	r3, [pc, #84]	@ (80012a4 <MX_USART2_UART_Init+0x5c>)
 800124e:	4a16      	ldr	r2, [pc, #88]	@ (80012a8 <MX_USART2_UART_Init+0x60>)
 8001250:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8001252:	4b14      	ldr	r3, [pc, #80]	@ (80012a4 <MX_USART2_UART_Init+0x5c>)
 8001254:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 8001258:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800125a:	4b12      	ldr	r3, [pc, #72]	@ (80012a4 <MX_USART2_UART_Init+0x5c>)
 800125c:	2200      	movs	r2, #0
 800125e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001260:	4b10      	ldr	r3, [pc, #64]	@ (80012a4 <MX_USART2_UART_Init+0x5c>)
 8001262:	2200      	movs	r2, #0
 8001264:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001266:	4b0f      	ldr	r3, [pc, #60]	@ (80012a4 <MX_USART2_UART_Init+0x5c>)
 8001268:	2200      	movs	r2, #0
 800126a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800126c:	4b0d      	ldr	r3, [pc, #52]	@ (80012a4 <MX_USART2_UART_Init+0x5c>)
 800126e:	220c      	movs	r2, #12
 8001270:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001272:	4b0c      	ldr	r3, [pc, #48]	@ (80012a4 <MX_USART2_UART_Init+0x5c>)
 8001274:	2200      	movs	r2, #0
 8001276:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001278:	4b0a      	ldr	r3, [pc, #40]	@ (80012a4 <MX_USART2_UART_Init+0x5c>)
 800127a:	2200      	movs	r2, #0
 800127c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800127e:	4b09      	ldr	r3, [pc, #36]	@ (80012a4 <MX_USART2_UART_Init+0x5c>)
 8001280:	2200      	movs	r2, #0
 8001282:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001284:	4b07      	ldr	r3, [pc, #28]	@ (80012a4 <MX_USART2_UART_Init+0x5c>)
 8001286:	2200      	movs	r2, #0
 8001288:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_MultiProcessor_Init(&huart2, 0, UART_WAKEUPMETHOD_IDLELINE) != HAL_OK)
 800128a:	2200      	movs	r2, #0
 800128c:	2100      	movs	r1, #0
 800128e:	4805      	ldr	r0, [pc, #20]	@ (80012a4 <MX_USART2_UART_Init+0x5c>)
 8001290:	f003 fbd8 	bl	8004a44 <HAL_MultiProcessor_Init>
 8001294:	4603      	mov	r3, r0
 8001296:	2b00      	cmp	r3, #0
 8001298:	d001      	beq.n	800129e <MX_USART2_UART_Init+0x56>
  {
    Error_Handler();
 800129a:	f000 f869 	bl	8001370 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800129e:	bf00      	nop
 80012a0:	bd80      	pop	{r7, pc}
 80012a2:	bf00      	nop
 80012a4:	200002b4 	.word	0x200002b4
 80012a8:	40004400 	.word	0x40004400

080012ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b088      	sub	sp, #32
 80012b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012b2:	f107 030c 	add.w	r3, r7, #12
 80012b6:	2200      	movs	r2, #0
 80012b8:	601a      	str	r2, [r3, #0]
 80012ba:	605a      	str	r2, [r3, #4]
 80012bc:	609a      	str	r2, [r3, #8]
 80012be:	60da      	str	r2, [r3, #12]
 80012c0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012c2:	4b29      	ldr	r3, [pc, #164]	@ (8001368 <MX_GPIO_Init+0xbc>)
 80012c4:	695b      	ldr	r3, [r3, #20]
 80012c6:	4a28      	ldr	r2, [pc, #160]	@ (8001368 <MX_GPIO_Init+0xbc>)
 80012c8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80012cc:	6153      	str	r3, [r2, #20]
 80012ce:	4b26      	ldr	r3, [pc, #152]	@ (8001368 <MX_GPIO_Init+0xbc>)
 80012d0:	695b      	ldr	r3, [r3, #20]
 80012d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012d6:	60bb      	str	r3, [r7, #8]
 80012d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012da:	4b23      	ldr	r3, [pc, #140]	@ (8001368 <MX_GPIO_Init+0xbc>)
 80012dc:	695b      	ldr	r3, [r3, #20]
 80012de:	4a22      	ldr	r2, [pc, #136]	@ (8001368 <MX_GPIO_Init+0xbc>)
 80012e0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80012e4:	6153      	str	r3, [r2, #20]
 80012e6:	4b20      	ldr	r3, [pc, #128]	@ (8001368 <MX_GPIO_Init+0xbc>)
 80012e8:	695b      	ldr	r3, [r3, #20]
 80012ea:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80012ee:	607b      	str	r3, [r7, #4]
 80012f0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SW_SH_LD_Pin|SW_CLK_Pin|LED_POWER_Pin|SIG_P1_Pin, GPIO_PIN_RESET);
 80012f2:	2200      	movs	r2, #0
 80012f4:	f248 1112 	movw	r1, #33042	@ 0x8112
 80012f8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80012fc:	f000 fefc 	bl	80020f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SIG_P2_Pin|_7SEG_SCK_Pin|_7SEG_RCK_Pin|_7SEG_SI_Pin
 8001300:	2200      	movs	r2, #0
 8001302:	21f2      	movs	r1, #242	@ 0xf2
 8001304:	4819      	ldr	r0, [pc, #100]	@ (800136c <MX_GPIO_Init+0xc0>)
 8001306:	f000 fef7 	bl	80020f8 <HAL_GPIO_WritePin>
                          |LED_UART_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : SW_QH_Pin ROTARY_ENCODER_Z_Pin ROTARY_ENCODER_B_Pin ROTARY_ENCODER_A_Pin */
  GPIO_InitStruct.Pin = SW_QH_Pin|ROTARY_ENCODER_Z_Pin|ROTARY_ENCODER_B_Pin|ROTARY_ENCODER_A_Pin;
 800130a:	23e1      	movs	r3, #225	@ 0xe1
 800130c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800130e:	2300      	movs	r3, #0
 8001310:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001312:	2300      	movs	r3, #0
 8001314:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001316:	f107 030c 	add.w	r3, r7, #12
 800131a:	4619      	mov	r1, r3
 800131c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001320:	f000 fd60 	bl	8001de4 <HAL_GPIO_Init>

  /*Configure GPIO pins : SW_SH_LD_Pin SW_CLK_Pin LED_POWER_Pin SIG_P1_Pin */
  GPIO_InitStruct.Pin = SW_SH_LD_Pin|SW_CLK_Pin|LED_POWER_Pin|SIG_P1_Pin;
 8001324:	f248 1312 	movw	r3, #33042	@ 0x8112
 8001328:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800132a:	2301      	movs	r3, #1
 800132c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800132e:	2300      	movs	r3, #0
 8001330:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001332:	2300      	movs	r3, #0
 8001334:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001336:	f107 030c 	add.w	r3, r7, #12
 800133a:	4619      	mov	r1, r3
 800133c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001340:	f000 fd50 	bl	8001de4 <HAL_GPIO_Init>

  /*Configure GPIO pins : SIG_P2_Pin _7SEG_SCK_Pin _7SEG_RCK_Pin _7SEG_SI_Pin
                           LED_UART_Pin */
  GPIO_InitStruct.Pin = SIG_P2_Pin|_7SEG_SCK_Pin|_7SEG_RCK_Pin|_7SEG_SI_Pin
 8001344:	23f2      	movs	r3, #242	@ 0xf2
 8001346:	60fb      	str	r3, [r7, #12]
                          |LED_UART_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001348:	2301      	movs	r3, #1
 800134a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800134c:	2300      	movs	r3, #0
 800134e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001350:	2300      	movs	r3, #0
 8001352:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001354:	f107 030c 	add.w	r3, r7, #12
 8001358:	4619      	mov	r1, r3
 800135a:	4804      	ldr	r0, [pc, #16]	@ (800136c <MX_GPIO_Init+0xc0>)
 800135c:	f000 fd42 	bl	8001de4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001360:	bf00      	nop
 8001362:	3720      	adds	r7, #32
 8001364:	46bd      	mov	sp, r7
 8001366:	bd80      	pop	{r7, pc}
 8001368:	40021000 	.word	0x40021000
 800136c:	48000400 	.word	0x48000400

08001370 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001370:	b480      	push	{r7}
 8001372:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001374:	b672      	cpsid	i
}
 8001376:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001378:	bf00      	nop
 800137a:	e7fd      	b.n	8001378 <Error_Handler+0x8>

0800137c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800137c:	b480      	push	{r7}
 800137e:	b083      	sub	sp, #12
 8001380:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001382:	4b0f      	ldr	r3, [pc, #60]	@ (80013c0 <HAL_MspInit+0x44>)
 8001384:	699b      	ldr	r3, [r3, #24]
 8001386:	4a0e      	ldr	r2, [pc, #56]	@ (80013c0 <HAL_MspInit+0x44>)
 8001388:	f043 0301 	orr.w	r3, r3, #1
 800138c:	6193      	str	r3, [r2, #24]
 800138e:	4b0c      	ldr	r3, [pc, #48]	@ (80013c0 <HAL_MspInit+0x44>)
 8001390:	699b      	ldr	r3, [r3, #24]
 8001392:	f003 0301 	and.w	r3, r3, #1
 8001396:	607b      	str	r3, [r7, #4]
 8001398:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800139a:	4b09      	ldr	r3, [pc, #36]	@ (80013c0 <HAL_MspInit+0x44>)
 800139c:	69db      	ldr	r3, [r3, #28]
 800139e:	4a08      	ldr	r2, [pc, #32]	@ (80013c0 <HAL_MspInit+0x44>)
 80013a0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80013a4:	61d3      	str	r3, [r2, #28]
 80013a6:	4b06      	ldr	r3, [pc, #24]	@ (80013c0 <HAL_MspInit+0x44>)
 80013a8:	69db      	ldr	r3, [r3, #28]
 80013aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80013ae:	603b      	str	r3, [r7, #0]
 80013b0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013b2:	bf00      	nop
 80013b4:	370c      	adds	r7, #12
 80013b6:	46bd      	mov	sp, r7
 80013b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013bc:	4770      	bx	lr
 80013be:	bf00      	nop
 80013c0:	40021000 	.word	0x40021000

080013c4 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b08a      	sub	sp, #40	@ 0x28
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013cc:	f107 0314 	add.w	r3, r7, #20
 80013d0:	2200      	movs	r2, #0
 80013d2:	601a      	str	r2, [r3, #0]
 80013d4:	605a      	str	r2, [r3, #4]
 80013d6:	609a      	str	r2, [r3, #8]
 80013d8:	60da      	str	r2, [r3, #12]
 80013da:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN)
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	4a18      	ldr	r2, [pc, #96]	@ (8001444 <HAL_CAN_MspInit+0x80>)
 80013e2:	4293      	cmp	r3, r2
 80013e4:	d129      	bne.n	800143a <HAL_CAN_MspInit+0x76>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80013e6:	4b18      	ldr	r3, [pc, #96]	@ (8001448 <HAL_CAN_MspInit+0x84>)
 80013e8:	69db      	ldr	r3, [r3, #28]
 80013ea:	4a17      	ldr	r2, [pc, #92]	@ (8001448 <HAL_CAN_MspInit+0x84>)
 80013ec:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80013f0:	61d3      	str	r3, [r2, #28]
 80013f2:	4b15      	ldr	r3, [pc, #84]	@ (8001448 <HAL_CAN_MspInit+0x84>)
 80013f4:	69db      	ldr	r3, [r3, #28]
 80013f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80013fa:	613b      	str	r3, [r7, #16]
 80013fc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013fe:	4b12      	ldr	r3, [pc, #72]	@ (8001448 <HAL_CAN_MspInit+0x84>)
 8001400:	695b      	ldr	r3, [r3, #20]
 8001402:	4a11      	ldr	r2, [pc, #68]	@ (8001448 <HAL_CAN_MspInit+0x84>)
 8001404:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001408:	6153      	str	r3, [r2, #20]
 800140a:	4b0f      	ldr	r3, [pc, #60]	@ (8001448 <HAL_CAN_MspInit+0x84>)
 800140c:	695b      	ldr	r3, [r3, #20]
 800140e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001412:	60fb      	str	r3, [r7, #12]
 8001414:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = CAN_RXD_Pin|CAN_TXD_Pin;
 8001416:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800141a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800141c:	2302      	movs	r3, #2
 800141e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001420:	2300      	movs	r3, #0
 8001422:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001424:	2303      	movs	r3, #3
 8001426:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN;
 8001428:	2309      	movs	r3, #9
 800142a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800142c:	f107 0314 	add.w	r3, r7, #20
 8001430:	4619      	mov	r1, r3
 8001432:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001436:	f000 fcd5 	bl	8001de4 <HAL_GPIO_Init>

  /* USER CODE END CAN_MspInit 1 */

  }

}
 800143a:	bf00      	nop
 800143c:	3728      	adds	r7, #40	@ 0x28
 800143e:	46bd      	mov	sp, r7
 8001440:	bd80      	pop	{r7, pc}
 8001442:	bf00      	nop
 8001444:	40006400 	.word	0x40006400
 8001448:	40021000 	.word	0x40021000

0800144c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800144c:	b480      	push	{r7}
 800144e:	b087      	sub	sp, #28
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	4a25      	ldr	r2, [pc, #148]	@ (80014f0 <HAL_TIM_Base_MspInit+0xa4>)
 800145a:	4293      	cmp	r3, r2
 800145c:	d10c      	bne.n	8001478 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800145e:	4b25      	ldr	r3, [pc, #148]	@ (80014f4 <HAL_TIM_Base_MspInit+0xa8>)
 8001460:	699b      	ldr	r3, [r3, #24]
 8001462:	4a24      	ldr	r2, [pc, #144]	@ (80014f4 <HAL_TIM_Base_MspInit+0xa8>)
 8001464:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001468:	6193      	str	r3, [r2, #24]
 800146a:	4b22      	ldr	r3, [pc, #136]	@ (80014f4 <HAL_TIM_Base_MspInit+0xa8>)
 800146c:	699b      	ldr	r3, [r3, #24]
 800146e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001472:	617b      	str	r3, [r7, #20]
 8001474:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 8001476:	e034      	b.n	80014e2 <HAL_TIM_Base_MspInit+0x96>
  else if(htim_base->Instance==TIM2)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001480:	d10c      	bne.n	800149c <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001482:	4b1c      	ldr	r3, [pc, #112]	@ (80014f4 <HAL_TIM_Base_MspInit+0xa8>)
 8001484:	69db      	ldr	r3, [r3, #28]
 8001486:	4a1b      	ldr	r2, [pc, #108]	@ (80014f4 <HAL_TIM_Base_MspInit+0xa8>)
 8001488:	f043 0301 	orr.w	r3, r3, #1
 800148c:	61d3      	str	r3, [r2, #28]
 800148e:	4b19      	ldr	r3, [pc, #100]	@ (80014f4 <HAL_TIM_Base_MspInit+0xa8>)
 8001490:	69db      	ldr	r3, [r3, #28]
 8001492:	f003 0301 	and.w	r3, r3, #1
 8001496:	613b      	str	r3, [r7, #16]
 8001498:	693b      	ldr	r3, [r7, #16]
}
 800149a:	e022      	b.n	80014e2 <HAL_TIM_Base_MspInit+0x96>
  else if(htim_base->Instance==TIM3)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	4a15      	ldr	r2, [pc, #84]	@ (80014f8 <HAL_TIM_Base_MspInit+0xac>)
 80014a2:	4293      	cmp	r3, r2
 80014a4:	d10c      	bne.n	80014c0 <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80014a6:	4b13      	ldr	r3, [pc, #76]	@ (80014f4 <HAL_TIM_Base_MspInit+0xa8>)
 80014a8:	69db      	ldr	r3, [r3, #28]
 80014aa:	4a12      	ldr	r2, [pc, #72]	@ (80014f4 <HAL_TIM_Base_MspInit+0xa8>)
 80014ac:	f043 0302 	orr.w	r3, r3, #2
 80014b0:	61d3      	str	r3, [r2, #28]
 80014b2:	4b10      	ldr	r3, [pc, #64]	@ (80014f4 <HAL_TIM_Base_MspInit+0xa8>)
 80014b4:	69db      	ldr	r3, [r3, #28]
 80014b6:	f003 0302 	and.w	r3, r3, #2
 80014ba:	60fb      	str	r3, [r7, #12]
 80014bc:	68fb      	ldr	r3, [r7, #12]
}
 80014be:	e010      	b.n	80014e2 <HAL_TIM_Base_MspInit+0x96>
  else if(htim_base->Instance==TIM15)
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	4a0d      	ldr	r2, [pc, #52]	@ (80014fc <HAL_TIM_Base_MspInit+0xb0>)
 80014c6:	4293      	cmp	r3, r2
 80014c8:	d10b      	bne.n	80014e2 <HAL_TIM_Base_MspInit+0x96>
    __HAL_RCC_TIM15_CLK_ENABLE();
 80014ca:	4b0a      	ldr	r3, [pc, #40]	@ (80014f4 <HAL_TIM_Base_MspInit+0xa8>)
 80014cc:	699b      	ldr	r3, [r3, #24]
 80014ce:	4a09      	ldr	r2, [pc, #36]	@ (80014f4 <HAL_TIM_Base_MspInit+0xa8>)
 80014d0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80014d4:	6193      	str	r3, [r2, #24]
 80014d6:	4b07      	ldr	r3, [pc, #28]	@ (80014f4 <HAL_TIM_Base_MspInit+0xa8>)
 80014d8:	699b      	ldr	r3, [r3, #24]
 80014da:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80014de:	60bb      	str	r3, [r7, #8]
 80014e0:	68bb      	ldr	r3, [r7, #8]
}
 80014e2:	bf00      	nop
 80014e4:	371c      	adds	r7, #28
 80014e6:	46bd      	mov	sp, r7
 80014e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ec:	4770      	bx	lr
 80014ee:	bf00      	nop
 80014f0:	40012c00 	.word	0x40012c00
 80014f4:	40021000 	.word	0x40021000
 80014f8:	40000400 	.word	0x40000400
 80014fc:	40014000 	.word	0x40014000

08001500 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b08a      	sub	sp, #40	@ 0x28
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001508:	f107 0314 	add.w	r3, r7, #20
 800150c:	2200      	movs	r2, #0
 800150e:	601a      	str	r2, [r3, #0]
 8001510:	605a      	str	r2, [r3, #4]
 8001512:	609a      	str	r2, [r3, #8]
 8001514:	60da      	str	r2, [r3, #12]
 8001516:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001520:	d11c      	bne.n	800155c <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001522:	4b21      	ldr	r3, [pc, #132]	@ (80015a8 <HAL_TIM_MspPostInit+0xa8>)
 8001524:	695b      	ldr	r3, [r3, #20]
 8001526:	4a20      	ldr	r2, [pc, #128]	@ (80015a8 <HAL_TIM_MspPostInit+0xa8>)
 8001528:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800152c:	6153      	str	r3, [r2, #20]
 800152e:	4b1e      	ldr	r3, [pc, #120]	@ (80015a8 <HAL_TIM_MspPostInit+0xa8>)
 8001530:	695b      	ldr	r3, [r3, #20]
 8001532:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001536:	613b      	str	r3, [r7, #16]
 8001538:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = SIG_N1_Pin;
 800153a:	2308      	movs	r3, #8
 800153c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800153e:	2302      	movs	r3, #2
 8001540:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001542:	2300      	movs	r3, #0
 8001544:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001546:	2300      	movs	r3, #0
 8001548:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800154a:	2301      	movs	r3, #1
 800154c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(SIG_N1_GPIO_Port, &GPIO_InitStruct);
 800154e:	f107 0314 	add.w	r3, r7, #20
 8001552:	4619      	mov	r1, r3
 8001554:	4815      	ldr	r0, [pc, #84]	@ (80015ac <HAL_TIM_MspPostInit+0xac>)
 8001556:	f000 fc45 	bl	8001de4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800155a:	e020      	b.n	800159e <HAL_TIM_MspPostInit+0x9e>
  else if(htim->Instance==TIM3)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	4a13      	ldr	r2, [pc, #76]	@ (80015b0 <HAL_TIM_MspPostInit+0xb0>)
 8001562:	4293      	cmp	r3, r2
 8001564:	d11b      	bne.n	800159e <HAL_TIM_MspPostInit+0x9e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001566:	4b10      	ldr	r3, [pc, #64]	@ (80015a8 <HAL_TIM_MspPostInit+0xa8>)
 8001568:	695b      	ldr	r3, [r3, #20]
 800156a:	4a0f      	ldr	r2, [pc, #60]	@ (80015a8 <HAL_TIM_MspPostInit+0xa8>)
 800156c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001570:	6153      	str	r3, [r2, #20]
 8001572:	4b0d      	ldr	r3, [pc, #52]	@ (80015a8 <HAL_TIM_MspPostInit+0xa8>)
 8001574:	695b      	ldr	r3, [r3, #20]
 8001576:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800157a:	60fb      	str	r3, [r7, #12]
 800157c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = SIG_N2_Pin;
 800157e:	2301      	movs	r3, #1
 8001580:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001582:	2302      	movs	r3, #2
 8001584:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001586:	2300      	movs	r3, #0
 8001588:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800158a:	2300      	movs	r3, #0
 800158c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800158e:	2302      	movs	r3, #2
 8001590:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(SIG_N2_GPIO_Port, &GPIO_InitStruct);
 8001592:	f107 0314 	add.w	r3, r7, #20
 8001596:	4619      	mov	r1, r3
 8001598:	4804      	ldr	r0, [pc, #16]	@ (80015ac <HAL_TIM_MspPostInit+0xac>)
 800159a:	f000 fc23 	bl	8001de4 <HAL_GPIO_Init>
}
 800159e:	bf00      	nop
 80015a0:	3728      	adds	r7, #40	@ 0x28
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd80      	pop	{r7, pc}
 80015a6:	bf00      	nop
 80015a8:	40021000 	.word	0x40021000
 80015ac:	48000400 	.word	0x48000400
 80015b0:	40000400 	.word	0x40000400

080015b4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b08c      	sub	sp, #48	@ 0x30
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015bc:	f107 031c 	add.w	r3, r7, #28
 80015c0:	2200      	movs	r2, #0
 80015c2:	601a      	str	r2, [r3, #0]
 80015c4:	605a      	str	r2, [r3, #4]
 80015c6:	609a      	str	r2, [r3, #8]
 80015c8:	60da      	str	r2, [r3, #12]
 80015ca:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	4a33      	ldr	r2, [pc, #204]	@ (80016a0 <HAL_UART_MspInit+0xec>)
 80015d2:	4293      	cmp	r3, r2
 80015d4:	d132      	bne.n	800163c <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80015d6:	4b33      	ldr	r3, [pc, #204]	@ (80016a4 <HAL_UART_MspInit+0xf0>)
 80015d8:	699b      	ldr	r3, [r3, #24]
 80015da:	4a32      	ldr	r2, [pc, #200]	@ (80016a4 <HAL_UART_MspInit+0xf0>)
 80015dc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80015e0:	6193      	str	r3, [r2, #24]
 80015e2:	4b30      	ldr	r3, [pc, #192]	@ (80016a4 <HAL_UART_MspInit+0xf0>)
 80015e4:	699b      	ldr	r3, [r3, #24]
 80015e6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80015ea:	61bb      	str	r3, [r7, #24]
 80015ec:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015ee:	4b2d      	ldr	r3, [pc, #180]	@ (80016a4 <HAL_UART_MspInit+0xf0>)
 80015f0:	695b      	ldr	r3, [r3, #20]
 80015f2:	4a2c      	ldr	r2, [pc, #176]	@ (80016a4 <HAL_UART_MspInit+0xf0>)
 80015f4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80015f8:	6153      	str	r3, [r2, #20]
 80015fa:	4b2a      	ldr	r3, [pc, #168]	@ (80016a4 <HAL_UART_MspInit+0xf0>)
 80015fc:	695b      	ldr	r3, [r3, #20]
 80015fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001602:	617b      	str	r3, [r7, #20]
 8001604:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = PC_UART_TXD_Pin|PC_UART_RXD_Pin;
 8001606:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800160a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800160c:	2312      	movs	r3, #18
 800160e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001610:	2300      	movs	r3, #0
 8001612:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001614:	2303      	movs	r3, #3
 8001616:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001618:	2307      	movs	r3, #7
 800161a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800161c:	f107 031c 	add.w	r3, r7, #28
 8001620:	4619      	mov	r1, r3
 8001622:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001626:	f000 fbdd 	bl	8001de4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800162a:	2200      	movs	r2, #0
 800162c:	2100      	movs	r1, #0
 800162e:	2025      	movs	r0, #37	@ 0x25
 8001630:	f000 fb25 	bl	8001c7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001634:	2025      	movs	r0, #37	@ 0x25
 8001636:	f000 fb3e 	bl	8001cb6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800163a:	e02d      	b.n	8001698 <HAL_UART_MspInit+0xe4>
  else if(huart->Instance==USART2)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	4a19      	ldr	r2, [pc, #100]	@ (80016a8 <HAL_UART_MspInit+0xf4>)
 8001642:	4293      	cmp	r3, r2
 8001644:	d128      	bne.n	8001698 <HAL_UART_MspInit+0xe4>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001646:	4b17      	ldr	r3, [pc, #92]	@ (80016a4 <HAL_UART_MspInit+0xf0>)
 8001648:	69db      	ldr	r3, [r3, #28]
 800164a:	4a16      	ldr	r2, [pc, #88]	@ (80016a4 <HAL_UART_MspInit+0xf0>)
 800164c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001650:	61d3      	str	r3, [r2, #28]
 8001652:	4b14      	ldr	r3, [pc, #80]	@ (80016a4 <HAL_UART_MspInit+0xf0>)
 8001654:	69db      	ldr	r3, [r3, #28]
 8001656:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800165a:	613b      	str	r3, [r7, #16]
 800165c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800165e:	4b11      	ldr	r3, [pc, #68]	@ (80016a4 <HAL_UART_MspInit+0xf0>)
 8001660:	695b      	ldr	r3, [r3, #20]
 8001662:	4a10      	ldr	r2, [pc, #64]	@ (80016a4 <HAL_UART_MspInit+0xf0>)
 8001664:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001668:	6153      	str	r3, [r2, #20]
 800166a:	4b0e      	ldr	r3, [pc, #56]	@ (80016a4 <HAL_UART_MspInit+0xf0>)
 800166c:	695b      	ldr	r3, [r3, #20]
 800166e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001672:	60fb      	str	r3, [r7, #12]
 8001674:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = N_C__Pin|UART_RX_Pin;
 8001676:	230c      	movs	r3, #12
 8001678:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800167a:	2312      	movs	r3, #18
 800167c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800167e:	2300      	movs	r3, #0
 8001680:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001682:	2303      	movs	r3, #3
 8001684:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001686:	2307      	movs	r3, #7
 8001688:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800168a:	f107 031c 	add.w	r3, r7, #28
 800168e:	4619      	mov	r1, r3
 8001690:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001694:	f000 fba6 	bl	8001de4 <HAL_GPIO_Init>
}
 8001698:	bf00      	nop
 800169a:	3730      	adds	r7, #48	@ 0x30
 800169c:	46bd      	mov	sp, r7
 800169e:	bd80      	pop	{r7, pc}
 80016a0:	40013800 	.word	0x40013800
 80016a4:	40021000 	.word	0x40021000
 80016a8:	40004400 	.word	0x40004400

080016ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016ac:	b480      	push	{r7}
 80016ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80016b0:	bf00      	nop
 80016b2:	e7fd      	b.n	80016b0 <NMI_Handler+0x4>

080016b4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016b4:	b480      	push	{r7}
 80016b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016b8:	bf00      	nop
 80016ba:	e7fd      	b.n	80016b8 <HardFault_Handler+0x4>

080016bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016bc:	b480      	push	{r7}
 80016be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016c0:	bf00      	nop
 80016c2:	e7fd      	b.n	80016c0 <MemManage_Handler+0x4>

080016c4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016c4:	b480      	push	{r7}
 80016c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016c8:	bf00      	nop
 80016ca:	e7fd      	b.n	80016c8 <BusFault_Handler+0x4>

080016cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016cc:	b480      	push	{r7}
 80016ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016d0:	bf00      	nop
 80016d2:	e7fd      	b.n	80016d0 <UsageFault_Handler+0x4>

080016d4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016d4:	b480      	push	{r7}
 80016d6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016d8:	bf00      	nop
 80016da:	46bd      	mov	sp, r7
 80016dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e0:	4770      	bx	lr

080016e2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016e2:	b480      	push	{r7}
 80016e4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016e6:	bf00      	nop
 80016e8:	46bd      	mov	sp, r7
 80016ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ee:	4770      	bx	lr

080016f0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016f0:	b480      	push	{r7}
 80016f2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016f4:	bf00      	nop
 80016f6:	46bd      	mov	sp, r7
 80016f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fc:	4770      	bx	lr

080016fe <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016fe:	b580      	push	{r7, lr}
 8001700:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001702:	f000 f8c5 	bl	8001890 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001706:	bf00      	nop
 8001708:	bd80      	pop	{r7, pc}
	...

0800170c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXT line 25.
  */
void USART1_IRQHandler(void)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001710:	4802      	ldr	r0, [pc, #8]	@ (800171c <USART1_IRQHandler+0x10>)
 8001712:	f003 fa8b 	bl	8004c2c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001716:	bf00      	nop
 8001718:	bd80      	pop	{r7, pc}
 800171a:	bf00      	nop
 800171c:	2000022c 	.word	0x2000022c

08001720 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b086      	sub	sp, #24
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001728:	4a14      	ldr	r2, [pc, #80]	@ (800177c <_sbrk+0x5c>)
 800172a:	4b15      	ldr	r3, [pc, #84]	@ (8001780 <_sbrk+0x60>)
 800172c:	1ad3      	subs	r3, r2, r3
 800172e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001730:	697b      	ldr	r3, [r7, #20]
 8001732:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001734:	4b13      	ldr	r3, [pc, #76]	@ (8001784 <_sbrk+0x64>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	2b00      	cmp	r3, #0
 800173a:	d102      	bne.n	8001742 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800173c:	4b11      	ldr	r3, [pc, #68]	@ (8001784 <_sbrk+0x64>)
 800173e:	4a12      	ldr	r2, [pc, #72]	@ (8001788 <_sbrk+0x68>)
 8001740:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001742:	4b10      	ldr	r3, [pc, #64]	@ (8001784 <_sbrk+0x64>)
 8001744:	681a      	ldr	r2, [r3, #0]
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	4413      	add	r3, r2
 800174a:	693a      	ldr	r2, [r7, #16]
 800174c:	429a      	cmp	r2, r3
 800174e:	d207      	bcs.n	8001760 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001750:	f004 f946 	bl	80059e0 <__errno>
 8001754:	4603      	mov	r3, r0
 8001756:	220c      	movs	r2, #12
 8001758:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800175a:	f04f 33ff 	mov.w	r3, #4294967295
 800175e:	e009      	b.n	8001774 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001760:	4b08      	ldr	r3, [pc, #32]	@ (8001784 <_sbrk+0x64>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001766:	4b07      	ldr	r3, [pc, #28]	@ (8001784 <_sbrk+0x64>)
 8001768:	681a      	ldr	r2, [r3, #0]
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	4413      	add	r3, r2
 800176e:	4a05      	ldr	r2, [pc, #20]	@ (8001784 <_sbrk+0x64>)
 8001770:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001772:	68fb      	ldr	r3, [r7, #12]
}
 8001774:	4618      	mov	r0, r3
 8001776:	3718      	adds	r7, #24
 8001778:	46bd      	mov	sp, r7
 800177a:	bd80      	pop	{r7, pc}
 800177c:	20003000 	.word	0x20003000
 8001780:	00000400 	.word	0x00000400
 8001784:	20000398 	.word	0x20000398
 8001788:	200004e8 	.word	0x200004e8

0800178c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800178c:	b480      	push	{r7}
 800178e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001790:	4b06      	ldr	r3, [pc, #24]	@ (80017ac <SystemInit+0x20>)
 8001792:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001796:	4a05      	ldr	r2, [pc, #20]	@ (80017ac <SystemInit+0x20>)
 8001798:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800179c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80017a0:	bf00      	nop
 80017a2:	46bd      	mov	sp, r7
 80017a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a8:	4770      	bx	lr
 80017aa:	bf00      	nop
 80017ac:	e000ed00 	.word	0xe000ed00

080017b0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80017b0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80017e8 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80017b4:	f7ff ffea 	bl	800178c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80017b8:	480c      	ldr	r0, [pc, #48]	@ (80017ec <LoopForever+0x6>)
  ldr r1, =_edata
 80017ba:	490d      	ldr	r1, [pc, #52]	@ (80017f0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80017bc:	4a0d      	ldr	r2, [pc, #52]	@ (80017f4 <LoopForever+0xe>)
  movs r3, #0
 80017be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017c0:	e002      	b.n	80017c8 <LoopCopyDataInit>

080017c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017c6:	3304      	adds	r3, #4

080017c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017cc:	d3f9      	bcc.n	80017c2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017ce:	4a0a      	ldr	r2, [pc, #40]	@ (80017f8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80017d0:	4c0a      	ldr	r4, [pc, #40]	@ (80017fc <LoopForever+0x16>)
  movs r3, #0
 80017d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017d4:	e001      	b.n	80017da <LoopFillZerobss>

080017d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017d8:	3204      	adds	r2, #4

080017da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017dc:	d3fb      	bcc.n	80017d6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80017de:	f004 f905 	bl	80059ec <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80017e2:	f7ff fab3 	bl	8000d4c <main>

080017e6 <LoopForever>:

LoopForever:
    b LoopForever
 80017e6:	e7fe      	b.n	80017e6 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80017e8:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 80017ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017f0:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80017f4:	08006374 	.word	0x08006374
  ldr r2, =_sbss
 80017f8:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 80017fc:	200004e8 	.word	0x200004e8

08001800 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001800:	e7fe      	b.n	8001800 <ADC1_2_IRQHandler>
	...

08001804 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001808:	4b08      	ldr	r3, [pc, #32]	@ (800182c <HAL_Init+0x28>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	4a07      	ldr	r2, [pc, #28]	@ (800182c <HAL_Init+0x28>)
 800180e:	f043 0310 	orr.w	r3, r3, #16
 8001812:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001814:	2003      	movs	r0, #3
 8001816:	f000 fa27 	bl	8001c68 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800181a:	200f      	movs	r0, #15
 800181c:	f000 f808 	bl	8001830 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001820:	f7ff fdac 	bl	800137c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001824:	2300      	movs	r3, #0
}
 8001826:	4618      	mov	r0, r3
 8001828:	bd80      	pop	{r7, pc}
 800182a:	bf00      	nop
 800182c:	40022000 	.word	0x40022000

08001830 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b082      	sub	sp, #8
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001838:	4b12      	ldr	r3, [pc, #72]	@ (8001884 <HAL_InitTick+0x54>)
 800183a:	681a      	ldr	r2, [r3, #0]
 800183c:	4b12      	ldr	r3, [pc, #72]	@ (8001888 <HAL_InitTick+0x58>)
 800183e:	781b      	ldrb	r3, [r3, #0]
 8001840:	4619      	mov	r1, r3
 8001842:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001846:	fbb3 f3f1 	udiv	r3, r3, r1
 800184a:	fbb2 f3f3 	udiv	r3, r2, r3
 800184e:	4618      	mov	r0, r3
 8001850:	f000 fa3f 	bl	8001cd2 <HAL_SYSTICK_Config>
 8001854:	4603      	mov	r3, r0
 8001856:	2b00      	cmp	r3, #0
 8001858:	d001      	beq.n	800185e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800185a:	2301      	movs	r3, #1
 800185c:	e00e      	b.n	800187c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	2b0f      	cmp	r3, #15
 8001862:	d80a      	bhi.n	800187a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001864:	2200      	movs	r2, #0
 8001866:	6879      	ldr	r1, [r7, #4]
 8001868:	f04f 30ff 	mov.w	r0, #4294967295
 800186c:	f000 fa07 	bl	8001c7e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001870:	4a06      	ldr	r2, [pc, #24]	@ (800188c <HAL_InitTick+0x5c>)
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001876:	2300      	movs	r3, #0
 8001878:	e000      	b.n	800187c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800187a:	2301      	movs	r3, #1
}
 800187c:	4618      	mov	r0, r3
 800187e:	3708      	adds	r7, #8
 8001880:	46bd      	mov	sp, r7
 8001882:	bd80      	pop	{r7, pc}
 8001884:	20000000 	.word	0x20000000
 8001888:	20000008 	.word	0x20000008
 800188c:	20000004 	.word	0x20000004

08001890 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001890:	b480      	push	{r7}
 8001892:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001894:	4b06      	ldr	r3, [pc, #24]	@ (80018b0 <HAL_IncTick+0x20>)
 8001896:	781b      	ldrb	r3, [r3, #0]
 8001898:	461a      	mov	r2, r3
 800189a:	4b06      	ldr	r3, [pc, #24]	@ (80018b4 <HAL_IncTick+0x24>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	4413      	add	r3, r2
 80018a0:	4a04      	ldr	r2, [pc, #16]	@ (80018b4 <HAL_IncTick+0x24>)
 80018a2:	6013      	str	r3, [r2, #0]
}
 80018a4:	bf00      	nop
 80018a6:	46bd      	mov	sp, r7
 80018a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ac:	4770      	bx	lr
 80018ae:	bf00      	nop
 80018b0:	20000008 	.word	0x20000008
 80018b4:	2000039c 	.word	0x2000039c

080018b8 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018b8:	b480      	push	{r7}
 80018ba:	af00      	add	r7, sp, #0
  return uwTick;  
 80018bc:	4b03      	ldr	r3, [pc, #12]	@ (80018cc <HAL_GetTick+0x14>)
 80018be:	681b      	ldr	r3, [r3, #0]
}
 80018c0:	4618      	mov	r0, r3
 80018c2:	46bd      	mov	sp, r7
 80018c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c8:	4770      	bx	lr
 80018ca:	bf00      	nop
 80018cc:	2000039c 	.word	0x2000039c

080018d0 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b084      	sub	sp, #16
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d101      	bne.n	80018e2 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80018de:	2301      	movs	r3, #1
 80018e0:	e0ed      	b.n	8001abe <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80018e8:	b2db      	uxtb	r3, r3
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d102      	bne.n	80018f4 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80018ee:	6878      	ldr	r0, [r7, #4]
 80018f0:	f7ff fd68 	bl	80013c4 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	681a      	ldr	r2, [r3, #0]
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f042 0201 	orr.w	r2, r2, #1
 8001902:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001904:	f7ff ffd8 	bl	80018b8 <HAL_GetTick>
 8001908:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800190a:	e012      	b.n	8001932 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800190c:	f7ff ffd4 	bl	80018b8 <HAL_GetTick>
 8001910:	4602      	mov	r2, r0
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	1ad3      	subs	r3, r2, r3
 8001916:	2b0a      	cmp	r3, #10
 8001918:	d90b      	bls.n	8001932 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800191e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	2205      	movs	r2, #5
 800192a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800192e:	2301      	movs	r3, #1
 8001930:	e0c5      	b.n	8001abe <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	685b      	ldr	r3, [r3, #4]
 8001938:	f003 0301 	and.w	r3, r3, #1
 800193c:	2b00      	cmp	r3, #0
 800193e:	d0e5      	beq.n	800190c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	681a      	ldr	r2, [r3, #0]
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f022 0202 	bic.w	r2, r2, #2
 800194e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001950:	f7ff ffb2 	bl	80018b8 <HAL_GetTick>
 8001954:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001956:	e012      	b.n	800197e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001958:	f7ff ffae 	bl	80018b8 <HAL_GetTick>
 800195c:	4602      	mov	r2, r0
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	1ad3      	subs	r3, r2, r3
 8001962:	2b0a      	cmp	r3, #10
 8001964:	d90b      	bls.n	800197e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800196a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	2205      	movs	r2, #5
 8001976:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800197a:	2301      	movs	r3, #1
 800197c:	e09f      	b.n	8001abe <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	685b      	ldr	r3, [r3, #4]
 8001984:	f003 0302 	and.w	r3, r3, #2
 8001988:	2b00      	cmp	r3, #0
 800198a:	d1e5      	bne.n	8001958 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	7e1b      	ldrb	r3, [r3, #24]
 8001990:	2b01      	cmp	r3, #1
 8001992:	d108      	bne.n	80019a6 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	681a      	ldr	r2, [r3, #0]
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80019a2:	601a      	str	r2, [r3, #0]
 80019a4:	e007      	b.n	80019b6 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	681a      	ldr	r2, [r3, #0]
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80019b4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	7e5b      	ldrb	r3, [r3, #25]
 80019ba:	2b01      	cmp	r3, #1
 80019bc:	d108      	bne.n	80019d0 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	681a      	ldr	r2, [r3, #0]
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80019cc:	601a      	str	r2, [r3, #0]
 80019ce:	e007      	b.n	80019e0 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	681a      	ldr	r2, [r3, #0]
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80019de:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	7e9b      	ldrb	r3, [r3, #26]
 80019e4:	2b01      	cmp	r3, #1
 80019e6:	d108      	bne.n	80019fa <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	681a      	ldr	r2, [r3, #0]
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f042 0220 	orr.w	r2, r2, #32
 80019f6:	601a      	str	r2, [r3, #0]
 80019f8:	e007      	b.n	8001a0a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	681a      	ldr	r2, [r3, #0]
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f022 0220 	bic.w	r2, r2, #32
 8001a08:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	7edb      	ldrb	r3, [r3, #27]
 8001a0e:	2b01      	cmp	r3, #1
 8001a10:	d108      	bne.n	8001a24 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	681a      	ldr	r2, [r3, #0]
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f022 0210 	bic.w	r2, r2, #16
 8001a20:	601a      	str	r2, [r3, #0]
 8001a22:	e007      	b.n	8001a34 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	681a      	ldr	r2, [r3, #0]
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f042 0210 	orr.w	r2, r2, #16
 8001a32:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	7f1b      	ldrb	r3, [r3, #28]
 8001a38:	2b01      	cmp	r3, #1
 8001a3a:	d108      	bne.n	8001a4e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	681a      	ldr	r2, [r3, #0]
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f042 0208 	orr.w	r2, r2, #8
 8001a4a:	601a      	str	r2, [r3, #0]
 8001a4c:	e007      	b.n	8001a5e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	681a      	ldr	r2, [r3, #0]
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f022 0208 	bic.w	r2, r2, #8
 8001a5c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	7f5b      	ldrb	r3, [r3, #29]
 8001a62:	2b01      	cmp	r3, #1
 8001a64:	d108      	bne.n	8001a78 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	681a      	ldr	r2, [r3, #0]
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f042 0204 	orr.w	r2, r2, #4
 8001a74:	601a      	str	r2, [r3, #0]
 8001a76:	e007      	b.n	8001a88 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	681a      	ldr	r2, [r3, #0]
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f022 0204 	bic.w	r2, r2, #4
 8001a86:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	689a      	ldr	r2, [r3, #8]
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	68db      	ldr	r3, [r3, #12]
 8001a90:	431a      	orrs	r2, r3
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	691b      	ldr	r3, [r3, #16]
 8001a96:	431a      	orrs	r2, r3
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	695b      	ldr	r3, [r3, #20]
 8001a9c:	ea42 0103 	orr.w	r1, r2, r3
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	685b      	ldr	r3, [r3, #4]
 8001aa4:	1e5a      	subs	r2, r3, #1
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	430a      	orrs	r2, r1
 8001aac:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	2201      	movs	r2, #1
 8001ab8:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001abc:	2300      	movs	r3, #0
}
 8001abe:	4618      	mov	r0, r3
 8001ac0:	3710      	adds	r7, #16
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bd80      	pop	{r7, pc}
	...

08001ac8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	b085      	sub	sp, #20
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	f003 0307 	and.w	r3, r3, #7
 8001ad6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ad8:	4b0c      	ldr	r3, [pc, #48]	@ (8001b0c <__NVIC_SetPriorityGrouping+0x44>)
 8001ada:	68db      	ldr	r3, [r3, #12]
 8001adc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ade:	68ba      	ldr	r2, [r7, #8]
 8001ae0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001ae4:	4013      	ands	r3, r2
 8001ae6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001aec:	68bb      	ldr	r3, [r7, #8]
 8001aee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001af0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001af4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001af8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001afa:	4a04      	ldr	r2, [pc, #16]	@ (8001b0c <__NVIC_SetPriorityGrouping+0x44>)
 8001afc:	68bb      	ldr	r3, [r7, #8]
 8001afe:	60d3      	str	r3, [r2, #12]
}
 8001b00:	bf00      	nop
 8001b02:	3714      	adds	r7, #20
 8001b04:	46bd      	mov	sp, r7
 8001b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0a:	4770      	bx	lr
 8001b0c:	e000ed00 	.word	0xe000ed00

08001b10 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b10:	b480      	push	{r7}
 8001b12:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b14:	4b04      	ldr	r3, [pc, #16]	@ (8001b28 <__NVIC_GetPriorityGrouping+0x18>)
 8001b16:	68db      	ldr	r3, [r3, #12]
 8001b18:	0a1b      	lsrs	r3, r3, #8
 8001b1a:	f003 0307 	and.w	r3, r3, #7
}
 8001b1e:	4618      	mov	r0, r3
 8001b20:	46bd      	mov	sp, r7
 8001b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b26:	4770      	bx	lr
 8001b28:	e000ed00 	.word	0xe000ed00

08001b2c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	b083      	sub	sp, #12
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	4603      	mov	r3, r0
 8001b34:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	db0b      	blt.n	8001b56 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b3e:	79fb      	ldrb	r3, [r7, #7]
 8001b40:	f003 021f 	and.w	r2, r3, #31
 8001b44:	4907      	ldr	r1, [pc, #28]	@ (8001b64 <__NVIC_EnableIRQ+0x38>)
 8001b46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b4a:	095b      	lsrs	r3, r3, #5
 8001b4c:	2001      	movs	r0, #1
 8001b4e:	fa00 f202 	lsl.w	r2, r0, r2
 8001b52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001b56:	bf00      	nop
 8001b58:	370c      	adds	r7, #12
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b60:	4770      	bx	lr
 8001b62:	bf00      	nop
 8001b64:	e000e100 	.word	0xe000e100

08001b68 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	b083      	sub	sp, #12
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	4603      	mov	r3, r0
 8001b70:	6039      	str	r1, [r7, #0]
 8001b72:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	db0a      	blt.n	8001b92 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	b2da      	uxtb	r2, r3
 8001b80:	490c      	ldr	r1, [pc, #48]	@ (8001bb4 <__NVIC_SetPriority+0x4c>)
 8001b82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b86:	0112      	lsls	r2, r2, #4
 8001b88:	b2d2      	uxtb	r2, r2
 8001b8a:	440b      	add	r3, r1
 8001b8c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b90:	e00a      	b.n	8001ba8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b92:	683b      	ldr	r3, [r7, #0]
 8001b94:	b2da      	uxtb	r2, r3
 8001b96:	4908      	ldr	r1, [pc, #32]	@ (8001bb8 <__NVIC_SetPriority+0x50>)
 8001b98:	79fb      	ldrb	r3, [r7, #7]
 8001b9a:	f003 030f 	and.w	r3, r3, #15
 8001b9e:	3b04      	subs	r3, #4
 8001ba0:	0112      	lsls	r2, r2, #4
 8001ba2:	b2d2      	uxtb	r2, r2
 8001ba4:	440b      	add	r3, r1
 8001ba6:	761a      	strb	r2, [r3, #24]
}
 8001ba8:	bf00      	nop
 8001baa:	370c      	adds	r7, #12
 8001bac:	46bd      	mov	sp, r7
 8001bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb2:	4770      	bx	lr
 8001bb4:	e000e100 	.word	0xe000e100
 8001bb8:	e000ed00 	.word	0xe000ed00

08001bbc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	b089      	sub	sp, #36	@ 0x24
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	60f8      	str	r0, [r7, #12]
 8001bc4:	60b9      	str	r1, [r7, #8]
 8001bc6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	f003 0307 	and.w	r3, r3, #7
 8001bce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001bd0:	69fb      	ldr	r3, [r7, #28]
 8001bd2:	f1c3 0307 	rsb	r3, r3, #7
 8001bd6:	2b04      	cmp	r3, #4
 8001bd8:	bf28      	it	cs
 8001bda:	2304      	movcs	r3, #4
 8001bdc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001bde:	69fb      	ldr	r3, [r7, #28]
 8001be0:	3304      	adds	r3, #4
 8001be2:	2b06      	cmp	r3, #6
 8001be4:	d902      	bls.n	8001bec <NVIC_EncodePriority+0x30>
 8001be6:	69fb      	ldr	r3, [r7, #28]
 8001be8:	3b03      	subs	r3, #3
 8001bea:	e000      	b.n	8001bee <NVIC_EncodePriority+0x32>
 8001bec:	2300      	movs	r3, #0
 8001bee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bf0:	f04f 32ff 	mov.w	r2, #4294967295
 8001bf4:	69bb      	ldr	r3, [r7, #24]
 8001bf6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bfa:	43da      	mvns	r2, r3
 8001bfc:	68bb      	ldr	r3, [r7, #8]
 8001bfe:	401a      	ands	r2, r3
 8001c00:	697b      	ldr	r3, [r7, #20]
 8001c02:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c04:	f04f 31ff 	mov.w	r1, #4294967295
 8001c08:	697b      	ldr	r3, [r7, #20]
 8001c0a:	fa01 f303 	lsl.w	r3, r1, r3
 8001c0e:	43d9      	mvns	r1, r3
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c14:	4313      	orrs	r3, r2
         );
}
 8001c16:	4618      	mov	r0, r3
 8001c18:	3724      	adds	r7, #36	@ 0x24
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c20:	4770      	bx	lr
	...

08001c24 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b082      	sub	sp, #8
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	3b01      	subs	r3, #1
 8001c30:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001c34:	d301      	bcc.n	8001c3a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c36:	2301      	movs	r3, #1
 8001c38:	e00f      	b.n	8001c5a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c3a:	4a0a      	ldr	r2, [pc, #40]	@ (8001c64 <SysTick_Config+0x40>)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	3b01      	subs	r3, #1
 8001c40:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c42:	210f      	movs	r1, #15
 8001c44:	f04f 30ff 	mov.w	r0, #4294967295
 8001c48:	f7ff ff8e 	bl	8001b68 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c4c:	4b05      	ldr	r3, [pc, #20]	@ (8001c64 <SysTick_Config+0x40>)
 8001c4e:	2200      	movs	r2, #0
 8001c50:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c52:	4b04      	ldr	r3, [pc, #16]	@ (8001c64 <SysTick_Config+0x40>)
 8001c54:	2207      	movs	r2, #7
 8001c56:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c58:	2300      	movs	r3, #0
}
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	3708      	adds	r7, #8
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bd80      	pop	{r7, pc}
 8001c62:	bf00      	nop
 8001c64:	e000e010 	.word	0xe000e010

08001c68 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b082      	sub	sp, #8
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c70:	6878      	ldr	r0, [r7, #4]
 8001c72:	f7ff ff29 	bl	8001ac8 <__NVIC_SetPriorityGrouping>
}
 8001c76:	bf00      	nop
 8001c78:	3708      	adds	r7, #8
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bd80      	pop	{r7, pc}

08001c7e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c7e:	b580      	push	{r7, lr}
 8001c80:	b086      	sub	sp, #24
 8001c82:	af00      	add	r7, sp, #0
 8001c84:	4603      	mov	r3, r0
 8001c86:	60b9      	str	r1, [r7, #8]
 8001c88:	607a      	str	r2, [r7, #4]
 8001c8a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c90:	f7ff ff3e 	bl	8001b10 <__NVIC_GetPriorityGrouping>
 8001c94:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c96:	687a      	ldr	r2, [r7, #4]
 8001c98:	68b9      	ldr	r1, [r7, #8]
 8001c9a:	6978      	ldr	r0, [r7, #20]
 8001c9c:	f7ff ff8e 	bl	8001bbc <NVIC_EncodePriority>
 8001ca0:	4602      	mov	r2, r0
 8001ca2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ca6:	4611      	mov	r1, r2
 8001ca8:	4618      	mov	r0, r3
 8001caa:	f7ff ff5d 	bl	8001b68 <__NVIC_SetPriority>
}
 8001cae:	bf00      	nop
 8001cb0:	3718      	adds	r7, #24
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bd80      	pop	{r7, pc}

08001cb6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cb6:	b580      	push	{r7, lr}
 8001cb8:	b082      	sub	sp, #8
 8001cba:	af00      	add	r7, sp, #0
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001cc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	f7ff ff31 	bl	8001b2c <__NVIC_EnableIRQ>
}
 8001cca:	bf00      	nop
 8001ccc:	3708      	adds	r7, #8
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bd80      	pop	{r7, pc}

08001cd2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001cd2:	b580      	push	{r7, lr}
 8001cd4:	b082      	sub	sp, #8
 8001cd6:	af00      	add	r7, sp, #0
 8001cd8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001cda:	6878      	ldr	r0, [r7, #4]
 8001cdc:	f7ff ffa2 	bl	8001c24 <SysTick_Config>
 8001ce0:	4603      	mov	r3, r0
}
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	3708      	adds	r7, #8
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bd80      	pop	{r7, pc}

08001cea <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001cea:	b480      	push	{r7}
 8001cec:	b083      	sub	sp, #12
 8001cee:	af00      	add	r7, sp, #0
 8001cf0:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d101      	bne.n	8001cfc <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8001cf8:	2301      	movs	r3, #1
 8001cfa:	e02e      	b.n	8001d5a <HAL_DMA_Abort+0x70>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001d02:	2b02      	cmp	r3, #2
 8001d04:	d008      	beq.n	8001d18 <HAL_DMA_Abort+0x2e>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	2204      	movs	r2, #4
 8001d0a:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	2200      	movs	r2, #0
 8001d10:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 8001d14:	2301      	movs	r3, #1
 8001d16:	e020      	b.n	8001d5a <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	681a      	ldr	r2, [r3, #0]
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f022 020e 	bic.w	r2, r2, #14
 8001d26:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	681a      	ldr	r2, [r3, #0]
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f022 0201 	bic.w	r2, r2, #1
 8001d36:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001d40:	2101      	movs	r1, #1
 8001d42:	fa01 f202 	lsl.w	r2, r1, r2
 8001d46:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	2201      	movs	r2, #1
 8001d4c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	2200      	movs	r2, #0
 8001d54:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001d58:	2300      	movs	r3, #0
}
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	370c      	adds	r7, #12
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d64:	4770      	bx	lr

08001d66 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001d66:	b580      	push	{r7, lr}
 8001d68:	b084      	sub	sp, #16
 8001d6a:	af00      	add	r7, sp, #0
 8001d6c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001d78:	2b02      	cmp	r3, #2
 8001d7a:	d005      	beq.n	8001d88 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	2204      	movs	r2, #4
 8001d80:	639a      	str	r2, [r3, #56]	@ 0x38

    status = HAL_ERROR;
 8001d82:	2301      	movs	r3, #1
 8001d84:	73fb      	strb	r3, [r7, #15]
 8001d86:	e027      	b.n	8001dd8 <HAL_DMA_Abort_IT+0x72>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	681a      	ldr	r2, [r3, #0]
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f022 020e 	bic.w	r2, r2, #14
 8001d96:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	681a      	ldr	r2, [r3, #0]
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f022 0201 	bic.w	r2, r2, #1
 8001da6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001db0:	2101      	movs	r1, #1
 8001db2:	fa01 f202 	lsl.w	r2, r1, r2
 8001db6:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	2201      	movs	r2, #1
 8001dbc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d003      	beq.n	8001dd8 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001dd4:	6878      	ldr	r0, [r7, #4]
 8001dd6:	4798      	blx	r3
    }
  }
  return status;
 8001dd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001dda:	4618      	mov	r0, r3
 8001ddc:	3710      	adds	r7, #16
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bd80      	pop	{r7, pc}
	...

08001de4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001de4:	b480      	push	{r7}
 8001de6:	b087      	sub	sp, #28
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
 8001dec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001dee:	2300      	movs	r3, #0
 8001df0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001df2:	e14e      	b.n	8002092 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	681a      	ldr	r2, [r3, #0]
 8001df8:	2101      	movs	r1, #1
 8001dfa:	697b      	ldr	r3, [r7, #20]
 8001dfc:	fa01 f303 	lsl.w	r3, r1, r3
 8001e00:	4013      	ands	r3, r2
 8001e02:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	f000 8140 	beq.w	800208c <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	685b      	ldr	r3, [r3, #4]
 8001e10:	f003 0303 	and.w	r3, r3, #3
 8001e14:	2b01      	cmp	r3, #1
 8001e16:	d005      	beq.n	8001e24 <HAL_GPIO_Init+0x40>
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	685b      	ldr	r3, [r3, #4]
 8001e1c:	f003 0303 	and.w	r3, r3, #3
 8001e20:	2b02      	cmp	r3, #2
 8001e22:	d130      	bne.n	8001e86 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	689b      	ldr	r3, [r3, #8]
 8001e28:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001e2a:	697b      	ldr	r3, [r7, #20]
 8001e2c:	005b      	lsls	r3, r3, #1
 8001e2e:	2203      	movs	r2, #3
 8001e30:	fa02 f303 	lsl.w	r3, r2, r3
 8001e34:	43db      	mvns	r3, r3
 8001e36:	693a      	ldr	r2, [r7, #16]
 8001e38:	4013      	ands	r3, r2
 8001e3a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	68da      	ldr	r2, [r3, #12]
 8001e40:	697b      	ldr	r3, [r7, #20]
 8001e42:	005b      	lsls	r3, r3, #1
 8001e44:	fa02 f303 	lsl.w	r3, r2, r3
 8001e48:	693a      	ldr	r2, [r7, #16]
 8001e4a:	4313      	orrs	r3, r2
 8001e4c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	693a      	ldr	r2, [r7, #16]
 8001e52:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	685b      	ldr	r3, [r3, #4]
 8001e58:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001e5a:	2201      	movs	r2, #1
 8001e5c:	697b      	ldr	r3, [r7, #20]
 8001e5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e62:	43db      	mvns	r3, r3
 8001e64:	693a      	ldr	r2, [r7, #16]
 8001e66:	4013      	ands	r3, r2
 8001e68:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e6a:	683b      	ldr	r3, [r7, #0]
 8001e6c:	685b      	ldr	r3, [r3, #4]
 8001e6e:	091b      	lsrs	r3, r3, #4
 8001e70:	f003 0201 	and.w	r2, r3, #1
 8001e74:	697b      	ldr	r3, [r7, #20]
 8001e76:	fa02 f303 	lsl.w	r3, r2, r3
 8001e7a:	693a      	ldr	r2, [r7, #16]
 8001e7c:	4313      	orrs	r3, r2
 8001e7e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	693a      	ldr	r2, [r7, #16]
 8001e84:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	685b      	ldr	r3, [r3, #4]
 8001e8a:	f003 0303 	and.w	r3, r3, #3
 8001e8e:	2b03      	cmp	r3, #3
 8001e90:	d017      	beq.n	8001ec2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	68db      	ldr	r3, [r3, #12]
 8001e96:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001e98:	697b      	ldr	r3, [r7, #20]
 8001e9a:	005b      	lsls	r3, r3, #1
 8001e9c:	2203      	movs	r2, #3
 8001e9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea2:	43db      	mvns	r3, r3
 8001ea4:	693a      	ldr	r2, [r7, #16]
 8001ea6:	4013      	ands	r3, r2
 8001ea8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	689a      	ldr	r2, [r3, #8]
 8001eae:	697b      	ldr	r3, [r7, #20]
 8001eb0:	005b      	lsls	r3, r3, #1
 8001eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb6:	693a      	ldr	r2, [r7, #16]
 8001eb8:	4313      	orrs	r3, r2
 8001eba:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	693a      	ldr	r2, [r7, #16]
 8001ec0:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	685b      	ldr	r3, [r3, #4]
 8001ec6:	f003 0303 	and.w	r3, r3, #3
 8001eca:	2b02      	cmp	r3, #2
 8001ecc:	d123      	bne.n	8001f16 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001ece:	697b      	ldr	r3, [r7, #20]
 8001ed0:	08da      	lsrs	r2, r3, #3
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	3208      	adds	r2, #8
 8001ed6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001eda:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001edc:	697b      	ldr	r3, [r7, #20]
 8001ede:	f003 0307 	and.w	r3, r3, #7
 8001ee2:	009b      	lsls	r3, r3, #2
 8001ee4:	220f      	movs	r2, #15
 8001ee6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eea:	43db      	mvns	r3, r3
 8001eec:	693a      	ldr	r2, [r7, #16]
 8001eee:	4013      	ands	r3, r2
 8001ef0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	691a      	ldr	r2, [r3, #16]
 8001ef6:	697b      	ldr	r3, [r7, #20]
 8001ef8:	f003 0307 	and.w	r3, r3, #7
 8001efc:	009b      	lsls	r3, r3, #2
 8001efe:	fa02 f303 	lsl.w	r3, r2, r3
 8001f02:	693a      	ldr	r2, [r7, #16]
 8001f04:	4313      	orrs	r3, r2
 8001f06:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001f08:	697b      	ldr	r3, [r7, #20]
 8001f0a:	08da      	lsrs	r2, r3, #3
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	3208      	adds	r2, #8
 8001f10:	6939      	ldr	r1, [r7, #16]
 8001f12:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001f1c:	697b      	ldr	r3, [r7, #20]
 8001f1e:	005b      	lsls	r3, r3, #1
 8001f20:	2203      	movs	r2, #3
 8001f22:	fa02 f303 	lsl.w	r3, r2, r3
 8001f26:	43db      	mvns	r3, r3
 8001f28:	693a      	ldr	r2, [r7, #16]
 8001f2a:	4013      	ands	r3, r2
 8001f2c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	685b      	ldr	r3, [r3, #4]
 8001f32:	f003 0203 	and.w	r2, r3, #3
 8001f36:	697b      	ldr	r3, [r7, #20]
 8001f38:	005b      	lsls	r3, r3, #1
 8001f3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f3e:	693a      	ldr	r2, [r7, #16]
 8001f40:	4313      	orrs	r3, r2
 8001f42:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	693a      	ldr	r2, [r7, #16]
 8001f48:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001f4a:	683b      	ldr	r3, [r7, #0]
 8001f4c:	685b      	ldr	r3, [r3, #4]
 8001f4e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	f000 809a 	beq.w	800208c <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f58:	4b55      	ldr	r3, [pc, #340]	@ (80020b0 <HAL_GPIO_Init+0x2cc>)
 8001f5a:	699b      	ldr	r3, [r3, #24]
 8001f5c:	4a54      	ldr	r2, [pc, #336]	@ (80020b0 <HAL_GPIO_Init+0x2cc>)
 8001f5e:	f043 0301 	orr.w	r3, r3, #1
 8001f62:	6193      	str	r3, [r2, #24]
 8001f64:	4b52      	ldr	r3, [pc, #328]	@ (80020b0 <HAL_GPIO_Init+0x2cc>)
 8001f66:	699b      	ldr	r3, [r3, #24]
 8001f68:	f003 0301 	and.w	r3, r3, #1
 8001f6c:	60bb      	str	r3, [r7, #8]
 8001f6e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001f70:	4a50      	ldr	r2, [pc, #320]	@ (80020b4 <HAL_GPIO_Init+0x2d0>)
 8001f72:	697b      	ldr	r3, [r7, #20]
 8001f74:	089b      	lsrs	r3, r3, #2
 8001f76:	3302      	adds	r3, #2
 8001f78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f7c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001f7e:	697b      	ldr	r3, [r7, #20]
 8001f80:	f003 0303 	and.w	r3, r3, #3
 8001f84:	009b      	lsls	r3, r3, #2
 8001f86:	220f      	movs	r2, #15
 8001f88:	fa02 f303 	lsl.w	r3, r2, r3
 8001f8c:	43db      	mvns	r3, r3
 8001f8e:	693a      	ldr	r2, [r7, #16]
 8001f90:	4013      	ands	r3, r2
 8001f92:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001f9a:	d013      	beq.n	8001fc4 <HAL_GPIO_Init+0x1e0>
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	4a46      	ldr	r2, [pc, #280]	@ (80020b8 <HAL_GPIO_Init+0x2d4>)
 8001fa0:	4293      	cmp	r3, r2
 8001fa2:	d00d      	beq.n	8001fc0 <HAL_GPIO_Init+0x1dc>
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	4a45      	ldr	r2, [pc, #276]	@ (80020bc <HAL_GPIO_Init+0x2d8>)
 8001fa8:	4293      	cmp	r3, r2
 8001faa:	d007      	beq.n	8001fbc <HAL_GPIO_Init+0x1d8>
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	4a44      	ldr	r2, [pc, #272]	@ (80020c0 <HAL_GPIO_Init+0x2dc>)
 8001fb0:	4293      	cmp	r3, r2
 8001fb2:	d101      	bne.n	8001fb8 <HAL_GPIO_Init+0x1d4>
 8001fb4:	2303      	movs	r3, #3
 8001fb6:	e006      	b.n	8001fc6 <HAL_GPIO_Init+0x1e2>
 8001fb8:	2305      	movs	r3, #5
 8001fba:	e004      	b.n	8001fc6 <HAL_GPIO_Init+0x1e2>
 8001fbc:	2302      	movs	r3, #2
 8001fbe:	e002      	b.n	8001fc6 <HAL_GPIO_Init+0x1e2>
 8001fc0:	2301      	movs	r3, #1
 8001fc2:	e000      	b.n	8001fc6 <HAL_GPIO_Init+0x1e2>
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	697a      	ldr	r2, [r7, #20]
 8001fc8:	f002 0203 	and.w	r2, r2, #3
 8001fcc:	0092      	lsls	r2, r2, #2
 8001fce:	4093      	lsls	r3, r2
 8001fd0:	693a      	ldr	r2, [r7, #16]
 8001fd2:	4313      	orrs	r3, r2
 8001fd4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001fd6:	4937      	ldr	r1, [pc, #220]	@ (80020b4 <HAL_GPIO_Init+0x2d0>)
 8001fd8:	697b      	ldr	r3, [r7, #20]
 8001fda:	089b      	lsrs	r3, r3, #2
 8001fdc:	3302      	adds	r3, #2
 8001fde:	693a      	ldr	r2, [r7, #16]
 8001fe0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001fe4:	4b37      	ldr	r3, [pc, #220]	@ (80020c4 <HAL_GPIO_Init+0x2e0>)
 8001fe6:	689b      	ldr	r3, [r3, #8]
 8001fe8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	43db      	mvns	r3, r3
 8001fee:	693a      	ldr	r2, [r7, #16]
 8001ff0:	4013      	ands	r3, r2
 8001ff2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	685b      	ldr	r3, [r3, #4]
 8001ff8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d003      	beq.n	8002008 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8002000:	693a      	ldr	r2, [r7, #16]
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	4313      	orrs	r3, r2
 8002006:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002008:	4a2e      	ldr	r2, [pc, #184]	@ (80020c4 <HAL_GPIO_Init+0x2e0>)
 800200a:	693b      	ldr	r3, [r7, #16]
 800200c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800200e:	4b2d      	ldr	r3, [pc, #180]	@ (80020c4 <HAL_GPIO_Init+0x2e0>)
 8002010:	68db      	ldr	r3, [r3, #12]
 8002012:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	43db      	mvns	r3, r3
 8002018:	693a      	ldr	r2, [r7, #16]
 800201a:	4013      	ands	r3, r2
 800201c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	685b      	ldr	r3, [r3, #4]
 8002022:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002026:	2b00      	cmp	r3, #0
 8002028:	d003      	beq.n	8002032 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 800202a:	693a      	ldr	r2, [r7, #16]
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	4313      	orrs	r3, r2
 8002030:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002032:	4a24      	ldr	r2, [pc, #144]	@ (80020c4 <HAL_GPIO_Init+0x2e0>)
 8002034:	693b      	ldr	r3, [r7, #16]
 8002036:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002038:	4b22      	ldr	r3, [pc, #136]	@ (80020c4 <HAL_GPIO_Init+0x2e0>)
 800203a:	685b      	ldr	r3, [r3, #4]
 800203c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	43db      	mvns	r3, r3
 8002042:	693a      	ldr	r2, [r7, #16]
 8002044:	4013      	ands	r3, r2
 8002046:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	685b      	ldr	r3, [r3, #4]
 800204c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002050:	2b00      	cmp	r3, #0
 8002052:	d003      	beq.n	800205c <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8002054:	693a      	ldr	r2, [r7, #16]
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	4313      	orrs	r3, r2
 800205a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800205c:	4a19      	ldr	r2, [pc, #100]	@ (80020c4 <HAL_GPIO_Init+0x2e0>)
 800205e:	693b      	ldr	r3, [r7, #16]
 8002060:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002062:	4b18      	ldr	r3, [pc, #96]	@ (80020c4 <HAL_GPIO_Init+0x2e0>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	43db      	mvns	r3, r3
 800206c:	693a      	ldr	r2, [r7, #16]
 800206e:	4013      	ands	r3, r2
 8002070:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	685b      	ldr	r3, [r3, #4]
 8002076:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800207a:	2b00      	cmp	r3, #0
 800207c:	d003      	beq.n	8002086 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 800207e:	693a      	ldr	r2, [r7, #16]
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	4313      	orrs	r3, r2
 8002084:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002086:	4a0f      	ldr	r2, [pc, #60]	@ (80020c4 <HAL_GPIO_Init+0x2e0>)
 8002088:	693b      	ldr	r3, [r7, #16]
 800208a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800208c:	697b      	ldr	r3, [r7, #20]
 800208e:	3301      	adds	r3, #1
 8002090:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	681a      	ldr	r2, [r3, #0]
 8002096:	697b      	ldr	r3, [r7, #20]
 8002098:	fa22 f303 	lsr.w	r3, r2, r3
 800209c:	2b00      	cmp	r3, #0
 800209e:	f47f aea9 	bne.w	8001df4 <HAL_GPIO_Init+0x10>
  }
}
 80020a2:	bf00      	nop
 80020a4:	bf00      	nop
 80020a6:	371c      	adds	r7, #28
 80020a8:	46bd      	mov	sp, r7
 80020aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ae:	4770      	bx	lr
 80020b0:	40021000 	.word	0x40021000
 80020b4:	40010000 	.word	0x40010000
 80020b8:	48000400 	.word	0x48000400
 80020bc:	48000800 	.word	0x48000800
 80020c0:	48000c00 	.word	0x48000c00
 80020c4:	40010400 	.word	0x40010400

080020c8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80020c8:	b480      	push	{r7}
 80020ca:	b085      	sub	sp, #20
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
 80020d0:	460b      	mov	r3, r1
 80020d2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	691a      	ldr	r2, [r3, #16]
 80020d8:	887b      	ldrh	r3, [r7, #2]
 80020da:	4013      	ands	r3, r2
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d002      	beq.n	80020e6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80020e0:	2301      	movs	r3, #1
 80020e2:	73fb      	strb	r3, [r7, #15]
 80020e4:	e001      	b.n	80020ea <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80020e6:	2300      	movs	r3, #0
 80020e8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80020ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80020ec:	4618      	mov	r0, r3
 80020ee:	3714      	adds	r7, #20
 80020f0:	46bd      	mov	sp, r7
 80020f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f6:	4770      	bx	lr

080020f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80020f8:	b480      	push	{r7}
 80020fa:	b083      	sub	sp, #12
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
 8002100:	460b      	mov	r3, r1
 8002102:	807b      	strh	r3, [r7, #2]
 8002104:	4613      	mov	r3, r2
 8002106:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002108:	787b      	ldrb	r3, [r7, #1]
 800210a:	2b00      	cmp	r3, #0
 800210c:	d003      	beq.n	8002116 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800210e:	887a      	ldrh	r2, [r7, #2]
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002114:	e002      	b.n	800211c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002116:	887a      	ldrh	r2, [r7, #2]
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800211c:	bf00      	nop
 800211e:	370c      	adds	r7, #12
 8002120:	46bd      	mov	sp, r7
 8002122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002126:	4770      	bx	lr

08002128 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 800212e:	af00      	add	r7, sp, #0
 8002130:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002134:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002138:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800213a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800213e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	2b00      	cmp	r3, #0
 8002146:	d102      	bne.n	800214e <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8002148:	2301      	movs	r3, #1
 800214a:	f001 b823 	b.w	8003194 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800214e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002152:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f003 0301 	and.w	r3, r3, #1
 800215e:	2b00      	cmp	r3, #0
 8002160:	f000 817d 	beq.w	800245e <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002164:	4bbc      	ldr	r3, [pc, #752]	@ (8002458 <HAL_RCC_OscConfig+0x330>)
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	f003 030c 	and.w	r3, r3, #12
 800216c:	2b04      	cmp	r3, #4
 800216e:	d00c      	beq.n	800218a <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002170:	4bb9      	ldr	r3, [pc, #740]	@ (8002458 <HAL_RCC_OscConfig+0x330>)
 8002172:	685b      	ldr	r3, [r3, #4]
 8002174:	f003 030c 	and.w	r3, r3, #12
 8002178:	2b08      	cmp	r3, #8
 800217a:	d15c      	bne.n	8002236 <HAL_RCC_OscConfig+0x10e>
 800217c:	4bb6      	ldr	r3, [pc, #728]	@ (8002458 <HAL_RCC_OscConfig+0x330>)
 800217e:	685b      	ldr	r3, [r3, #4]
 8002180:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002184:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002188:	d155      	bne.n	8002236 <HAL_RCC_OscConfig+0x10e>
 800218a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800218e:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002192:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 8002196:	fa93 f3a3 	rbit	r3, r3
 800219a:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800219e:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021a2:	fab3 f383 	clz	r3, r3
 80021a6:	b2db      	uxtb	r3, r3
 80021a8:	095b      	lsrs	r3, r3, #5
 80021aa:	b2db      	uxtb	r3, r3
 80021ac:	f043 0301 	orr.w	r3, r3, #1
 80021b0:	b2db      	uxtb	r3, r3
 80021b2:	2b01      	cmp	r3, #1
 80021b4:	d102      	bne.n	80021bc <HAL_RCC_OscConfig+0x94>
 80021b6:	4ba8      	ldr	r3, [pc, #672]	@ (8002458 <HAL_RCC_OscConfig+0x330>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	e015      	b.n	80021e8 <HAL_RCC_OscConfig+0xc0>
 80021bc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80021c0:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021c4:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 80021c8:	fa93 f3a3 	rbit	r3, r3
 80021cc:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 80021d0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80021d4:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 80021d8:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 80021dc:	fa93 f3a3 	rbit	r3, r3
 80021e0:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 80021e4:	4b9c      	ldr	r3, [pc, #624]	@ (8002458 <HAL_RCC_OscConfig+0x330>)
 80021e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021e8:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80021ec:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 80021f0:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 80021f4:	fa92 f2a2 	rbit	r2, r2
 80021f8:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 80021fc:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 8002200:	fab2 f282 	clz	r2, r2
 8002204:	b2d2      	uxtb	r2, r2
 8002206:	f042 0220 	orr.w	r2, r2, #32
 800220a:	b2d2      	uxtb	r2, r2
 800220c:	f002 021f 	and.w	r2, r2, #31
 8002210:	2101      	movs	r1, #1
 8002212:	fa01 f202 	lsl.w	r2, r1, r2
 8002216:	4013      	ands	r3, r2
 8002218:	2b00      	cmp	r3, #0
 800221a:	f000 811f 	beq.w	800245c <HAL_RCC_OscConfig+0x334>
 800221e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002222:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	685b      	ldr	r3, [r3, #4]
 800222a:	2b00      	cmp	r3, #0
 800222c:	f040 8116 	bne.w	800245c <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8002230:	2301      	movs	r3, #1
 8002232:	f000 bfaf 	b.w	8003194 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002236:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800223a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	685b      	ldr	r3, [r3, #4]
 8002242:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002246:	d106      	bne.n	8002256 <HAL_RCC_OscConfig+0x12e>
 8002248:	4b83      	ldr	r3, [pc, #524]	@ (8002458 <HAL_RCC_OscConfig+0x330>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	4a82      	ldr	r2, [pc, #520]	@ (8002458 <HAL_RCC_OscConfig+0x330>)
 800224e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002252:	6013      	str	r3, [r2, #0]
 8002254:	e036      	b.n	80022c4 <HAL_RCC_OscConfig+0x19c>
 8002256:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800225a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	685b      	ldr	r3, [r3, #4]
 8002262:	2b00      	cmp	r3, #0
 8002264:	d10c      	bne.n	8002280 <HAL_RCC_OscConfig+0x158>
 8002266:	4b7c      	ldr	r3, [pc, #496]	@ (8002458 <HAL_RCC_OscConfig+0x330>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	4a7b      	ldr	r2, [pc, #492]	@ (8002458 <HAL_RCC_OscConfig+0x330>)
 800226c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002270:	6013      	str	r3, [r2, #0]
 8002272:	4b79      	ldr	r3, [pc, #484]	@ (8002458 <HAL_RCC_OscConfig+0x330>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	4a78      	ldr	r2, [pc, #480]	@ (8002458 <HAL_RCC_OscConfig+0x330>)
 8002278:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800227c:	6013      	str	r3, [r2, #0]
 800227e:	e021      	b.n	80022c4 <HAL_RCC_OscConfig+0x19c>
 8002280:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002284:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	685b      	ldr	r3, [r3, #4]
 800228c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002290:	d10c      	bne.n	80022ac <HAL_RCC_OscConfig+0x184>
 8002292:	4b71      	ldr	r3, [pc, #452]	@ (8002458 <HAL_RCC_OscConfig+0x330>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	4a70      	ldr	r2, [pc, #448]	@ (8002458 <HAL_RCC_OscConfig+0x330>)
 8002298:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800229c:	6013      	str	r3, [r2, #0]
 800229e:	4b6e      	ldr	r3, [pc, #440]	@ (8002458 <HAL_RCC_OscConfig+0x330>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	4a6d      	ldr	r2, [pc, #436]	@ (8002458 <HAL_RCC_OscConfig+0x330>)
 80022a4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80022a8:	6013      	str	r3, [r2, #0]
 80022aa:	e00b      	b.n	80022c4 <HAL_RCC_OscConfig+0x19c>
 80022ac:	4b6a      	ldr	r3, [pc, #424]	@ (8002458 <HAL_RCC_OscConfig+0x330>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	4a69      	ldr	r2, [pc, #420]	@ (8002458 <HAL_RCC_OscConfig+0x330>)
 80022b2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80022b6:	6013      	str	r3, [r2, #0]
 80022b8:	4b67      	ldr	r3, [pc, #412]	@ (8002458 <HAL_RCC_OscConfig+0x330>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	4a66      	ldr	r2, [pc, #408]	@ (8002458 <HAL_RCC_OscConfig+0x330>)
 80022be:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80022c2:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80022c4:	4b64      	ldr	r3, [pc, #400]	@ (8002458 <HAL_RCC_OscConfig+0x330>)
 80022c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022c8:	f023 020f 	bic.w	r2, r3, #15
 80022cc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022d0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	689b      	ldr	r3, [r3, #8]
 80022d8:	495f      	ldr	r1, [pc, #380]	@ (8002458 <HAL_RCC_OscConfig+0x330>)
 80022da:	4313      	orrs	r3, r2
 80022dc:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80022de:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022e2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	685b      	ldr	r3, [r3, #4]
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d059      	beq.n	80023a2 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022ee:	f7ff fae3 	bl	80018b8 <HAL_GetTick>
 80022f2:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022f6:	e00a      	b.n	800230e <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80022f8:	f7ff fade 	bl	80018b8 <HAL_GetTick>
 80022fc:	4602      	mov	r2, r0
 80022fe:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002302:	1ad3      	subs	r3, r2, r3
 8002304:	2b64      	cmp	r3, #100	@ 0x64
 8002306:	d902      	bls.n	800230e <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8002308:	2303      	movs	r3, #3
 800230a:	f000 bf43 	b.w	8003194 <HAL_RCC_OscConfig+0x106c>
 800230e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002312:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002316:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 800231a:	fa93 f3a3 	rbit	r3, r3
 800231e:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 8002322:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002326:	fab3 f383 	clz	r3, r3
 800232a:	b2db      	uxtb	r3, r3
 800232c:	095b      	lsrs	r3, r3, #5
 800232e:	b2db      	uxtb	r3, r3
 8002330:	f043 0301 	orr.w	r3, r3, #1
 8002334:	b2db      	uxtb	r3, r3
 8002336:	2b01      	cmp	r3, #1
 8002338:	d102      	bne.n	8002340 <HAL_RCC_OscConfig+0x218>
 800233a:	4b47      	ldr	r3, [pc, #284]	@ (8002458 <HAL_RCC_OscConfig+0x330>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	e015      	b.n	800236c <HAL_RCC_OscConfig+0x244>
 8002340:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002344:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002348:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 800234c:	fa93 f3a3 	rbit	r3, r3
 8002350:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8002354:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002358:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 800235c:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8002360:	fa93 f3a3 	rbit	r3, r3
 8002364:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8002368:	4b3b      	ldr	r3, [pc, #236]	@ (8002458 <HAL_RCC_OscConfig+0x330>)
 800236a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800236c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002370:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 8002374:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8002378:	fa92 f2a2 	rbit	r2, r2
 800237c:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 8002380:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8002384:	fab2 f282 	clz	r2, r2
 8002388:	b2d2      	uxtb	r2, r2
 800238a:	f042 0220 	orr.w	r2, r2, #32
 800238e:	b2d2      	uxtb	r2, r2
 8002390:	f002 021f 	and.w	r2, r2, #31
 8002394:	2101      	movs	r1, #1
 8002396:	fa01 f202 	lsl.w	r2, r1, r2
 800239a:	4013      	ands	r3, r2
 800239c:	2b00      	cmp	r3, #0
 800239e:	d0ab      	beq.n	80022f8 <HAL_RCC_OscConfig+0x1d0>
 80023a0:	e05d      	b.n	800245e <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023a2:	f7ff fa89 	bl	80018b8 <HAL_GetTick>
 80023a6:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023aa:	e00a      	b.n	80023c2 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80023ac:	f7ff fa84 	bl	80018b8 <HAL_GetTick>
 80023b0:	4602      	mov	r2, r0
 80023b2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80023b6:	1ad3      	subs	r3, r2, r3
 80023b8:	2b64      	cmp	r3, #100	@ 0x64
 80023ba:	d902      	bls.n	80023c2 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 80023bc:	2303      	movs	r3, #3
 80023be:	f000 bee9 	b.w	8003194 <HAL_RCC_OscConfig+0x106c>
 80023c2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80023c6:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023ca:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 80023ce:	fa93 f3a3 	rbit	r3, r3
 80023d2:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 80023d6:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023da:	fab3 f383 	clz	r3, r3
 80023de:	b2db      	uxtb	r3, r3
 80023e0:	095b      	lsrs	r3, r3, #5
 80023e2:	b2db      	uxtb	r3, r3
 80023e4:	f043 0301 	orr.w	r3, r3, #1
 80023e8:	b2db      	uxtb	r3, r3
 80023ea:	2b01      	cmp	r3, #1
 80023ec:	d102      	bne.n	80023f4 <HAL_RCC_OscConfig+0x2cc>
 80023ee:	4b1a      	ldr	r3, [pc, #104]	@ (8002458 <HAL_RCC_OscConfig+0x330>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	e015      	b.n	8002420 <HAL_RCC_OscConfig+0x2f8>
 80023f4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80023f8:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023fc:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8002400:	fa93 f3a3 	rbit	r3, r3
 8002404:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8002408:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800240c:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8002410:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8002414:	fa93 f3a3 	rbit	r3, r3
 8002418:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 800241c:	4b0e      	ldr	r3, [pc, #56]	@ (8002458 <HAL_RCC_OscConfig+0x330>)
 800241e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002420:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002424:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 8002428:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 800242c:	fa92 f2a2 	rbit	r2, r2
 8002430:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 8002434:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8002438:	fab2 f282 	clz	r2, r2
 800243c:	b2d2      	uxtb	r2, r2
 800243e:	f042 0220 	orr.w	r2, r2, #32
 8002442:	b2d2      	uxtb	r2, r2
 8002444:	f002 021f 	and.w	r2, r2, #31
 8002448:	2101      	movs	r1, #1
 800244a:	fa01 f202 	lsl.w	r2, r1, r2
 800244e:	4013      	ands	r3, r2
 8002450:	2b00      	cmp	r3, #0
 8002452:	d1ab      	bne.n	80023ac <HAL_RCC_OscConfig+0x284>
 8002454:	e003      	b.n	800245e <HAL_RCC_OscConfig+0x336>
 8002456:	bf00      	nop
 8002458:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800245c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800245e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002462:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f003 0302 	and.w	r3, r3, #2
 800246e:	2b00      	cmp	r3, #0
 8002470:	f000 817d 	beq.w	800276e <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002474:	4ba6      	ldr	r3, [pc, #664]	@ (8002710 <HAL_RCC_OscConfig+0x5e8>)
 8002476:	685b      	ldr	r3, [r3, #4]
 8002478:	f003 030c 	and.w	r3, r3, #12
 800247c:	2b00      	cmp	r3, #0
 800247e:	d00b      	beq.n	8002498 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002480:	4ba3      	ldr	r3, [pc, #652]	@ (8002710 <HAL_RCC_OscConfig+0x5e8>)
 8002482:	685b      	ldr	r3, [r3, #4]
 8002484:	f003 030c 	and.w	r3, r3, #12
 8002488:	2b08      	cmp	r3, #8
 800248a:	d172      	bne.n	8002572 <HAL_RCC_OscConfig+0x44a>
 800248c:	4ba0      	ldr	r3, [pc, #640]	@ (8002710 <HAL_RCC_OscConfig+0x5e8>)
 800248e:	685b      	ldr	r3, [r3, #4]
 8002490:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002494:	2b00      	cmp	r3, #0
 8002496:	d16c      	bne.n	8002572 <HAL_RCC_OscConfig+0x44a>
 8002498:	2302      	movs	r3, #2
 800249a:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800249e:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 80024a2:	fa93 f3a3 	rbit	r3, r3
 80024a6:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 80024aa:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024ae:	fab3 f383 	clz	r3, r3
 80024b2:	b2db      	uxtb	r3, r3
 80024b4:	095b      	lsrs	r3, r3, #5
 80024b6:	b2db      	uxtb	r3, r3
 80024b8:	f043 0301 	orr.w	r3, r3, #1
 80024bc:	b2db      	uxtb	r3, r3
 80024be:	2b01      	cmp	r3, #1
 80024c0:	d102      	bne.n	80024c8 <HAL_RCC_OscConfig+0x3a0>
 80024c2:	4b93      	ldr	r3, [pc, #588]	@ (8002710 <HAL_RCC_OscConfig+0x5e8>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	e013      	b.n	80024f0 <HAL_RCC_OscConfig+0x3c8>
 80024c8:	2302      	movs	r3, #2
 80024ca:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024ce:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 80024d2:	fa93 f3a3 	rbit	r3, r3
 80024d6:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 80024da:	2302      	movs	r3, #2
 80024dc:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 80024e0:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 80024e4:	fa93 f3a3 	rbit	r3, r3
 80024e8:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 80024ec:	4b88      	ldr	r3, [pc, #544]	@ (8002710 <HAL_RCC_OscConfig+0x5e8>)
 80024ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024f0:	2202      	movs	r2, #2
 80024f2:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 80024f6:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 80024fa:	fa92 f2a2 	rbit	r2, r2
 80024fe:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 8002502:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 8002506:	fab2 f282 	clz	r2, r2
 800250a:	b2d2      	uxtb	r2, r2
 800250c:	f042 0220 	orr.w	r2, r2, #32
 8002510:	b2d2      	uxtb	r2, r2
 8002512:	f002 021f 	and.w	r2, r2, #31
 8002516:	2101      	movs	r1, #1
 8002518:	fa01 f202 	lsl.w	r2, r1, r2
 800251c:	4013      	ands	r3, r2
 800251e:	2b00      	cmp	r3, #0
 8002520:	d00a      	beq.n	8002538 <HAL_RCC_OscConfig+0x410>
 8002522:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002526:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	691b      	ldr	r3, [r3, #16]
 800252e:	2b01      	cmp	r3, #1
 8002530:	d002      	beq.n	8002538 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8002532:	2301      	movs	r3, #1
 8002534:	f000 be2e 	b.w	8003194 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002538:	4b75      	ldr	r3, [pc, #468]	@ (8002710 <HAL_RCC_OscConfig+0x5e8>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002540:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002544:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	695b      	ldr	r3, [r3, #20]
 800254c:	21f8      	movs	r1, #248	@ 0xf8
 800254e:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002552:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8002556:	fa91 f1a1 	rbit	r1, r1
 800255a:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 800255e:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 8002562:	fab1 f181 	clz	r1, r1
 8002566:	b2c9      	uxtb	r1, r1
 8002568:	408b      	lsls	r3, r1
 800256a:	4969      	ldr	r1, [pc, #420]	@ (8002710 <HAL_RCC_OscConfig+0x5e8>)
 800256c:	4313      	orrs	r3, r2
 800256e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002570:	e0fd      	b.n	800276e <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002572:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002576:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	691b      	ldr	r3, [r3, #16]
 800257e:	2b00      	cmp	r3, #0
 8002580:	f000 8088 	beq.w	8002694 <HAL_RCC_OscConfig+0x56c>
 8002584:	2301      	movs	r3, #1
 8002586:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800258a:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 800258e:	fa93 f3a3 	rbit	r3, r3
 8002592:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 8002596:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800259a:	fab3 f383 	clz	r3, r3
 800259e:	b2db      	uxtb	r3, r3
 80025a0:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80025a4:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80025a8:	009b      	lsls	r3, r3, #2
 80025aa:	461a      	mov	r2, r3
 80025ac:	2301      	movs	r3, #1
 80025ae:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025b0:	f7ff f982 	bl	80018b8 <HAL_GetTick>
 80025b4:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025b8:	e00a      	b.n	80025d0 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80025ba:	f7ff f97d 	bl	80018b8 <HAL_GetTick>
 80025be:	4602      	mov	r2, r0
 80025c0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80025c4:	1ad3      	subs	r3, r2, r3
 80025c6:	2b02      	cmp	r3, #2
 80025c8:	d902      	bls.n	80025d0 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 80025ca:	2303      	movs	r3, #3
 80025cc:	f000 bde2 	b.w	8003194 <HAL_RCC_OscConfig+0x106c>
 80025d0:	2302      	movs	r3, #2
 80025d2:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025d6:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 80025da:	fa93 f3a3 	rbit	r3, r3
 80025de:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 80025e2:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025e6:	fab3 f383 	clz	r3, r3
 80025ea:	b2db      	uxtb	r3, r3
 80025ec:	095b      	lsrs	r3, r3, #5
 80025ee:	b2db      	uxtb	r3, r3
 80025f0:	f043 0301 	orr.w	r3, r3, #1
 80025f4:	b2db      	uxtb	r3, r3
 80025f6:	2b01      	cmp	r3, #1
 80025f8:	d102      	bne.n	8002600 <HAL_RCC_OscConfig+0x4d8>
 80025fa:	4b45      	ldr	r3, [pc, #276]	@ (8002710 <HAL_RCC_OscConfig+0x5e8>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	e013      	b.n	8002628 <HAL_RCC_OscConfig+0x500>
 8002600:	2302      	movs	r3, #2
 8002602:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002606:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 800260a:	fa93 f3a3 	rbit	r3, r3
 800260e:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8002612:	2302      	movs	r3, #2
 8002614:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8002618:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 800261c:	fa93 f3a3 	rbit	r3, r3
 8002620:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 8002624:	4b3a      	ldr	r3, [pc, #232]	@ (8002710 <HAL_RCC_OscConfig+0x5e8>)
 8002626:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002628:	2202      	movs	r2, #2
 800262a:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 800262e:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8002632:	fa92 f2a2 	rbit	r2, r2
 8002636:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 800263a:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 800263e:	fab2 f282 	clz	r2, r2
 8002642:	b2d2      	uxtb	r2, r2
 8002644:	f042 0220 	orr.w	r2, r2, #32
 8002648:	b2d2      	uxtb	r2, r2
 800264a:	f002 021f 	and.w	r2, r2, #31
 800264e:	2101      	movs	r1, #1
 8002650:	fa01 f202 	lsl.w	r2, r1, r2
 8002654:	4013      	ands	r3, r2
 8002656:	2b00      	cmp	r3, #0
 8002658:	d0af      	beq.n	80025ba <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800265a:	4b2d      	ldr	r3, [pc, #180]	@ (8002710 <HAL_RCC_OscConfig+0x5e8>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002662:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002666:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	695b      	ldr	r3, [r3, #20]
 800266e:	21f8      	movs	r1, #248	@ 0xf8
 8002670:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002674:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8002678:	fa91 f1a1 	rbit	r1, r1
 800267c:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 8002680:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 8002684:	fab1 f181 	clz	r1, r1
 8002688:	b2c9      	uxtb	r1, r1
 800268a:	408b      	lsls	r3, r1
 800268c:	4920      	ldr	r1, [pc, #128]	@ (8002710 <HAL_RCC_OscConfig+0x5e8>)
 800268e:	4313      	orrs	r3, r2
 8002690:	600b      	str	r3, [r1, #0]
 8002692:	e06c      	b.n	800276e <HAL_RCC_OscConfig+0x646>
 8002694:	2301      	movs	r3, #1
 8002696:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800269a:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800269e:	fa93 f3a3 	rbit	r3, r3
 80026a2:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 80026a6:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80026aa:	fab3 f383 	clz	r3, r3
 80026ae:	b2db      	uxtb	r3, r3
 80026b0:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80026b4:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80026b8:	009b      	lsls	r3, r3, #2
 80026ba:	461a      	mov	r2, r3
 80026bc:	2300      	movs	r3, #0
 80026be:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026c0:	f7ff f8fa 	bl	80018b8 <HAL_GetTick>
 80026c4:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026c8:	e00a      	b.n	80026e0 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80026ca:	f7ff f8f5 	bl	80018b8 <HAL_GetTick>
 80026ce:	4602      	mov	r2, r0
 80026d0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80026d4:	1ad3      	subs	r3, r2, r3
 80026d6:	2b02      	cmp	r3, #2
 80026d8:	d902      	bls.n	80026e0 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 80026da:	2303      	movs	r3, #3
 80026dc:	f000 bd5a 	b.w	8003194 <HAL_RCC_OscConfig+0x106c>
 80026e0:	2302      	movs	r3, #2
 80026e2:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026e6:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80026ea:	fa93 f3a3 	rbit	r3, r3
 80026ee:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 80026f2:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026f6:	fab3 f383 	clz	r3, r3
 80026fa:	b2db      	uxtb	r3, r3
 80026fc:	095b      	lsrs	r3, r3, #5
 80026fe:	b2db      	uxtb	r3, r3
 8002700:	f043 0301 	orr.w	r3, r3, #1
 8002704:	b2db      	uxtb	r3, r3
 8002706:	2b01      	cmp	r3, #1
 8002708:	d104      	bne.n	8002714 <HAL_RCC_OscConfig+0x5ec>
 800270a:	4b01      	ldr	r3, [pc, #4]	@ (8002710 <HAL_RCC_OscConfig+0x5e8>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	e015      	b.n	800273c <HAL_RCC_OscConfig+0x614>
 8002710:	40021000 	.word	0x40021000
 8002714:	2302      	movs	r3, #2
 8002716:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800271a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800271e:	fa93 f3a3 	rbit	r3, r3
 8002722:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8002726:	2302      	movs	r3, #2
 8002728:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 800272c:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8002730:	fa93 f3a3 	rbit	r3, r3
 8002734:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8002738:	4bc8      	ldr	r3, [pc, #800]	@ (8002a5c <HAL_RCC_OscConfig+0x934>)
 800273a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800273c:	2202      	movs	r2, #2
 800273e:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 8002742:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8002746:	fa92 f2a2 	rbit	r2, r2
 800274a:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 800274e:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8002752:	fab2 f282 	clz	r2, r2
 8002756:	b2d2      	uxtb	r2, r2
 8002758:	f042 0220 	orr.w	r2, r2, #32
 800275c:	b2d2      	uxtb	r2, r2
 800275e:	f002 021f 	and.w	r2, r2, #31
 8002762:	2101      	movs	r1, #1
 8002764:	fa01 f202 	lsl.w	r2, r1, r2
 8002768:	4013      	ands	r3, r2
 800276a:	2b00      	cmp	r3, #0
 800276c:	d1ad      	bne.n	80026ca <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800276e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002772:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f003 0308 	and.w	r3, r3, #8
 800277e:	2b00      	cmp	r3, #0
 8002780:	f000 8110 	beq.w	80029a4 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002784:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002788:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	699b      	ldr	r3, [r3, #24]
 8002790:	2b00      	cmp	r3, #0
 8002792:	d079      	beq.n	8002888 <HAL_RCC_OscConfig+0x760>
 8002794:	2301      	movs	r3, #1
 8002796:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800279a:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800279e:	fa93 f3a3 	rbit	r3, r3
 80027a2:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 80027a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80027aa:	fab3 f383 	clz	r3, r3
 80027ae:	b2db      	uxtb	r3, r3
 80027b0:	461a      	mov	r2, r3
 80027b2:	4bab      	ldr	r3, [pc, #684]	@ (8002a60 <HAL_RCC_OscConfig+0x938>)
 80027b4:	4413      	add	r3, r2
 80027b6:	009b      	lsls	r3, r3, #2
 80027b8:	461a      	mov	r2, r3
 80027ba:	2301      	movs	r3, #1
 80027bc:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027be:	f7ff f87b 	bl	80018b8 <HAL_GetTick>
 80027c2:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027c6:	e00a      	b.n	80027de <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80027c8:	f7ff f876 	bl	80018b8 <HAL_GetTick>
 80027cc:	4602      	mov	r2, r0
 80027ce:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80027d2:	1ad3      	subs	r3, r2, r3
 80027d4:	2b02      	cmp	r3, #2
 80027d6:	d902      	bls.n	80027de <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 80027d8:	2303      	movs	r3, #3
 80027da:	f000 bcdb 	b.w	8003194 <HAL_RCC_OscConfig+0x106c>
 80027de:	2302      	movs	r3, #2
 80027e0:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027e4:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 80027e8:	fa93 f3a3 	rbit	r3, r3
 80027ec:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80027f0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027f4:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80027f8:	2202      	movs	r2, #2
 80027fa:	601a      	str	r2, [r3, #0]
 80027fc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002800:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	fa93 f2a3 	rbit	r2, r3
 800280a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800280e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002812:	601a      	str	r2, [r3, #0]
 8002814:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002818:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800281c:	2202      	movs	r2, #2
 800281e:	601a      	str	r2, [r3, #0]
 8002820:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002824:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	fa93 f2a3 	rbit	r2, r3
 800282e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002832:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002836:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002838:	4b88      	ldr	r3, [pc, #544]	@ (8002a5c <HAL_RCC_OscConfig+0x934>)
 800283a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800283c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002840:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002844:	2102      	movs	r1, #2
 8002846:	6019      	str	r1, [r3, #0]
 8002848:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800284c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	fa93 f1a3 	rbit	r1, r3
 8002856:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800285a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800285e:	6019      	str	r1, [r3, #0]
  return result;
 8002860:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002864:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	fab3 f383 	clz	r3, r3
 800286e:	b2db      	uxtb	r3, r3
 8002870:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8002874:	b2db      	uxtb	r3, r3
 8002876:	f003 031f 	and.w	r3, r3, #31
 800287a:	2101      	movs	r1, #1
 800287c:	fa01 f303 	lsl.w	r3, r1, r3
 8002880:	4013      	ands	r3, r2
 8002882:	2b00      	cmp	r3, #0
 8002884:	d0a0      	beq.n	80027c8 <HAL_RCC_OscConfig+0x6a0>
 8002886:	e08d      	b.n	80029a4 <HAL_RCC_OscConfig+0x87c>
 8002888:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800288c:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002890:	2201      	movs	r2, #1
 8002892:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002894:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002898:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	fa93 f2a3 	rbit	r2, r3
 80028a2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028a6:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80028aa:	601a      	str	r2, [r3, #0]
  return result;
 80028ac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028b0:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80028b4:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80028b6:	fab3 f383 	clz	r3, r3
 80028ba:	b2db      	uxtb	r3, r3
 80028bc:	461a      	mov	r2, r3
 80028be:	4b68      	ldr	r3, [pc, #416]	@ (8002a60 <HAL_RCC_OscConfig+0x938>)
 80028c0:	4413      	add	r3, r2
 80028c2:	009b      	lsls	r3, r3, #2
 80028c4:	461a      	mov	r2, r3
 80028c6:	2300      	movs	r3, #0
 80028c8:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028ca:	f7fe fff5 	bl	80018b8 <HAL_GetTick>
 80028ce:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028d2:	e00a      	b.n	80028ea <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80028d4:	f7fe fff0 	bl	80018b8 <HAL_GetTick>
 80028d8:	4602      	mov	r2, r0
 80028da:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80028de:	1ad3      	subs	r3, r2, r3
 80028e0:	2b02      	cmp	r3, #2
 80028e2:	d902      	bls.n	80028ea <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 80028e4:	2303      	movs	r3, #3
 80028e6:	f000 bc55 	b.w	8003194 <HAL_RCC_OscConfig+0x106c>
 80028ea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028ee:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80028f2:	2202      	movs	r2, #2
 80028f4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028f6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028fa:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	fa93 f2a3 	rbit	r2, r3
 8002904:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002908:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 800290c:	601a      	str	r2, [r3, #0]
 800290e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002912:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8002916:	2202      	movs	r2, #2
 8002918:	601a      	str	r2, [r3, #0]
 800291a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800291e:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	fa93 f2a3 	rbit	r2, r3
 8002928:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800292c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8002930:	601a      	str	r2, [r3, #0]
 8002932:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002936:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800293a:	2202      	movs	r2, #2
 800293c:	601a      	str	r2, [r3, #0]
 800293e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002942:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	fa93 f2a3 	rbit	r2, r3
 800294c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002950:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8002954:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002956:	4b41      	ldr	r3, [pc, #260]	@ (8002a5c <HAL_RCC_OscConfig+0x934>)
 8002958:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800295a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800295e:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8002962:	2102      	movs	r1, #2
 8002964:	6019      	str	r1, [r3, #0]
 8002966:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800296a:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	fa93 f1a3 	rbit	r1, r3
 8002974:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002978:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800297c:	6019      	str	r1, [r3, #0]
  return result;
 800297e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002982:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	fab3 f383 	clz	r3, r3
 800298c:	b2db      	uxtb	r3, r3
 800298e:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8002992:	b2db      	uxtb	r3, r3
 8002994:	f003 031f 	and.w	r3, r3, #31
 8002998:	2101      	movs	r1, #1
 800299a:	fa01 f303 	lsl.w	r3, r1, r3
 800299e:	4013      	ands	r3, r2
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d197      	bne.n	80028d4 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80029a4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029a8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f003 0304 	and.w	r3, r3, #4
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	f000 81a1 	beq.w	8002cfc <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80029ba:	2300      	movs	r3, #0
 80029bc:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80029c0:	4b26      	ldr	r3, [pc, #152]	@ (8002a5c <HAL_RCC_OscConfig+0x934>)
 80029c2:	69db      	ldr	r3, [r3, #28]
 80029c4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d116      	bne.n	80029fa <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80029cc:	4b23      	ldr	r3, [pc, #140]	@ (8002a5c <HAL_RCC_OscConfig+0x934>)
 80029ce:	69db      	ldr	r3, [r3, #28]
 80029d0:	4a22      	ldr	r2, [pc, #136]	@ (8002a5c <HAL_RCC_OscConfig+0x934>)
 80029d2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80029d6:	61d3      	str	r3, [r2, #28]
 80029d8:	4b20      	ldr	r3, [pc, #128]	@ (8002a5c <HAL_RCC_OscConfig+0x934>)
 80029da:	69db      	ldr	r3, [r3, #28]
 80029dc:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 80029e0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029e4:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 80029e8:	601a      	str	r2, [r3, #0]
 80029ea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029ee:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 80029f2:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80029f4:	2301      	movs	r3, #1
 80029f6:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029fa:	4b1a      	ldr	r3, [pc, #104]	@ (8002a64 <HAL_RCC_OscConfig+0x93c>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d11a      	bne.n	8002a3c <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a06:	4b17      	ldr	r3, [pc, #92]	@ (8002a64 <HAL_RCC_OscConfig+0x93c>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	4a16      	ldr	r2, [pc, #88]	@ (8002a64 <HAL_RCC_OscConfig+0x93c>)
 8002a0c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002a10:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a12:	f7fe ff51 	bl	80018b8 <HAL_GetTick>
 8002a16:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a1a:	e009      	b.n	8002a30 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a1c:	f7fe ff4c 	bl	80018b8 <HAL_GetTick>
 8002a20:	4602      	mov	r2, r0
 8002a22:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002a26:	1ad3      	subs	r3, r2, r3
 8002a28:	2b64      	cmp	r3, #100	@ 0x64
 8002a2a:	d901      	bls.n	8002a30 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8002a2c:	2303      	movs	r3, #3
 8002a2e:	e3b1      	b.n	8003194 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a30:	4b0c      	ldr	r3, [pc, #48]	@ (8002a64 <HAL_RCC_OscConfig+0x93c>)
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d0ef      	beq.n	8002a1c <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a3c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a40:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	68db      	ldr	r3, [r3, #12]
 8002a48:	2b01      	cmp	r3, #1
 8002a4a:	d10d      	bne.n	8002a68 <HAL_RCC_OscConfig+0x940>
 8002a4c:	4b03      	ldr	r3, [pc, #12]	@ (8002a5c <HAL_RCC_OscConfig+0x934>)
 8002a4e:	6a1b      	ldr	r3, [r3, #32]
 8002a50:	4a02      	ldr	r2, [pc, #8]	@ (8002a5c <HAL_RCC_OscConfig+0x934>)
 8002a52:	f043 0301 	orr.w	r3, r3, #1
 8002a56:	6213      	str	r3, [r2, #32]
 8002a58:	e03c      	b.n	8002ad4 <HAL_RCC_OscConfig+0x9ac>
 8002a5a:	bf00      	nop
 8002a5c:	40021000 	.word	0x40021000
 8002a60:	10908120 	.word	0x10908120
 8002a64:	40007000 	.word	0x40007000
 8002a68:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a6c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	68db      	ldr	r3, [r3, #12]
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d10c      	bne.n	8002a92 <HAL_RCC_OscConfig+0x96a>
 8002a78:	4bc1      	ldr	r3, [pc, #772]	@ (8002d80 <HAL_RCC_OscConfig+0xc58>)
 8002a7a:	6a1b      	ldr	r3, [r3, #32]
 8002a7c:	4ac0      	ldr	r2, [pc, #768]	@ (8002d80 <HAL_RCC_OscConfig+0xc58>)
 8002a7e:	f023 0301 	bic.w	r3, r3, #1
 8002a82:	6213      	str	r3, [r2, #32]
 8002a84:	4bbe      	ldr	r3, [pc, #760]	@ (8002d80 <HAL_RCC_OscConfig+0xc58>)
 8002a86:	6a1b      	ldr	r3, [r3, #32]
 8002a88:	4abd      	ldr	r2, [pc, #756]	@ (8002d80 <HAL_RCC_OscConfig+0xc58>)
 8002a8a:	f023 0304 	bic.w	r3, r3, #4
 8002a8e:	6213      	str	r3, [r2, #32]
 8002a90:	e020      	b.n	8002ad4 <HAL_RCC_OscConfig+0x9ac>
 8002a92:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a96:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	68db      	ldr	r3, [r3, #12]
 8002a9e:	2b05      	cmp	r3, #5
 8002aa0:	d10c      	bne.n	8002abc <HAL_RCC_OscConfig+0x994>
 8002aa2:	4bb7      	ldr	r3, [pc, #732]	@ (8002d80 <HAL_RCC_OscConfig+0xc58>)
 8002aa4:	6a1b      	ldr	r3, [r3, #32]
 8002aa6:	4ab6      	ldr	r2, [pc, #728]	@ (8002d80 <HAL_RCC_OscConfig+0xc58>)
 8002aa8:	f043 0304 	orr.w	r3, r3, #4
 8002aac:	6213      	str	r3, [r2, #32]
 8002aae:	4bb4      	ldr	r3, [pc, #720]	@ (8002d80 <HAL_RCC_OscConfig+0xc58>)
 8002ab0:	6a1b      	ldr	r3, [r3, #32]
 8002ab2:	4ab3      	ldr	r2, [pc, #716]	@ (8002d80 <HAL_RCC_OscConfig+0xc58>)
 8002ab4:	f043 0301 	orr.w	r3, r3, #1
 8002ab8:	6213      	str	r3, [r2, #32]
 8002aba:	e00b      	b.n	8002ad4 <HAL_RCC_OscConfig+0x9ac>
 8002abc:	4bb0      	ldr	r3, [pc, #704]	@ (8002d80 <HAL_RCC_OscConfig+0xc58>)
 8002abe:	6a1b      	ldr	r3, [r3, #32]
 8002ac0:	4aaf      	ldr	r2, [pc, #700]	@ (8002d80 <HAL_RCC_OscConfig+0xc58>)
 8002ac2:	f023 0301 	bic.w	r3, r3, #1
 8002ac6:	6213      	str	r3, [r2, #32]
 8002ac8:	4bad      	ldr	r3, [pc, #692]	@ (8002d80 <HAL_RCC_OscConfig+0xc58>)
 8002aca:	6a1b      	ldr	r3, [r3, #32]
 8002acc:	4aac      	ldr	r2, [pc, #688]	@ (8002d80 <HAL_RCC_OscConfig+0xc58>)
 8002ace:	f023 0304 	bic.w	r3, r3, #4
 8002ad2:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002ad4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ad8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	68db      	ldr	r3, [r3, #12]
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	f000 8081 	beq.w	8002be8 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ae6:	f7fe fee7 	bl	80018b8 <HAL_GetTick>
 8002aea:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002aee:	e00b      	b.n	8002b08 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002af0:	f7fe fee2 	bl	80018b8 <HAL_GetTick>
 8002af4:	4602      	mov	r2, r0
 8002af6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002afa:	1ad3      	subs	r3, r2, r3
 8002afc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b00:	4293      	cmp	r3, r2
 8002b02:	d901      	bls.n	8002b08 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8002b04:	2303      	movs	r3, #3
 8002b06:	e345      	b.n	8003194 <HAL_RCC_OscConfig+0x106c>
 8002b08:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b0c:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002b10:	2202      	movs	r2, #2
 8002b12:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b14:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b18:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	fa93 f2a3 	rbit	r2, r3
 8002b22:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b26:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8002b2a:	601a      	str	r2, [r3, #0]
 8002b2c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b30:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8002b34:	2202      	movs	r2, #2
 8002b36:	601a      	str	r2, [r3, #0]
 8002b38:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b3c:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	fa93 f2a3 	rbit	r2, r3
 8002b46:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b4a:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8002b4e:	601a      	str	r2, [r3, #0]
  return result;
 8002b50:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b54:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8002b58:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b5a:	fab3 f383 	clz	r3, r3
 8002b5e:	b2db      	uxtb	r3, r3
 8002b60:	095b      	lsrs	r3, r3, #5
 8002b62:	b2db      	uxtb	r3, r3
 8002b64:	f043 0302 	orr.w	r3, r3, #2
 8002b68:	b2db      	uxtb	r3, r3
 8002b6a:	2b02      	cmp	r3, #2
 8002b6c:	d102      	bne.n	8002b74 <HAL_RCC_OscConfig+0xa4c>
 8002b6e:	4b84      	ldr	r3, [pc, #528]	@ (8002d80 <HAL_RCC_OscConfig+0xc58>)
 8002b70:	6a1b      	ldr	r3, [r3, #32]
 8002b72:	e013      	b.n	8002b9c <HAL_RCC_OscConfig+0xa74>
 8002b74:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b78:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8002b7c:	2202      	movs	r2, #2
 8002b7e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b80:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b84:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	fa93 f2a3 	rbit	r2, r3
 8002b8e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b92:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8002b96:	601a      	str	r2, [r3, #0]
 8002b98:	4b79      	ldr	r3, [pc, #484]	@ (8002d80 <HAL_RCC_OscConfig+0xc58>)
 8002b9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b9c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002ba0:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8002ba4:	2102      	movs	r1, #2
 8002ba6:	6011      	str	r1, [r2, #0]
 8002ba8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002bac:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8002bb0:	6812      	ldr	r2, [r2, #0]
 8002bb2:	fa92 f1a2 	rbit	r1, r2
 8002bb6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002bba:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8002bbe:	6011      	str	r1, [r2, #0]
  return result;
 8002bc0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002bc4:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8002bc8:	6812      	ldr	r2, [r2, #0]
 8002bca:	fab2 f282 	clz	r2, r2
 8002bce:	b2d2      	uxtb	r2, r2
 8002bd0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002bd4:	b2d2      	uxtb	r2, r2
 8002bd6:	f002 021f 	and.w	r2, r2, #31
 8002bda:	2101      	movs	r1, #1
 8002bdc:	fa01 f202 	lsl.w	r2, r1, r2
 8002be0:	4013      	ands	r3, r2
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d084      	beq.n	8002af0 <HAL_RCC_OscConfig+0x9c8>
 8002be6:	e07f      	b.n	8002ce8 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002be8:	f7fe fe66 	bl	80018b8 <HAL_GetTick>
 8002bec:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002bf0:	e00b      	b.n	8002c0a <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002bf2:	f7fe fe61 	bl	80018b8 <HAL_GetTick>
 8002bf6:	4602      	mov	r2, r0
 8002bf8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002bfc:	1ad3      	subs	r3, r2, r3
 8002bfe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c02:	4293      	cmp	r3, r2
 8002c04:	d901      	bls.n	8002c0a <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8002c06:	2303      	movs	r3, #3
 8002c08:	e2c4      	b.n	8003194 <HAL_RCC_OscConfig+0x106c>
 8002c0a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c0e:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8002c12:	2202      	movs	r2, #2
 8002c14:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c16:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c1a:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	fa93 f2a3 	rbit	r2, r3
 8002c24:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c28:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8002c2c:	601a      	str	r2, [r3, #0]
 8002c2e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c32:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8002c36:	2202      	movs	r2, #2
 8002c38:	601a      	str	r2, [r3, #0]
 8002c3a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c3e:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	fa93 f2a3 	rbit	r2, r3
 8002c48:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c4c:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8002c50:	601a      	str	r2, [r3, #0]
  return result;
 8002c52:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c56:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8002c5a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c5c:	fab3 f383 	clz	r3, r3
 8002c60:	b2db      	uxtb	r3, r3
 8002c62:	095b      	lsrs	r3, r3, #5
 8002c64:	b2db      	uxtb	r3, r3
 8002c66:	f043 0302 	orr.w	r3, r3, #2
 8002c6a:	b2db      	uxtb	r3, r3
 8002c6c:	2b02      	cmp	r3, #2
 8002c6e:	d102      	bne.n	8002c76 <HAL_RCC_OscConfig+0xb4e>
 8002c70:	4b43      	ldr	r3, [pc, #268]	@ (8002d80 <HAL_RCC_OscConfig+0xc58>)
 8002c72:	6a1b      	ldr	r3, [r3, #32]
 8002c74:	e013      	b.n	8002c9e <HAL_RCC_OscConfig+0xb76>
 8002c76:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c7a:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8002c7e:	2202      	movs	r2, #2
 8002c80:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c82:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c86:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	fa93 f2a3 	rbit	r2, r3
 8002c90:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c94:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8002c98:	601a      	str	r2, [r3, #0]
 8002c9a:	4b39      	ldr	r3, [pc, #228]	@ (8002d80 <HAL_RCC_OscConfig+0xc58>)
 8002c9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c9e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002ca2:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8002ca6:	2102      	movs	r1, #2
 8002ca8:	6011      	str	r1, [r2, #0]
 8002caa:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002cae:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8002cb2:	6812      	ldr	r2, [r2, #0]
 8002cb4:	fa92 f1a2 	rbit	r1, r2
 8002cb8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002cbc:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8002cc0:	6011      	str	r1, [r2, #0]
  return result;
 8002cc2:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002cc6:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8002cca:	6812      	ldr	r2, [r2, #0]
 8002ccc:	fab2 f282 	clz	r2, r2
 8002cd0:	b2d2      	uxtb	r2, r2
 8002cd2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002cd6:	b2d2      	uxtb	r2, r2
 8002cd8:	f002 021f 	and.w	r2, r2, #31
 8002cdc:	2101      	movs	r1, #1
 8002cde:	fa01 f202 	lsl.w	r2, r1, r2
 8002ce2:	4013      	ands	r3, r2
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d184      	bne.n	8002bf2 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002ce8:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 8002cec:	2b01      	cmp	r3, #1
 8002cee:	d105      	bne.n	8002cfc <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002cf0:	4b23      	ldr	r3, [pc, #140]	@ (8002d80 <HAL_RCC_OscConfig+0xc58>)
 8002cf2:	69db      	ldr	r3, [r3, #28]
 8002cf4:	4a22      	ldr	r2, [pc, #136]	@ (8002d80 <HAL_RCC_OscConfig+0xc58>)
 8002cf6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002cfa:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002cfc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d00:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	69db      	ldr	r3, [r3, #28]
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	f000 8242 	beq.w	8003192 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002d0e:	4b1c      	ldr	r3, [pc, #112]	@ (8002d80 <HAL_RCC_OscConfig+0xc58>)
 8002d10:	685b      	ldr	r3, [r3, #4]
 8002d12:	f003 030c 	and.w	r3, r3, #12
 8002d16:	2b08      	cmp	r3, #8
 8002d18:	f000 8213 	beq.w	8003142 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d1c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d20:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	69db      	ldr	r3, [r3, #28]
 8002d28:	2b02      	cmp	r3, #2
 8002d2a:	f040 8162 	bne.w	8002ff2 <HAL_RCC_OscConfig+0xeca>
 8002d2e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d32:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8002d36:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002d3a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d3c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d40:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	fa93 f2a3 	rbit	r2, r3
 8002d4a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d4e:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8002d52:	601a      	str	r2, [r3, #0]
  return result;
 8002d54:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d58:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8002d5c:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d5e:	fab3 f383 	clz	r3, r3
 8002d62:	b2db      	uxtb	r3, r3
 8002d64:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002d68:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002d6c:	009b      	lsls	r3, r3, #2
 8002d6e:	461a      	mov	r2, r3
 8002d70:	2300      	movs	r3, #0
 8002d72:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d74:	f7fe fda0 	bl	80018b8 <HAL_GetTick>
 8002d78:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d7c:	e00c      	b.n	8002d98 <HAL_RCC_OscConfig+0xc70>
 8002d7e:	bf00      	nop
 8002d80:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d84:	f7fe fd98 	bl	80018b8 <HAL_GetTick>
 8002d88:	4602      	mov	r2, r0
 8002d8a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002d8e:	1ad3      	subs	r3, r2, r3
 8002d90:	2b02      	cmp	r3, #2
 8002d92:	d901      	bls.n	8002d98 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8002d94:	2303      	movs	r3, #3
 8002d96:	e1fd      	b.n	8003194 <HAL_RCC_OscConfig+0x106c>
 8002d98:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d9c:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8002da0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002da4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002da6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002daa:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	fa93 f2a3 	rbit	r2, r3
 8002db4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002db8:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8002dbc:	601a      	str	r2, [r3, #0]
  return result;
 8002dbe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002dc2:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8002dc6:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002dc8:	fab3 f383 	clz	r3, r3
 8002dcc:	b2db      	uxtb	r3, r3
 8002dce:	095b      	lsrs	r3, r3, #5
 8002dd0:	b2db      	uxtb	r3, r3
 8002dd2:	f043 0301 	orr.w	r3, r3, #1
 8002dd6:	b2db      	uxtb	r3, r3
 8002dd8:	2b01      	cmp	r3, #1
 8002dda:	d102      	bne.n	8002de2 <HAL_RCC_OscConfig+0xcba>
 8002ddc:	4bb0      	ldr	r3, [pc, #704]	@ (80030a0 <HAL_RCC_OscConfig+0xf78>)
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	e027      	b.n	8002e32 <HAL_RCC_OscConfig+0xd0a>
 8002de2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002de6:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8002dea:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002dee:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002df0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002df4:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	fa93 f2a3 	rbit	r2, r3
 8002dfe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e02:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8002e06:	601a      	str	r2, [r3, #0]
 8002e08:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e0c:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8002e10:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002e14:	601a      	str	r2, [r3, #0]
 8002e16:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e1a:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	fa93 f2a3 	rbit	r2, r3
 8002e24:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e28:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8002e2c:	601a      	str	r2, [r3, #0]
 8002e2e:	4b9c      	ldr	r3, [pc, #624]	@ (80030a0 <HAL_RCC_OscConfig+0xf78>)
 8002e30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e32:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002e36:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8002e3a:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002e3e:	6011      	str	r1, [r2, #0]
 8002e40:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002e44:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8002e48:	6812      	ldr	r2, [r2, #0]
 8002e4a:	fa92 f1a2 	rbit	r1, r2
 8002e4e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002e52:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8002e56:	6011      	str	r1, [r2, #0]
  return result;
 8002e58:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002e5c:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8002e60:	6812      	ldr	r2, [r2, #0]
 8002e62:	fab2 f282 	clz	r2, r2
 8002e66:	b2d2      	uxtb	r2, r2
 8002e68:	f042 0220 	orr.w	r2, r2, #32
 8002e6c:	b2d2      	uxtb	r2, r2
 8002e6e:	f002 021f 	and.w	r2, r2, #31
 8002e72:	2101      	movs	r1, #1
 8002e74:	fa01 f202 	lsl.w	r2, r1, r2
 8002e78:	4013      	ands	r3, r2
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d182      	bne.n	8002d84 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002e7e:	4b88      	ldr	r3, [pc, #544]	@ (80030a0 <HAL_RCC_OscConfig+0xf78>)
 8002e80:	685b      	ldr	r3, [r3, #4]
 8002e82:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002e86:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e8a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8002e92:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e96:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	6a1b      	ldr	r3, [r3, #32]
 8002e9e:	430b      	orrs	r3, r1
 8002ea0:	497f      	ldr	r1, [pc, #508]	@ (80030a0 <HAL_RCC_OscConfig+0xf78>)
 8002ea2:	4313      	orrs	r3, r2
 8002ea4:	604b      	str	r3, [r1, #4]
 8002ea6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002eaa:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8002eae:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002eb2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eb4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002eb8:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	fa93 f2a3 	rbit	r2, r3
 8002ec2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ec6:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8002eca:	601a      	str	r2, [r3, #0]
  return result;
 8002ecc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ed0:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8002ed4:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ed6:	fab3 f383 	clz	r3, r3
 8002eda:	b2db      	uxtb	r3, r3
 8002edc:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002ee0:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002ee4:	009b      	lsls	r3, r3, #2
 8002ee6:	461a      	mov	r2, r3
 8002ee8:	2301      	movs	r3, #1
 8002eea:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002eec:	f7fe fce4 	bl	80018b8 <HAL_GetTick>
 8002ef0:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002ef4:	e009      	b.n	8002f0a <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ef6:	f7fe fcdf 	bl	80018b8 <HAL_GetTick>
 8002efa:	4602      	mov	r2, r0
 8002efc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002f00:	1ad3      	subs	r3, r2, r3
 8002f02:	2b02      	cmp	r3, #2
 8002f04:	d901      	bls.n	8002f0a <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8002f06:	2303      	movs	r3, #3
 8002f08:	e144      	b.n	8003194 <HAL_RCC_OscConfig+0x106c>
 8002f0a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f0e:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8002f12:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002f16:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f18:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f1c:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	fa93 f2a3 	rbit	r2, r3
 8002f26:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f2a:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8002f2e:	601a      	str	r2, [r3, #0]
  return result;
 8002f30:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f34:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8002f38:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002f3a:	fab3 f383 	clz	r3, r3
 8002f3e:	b2db      	uxtb	r3, r3
 8002f40:	095b      	lsrs	r3, r3, #5
 8002f42:	b2db      	uxtb	r3, r3
 8002f44:	f043 0301 	orr.w	r3, r3, #1
 8002f48:	b2db      	uxtb	r3, r3
 8002f4a:	2b01      	cmp	r3, #1
 8002f4c:	d102      	bne.n	8002f54 <HAL_RCC_OscConfig+0xe2c>
 8002f4e:	4b54      	ldr	r3, [pc, #336]	@ (80030a0 <HAL_RCC_OscConfig+0xf78>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	e027      	b.n	8002fa4 <HAL_RCC_OscConfig+0xe7c>
 8002f54:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f58:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8002f5c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002f60:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f62:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f66:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	fa93 f2a3 	rbit	r2, r3
 8002f70:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f74:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002f78:	601a      	str	r2, [r3, #0]
 8002f7a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f7e:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8002f82:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002f86:	601a      	str	r2, [r3, #0]
 8002f88:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f8c:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	fa93 f2a3 	rbit	r2, r3
 8002f96:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f9a:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8002f9e:	601a      	str	r2, [r3, #0]
 8002fa0:	4b3f      	ldr	r3, [pc, #252]	@ (80030a0 <HAL_RCC_OscConfig+0xf78>)
 8002fa2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fa4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002fa8:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8002fac:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002fb0:	6011      	str	r1, [r2, #0]
 8002fb2:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002fb6:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8002fba:	6812      	ldr	r2, [r2, #0]
 8002fbc:	fa92 f1a2 	rbit	r1, r2
 8002fc0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002fc4:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8002fc8:	6011      	str	r1, [r2, #0]
  return result;
 8002fca:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002fce:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8002fd2:	6812      	ldr	r2, [r2, #0]
 8002fd4:	fab2 f282 	clz	r2, r2
 8002fd8:	b2d2      	uxtb	r2, r2
 8002fda:	f042 0220 	orr.w	r2, r2, #32
 8002fde:	b2d2      	uxtb	r2, r2
 8002fe0:	f002 021f 	and.w	r2, r2, #31
 8002fe4:	2101      	movs	r1, #1
 8002fe6:	fa01 f202 	lsl.w	r2, r1, r2
 8002fea:	4013      	ands	r3, r2
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d082      	beq.n	8002ef6 <HAL_RCC_OscConfig+0xdce>
 8002ff0:	e0cf      	b.n	8003192 <HAL_RCC_OscConfig+0x106a>
 8002ff2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ff6:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8002ffa:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002ffe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003000:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003004:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	fa93 f2a3 	rbit	r2, r3
 800300e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003012:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8003016:	601a      	str	r2, [r3, #0]
  return result;
 8003018:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800301c:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8003020:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003022:	fab3 f383 	clz	r3, r3
 8003026:	b2db      	uxtb	r3, r3
 8003028:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800302c:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003030:	009b      	lsls	r3, r3, #2
 8003032:	461a      	mov	r2, r3
 8003034:	2300      	movs	r3, #0
 8003036:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003038:	f7fe fc3e 	bl	80018b8 <HAL_GetTick>
 800303c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003040:	e009      	b.n	8003056 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003042:	f7fe fc39 	bl	80018b8 <HAL_GetTick>
 8003046:	4602      	mov	r2, r0
 8003048:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800304c:	1ad3      	subs	r3, r2, r3
 800304e:	2b02      	cmp	r3, #2
 8003050:	d901      	bls.n	8003056 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8003052:	2303      	movs	r3, #3
 8003054:	e09e      	b.n	8003194 <HAL_RCC_OscConfig+0x106c>
 8003056:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800305a:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 800305e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003062:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003064:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003068:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	fa93 f2a3 	rbit	r2, r3
 8003072:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003076:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 800307a:	601a      	str	r2, [r3, #0]
  return result;
 800307c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003080:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8003084:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003086:	fab3 f383 	clz	r3, r3
 800308a:	b2db      	uxtb	r3, r3
 800308c:	095b      	lsrs	r3, r3, #5
 800308e:	b2db      	uxtb	r3, r3
 8003090:	f043 0301 	orr.w	r3, r3, #1
 8003094:	b2db      	uxtb	r3, r3
 8003096:	2b01      	cmp	r3, #1
 8003098:	d104      	bne.n	80030a4 <HAL_RCC_OscConfig+0xf7c>
 800309a:	4b01      	ldr	r3, [pc, #4]	@ (80030a0 <HAL_RCC_OscConfig+0xf78>)
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	e029      	b.n	80030f4 <HAL_RCC_OscConfig+0xfcc>
 80030a0:	40021000 	.word	0x40021000
 80030a4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030a8:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 80030ac:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80030b0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030b2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030b6:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	fa93 f2a3 	rbit	r2, r3
 80030c0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030c4:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 80030c8:	601a      	str	r2, [r3, #0]
 80030ca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030ce:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 80030d2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80030d6:	601a      	str	r2, [r3, #0]
 80030d8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030dc:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	fa93 f2a3 	rbit	r2, r3
 80030e6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030ea:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 80030ee:	601a      	str	r2, [r3, #0]
 80030f0:	4b2b      	ldr	r3, [pc, #172]	@ (80031a0 <HAL_RCC_OscConfig+0x1078>)
 80030f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030f4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80030f8:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 80030fc:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8003100:	6011      	str	r1, [r2, #0]
 8003102:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003106:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 800310a:	6812      	ldr	r2, [r2, #0]
 800310c:	fa92 f1a2 	rbit	r1, r2
 8003110:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003114:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8003118:	6011      	str	r1, [r2, #0]
  return result;
 800311a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800311e:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8003122:	6812      	ldr	r2, [r2, #0]
 8003124:	fab2 f282 	clz	r2, r2
 8003128:	b2d2      	uxtb	r2, r2
 800312a:	f042 0220 	orr.w	r2, r2, #32
 800312e:	b2d2      	uxtb	r2, r2
 8003130:	f002 021f 	and.w	r2, r2, #31
 8003134:	2101      	movs	r1, #1
 8003136:	fa01 f202 	lsl.w	r2, r1, r2
 800313a:	4013      	ands	r3, r2
 800313c:	2b00      	cmp	r3, #0
 800313e:	d180      	bne.n	8003042 <HAL_RCC_OscConfig+0xf1a>
 8003140:	e027      	b.n	8003192 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003142:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003146:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	69db      	ldr	r3, [r3, #28]
 800314e:	2b01      	cmp	r3, #1
 8003150:	d101      	bne.n	8003156 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8003152:	2301      	movs	r3, #1
 8003154:	e01e      	b.n	8003194 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003156:	4b12      	ldr	r3, [pc, #72]	@ (80031a0 <HAL_RCC_OscConfig+0x1078>)
 8003158:	685b      	ldr	r3, [r3, #4]
 800315a:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800315e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8003162:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003166:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800316a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	6a1b      	ldr	r3, [r3, #32]
 8003172:	429a      	cmp	r2, r3
 8003174:	d10b      	bne.n	800318e <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8003176:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 800317a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800317e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003182:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800318a:	429a      	cmp	r2, r3
 800318c:	d001      	beq.n	8003192 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 800318e:	2301      	movs	r3, #1
 8003190:	e000      	b.n	8003194 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8003192:	2300      	movs	r3, #0
}
 8003194:	4618      	mov	r0, r3
 8003196:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 800319a:	46bd      	mov	sp, r7
 800319c:	bd80      	pop	{r7, pc}
 800319e:	bf00      	nop
 80031a0:	40021000 	.word	0x40021000

080031a4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b09e      	sub	sp, #120	@ 0x78
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
 80031ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80031ae:	2300      	movs	r3, #0
 80031b0:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d101      	bne.n	80031bc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80031b8:	2301      	movs	r3, #1
 80031ba:	e162      	b.n	8003482 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80031bc:	4b90      	ldr	r3, [pc, #576]	@ (8003400 <HAL_RCC_ClockConfig+0x25c>)
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f003 0307 	and.w	r3, r3, #7
 80031c4:	683a      	ldr	r2, [r7, #0]
 80031c6:	429a      	cmp	r2, r3
 80031c8:	d910      	bls.n	80031ec <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031ca:	4b8d      	ldr	r3, [pc, #564]	@ (8003400 <HAL_RCC_ClockConfig+0x25c>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f023 0207 	bic.w	r2, r3, #7
 80031d2:	498b      	ldr	r1, [pc, #556]	@ (8003400 <HAL_RCC_ClockConfig+0x25c>)
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	4313      	orrs	r3, r2
 80031d8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80031da:	4b89      	ldr	r3, [pc, #548]	@ (8003400 <HAL_RCC_ClockConfig+0x25c>)
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f003 0307 	and.w	r3, r3, #7
 80031e2:	683a      	ldr	r2, [r7, #0]
 80031e4:	429a      	cmp	r2, r3
 80031e6:	d001      	beq.n	80031ec <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80031e8:	2301      	movs	r3, #1
 80031ea:	e14a      	b.n	8003482 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f003 0302 	and.w	r3, r3, #2
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d008      	beq.n	800320a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80031f8:	4b82      	ldr	r3, [pc, #520]	@ (8003404 <HAL_RCC_ClockConfig+0x260>)
 80031fa:	685b      	ldr	r3, [r3, #4]
 80031fc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	689b      	ldr	r3, [r3, #8]
 8003204:	497f      	ldr	r1, [pc, #508]	@ (8003404 <HAL_RCC_ClockConfig+0x260>)
 8003206:	4313      	orrs	r3, r2
 8003208:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f003 0301 	and.w	r3, r3, #1
 8003212:	2b00      	cmp	r3, #0
 8003214:	f000 80dc 	beq.w	80033d0 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	685b      	ldr	r3, [r3, #4]
 800321c:	2b01      	cmp	r3, #1
 800321e:	d13c      	bne.n	800329a <HAL_RCC_ClockConfig+0xf6>
 8003220:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003224:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003226:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003228:	fa93 f3a3 	rbit	r3, r3
 800322c:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 800322e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003230:	fab3 f383 	clz	r3, r3
 8003234:	b2db      	uxtb	r3, r3
 8003236:	095b      	lsrs	r3, r3, #5
 8003238:	b2db      	uxtb	r3, r3
 800323a:	f043 0301 	orr.w	r3, r3, #1
 800323e:	b2db      	uxtb	r3, r3
 8003240:	2b01      	cmp	r3, #1
 8003242:	d102      	bne.n	800324a <HAL_RCC_ClockConfig+0xa6>
 8003244:	4b6f      	ldr	r3, [pc, #444]	@ (8003404 <HAL_RCC_ClockConfig+0x260>)
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	e00f      	b.n	800326a <HAL_RCC_ClockConfig+0xc6>
 800324a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800324e:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003250:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003252:	fa93 f3a3 	rbit	r3, r3
 8003256:	667b      	str	r3, [r7, #100]	@ 0x64
 8003258:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800325c:	663b      	str	r3, [r7, #96]	@ 0x60
 800325e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003260:	fa93 f3a3 	rbit	r3, r3
 8003264:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003266:	4b67      	ldr	r3, [pc, #412]	@ (8003404 <HAL_RCC_ClockConfig+0x260>)
 8003268:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800326a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800326e:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003270:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003272:	fa92 f2a2 	rbit	r2, r2
 8003276:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8003278:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800327a:	fab2 f282 	clz	r2, r2
 800327e:	b2d2      	uxtb	r2, r2
 8003280:	f042 0220 	orr.w	r2, r2, #32
 8003284:	b2d2      	uxtb	r2, r2
 8003286:	f002 021f 	and.w	r2, r2, #31
 800328a:	2101      	movs	r1, #1
 800328c:	fa01 f202 	lsl.w	r2, r1, r2
 8003290:	4013      	ands	r3, r2
 8003292:	2b00      	cmp	r3, #0
 8003294:	d17b      	bne.n	800338e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003296:	2301      	movs	r3, #1
 8003298:	e0f3      	b.n	8003482 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	685b      	ldr	r3, [r3, #4]
 800329e:	2b02      	cmp	r3, #2
 80032a0:	d13c      	bne.n	800331c <HAL_RCC_ClockConfig+0x178>
 80032a2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80032a6:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032a8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80032aa:	fa93 f3a3 	rbit	r3, r3
 80032ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 80032b0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032b2:	fab3 f383 	clz	r3, r3
 80032b6:	b2db      	uxtb	r3, r3
 80032b8:	095b      	lsrs	r3, r3, #5
 80032ba:	b2db      	uxtb	r3, r3
 80032bc:	f043 0301 	orr.w	r3, r3, #1
 80032c0:	b2db      	uxtb	r3, r3
 80032c2:	2b01      	cmp	r3, #1
 80032c4:	d102      	bne.n	80032cc <HAL_RCC_ClockConfig+0x128>
 80032c6:	4b4f      	ldr	r3, [pc, #316]	@ (8003404 <HAL_RCC_ClockConfig+0x260>)
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	e00f      	b.n	80032ec <HAL_RCC_ClockConfig+0x148>
 80032cc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80032d0:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032d2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80032d4:	fa93 f3a3 	rbit	r3, r3
 80032d8:	647b      	str	r3, [r7, #68]	@ 0x44
 80032da:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80032de:	643b      	str	r3, [r7, #64]	@ 0x40
 80032e0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80032e2:	fa93 f3a3 	rbit	r3, r3
 80032e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80032e8:	4b46      	ldr	r3, [pc, #280]	@ (8003404 <HAL_RCC_ClockConfig+0x260>)
 80032ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032ec:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80032f0:	63ba      	str	r2, [r7, #56]	@ 0x38
 80032f2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80032f4:	fa92 f2a2 	rbit	r2, r2
 80032f8:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 80032fa:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80032fc:	fab2 f282 	clz	r2, r2
 8003300:	b2d2      	uxtb	r2, r2
 8003302:	f042 0220 	orr.w	r2, r2, #32
 8003306:	b2d2      	uxtb	r2, r2
 8003308:	f002 021f 	and.w	r2, r2, #31
 800330c:	2101      	movs	r1, #1
 800330e:	fa01 f202 	lsl.w	r2, r1, r2
 8003312:	4013      	ands	r3, r2
 8003314:	2b00      	cmp	r3, #0
 8003316:	d13a      	bne.n	800338e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003318:	2301      	movs	r3, #1
 800331a:	e0b2      	b.n	8003482 <HAL_RCC_ClockConfig+0x2de>
 800331c:	2302      	movs	r3, #2
 800331e:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003320:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003322:	fa93 f3a3 	rbit	r3, r3
 8003326:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8003328:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800332a:	fab3 f383 	clz	r3, r3
 800332e:	b2db      	uxtb	r3, r3
 8003330:	095b      	lsrs	r3, r3, #5
 8003332:	b2db      	uxtb	r3, r3
 8003334:	f043 0301 	orr.w	r3, r3, #1
 8003338:	b2db      	uxtb	r3, r3
 800333a:	2b01      	cmp	r3, #1
 800333c:	d102      	bne.n	8003344 <HAL_RCC_ClockConfig+0x1a0>
 800333e:	4b31      	ldr	r3, [pc, #196]	@ (8003404 <HAL_RCC_ClockConfig+0x260>)
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	e00d      	b.n	8003360 <HAL_RCC_ClockConfig+0x1bc>
 8003344:	2302      	movs	r3, #2
 8003346:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003348:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800334a:	fa93 f3a3 	rbit	r3, r3
 800334e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003350:	2302      	movs	r3, #2
 8003352:	623b      	str	r3, [r7, #32]
 8003354:	6a3b      	ldr	r3, [r7, #32]
 8003356:	fa93 f3a3 	rbit	r3, r3
 800335a:	61fb      	str	r3, [r7, #28]
 800335c:	4b29      	ldr	r3, [pc, #164]	@ (8003404 <HAL_RCC_ClockConfig+0x260>)
 800335e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003360:	2202      	movs	r2, #2
 8003362:	61ba      	str	r2, [r7, #24]
 8003364:	69ba      	ldr	r2, [r7, #24]
 8003366:	fa92 f2a2 	rbit	r2, r2
 800336a:	617a      	str	r2, [r7, #20]
  return result;
 800336c:	697a      	ldr	r2, [r7, #20]
 800336e:	fab2 f282 	clz	r2, r2
 8003372:	b2d2      	uxtb	r2, r2
 8003374:	f042 0220 	orr.w	r2, r2, #32
 8003378:	b2d2      	uxtb	r2, r2
 800337a:	f002 021f 	and.w	r2, r2, #31
 800337e:	2101      	movs	r1, #1
 8003380:	fa01 f202 	lsl.w	r2, r1, r2
 8003384:	4013      	ands	r3, r2
 8003386:	2b00      	cmp	r3, #0
 8003388:	d101      	bne.n	800338e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800338a:	2301      	movs	r3, #1
 800338c:	e079      	b.n	8003482 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800338e:	4b1d      	ldr	r3, [pc, #116]	@ (8003404 <HAL_RCC_ClockConfig+0x260>)
 8003390:	685b      	ldr	r3, [r3, #4]
 8003392:	f023 0203 	bic.w	r2, r3, #3
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	685b      	ldr	r3, [r3, #4]
 800339a:	491a      	ldr	r1, [pc, #104]	@ (8003404 <HAL_RCC_ClockConfig+0x260>)
 800339c:	4313      	orrs	r3, r2
 800339e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80033a0:	f7fe fa8a 	bl	80018b8 <HAL_GetTick>
 80033a4:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033a6:	e00a      	b.n	80033be <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80033a8:	f7fe fa86 	bl	80018b8 <HAL_GetTick>
 80033ac:	4602      	mov	r2, r0
 80033ae:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80033b0:	1ad3      	subs	r3, r2, r3
 80033b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80033b6:	4293      	cmp	r3, r2
 80033b8:	d901      	bls.n	80033be <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80033ba:	2303      	movs	r3, #3
 80033bc:	e061      	b.n	8003482 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033be:	4b11      	ldr	r3, [pc, #68]	@ (8003404 <HAL_RCC_ClockConfig+0x260>)
 80033c0:	685b      	ldr	r3, [r3, #4]
 80033c2:	f003 020c 	and.w	r2, r3, #12
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	685b      	ldr	r3, [r3, #4]
 80033ca:	009b      	lsls	r3, r3, #2
 80033cc:	429a      	cmp	r2, r3
 80033ce:	d1eb      	bne.n	80033a8 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80033d0:	4b0b      	ldr	r3, [pc, #44]	@ (8003400 <HAL_RCC_ClockConfig+0x25c>)
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f003 0307 	and.w	r3, r3, #7
 80033d8:	683a      	ldr	r2, [r7, #0]
 80033da:	429a      	cmp	r2, r3
 80033dc:	d214      	bcs.n	8003408 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033de:	4b08      	ldr	r3, [pc, #32]	@ (8003400 <HAL_RCC_ClockConfig+0x25c>)
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f023 0207 	bic.w	r2, r3, #7
 80033e6:	4906      	ldr	r1, [pc, #24]	@ (8003400 <HAL_RCC_ClockConfig+0x25c>)
 80033e8:	683b      	ldr	r3, [r7, #0]
 80033ea:	4313      	orrs	r3, r2
 80033ec:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80033ee:	4b04      	ldr	r3, [pc, #16]	@ (8003400 <HAL_RCC_ClockConfig+0x25c>)
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f003 0307 	and.w	r3, r3, #7
 80033f6:	683a      	ldr	r2, [r7, #0]
 80033f8:	429a      	cmp	r2, r3
 80033fa:	d005      	beq.n	8003408 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80033fc:	2301      	movs	r3, #1
 80033fe:	e040      	b.n	8003482 <HAL_RCC_ClockConfig+0x2de>
 8003400:	40022000 	.word	0x40022000
 8003404:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f003 0304 	and.w	r3, r3, #4
 8003410:	2b00      	cmp	r3, #0
 8003412:	d008      	beq.n	8003426 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003414:	4b1d      	ldr	r3, [pc, #116]	@ (800348c <HAL_RCC_ClockConfig+0x2e8>)
 8003416:	685b      	ldr	r3, [r3, #4]
 8003418:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	68db      	ldr	r3, [r3, #12]
 8003420:	491a      	ldr	r1, [pc, #104]	@ (800348c <HAL_RCC_ClockConfig+0x2e8>)
 8003422:	4313      	orrs	r3, r2
 8003424:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f003 0308 	and.w	r3, r3, #8
 800342e:	2b00      	cmp	r3, #0
 8003430:	d009      	beq.n	8003446 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003432:	4b16      	ldr	r3, [pc, #88]	@ (800348c <HAL_RCC_ClockConfig+0x2e8>)
 8003434:	685b      	ldr	r3, [r3, #4]
 8003436:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	691b      	ldr	r3, [r3, #16]
 800343e:	00db      	lsls	r3, r3, #3
 8003440:	4912      	ldr	r1, [pc, #72]	@ (800348c <HAL_RCC_ClockConfig+0x2e8>)
 8003442:	4313      	orrs	r3, r2
 8003444:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003446:	f000 f829 	bl	800349c <HAL_RCC_GetSysClockFreq>
 800344a:	4601      	mov	r1, r0
 800344c:	4b0f      	ldr	r3, [pc, #60]	@ (800348c <HAL_RCC_ClockConfig+0x2e8>)
 800344e:	685b      	ldr	r3, [r3, #4]
 8003450:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003454:	22f0      	movs	r2, #240	@ 0xf0
 8003456:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003458:	693a      	ldr	r2, [r7, #16]
 800345a:	fa92 f2a2 	rbit	r2, r2
 800345e:	60fa      	str	r2, [r7, #12]
  return result;
 8003460:	68fa      	ldr	r2, [r7, #12]
 8003462:	fab2 f282 	clz	r2, r2
 8003466:	b2d2      	uxtb	r2, r2
 8003468:	40d3      	lsrs	r3, r2
 800346a:	4a09      	ldr	r2, [pc, #36]	@ (8003490 <HAL_RCC_ClockConfig+0x2ec>)
 800346c:	5cd3      	ldrb	r3, [r2, r3]
 800346e:	fa21 f303 	lsr.w	r3, r1, r3
 8003472:	4a08      	ldr	r2, [pc, #32]	@ (8003494 <HAL_RCC_ClockConfig+0x2f0>)
 8003474:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003476:	4b08      	ldr	r3, [pc, #32]	@ (8003498 <HAL_RCC_ClockConfig+0x2f4>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	4618      	mov	r0, r3
 800347c:	f7fe f9d8 	bl	8001830 <HAL_InitTick>
  
  return HAL_OK;
 8003480:	2300      	movs	r3, #0
}
 8003482:	4618      	mov	r0, r3
 8003484:	3778      	adds	r7, #120	@ 0x78
 8003486:	46bd      	mov	sp, r7
 8003488:	bd80      	pop	{r7, pc}
 800348a:	bf00      	nop
 800348c:	40021000 	.word	0x40021000
 8003490:	080062f8 	.word	0x080062f8
 8003494:	20000000 	.word	0x20000000
 8003498:	20000004 	.word	0x20000004

0800349c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800349c:	b480      	push	{r7}
 800349e:	b087      	sub	sp, #28
 80034a0:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80034a2:	2300      	movs	r3, #0
 80034a4:	60fb      	str	r3, [r7, #12]
 80034a6:	2300      	movs	r3, #0
 80034a8:	60bb      	str	r3, [r7, #8]
 80034aa:	2300      	movs	r3, #0
 80034ac:	617b      	str	r3, [r7, #20]
 80034ae:	2300      	movs	r3, #0
 80034b0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80034b2:	2300      	movs	r3, #0
 80034b4:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 80034b6:	4b1e      	ldr	r3, [pc, #120]	@ (8003530 <HAL_RCC_GetSysClockFreq+0x94>)
 80034b8:	685b      	ldr	r3, [r3, #4]
 80034ba:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	f003 030c 	and.w	r3, r3, #12
 80034c2:	2b04      	cmp	r3, #4
 80034c4:	d002      	beq.n	80034cc <HAL_RCC_GetSysClockFreq+0x30>
 80034c6:	2b08      	cmp	r3, #8
 80034c8:	d003      	beq.n	80034d2 <HAL_RCC_GetSysClockFreq+0x36>
 80034ca:	e026      	b.n	800351a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80034cc:	4b19      	ldr	r3, [pc, #100]	@ (8003534 <HAL_RCC_GetSysClockFreq+0x98>)
 80034ce:	613b      	str	r3, [r7, #16]
      break;
 80034d0:	e026      	b.n	8003520 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	0c9b      	lsrs	r3, r3, #18
 80034d6:	f003 030f 	and.w	r3, r3, #15
 80034da:	4a17      	ldr	r2, [pc, #92]	@ (8003538 <HAL_RCC_GetSysClockFreq+0x9c>)
 80034dc:	5cd3      	ldrb	r3, [r2, r3]
 80034de:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 80034e0:	4b13      	ldr	r3, [pc, #76]	@ (8003530 <HAL_RCC_GetSysClockFreq+0x94>)
 80034e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034e4:	f003 030f 	and.w	r3, r3, #15
 80034e8:	4a14      	ldr	r2, [pc, #80]	@ (800353c <HAL_RCC_GetSysClockFreq+0xa0>)
 80034ea:	5cd3      	ldrb	r3, [r2, r3]
 80034ec:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d008      	beq.n	800350a <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80034f8:	4a0e      	ldr	r2, [pc, #56]	@ (8003534 <HAL_RCC_GetSysClockFreq+0x98>)
 80034fa:	68bb      	ldr	r3, [r7, #8]
 80034fc:	fbb2 f2f3 	udiv	r2, r2, r3
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	fb02 f303 	mul.w	r3, r2, r3
 8003506:	617b      	str	r3, [r7, #20]
 8003508:	e004      	b.n	8003514 <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	4a0c      	ldr	r2, [pc, #48]	@ (8003540 <HAL_RCC_GetSysClockFreq+0xa4>)
 800350e:	fb02 f303 	mul.w	r3, r2, r3
 8003512:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003514:	697b      	ldr	r3, [r7, #20]
 8003516:	613b      	str	r3, [r7, #16]
      break;
 8003518:	e002      	b.n	8003520 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800351a:	4b06      	ldr	r3, [pc, #24]	@ (8003534 <HAL_RCC_GetSysClockFreq+0x98>)
 800351c:	613b      	str	r3, [r7, #16]
      break;
 800351e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003520:	693b      	ldr	r3, [r7, #16]
}
 8003522:	4618      	mov	r0, r3
 8003524:	371c      	adds	r7, #28
 8003526:	46bd      	mov	sp, r7
 8003528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352c:	4770      	bx	lr
 800352e:	bf00      	nop
 8003530:	40021000 	.word	0x40021000
 8003534:	007a1200 	.word	0x007a1200
 8003538:	08006310 	.word	0x08006310
 800353c:	08006320 	.word	0x08006320
 8003540:	003d0900 	.word	0x003d0900

08003544 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003544:	b480      	push	{r7}
 8003546:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003548:	4b03      	ldr	r3, [pc, #12]	@ (8003558 <HAL_RCC_GetHCLKFreq+0x14>)
 800354a:	681b      	ldr	r3, [r3, #0]
}
 800354c:	4618      	mov	r0, r3
 800354e:	46bd      	mov	sp, r7
 8003550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003554:	4770      	bx	lr
 8003556:	bf00      	nop
 8003558:	20000000 	.word	0x20000000

0800355c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800355c:	b580      	push	{r7, lr}
 800355e:	b082      	sub	sp, #8
 8003560:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8003562:	f7ff ffef 	bl	8003544 <HAL_RCC_GetHCLKFreq>
 8003566:	4601      	mov	r1, r0
 8003568:	4b0b      	ldr	r3, [pc, #44]	@ (8003598 <HAL_RCC_GetPCLK1Freq+0x3c>)
 800356a:	685b      	ldr	r3, [r3, #4]
 800356c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003570:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8003574:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003576:	687a      	ldr	r2, [r7, #4]
 8003578:	fa92 f2a2 	rbit	r2, r2
 800357c:	603a      	str	r2, [r7, #0]
  return result;
 800357e:	683a      	ldr	r2, [r7, #0]
 8003580:	fab2 f282 	clz	r2, r2
 8003584:	b2d2      	uxtb	r2, r2
 8003586:	40d3      	lsrs	r3, r2
 8003588:	4a04      	ldr	r2, [pc, #16]	@ (800359c <HAL_RCC_GetPCLK1Freq+0x40>)
 800358a:	5cd3      	ldrb	r3, [r2, r3]
 800358c:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8003590:	4618      	mov	r0, r3
 8003592:	3708      	adds	r7, #8
 8003594:	46bd      	mov	sp, r7
 8003596:	bd80      	pop	{r7, pc}
 8003598:	40021000 	.word	0x40021000
 800359c:	08006308 	.word	0x08006308

080035a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	b082      	sub	sp, #8
 80035a4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80035a6:	f7ff ffcd 	bl	8003544 <HAL_RCC_GetHCLKFreq>
 80035aa:	4601      	mov	r1, r0
 80035ac:	4b0b      	ldr	r3, [pc, #44]	@ (80035dc <HAL_RCC_GetPCLK2Freq+0x3c>)
 80035ae:	685b      	ldr	r3, [r3, #4]
 80035b0:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 80035b4:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 80035b8:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035ba:	687a      	ldr	r2, [r7, #4]
 80035bc:	fa92 f2a2 	rbit	r2, r2
 80035c0:	603a      	str	r2, [r7, #0]
  return result;
 80035c2:	683a      	ldr	r2, [r7, #0]
 80035c4:	fab2 f282 	clz	r2, r2
 80035c8:	b2d2      	uxtb	r2, r2
 80035ca:	40d3      	lsrs	r3, r2
 80035cc:	4a04      	ldr	r2, [pc, #16]	@ (80035e0 <HAL_RCC_GetPCLK2Freq+0x40>)
 80035ce:	5cd3      	ldrb	r3, [r2, r3]
 80035d0:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80035d4:	4618      	mov	r0, r3
 80035d6:	3708      	adds	r7, #8
 80035d8:	46bd      	mov	sp, r7
 80035da:	bd80      	pop	{r7, pc}
 80035dc:	40021000 	.word	0x40021000
 80035e0:	08006308 	.word	0x08006308

080035e4 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	b092      	sub	sp, #72	@ 0x48
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80035ec:	2300      	movs	r3, #0
 80035ee:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 80035f0:	2300      	movs	r3, #0
 80035f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80035f4:	2300      	movs	r3, #0
 80035f6:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003602:	2b00      	cmp	r3, #0
 8003604:	f000 80cd 	beq.w	80037a2 <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003608:	4b86      	ldr	r3, [pc, #536]	@ (8003824 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800360a:	69db      	ldr	r3, [r3, #28]
 800360c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003610:	2b00      	cmp	r3, #0
 8003612:	d10e      	bne.n	8003632 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003614:	4b83      	ldr	r3, [pc, #524]	@ (8003824 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003616:	69db      	ldr	r3, [r3, #28]
 8003618:	4a82      	ldr	r2, [pc, #520]	@ (8003824 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800361a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800361e:	61d3      	str	r3, [r2, #28]
 8003620:	4b80      	ldr	r3, [pc, #512]	@ (8003824 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003622:	69db      	ldr	r3, [r3, #28]
 8003624:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003628:	60bb      	str	r3, [r7, #8]
 800362a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800362c:	2301      	movs	r3, #1
 800362e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003632:	4b7d      	ldr	r3, [pc, #500]	@ (8003828 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800363a:	2b00      	cmp	r3, #0
 800363c:	d118      	bne.n	8003670 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800363e:	4b7a      	ldr	r3, [pc, #488]	@ (8003828 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	4a79      	ldr	r2, [pc, #484]	@ (8003828 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003644:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003648:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800364a:	f7fe f935 	bl	80018b8 <HAL_GetTick>
 800364e:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003650:	e008      	b.n	8003664 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003652:	f7fe f931 	bl	80018b8 <HAL_GetTick>
 8003656:	4602      	mov	r2, r0
 8003658:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800365a:	1ad3      	subs	r3, r2, r3
 800365c:	2b64      	cmp	r3, #100	@ 0x64
 800365e:	d901      	bls.n	8003664 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003660:	2303      	movs	r3, #3
 8003662:	e0db      	b.n	800381c <HAL_RCCEx_PeriphCLKConfig+0x238>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003664:	4b70      	ldr	r3, [pc, #448]	@ (8003828 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800366c:	2b00      	cmp	r3, #0
 800366e:	d0f0      	beq.n	8003652 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003670:	4b6c      	ldr	r3, [pc, #432]	@ (8003824 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003672:	6a1b      	ldr	r3, [r3, #32]
 8003674:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003678:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800367a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800367c:	2b00      	cmp	r3, #0
 800367e:	d07d      	beq.n	800377c <HAL_RCCEx_PeriphCLKConfig+0x198>
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	685b      	ldr	r3, [r3, #4]
 8003684:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003688:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800368a:	429a      	cmp	r2, r3
 800368c:	d076      	beq.n	800377c <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800368e:	4b65      	ldr	r3, [pc, #404]	@ (8003824 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003690:	6a1b      	ldr	r3, [r3, #32]
 8003692:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003696:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003698:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800369c:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800369e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036a0:	fa93 f3a3 	rbit	r3, r3
 80036a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 80036a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80036a8:	fab3 f383 	clz	r3, r3
 80036ac:	b2db      	uxtb	r3, r3
 80036ae:	461a      	mov	r2, r3
 80036b0:	4b5e      	ldr	r3, [pc, #376]	@ (800382c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80036b2:	4413      	add	r3, r2
 80036b4:	009b      	lsls	r3, r3, #2
 80036b6:	461a      	mov	r2, r3
 80036b8:	2301      	movs	r3, #1
 80036ba:	6013      	str	r3, [r2, #0]
 80036bc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80036c0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80036c4:	fa93 f3a3 	rbit	r3, r3
 80036c8:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 80036ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80036cc:	fab3 f383 	clz	r3, r3
 80036d0:	b2db      	uxtb	r3, r3
 80036d2:	461a      	mov	r2, r3
 80036d4:	4b55      	ldr	r3, [pc, #340]	@ (800382c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80036d6:	4413      	add	r3, r2
 80036d8:	009b      	lsls	r3, r3, #2
 80036da:	461a      	mov	r2, r3
 80036dc:	2300      	movs	r3, #0
 80036de:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80036e0:	4a50      	ldr	r2, [pc, #320]	@ (8003824 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80036e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80036e4:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80036e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80036e8:	f003 0301 	and.w	r3, r3, #1
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d045      	beq.n	800377c <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036f0:	f7fe f8e2 	bl	80018b8 <HAL_GetTick>
 80036f4:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036f6:	e00a      	b.n	800370e <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036f8:	f7fe f8de 	bl	80018b8 <HAL_GetTick>
 80036fc:	4602      	mov	r2, r0
 80036fe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003700:	1ad3      	subs	r3, r2, r3
 8003702:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003706:	4293      	cmp	r3, r2
 8003708:	d901      	bls.n	800370e <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 800370a:	2303      	movs	r3, #3
 800370c:	e086      	b.n	800381c <HAL_RCCEx_PeriphCLKConfig+0x238>
 800370e:	2302      	movs	r3, #2
 8003710:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003712:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003714:	fa93 f3a3 	rbit	r3, r3
 8003718:	627b      	str	r3, [r7, #36]	@ 0x24
 800371a:	2302      	movs	r3, #2
 800371c:	623b      	str	r3, [r7, #32]
 800371e:	6a3b      	ldr	r3, [r7, #32]
 8003720:	fa93 f3a3 	rbit	r3, r3
 8003724:	61fb      	str	r3, [r7, #28]
  return result;
 8003726:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003728:	fab3 f383 	clz	r3, r3
 800372c:	b2db      	uxtb	r3, r3
 800372e:	095b      	lsrs	r3, r3, #5
 8003730:	b2db      	uxtb	r3, r3
 8003732:	f043 0302 	orr.w	r3, r3, #2
 8003736:	b2db      	uxtb	r3, r3
 8003738:	2b02      	cmp	r3, #2
 800373a:	d102      	bne.n	8003742 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 800373c:	4b39      	ldr	r3, [pc, #228]	@ (8003824 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800373e:	6a1b      	ldr	r3, [r3, #32]
 8003740:	e007      	b.n	8003752 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8003742:	2302      	movs	r3, #2
 8003744:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003746:	69bb      	ldr	r3, [r7, #24]
 8003748:	fa93 f3a3 	rbit	r3, r3
 800374c:	617b      	str	r3, [r7, #20]
 800374e:	4b35      	ldr	r3, [pc, #212]	@ (8003824 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003750:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003752:	2202      	movs	r2, #2
 8003754:	613a      	str	r2, [r7, #16]
 8003756:	693a      	ldr	r2, [r7, #16]
 8003758:	fa92 f2a2 	rbit	r2, r2
 800375c:	60fa      	str	r2, [r7, #12]
  return result;
 800375e:	68fa      	ldr	r2, [r7, #12]
 8003760:	fab2 f282 	clz	r2, r2
 8003764:	b2d2      	uxtb	r2, r2
 8003766:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800376a:	b2d2      	uxtb	r2, r2
 800376c:	f002 021f 	and.w	r2, r2, #31
 8003770:	2101      	movs	r1, #1
 8003772:	fa01 f202 	lsl.w	r2, r1, r2
 8003776:	4013      	ands	r3, r2
 8003778:	2b00      	cmp	r3, #0
 800377a:	d0bd      	beq.n	80036f8 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800377c:	4b29      	ldr	r3, [pc, #164]	@ (8003824 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800377e:	6a1b      	ldr	r3, [r3, #32]
 8003780:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	685b      	ldr	r3, [r3, #4]
 8003788:	4926      	ldr	r1, [pc, #152]	@ (8003824 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800378a:	4313      	orrs	r3, r2
 800378c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800378e:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8003792:	2b01      	cmp	r3, #1
 8003794:	d105      	bne.n	80037a2 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003796:	4b23      	ldr	r3, [pc, #140]	@ (8003824 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003798:	69db      	ldr	r3, [r3, #28]
 800379a:	4a22      	ldr	r2, [pc, #136]	@ (8003824 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800379c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80037a0:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f003 0301 	and.w	r3, r3, #1
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d008      	beq.n	80037c0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80037ae:	4b1d      	ldr	r3, [pc, #116]	@ (8003824 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80037b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037b2:	f023 0203 	bic.w	r2, r3, #3
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	689b      	ldr	r3, [r3, #8]
 80037ba:	491a      	ldr	r1, [pc, #104]	@ (8003824 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80037bc:	4313      	orrs	r3, r2
 80037be:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f003 0320 	and.w	r3, r3, #32
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d008      	beq.n	80037de <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80037cc:	4b15      	ldr	r3, [pc, #84]	@ (8003824 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80037ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037d0:	f023 0210 	bic.w	r2, r3, #16
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	68db      	ldr	r3, [r3, #12]
 80037d8:	4912      	ldr	r1, [pc, #72]	@ (8003824 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80037da:	4313      	orrs	r3, r2
 80037dc:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d008      	beq.n	80037fc <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80037ea:	4b0e      	ldr	r3, [pc, #56]	@ (8003824 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80037ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037ee:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	691b      	ldr	r3, [r3, #16]
 80037f6:	490b      	ldr	r1, [pc, #44]	@ (8003824 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80037f8:	4313      	orrs	r3, r2
 80037fa:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003804:	2b00      	cmp	r3, #0
 8003806:	d008      	beq.n	800381a <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003808:	4b06      	ldr	r3, [pc, #24]	@ (8003824 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800380a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800380c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	695b      	ldr	r3, [r3, #20]
 8003814:	4903      	ldr	r1, [pc, #12]	@ (8003824 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003816:	4313      	orrs	r3, r2
 8003818:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800381a:	2300      	movs	r3, #0
}
 800381c:	4618      	mov	r0, r3
 800381e:	3748      	adds	r7, #72	@ 0x48
 8003820:	46bd      	mov	sp, r7
 8003822:	bd80      	pop	{r7, pc}
 8003824:	40021000 	.word	0x40021000
 8003828:	40007000 	.word	0x40007000
 800382c:	10908100 	.word	0x10908100

08003830 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003830:	b580      	push	{r7, lr}
 8003832:	b082      	sub	sp, #8
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2b00      	cmp	r3, #0
 800383c:	d101      	bne.n	8003842 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800383e:	2301      	movs	r3, #1
 8003840:	e049      	b.n	80038d6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003848:	b2db      	uxtb	r3, r3
 800384a:	2b00      	cmp	r3, #0
 800384c:	d106      	bne.n	800385c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	2200      	movs	r2, #0
 8003852:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003856:	6878      	ldr	r0, [r7, #4]
 8003858:	f7fd fdf8 	bl	800144c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2202      	movs	r2, #2
 8003860:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681a      	ldr	r2, [r3, #0]
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	3304      	adds	r3, #4
 800386c:	4619      	mov	r1, r3
 800386e:	4610      	mov	r0, r2
 8003870:	f000 fc90 	bl	8004194 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2201      	movs	r2, #1
 8003878:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2201      	movs	r2, #1
 8003880:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2201      	movs	r2, #1
 8003888:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2201      	movs	r2, #1
 8003890:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2201      	movs	r2, #1
 8003898:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2201      	movs	r2, #1
 80038a0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2201      	movs	r2, #1
 80038a8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2201      	movs	r2, #1
 80038b0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2201      	movs	r2, #1
 80038b8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2201      	movs	r2, #1
 80038c0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2201      	movs	r2, #1
 80038c8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2201      	movs	r2, #1
 80038d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80038d4:	2300      	movs	r3, #0
}
 80038d6:	4618      	mov	r0, r3
 80038d8:	3708      	adds	r7, #8
 80038da:	46bd      	mov	sp, r7
 80038dc:	bd80      	pop	{r7, pc}
	...

080038e0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80038e0:	b480      	push	{r7}
 80038e2:	b085      	sub	sp, #20
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80038ee:	b2db      	uxtb	r3, r3
 80038f0:	2b01      	cmp	r3, #1
 80038f2:	d001      	beq.n	80038f8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80038f4:	2301      	movs	r3, #1
 80038f6:	e038      	b.n	800396a <HAL_TIM_Base_Start+0x8a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2202      	movs	r2, #2
 80038fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	4a1c      	ldr	r2, [pc, #112]	@ (8003978 <HAL_TIM_Base_Start+0x98>)
 8003906:	4293      	cmp	r3, r2
 8003908:	d00e      	beq.n	8003928 <HAL_TIM_Base_Start+0x48>
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003912:	d009      	beq.n	8003928 <HAL_TIM_Base_Start+0x48>
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	4a18      	ldr	r2, [pc, #96]	@ (800397c <HAL_TIM_Base_Start+0x9c>)
 800391a:	4293      	cmp	r3, r2
 800391c:	d004      	beq.n	8003928 <HAL_TIM_Base_Start+0x48>
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	4a17      	ldr	r2, [pc, #92]	@ (8003980 <HAL_TIM_Base_Start+0xa0>)
 8003924:	4293      	cmp	r3, r2
 8003926:	d115      	bne.n	8003954 <HAL_TIM_Base_Start+0x74>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	689a      	ldr	r2, [r3, #8]
 800392e:	4b15      	ldr	r3, [pc, #84]	@ (8003984 <HAL_TIM_Base_Start+0xa4>)
 8003930:	4013      	ands	r3, r2
 8003932:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	2b06      	cmp	r3, #6
 8003938:	d015      	beq.n	8003966 <HAL_TIM_Base_Start+0x86>
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003940:	d011      	beq.n	8003966 <HAL_TIM_Base_Start+0x86>
    {
      __HAL_TIM_ENABLE(htim);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	681a      	ldr	r2, [r3, #0]
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f042 0201 	orr.w	r2, r2, #1
 8003950:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003952:	e008      	b.n	8003966 <HAL_TIM_Base_Start+0x86>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	681a      	ldr	r2, [r3, #0]
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f042 0201 	orr.w	r2, r2, #1
 8003962:	601a      	str	r2, [r3, #0]
 8003964:	e000      	b.n	8003968 <HAL_TIM_Base_Start+0x88>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003966:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003968:	2300      	movs	r3, #0
}
 800396a:	4618      	mov	r0, r3
 800396c:	3714      	adds	r7, #20
 800396e:	46bd      	mov	sp, r7
 8003970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003974:	4770      	bx	lr
 8003976:	bf00      	nop
 8003978:	40012c00 	.word	0x40012c00
 800397c:	40000400 	.word	0x40000400
 8003980:	40014000 	.word	0x40014000
 8003984:	00010007 	.word	0x00010007

08003988 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8003988:	b580      	push	{r7, lr}
 800398a:	b082      	sub	sp, #8
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2b00      	cmp	r3, #0
 8003994:	d101      	bne.n	800399a <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8003996:	2301      	movs	r3, #1
 8003998:	e049      	b.n	8003a2e <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80039a0:	b2db      	uxtb	r3, r3
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d106      	bne.n	80039b4 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	2200      	movs	r2, #0
 80039aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 80039ae:	6878      	ldr	r0, [r7, #4]
 80039b0:	f000 f841 	bl	8003a36 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2202      	movs	r2, #2
 80039b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681a      	ldr	r2, [r3, #0]
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	3304      	adds	r3, #4
 80039c4:	4619      	mov	r1, r3
 80039c6:	4610      	mov	r0, r2
 80039c8:	f000 fbe4 	bl	8004194 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2201      	movs	r2, #1
 80039d0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2201      	movs	r2, #1
 80039d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2201      	movs	r2, #1
 80039e0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2201      	movs	r2, #1
 80039e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2201      	movs	r2, #1
 80039f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2201      	movs	r2, #1
 80039f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2201      	movs	r2, #1
 8003a00:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2201      	movs	r2, #1
 8003a08:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2201      	movs	r2, #1
 8003a10:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2201      	movs	r2, #1
 8003a18:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	2201      	movs	r2, #1
 8003a20:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2201      	movs	r2, #1
 8003a28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003a2c:	2300      	movs	r3, #0
}
 8003a2e:	4618      	mov	r0, r3
 8003a30:	3708      	adds	r7, #8
 8003a32:	46bd      	mov	sp, r7
 8003a34:	bd80      	pop	{r7, pc}

08003a36 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8003a36:	b480      	push	{r7}
 8003a38:	b083      	sub	sp, #12
 8003a3a:	af00      	add	r7, sp, #0
 8003a3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8003a3e:	bf00      	nop
 8003a40:	370c      	adds	r7, #12
 8003a42:	46bd      	mov	sp, r7
 8003a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a48:	4770      	bx	lr

08003a4a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003a4a:	b580      	push	{r7, lr}
 8003a4c:	b082      	sub	sp, #8
 8003a4e:	af00      	add	r7, sp, #0
 8003a50:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d101      	bne.n	8003a5c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003a58:	2301      	movs	r3, #1
 8003a5a:	e049      	b.n	8003af0 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003a62:	b2db      	uxtb	r3, r3
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d106      	bne.n	8003a76 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003a70:	6878      	ldr	r0, [r7, #4]
 8003a72:	f000 f841 	bl	8003af8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	2202      	movs	r2, #2
 8003a7a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681a      	ldr	r2, [r3, #0]
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	3304      	adds	r3, #4
 8003a86:	4619      	mov	r1, r3
 8003a88:	4610      	mov	r0, r2
 8003a8a:	f000 fb83 	bl	8004194 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	2201      	movs	r2, #1
 8003a92:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	2201      	movs	r2, #1
 8003a9a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	2201      	movs	r2, #1
 8003aa2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	2201      	movs	r2, #1
 8003aaa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	2201      	movs	r2, #1
 8003ab2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	2201      	movs	r2, #1
 8003aba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	2201      	movs	r2, #1
 8003ac2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	2201      	movs	r2, #1
 8003aca:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	2201      	movs	r2, #1
 8003ad2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	2201      	movs	r2, #1
 8003ada:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	2201      	movs	r2, #1
 8003ae2:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	2201      	movs	r2, #1
 8003aea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003aee:	2300      	movs	r3, #0
}
 8003af0:	4618      	mov	r0, r3
 8003af2:	3708      	adds	r7, #8
 8003af4:	46bd      	mov	sp, r7
 8003af6:	bd80      	pop	{r7, pc}

08003af8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003af8:	b480      	push	{r7}
 8003afa:	b083      	sub	sp, #12
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003b00:	bf00      	nop
 8003b02:	370c      	adds	r7, #12
 8003b04:	46bd      	mov	sp, r7
 8003b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0a:	4770      	bx	lr

08003b0c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003b0c:	b580      	push	{r7, lr}
 8003b0e:	b084      	sub	sp, #16
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	6078      	str	r0, [r7, #4]
 8003b14:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003b16:	683b      	ldr	r3, [r7, #0]
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d109      	bne.n	8003b30 <HAL_TIM_PWM_Start+0x24>
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003b22:	b2db      	uxtb	r3, r3
 8003b24:	2b01      	cmp	r3, #1
 8003b26:	bf14      	ite	ne
 8003b28:	2301      	movne	r3, #1
 8003b2a:	2300      	moveq	r3, #0
 8003b2c:	b2db      	uxtb	r3, r3
 8003b2e:	e03c      	b.n	8003baa <HAL_TIM_PWM_Start+0x9e>
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	2b04      	cmp	r3, #4
 8003b34:	d109      	bne.n	8003b4a <HAL_TIM_PWM_Start+0x3e>
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003b3c:	b2db      	uxtb	r3, r3
 8003b3e:	2b01      	cmp	r3, #1
 8003b40:	bf14      	ite	ne
 8003b42:	2301      	movne	r3, #1
 8003b44:	2300      	moveq	r3, #0
 8003b46:	b2db      	uxtb	r3, r3
 8003b48:	e02f      	b.n	8003baa <HAL_TIM_PWM_Start+0x9e>
 8003b4a:	683b      	ldr	r3, [r7, #0]
 8003b4c:	2b08      	cmp	r3, #8
 8003b4e:	d109      	bne.n	8003b64 <HAL_TIM_PWM_Start+0x58>
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003b56:	b2db      	uxtb	r3, r3
 8003b58:	2b01      	cmp	r3, #1
 8003b5a:	bf14      	ite	ne
 8003b5c:	2301      	movne	r3, #1
 8003b5e:	2300      	moveq	r3, #0
 8003b60:	b2db      	uxtb	r3, r3
 8003b62:	e022      	b.n	8003baa <HAL_TIM_PWM_Start+0x9e>
 8003b64:	683b      	ldr	r3, [r7, #0]
 8003b66:	2b0c      	cmp	r3, #12
 8003b68:	d109      	bne.n	8003b7e <HAL_TIM_PWM_Start+0x72>
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003b70:	b2db      	uxtb	r3, r3
 8003b72:	2b01      	cmp	r3, #1
 8003b74:	bf14      	ite	ne
 8003b76:	2301      	movne	r3, #1
 8003b78:	2300      	moveq	r3, #0
 8003b7a:	b2db      	uxtb	r3, r3
 8003b7c:	e015      	b.n	8003baa <HAL_TIM_PWM_Start+0x9e>
 8003b7e:	683b      	ldr	r3, [r7, #0]
 8003b80:	2b10      	cmp	r3, #16
 8003b82:	d109      	bne.n	8003b98 <HAL_TIM_PWM_Start+0x8c>
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003b8a:	b2db      	uxtb	r3, r3
 8003b8c:	2b01      	cmp	r3, #1
 8003b8e:	bf14      	ite	ne
 8003b90:	2301      	movne	r3, #1
 8003b92:	2300      	moveq	r3, #0
 8003b94:	b2db      	uxtb	r3, r3
 8003b96:	e008      	b.n	8003baa <HAL_TIM_PWM_Start+0x9e>
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8003b9e:	b2db      	uxtb	r3, r3
 8003ba0:	2b01      	cmp	r3, #1
 8003ba2:	bf14      	ite	ne
 8003ba4:	2301      	movne	r3, #1
 8003ba6:	2300      	moveq	r3, #0
 8003ba8:	b2db      	uxtb	r3, r3
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d001      	beq.n	8003bb2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8003bae:	2301      	movs	r3, #1
 8003bb0:	e088      	b.n	8003cc4 <HAL_TIM_PWM_Start+0x1b8>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003bb2:	683b      	ldr	r3, [r7, #0]
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d104      	bne.n	8003bc2 <HAL_TIM_PWM_Start+0xb6>
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2202      	movs	r2, #2
 8003bbc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003bc0:	e023      	b.n	8003c0a <HAL_TIM_PWM_Start+0xfe>
 8003bc2:	683b      	ldr	r3, [r7, #0]
 8003bc4:	2b04      	cmp	r3, #4
 8003bc6:	d104      	bne.n	8003bd2 <HAL_TIM_PWM_Start+0xc6>
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2202      	movs	r2, #2
 8003bcc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003bd0:	e01b      	b.n	8003c0a <HAL_TIM_PWM_Start+0xfe>
 8003bd2:	683b      	ldr	r3, [r7, #0]
 8003bd4:	2b08      	cmp	r3, #8
 8003bd6:	d104      	bne.n	8003be2 <HAL_TIM_PWM_Start+0xd6>
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2202      	movs	r2, #2
 8003bdc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003be0:	e013      	b.n	8003c0a <HAL_TIM_PWM_Start+0xfe>
 8003be2:	683b      	ldr	r3, [r7, #0]
 8003be4:	2b0c      	cmp	r3, #12
 8003be6:	d104      	bne.n	8003bf2 <HAL_TIM_PWM_Start+0xe6>
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2202      	movs	r2, #2
 8003bec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003bf0:	e00b      	b.n	8003c0a <HAL_TIM_PWM_Start+0xfe>
 8003bf2:	683b      	ldr	r3, [r7, #0]
 8003bf4:	2b10      	cmp	r3, #16
 8003bf6:	d104      	bne.n	8003c02 <HAL_TIM_PWM_Start+0xf6>
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2202      	movs	r2, #2
 8003bfc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003c00:	e003      	b.n	8003c0a <HAL_TIM_PWM_Start+0xfe>
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	2202      	movs	r2, #2
 8003c06:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	2201      	movs	r2, #1
 8003c10:	6839      	ldr	r1, [r7, #0]
 8003c12:	4618      	mov	r0, r3
 8003c14:	f000 fe82 	bl	800491c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	4a2b      	ldr	r2, [pc, #172]	@ (8003ccc <HAL_TIM_PWM_Start+0x1c0>)
 8003c1e:	4293      	cmp	r3, r2
 8003c20:	d00e      	beq.n	8003c40 <HAL_TIM_PWM_Start+0x134>
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	4a2a      	ldr	r2, [pc, #168]	@ (8003cd0 <HAL_TIM_PWM_Start+0x1c4>)
 8003c28:	4293      	cmp	r3, r2
 8003c2a:	d009      	beq.n	8003c40 <HAL_TIM_PWM_Start+0x134>
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	4a28      	ldr	r2, [pc, #160]	@ (8003cd4 <HAL_TIM_PWM_Start+0x1c8>)
 8003c32:	4293      	cmp	r3, r2
 8003c34:	d004      	beq.n	8003c40 <HAL_TIM_PWM_Start+0x134>
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	4a27      	ldr	r2, [pc, #156]	@ (8003cd8 <HAL_TIM_PWM_Start+0x1cc>)
 8003c3c:	4293      	cmp	r3, r2
 8003c3e:	d101      	bne.n	8003c44 <HAL_TIM_PWM_Start+0x138>
 8003c40:	2301      	movs	r3, #1
 8003c42:	e000      	b.n	8003c46 <HAL_TIM_PWM_Start+0x13a>
 8003c44:	2300      	movs	r3, #0
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d007      	beq.n	8003c5a <HAL_TIM_PWM_Start+0x14e>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003c58:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	4a1b      	ldr	r2, [pc, #108]	@ (8003ccc <HAL_TIM_PWM_Start+0x1c0>)
 8003c60:	4293      	cmp	r3, r2
 8003c62:	d00e      	beq.n	8003c82 <HAL_TIM_PWM_Start+0x176>
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003c6c:	d009      	beq.n	8003c82 <HAL_TIM_PWM_Start+0x176>
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	4a1a      	ldr	r2, [pc, #104]	@ (8003cdc <HAL_TIM_PWM_Start+0x1d0>)
 8003c74:	4293      	cmp	r3, r2
 8003c76:	d004      	beq.n	8003c82 <HAL_TIM_PWM_Start+0x176>
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	4a14      	ldr	r2, [pc, #80]	@ (8003cd0 <HAL_TIM_PWM_Start+0x1c4>)
 8003c7e:	4293      	cmp	r3, r2
 8003c80:	d115      	bne.n	8003cae <HAL_TIM_PWM_Start+0x1a2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	689a      	ldr	r2, [r3, #8]
 8003c88:	4b15      	ldr	r3, [pc, #84]	@ (8003ce0 <HAL_TIM_PWM_Start+0x1d4>)
 8003c8a:	4013      	ands	r3, r2
 8003c8c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	2b06      	cmp	r3, #6
 8003c92:	d015      	beq.n	8003cc0 <HAL_TIM_PWM_Start+0x1b4>
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003c9a:	d011      	beq.n	8003cc0 <HAL_TIM_PWM_Start+0x1b4>
    {
      __HAL_TIM_ENABLE(htim);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	681a      	ldr	r2, [r3, #0]
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f042 0201 	orr.w	r2, r2, #1
 8003caa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003cac:	e008      	b.n	8003cc0 <HAL_TIM_PWM_Start+0x1b4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	681a      	ldr	r2, [r3, #0]
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f042 0201 	orr.w	r2, r2, #1
 8003cbc:	601a      	str	r2, [r3, #0]
 8003cbe:	e000      	b.n	8003cc2 <HAL_TIM_PWM_Start+0x1b6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003cc0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003cc2:	2300      	movs	r3, #0
}
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	3710      	adds	r7, #16
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	bd80      	pop	{r7, pc}
 8003ccc:	40012c00 	.word	0x40012c00
 8003cd0:	40014000 	.word	0x40014000
 8003cd4:	40014400 	.word	0x40014400
 8003cd8:	40014800 	.word	0x40014800
 8003cdc:	40000400 	.word	0x40000400
 8003ce0:	00010007 	.word	0x00010007

08003ce4 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	b086      	sub	sp, #24
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	60f8      	str	r0, [r7, #12]
 8003cec:	60b9      	str	r1, [r7, #8]
 8003cee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003cf0:	2300      	movs	r3, #0
 8003cf2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003cfa:	2b01      	cmp	r3, #1
 8003cfc:	d101      	bne.n	8003d02 <HAL_TIM_OC_ConfigChannel+0x1e>
 8003cfe:	2302      	movs	r3, #2
 8003d00:	e066      	b.n	8003dd0 <HAL_TIM_OC_ConfigChannel+0xec>
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	2201      	movs	r2, #1
 8003d06:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	2b14      	cmp	r3, #20
 8003d0e:	d857      	bhi.n	8003dc0 <HAL_TIM_OC_ConfigChannel+0xdc>
 8003d10:	a201      	add	r2, pc, #4	@ (adr r2, 8003d18 <HAL_TIM_OC_ConfigChannel+0x34>)
 8003d12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d16:	bf00      	nop
 8003d18:	08003d6d 	.word	0x08003d6d
 8003d1c:	08003dc1 	.word	0x08003dc1
 8003d20:	08003dc1 	.word	0x08003dc1
 8003d24:	08003dc1 	.word	0x08003dc1
 8003d28:	08003d7b 	.word	0x08003d7b
 8003d2c:	08003dc1 	.word	0x08003dc1
 8003d30:	08003dc1 	.word	0x08003dc1
 8003d34:	08003dc1 	.word	0x08003dc1
 8003d38:	08003d89 	.word	0x08003d89
 8003d3c:	08003dc1 	.word	0x08003dc1
 8003d40:	08003dc1 	.word	0x08003dc1
 8003d44:	08003dc1 	.word	0x08003dc1
 8003d48:	08003d97 	.word	0x08003d97
 8003d4c:	08003dc1 	.word	0x08003dc1
 8003d50:	08003dc1 	.word	0x08003dc1
 8003d54:	08003dc1 	.word	0x08003dc1
 8003d58:	08003da5 	.word	0x08003da5
 8003d5c:	08003dc1 	.word	0x08003dc1
 8003d60:	08003dc1 	.word	0x08003dc1
 8003d64:	08003dc1 	.word	0x08003dc1
 8003d68:	08003db3 	.word	0x08003db3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	68b9      	ldr	r1, [r7, #8]
 8003d72:	4618      	mov	r0, r3
 8003d74:	f000 fa92 	bl	800429c <TIM_OC1_SetConfig>
      break;
 8003d78:	e025      	b.n	8003dc6 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	68b9      	ldr	r1, [r7, #8]
 8003d80:	4618      	mov	r0, r3
 8003d82:	f000 fb11 	bl	80043a8 <TIM_OC2_SetConfig>
      break;
 8003d86:	e01e      	b.n	8003dc6 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	68b9      	ldr	r1, [r7, #8]
 8003d8e:	4618      	mov	r0, r3
 8003d90:	f000 fb8a 	bl	80044a8 <TIM_OC3_SetConfig>
      break;
 8003d94:	e017      	b.n	8003dc6 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	68b9      	ldr	r1, [r7, #8]
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	f000 fc01 	bl	80045a4 <TIM_OC4_SetConfig>
      break;
 8003da2:	e010      	b.n	8003dc6 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	68b9      	ldr	r1, [r7, #8]
 8003daa:	4618      	mov	r0, r3
 8003dac:	f000 fc5e 	bl	800466c <TIM_OC5_SetConfig>
      break;
 8003db0:	e009      	b.n	8003dc6 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	68b9      	ldr	r1, [r7, #8]
 8003db8:	4618      	mov	r0, r3
 8003dba:	f000 fcb5 	bl	8004728 <TIM_OC6_SetConfig>
      break;
 8003dbe:	e002      	b.n	8003dc6 <HAL_TIM_OC_ConfigChannel+0xe2>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8003dc0:	2301      	movs	r3, #1
 8003dc2:	75fb      	strb	r3, [r7, #23]
      break;
 8003dc4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	2200      	movs	r2, #0
 8003dca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003dce:	7dfb      	ldrb	r3, [r7, #23]
}
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	3718      	adds	r7, #24
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	bd80      	pop	{r7, pc}

08003dd8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	b086      	sub	sp, #24
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	60f8      	str	r0, [r7, #12]
 8003de0:	60b9      	str	r1, [r7, #8]
 8003de2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003de4:	2300      	movs	r3, #0
 8003de6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003dee:	2b01      	cmp	r3, #1
 8003df0:	d101      	bne.n	8003df6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003df2:	2302      	movs	r3, #2
 8003df4:	e0ff      	b.n	8003ff6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	2201      	movs	r2, #1
 8003dfa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	2b14      	cmp	r3, #20
 8003e02:	f200 80f0 	bhi.w	8003fe6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8003e06:	a201      	add	r2, pc, #4	@ (adr r2, 8003e0c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003e08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e0c:	08003e61 	.word	0x08003e61
 8003e10:	08003fe7 	.word	0x08003fe7
 8003e14:	08003fe7 	.word	0x08003fe7
 8003e18:	08003fe7 	.word	0x08003fe7
 8003e1c:	08003ea1 	.word	0x08003ea1
 8003e20:	08003fe7 	.word	0x08003fe7
 8003e24:	08003fe7 	.word	0x08003fe7
 8003e28:	08003fe7 	.word	0x08003fe7
 8003e2c:	08003ee3 	.word	0x08003ee3
 8003e30:	08003fe7 	.word	0x08003fe7
 8003e34:	08003fe7 	.word	0x08003fe7
 8003e38:	08003fe7 	.word	0x08003fe7
 8003e3c:	08003f23 	.word	0x08003f23
 8003e40:	08003fe7 	.word	0x08003fe7
 8003e44:	08003fe7 	.word	0x08003fe7
 8003e48:	08003fe7 	.word	0x08003fe7
 8003e4c:	08003f65 	.word	0x08003f65
 8003e50:	08003fe7 	.word	0x08003fe7
 8003e54:	08003fe7 	.word	0x08003fe7
 8003e58:	08003fe7 	.word	0x08003fe7
 8003e5c:	08003fa5 	.word	0x08003fa5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	68b9      	ldr	r1, [r7, #8]
 8003e66:	4618      	mov	r0, r3
 8003e68:	f000 fa18 	bl	800429c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	699a      	ldr	r2, [r3, #24]
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f042 0208 	orr.w	r2, r2, #8
 8003e7a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	699a      	ldr	r2, [r3, #24]
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f022 0204 	bic.w	r2, r2, #4
 8003e8a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	6999      	ldr	r1, [r3, #24]
 8003e92:	68bb      	ldr	r3, [r7, #8]
 8003e94:	691a      	ldr	r2, [r3, #16]
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	430a      	orrs	r2, r1
 8003e9c:	619a      	str	r2, [r3, #24]
      break;
 8003e9e:	e0a5      	b.n	8003fec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	68b9      	ldr	r1, [r7, #8]
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	f000 fa7e 	bl	80043a8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	699a      	ldr	r2, [r3, #24]
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003eba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	699a      	ldr	r2, [r3, #24]
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003eca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	6999      	ldr	r1, [r3, #24]
 8003ed2:	68bb      	ldr	r3, [r7, #8]
 8003ed4:	691b      	ldr	r3, [r3, #16]
 8003ed6:	021a      	lsls	r2, r3, #8
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	430a      	orrs	r2, r1
 8003ede:	619a      	str	r2, [r3, #24]
      break;
 8003ee0:	e084      	b.n	8003fec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	68b9      	ldr	r1, [r7, #8]
 8003ee8:	4618      	mov	r0, r3
 8003eea:	f000 fadd 	bl	80044a8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	69da      	ldr	r2, [r3, #28]
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f042 0208 	orr.w	r2, r2, #8
 8003efc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	69da      	ldr	r2, [r3, #28]
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f022 0204 	bic.w	r2, r2, #4
 8003f0c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	69d9      	ldr	r1, [r3, #28]
 8003f14:	68bb      	ldr	r3, [r7, #8]
 8003f16:	691a      	ldr	r2, [r3, #16]
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	430a      	orrs	r2, r1
 8003f1e:	61da      	str	r2, [r3, #28]
      break;
 8003f20:	e064      	b.n	8003fec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	68b9      	ldr	r1, [r7, #8]
 8003f28:	4618      	mov	r0, r3
 8003f2a:	f000 fb3b 	bl	80045a4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	69da      	ldr	r2, [r3, #28]
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003f3c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	69da      	ldr	r2, [r3, #28]
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003f4c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	69d9      	ldr	r1, [r3, #28]
 8003f54:	68bb      	ldr	r3, [r7, #8]
 8003f56:	691b      	ldr	r3, [r3, #16]
 8003f58:	021a      	lsls	r2, r3, #8
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	430a      	orrs	r2, r1
 8003f60:	61da      	str	r2, [r3, #28]
      break;
 8003f62:	e043      	b.n	8003fec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	68b9      	ldr	r1, [r7, #8]
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	f000 fb7e 	bl	800466c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f042 0208 	orr.w	r2, r2, #8
 8003f7e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f022 0204 	bic.w	r2, r2, #4
 8003f8e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8003f96:	68bb      	ldr	r3, [r7, #8]
 8003f98:	691a      	ldr	r2, [r3, #16]
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	430a      	orrs	r2, r1
 8003fa0:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8003fa2:	e023      	b.n	8003fec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	68b9      	ldr	r1, [r7, #8]
 8003faa:	4618      	mov	r0, r3
 8003fac:	f000 fbbc 	bl	8004728 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003fbe:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003fce:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8003fd6:	68bb      	ldr	r3, [r7, #8]
 8003fd8:	691b      	ldr	r3, [r3, #16]
 8003fda:	021a      	lsls	r2, r3, #8
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	430a      	orrs	r2, r1
 8003fe2:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8003fe4:	e002      	b.n	8003fec <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8003fe6:	2301      	movs	r3, #1
 8003fe8:	75fb      	strb	r3, [r7, #23]
      break;
 8003fea:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	2200      	movs	r2, #0
 8003ff0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003ff4:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	3718      	adds	r7, #24
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	bd80      	pop	{r7, pc}
 8003ffe:	bf00      	nop

08004000 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004000:	b580      	push	{r7, lr}
 8004002:	b084      	sub	sp, #16
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]
 8004008:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800400a:	2300      	movs	r3, #0
 800400c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004014:	2b01      	cmp	r3, #1
 8004016:	d101      	bne.n	800401c <HAL_TIM_ConfigClockSource+0x1c>
 8004018:	2302      	movs	r3, #2
 800401a:	e0b6      	b.n	800418a <HAL_TIM_ConfigClockSource+0x18a>
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2201      	movs	r2, #1
 8004020:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2202      	movs	r2, #2
 8004028:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	689b      	ldr	r3, [r3, #8]
 8004032:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004034:	68bb      	ldr	r3, [r7, #8]
 8004036:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800403a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800403e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004040:	68bb      	ldr	r3, [r7, #8]
 8004042:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004046:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	68ba      	ldr	r2, [r7, #8]
 800404e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004050:	683b      	ldr	r3, [r7, #0]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004058:	d03e      	beq.n	80040d8 <HAL_TIM_ConfigClockSource+0xd8>
 800405a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800405e:	f200 8087 	bhi.w	8004170 <HAL_TIM_ConfigClockSource+0x170>
 8004062:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004066:	f000 8086 	beq.w	8004176 <HAL_TIM_ConfigClockSource+0x176>
 800406a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800406e:	d87f      	bhi.n	8004170 <HAL_TIM_ConfigClockSource+0x170>
 8004070:	2b70      	cmp	r3, #112	@ 0x70
 8004072:	d01a      	beq.n	80040aa <HAL_TIM_ConfigClockSource+0xaa>
 8004074:	2b70      	cmp	r3, #112	@ 0x70
 8004076:	d87b      	bhi.n	8004170 <HAL_TIM_ConfigClockSource+0x170>
 8004078:	2b60      	cmp	r3, #96	@ 0x60
 800407a:	d050      	beq.n	800411e <HAL_TIM_ConfigClockSource+0x11e>
 800407c:	2b60      	cmp	r3, #96	@ 0x60
 800407e:	d877      	bhi.n	8004170 <HAL_TIM_ConfigClockSource+0x170>
 8004080:	2b50      	cmp	r3, #80	@ 0x50
 8004082:	d03c      	beq.n	80040fe <HAL_TIM_ConfigClockSource+0xfe>
 8004084:	2b50      	cmp	r3, #80	@ 0x50
 8004086:	d873      	bhi.n	8004170 <HAL_TIM_ConfigClockSource+0x170>
 8004088:	2b40      	cmp	r3, #64	@ 0x40
 800408a:	d058      	beq.n	800413e <HAL_TIM_ConfigClockSource+0x13e>
 800408c:	2b40      	cmp	r3, #64	@ 0x40
 800408e:	d86f      	bhi.n	8004170 <HAL_TIM_ConfigClockSource+0x170>
 8004090:	2b30      	cmp	r3, #48	@ 0x30
 8004092:	d064      	beq.n	800415e <HAL_TIM_ConfigClockSource+0x15e>
 8004094:	2b30      	cmp	r3, #48	@ 0x30
 8004096:	d86b      	bhi.n	8004170 <HAL_TIM_ConfigClockSource+0x170>
 8004098:	2b20      	cmp	r3, #32
 800409a:	d060      	beq.n	800415e <HAL_TIM_ConfigClockSource+0x15e>
 800409c:	2b20      	cmp	r3, #32
 800409e:	d867      	bhi.n	8004170 <HAL_TIM_ConfigClockSource+0x170>
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d05c      	beq.n	800415e <HAL_TIM_ConfigClockSource+0x15e>
 80040a4:	2b10      	cmp	r3, #16
 80040a6:	d05a      	beq.n	800415e <HAL_TIM_ConfigClockSource+0x15e>
 80040a8:	e062      	b.n	8004170 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80040ae:	683b      	ldr	r3, [r7, #0]
 80040b0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80040b2:	683b      	ldr	r3, [r7, #0]
 80040b4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80040b6:	683b      	ldr	r3, [r7, #0]
 80040b8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80040ba:	f000 fc0f 	bl	80048dc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	689b      	ldr	r3, [r3, #8]
 80040c4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80040c6:	68bb      	ldr	r3, [r7, #8]
 80040c8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80040cc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	68ba      	ldr	r2, [r7, #8]
 80040d4:	609a      	str	r2, [r3, #8]
      break;
 80040d6:	e04f      	b.n	8004178 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80040dc:	683b      	ldr	r3, [r7, #0]
 80040de:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80040e4:	683b      	ldr	r3, [r7, #0]
 80040e6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80040e8:	f000 fbf8 	bl	80048dc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	689a      	ldr	r2, [r3, #8]
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80040fa:	609a      	str	r2, [r3, #8]
      break;
 80040fc:	e03c      	b.n	8004178 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004102:	683b      	ldr	r3, [r7, #0]
 8004104:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004106:	683b      	ldr	r3, [r7, #0]
 8004108:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800410a:	461a      	mov	r2, r3
 800410c:	f000 fb6c 	bl	80047e8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	2150      	movs	r1, #80	@ 0x50
 8004116:	4618      	mov	r0, r3
 8004118:	f000 fbc5 	bl	80048a6 <TIM_ITRx_SetConfig>
      break;
 800411c:	e02c      	b.n	8004178 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004122:	683b      	ldr	r3, [r7, #0]
 8004124:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004126:	683b      	ldr	r3, [r7, #0]
 8004128:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800412a:	461a      	mov	r2, r3
 800412c:	f000 fb8b 	bl	8004846 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	2160      	movs	r1, #96	@ 0x60
 8004136:	4618      	mov	r0, r3
 8004138:	f000 fbb5 	bl	80048a6 <TIM_ITRx_SetConfig>
      break;
 800413c:	e01c      	b.n	8004178 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004142:	683b      	ldr	r3, [r7, #0]
 8004144:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004146:	683b      	ldr	r3, [r7, #0]
 8004148:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800414a:	461a      	mov	r2, r3
 800414c:	f000 fb4c 	bl	80047e8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	2140      	movs	r1, #64	@ 0x40
 8004156:	4618      	mov	r0, r3
 8004158:	f000 fba5 	bl	80048a6 <TIM_ITRx_SetConfig>
      break;
 800415c:	e00c      	b.n	8004178 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681a      	ldr	r2, [r3, #0]
 8004162:	683b      	ldr	r3, [r7, #0]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	4619      	mov	r1, r3
 8004168:	4610      	mov	r0, r2
 800416a:	f000 fb9c 	bl	80048a6 <TIM_ITRx_SetConfig>
      break;
 800416e:	e003      	b.n	8004178 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8004170:	2301      	movs	r3, #1
 8004172:	73fb      	strb	r3, [r7, #15]
      break;
 8004174:	e000      	b.n	8004178 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8004176:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2201      	movs	r2, #1
 800417c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2200      	movs	r2, #0
 8004184:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004188:	7bfb      	ldrb	r3, [r7, #15]
}
 800418a:	4618      	mov	r0, r3
 800418c:	3710      	adds	r7, #16
 800418e:	46bd      	mov	sp, r7
 8004190:	bd80      	pop	{r7, pc}
	...

08004194 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004194:	b480      	push	{r7}
 8004196:	b085      	sub	sp, #20
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
 800419c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	4a38      	ldr	r2, [pc, #224]	@ (8004288 <TIM_Base_SetConfig+0xf4>)
 80041a8:	4293      	cmp	r3, r2
 80041aa:	d007      	beq.n	80041bc <TIM_Base_SetConfig+0x28>
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80041b2:	d003      	beq.n	80041bc <TIM_Base_SetConfig+0x28>
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	4a35      	ldr	r2, [pc, #212]	@ (800428c <TIM_Base_SetConfig+0xf8>)
 80041b8:	4293      	cmp	r3, r2
 80041ba:	d108      	bne.n	80041ce <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80041c2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80041c4:	683b      	ldr	r3, [r7, #0]
 80041c6:	685b      	ldr	r3, [r3, #4]
 80041c8:	68fa      	ldr	r2, [r7, #12]
 80041ca:	4313      	orrs	r3, r2
 80041cc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	4a2d      	ldr	r2, [pc, #180]	@ (8004288 <TIM_Base_SetConfig+0xf4>)
 80041d2:	4293      	cmp	r3, r2
 80041d4:	d013      	beq.n	80041fe <TIM_Base_SetConfig+0x6a>
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80041dc:	d00f      	beq.n	80041fe <TIM_Base_SetConfig+0x6a>
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	4a2a      	ldr	r2, [pc, #168]	@ (800428c <TIM_Base_SetConfig+0xf8>)
 80041e2:	4293      	cmp	r3, r2
 80041e4:	d00b      	beq.n	80041fe <TIM_Base_SetConfig+0x6a>
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	4a29      	ldr	r2, [pc, #164]	@ (8004290 <TIM_Base_SetConfig+0xfc>)
 80041ea:	4293      	cmp	r3, r2
 80041ec:	d007      	beq.n	80041fe <TIM_Base_SetConfig+0x6a>
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	4a28      	ldr	r2, [pc, #160]	@ (8004294 <TIM_Base_SetConfig+0x100>)
 80041f2:	4293      	cmp	r3, r2
 80041f4:	d003      	beq.n	80041fe <TIM_Base_SetConfig+0x6a>
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	4a27      	ldr	r2, [pc, #156]	@ (8004298 <TIM_Base_SetConfig+0x104>)
 80041fa:	4293      	cmp	r3, r2
 80041fc:	d108      	bne.n	8004210 <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004204:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004206:	683b      	ldr	r3, [r7, #0]
 8004208:	68db      	ldr	r3, [r3, #12]
 800420a:	68fa      	ldr	r2, [r7, #12]
 800420c:	4313      	orrs	r3, r2
 800420e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004216:	683b      	ldr	r3, [r7, #0]
 8004218:	695b      	ldr	r3, [r3, #20]
 800421a:	4313      	orrs	r3, r2
 800421c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	68fa      	ldr	r2, [r7, #12]
 8004222:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	689a      	ldr	r2, [r3, #8]
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800422c:	683b      	ldr	r3, [r7, #0]
 800422e:	681a      	ldr	r2, [r3, #0]
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	4a14      	ldr	r2, [pc, #80]	@ (8004288 <TIM_Base_SetConfig+0xf4>)
 8004238:	4293      	cmp	r3, r2
 800423a:	d00b      	beq.n	8004254 <TIM_Base_SetConfig+0xc0>
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	4a14      	ldr	r2, [pc, #80]	@ (8004290 <TIM_Base_SetConfig+0xfc>)
 8004240:	4293      	cmp	r3, r2
 8004242:	d007      	beq.n	8004254 <TIM_Base_SetConfig+0xc0>
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	4a13      	ldr	r2, [pc, #76]	@ (8004294 <TIM_Base_SetConfig+0x100>)
 8004248:	4293      	cmp	r3, r2
 800424a:	d003      	beq.n	8004254 <TIM_Base_SetConfig+0xc0>
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	4a12      	ldr	r2, [pc, #72]	@ (8004298 <TIM_Base_SetConfig+0x104>)
 8004250:	4293      	cmp	r3, r2
 8004252:	d103      	bne.n	800425c <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004254:	683b      	ldr	r3, [r7, #0]
 8004256:	691a      	ldr	r2, [r3, #16]
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2201      	movs	r2, #1
 8004260:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	691b      	ldr	r3, [r3, #16]
 8004266:	f003 0301 	and.w	r3, r3, #1
 800426a:	2b01      	cmp	r3, #1
 800426c:	d105      	bne.n	800427a <TIM_Base_SetConfig+0xe6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	691b      	ldr	r3, [r3, #16]
 8004272:	f023 0201 	bic.w	r2, r3, #1
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	611a      	str	r2, [r3, #16]
  }
}
 800427a:	bf00      	nop
 800427c:	3714      	adds	r7, #20
 800427e:	46bd      	mov	sp, r7
 8004280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004284:	4770      	bx	lr
 8004286:	bf00      	nop
 8004288:	40012c00 	.word	0x40012c00
 800428c:	40000400 	.word	0x40000400
 8004290:	40014000 	.word	0x40014000
 8004294:	40014400 	.word	0x40014400
 8004298:	40014800 	.word	0x40014800

0800429c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800429c:	b480      	push	{r7}
 800429e:	b087      	sub	sp, #28
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	6078      	str	r0, [r7, #4]
 80042a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6a1b      	ldr	r3, [r3, #32]
 80042aa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	6a1b      	ldr	r3, [r3, #32]
 80042b0:	f023 0201 	bic.w	r2, r3, #1
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	685b      	ldr	r3, [r3, #4]
 80042bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	699b      	ldr	r3, [r3, #24]
 80042c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80042ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80042ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	f023 0303 	bic.w	r3, r3, #3
 80042d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80042d8:	683b      	ldr	r3, [r7, #0]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	68fa      	ldr	r2, [r7, #12]
 80042de:	4313      	orrs	r3, r2
 80042e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80042e2:	697b      	ldr	r3, [r7, #20]
 80042e4:	f023 0302 	bic.w	r3, r3, #2
 80042e8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80042ea:	683b      	ldr	r3, [r7, #0]
 80042ec:	689b      	ldr	r3, [r3, #8]
 80042ee:	697a      	ldr	r2, [r7, #20]
 80042f0:	4313      	orrs	r3, r2
 80042f2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	4a28      	ldr	r2, [pc, #160]	@ (8004398 <TIM_OC1_SetConfig+0xfc>)
 80042f8:	4293      	cmp	r3, r2
 80042fa:	d00b      	beq.n	8004314 <TIM_OC1_SetConfig+0x78>
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	4a27      	ldr	r2, [pc, #156]	@ (800439c <TIM_OC1_SetConfig+0x100>)
 8004300:	4293      	cmp	r3, r2
 8004302:	d007      	beq.n	8004314 <TIM_OC1_SetConfig+0x78>
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	4a26      	ldr	r2, [pc, #152]	@ (80043a0 <TIM_OC1_SetConfig+0x104>)
 8004308:	4293      	cmp	r3, r2
 800430a:	d003      	beq.n	8004314 <TIM_OC1_SetConfig+0x78>
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	4a25      	ldr	r2, [pc, #148]	@ (80043a4 <TIM_OC1_SetConfig+0x108>)
 8004310:	4293      	cmp	r3, r2
 8004312:	d10c      	bne.n	800432e <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004314:	697b      	ldr	r3, [r7, #20]
 8004316:	f023 0308 	bic.w	r3, r3, #8
 800431a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800431c:	683b      	ldr	r3, [r7, #0]
 800431e:	68db      	ldr	r3, [r3, #12]
 8004320:	697a      	ldr	r2, [r7, #20]
 8004322:	4313      	orrs	r3, r2
 8004324:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004326:	697b      	ldr	r3, [r7, #20]
 8004328:	f023 0304 	bic.w	r3, r3, #4
 800432c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	4a19      	ldr	r2, [pc, #100]	@ (8004398 <TIM_OC1_SetConfig+0xfc>)
 8004332:	4293      	cmp	r3, r2
 8004334:	d00b      	beq.n	800434e <TIM_OC1_SetConfig+0xb2>
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	4a18      	ldr	r2, [pc, #96]	@ (800439c <TIM_OC1_SetConfig+0x100>)
 800433a:	4293      	cmp	r3, r2
 800433c:	d007      	beq.n	800434e <TIM_OC1_SetConfig+0xb2>
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	4a17      	ldr	r2, [pc, #92]	@ (80043a0 <TIM_OC1_SetConfig+0x104>)
 8004342:	4293      	cmp	r3, r2
 8004344:	d003      	beq.n	800434e <TIM_OC1_SetConfig+0xb2>
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	4a16      	ldr	r2, [pc, #88]	@ (80043a4 <TIM_OC1_SetConfig+0x108>)
 800434a:	4293      	cmp	r3, r2
 800434c:	d111      	bne.n	8004372 <TIM_OC1_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800434e:	693b      	ldr	r3, [r7, #16]
 8004350:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004354:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004356:	693b      	ldr	r3, [r7, #16]
 8004358:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800435c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800435e:	683b      	ldr	r3, [r7, #0]
 8004360:	695b      	ldr	r3, [r3, #20]
 8004362:	693a      	ldr	r2, [r7, #16]
 8004364:	4313      	orrs	r3, r2
 8004366:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004368:	683b      	ldr	r3, [r7, #0]
 800436a:	699b      	ldr	r3, [r3, #24]
 800436c:	693a      	ldr	r2, [r7, #16]
 800436e:	4313      	orrs	r3, r2
 8004370:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	693a      	ldr	r2, [r7, #16]
 8004376:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	68fa      	ldr	r2, [r7, #12]
 800437c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800437e:	683b      	ldr	r3, [r7, #0]
 8004380:	685a      	ldr	r2, [r3, #4]
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	697a      	ldr	r2, [r7, #20]
 800438a:	621a      	str	r2, [r3, #32]
}
 800438c:	bf00      	nop
 800438e:	371c      	adds	r7, #28
 8004390:	46bd      	mov	sp, r7
 8004392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004396:	4770      	bx	lr
 8004398:	40012c00 	.word	0x40012c00
 800439c:	40014000 	.word	0x40014000
 80043a0:	40014400 	.word	0x40014400
 80043a4:	40014800 	.word	0x40014800

080043a8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80043a8:	b480      	push	{r7}
 80043aa:	b087      	sub	sp, #28
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	6078      	str	r0, [r7, #4]
 80043b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6a1b      	ldr	r3, [r3, #32]
 80043b6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	6a1b      	ldr	r3, [r3, #32]
 80043bc:	f023 0210 	bic.w	r2, r3, #16
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	685b      	ldr	r3, [r3, #4]
 80043c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	699b      	ldr	r3, [r3, #24]
 80043ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80043d6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80043da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80043e2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80043e4:	683b      	ldr	r3, [r7, #0]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	021b      	lsls	r3, r3, #8
 80043ea:	68fa      	ldr	r2, [r7, #12]
 80043ec:	4313      	orrs	r3, r2
 80043ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80043f0:	697b      	ldr	r3, [r7, #20]
 80043f2:	f023 0320 	bic.w	r3, r3, #32
 80043f6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	689b      	ldr	r3, [r3, #8]
 80043fc:	011b      	lsls	r3, r3, #4
 80043fe:	697a      	ldr	r2, [r7, #20]
 8004400:	4313      	orrs	r3, r2
 8004402:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	4a24      	ldr	r2, [pc, #144]	@ (8004498 <TIM_OC2_SetConfig+0xf0>)
 8004408:	4293      	cmp	r3, r2
 800440a:	d10d      	bne.n	8004428 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800440c:	697b      	ldr	r3, [r7, #20]
 800440e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004412:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004414:	683b      	ldr	r3, [r7, #0]
 8004416:	68db      	ldr	r3, [r3, #12]
 8004418:	011b      	lsls	r3, r3, #4
 800441a:	697a      	ldr	r2, [r7, #20]
 800441c:	4313      	orrs	r3, r2
 800441e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004420:	697b      	ldr	r3, [r7, #20]
 8004422:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004426:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	4a1b      	ldr	r2, [pc, #108]	@ (8004498 <TIM_OC2_SetConfig+0xf0>)
 800442c:	4293      	cmp	r3, r2
 800442e:	d00b      	beq.n	8004448 <TIM_OC2_SetConfig+0xa0>
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	4a1a      	ldr	r2, [pc, #104]	@ (800449c <TIM_OC2_SetConfig+0xf4>)
 8004434:	4293      	cmp	r3, r2
 8004436:	d007      	beq.n	8004448 <TIM_OC2_SetConfig+0xa0>
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	4a19      	ldr	r2, [pc, #100]	@ (80044a0 <TIM_OC2_SetConfig+0xf8>)
 800443c:	4293      	cmp	r3, r2
 800443e:	d003      	beq.n	8004448 <TIM_OC2_SetConfig+0xa0>
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	4a18      	ldr	r2, [pc, #96]	@ (80044a4 <TIM_OC2_SetConfig+0xfc>)
 8004444:	4293      	cmp	r3, r2
 8004446:	d113      	bne.n	8004470 <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004448:	693b      	ldr	r3, [r7, #16]
 800444a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800444e:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004450:	693b      	ldr	r3, [r7, #16]
 8004452:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004456:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004458:	683b      	ldr	r3, [r7, #0]
 800445a:	695b      	ldr	r3, [r3, #20]
 800445c:	009b      	lsls	r3, r3, #2
 800445e:	693a      	ldr	r2, [r7, #16]
 8004460:	4313      	orrs	r3, r2
 8004462:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004464:	683b      	ldr	r3, [r7, #0]
 8004466:	699b      	ldr	r3, [r3, #24]
 8004468:	009b      	lsls	r3, r3, #2
 800446a:	693a      	ldr	r2, [r7, #16]
 800446c:	4313      	orrs	r3, r2
 800446e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	693a      	ldr	r2, [r7, #16]
 8004474:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	68fa      	ldr	r2, [r7, #12]
 800447a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800447c:	683b      	ldr	r3, [r7, #0]
 800447e:	685a      	ldr	r2, [r3, #4]
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	697a      	ldr	r2, [r7, #20]
 8004488:	621a      	str	r2, [r3, #32]
}
 800448a:	bf00      	nop
 800448c:	371c      	adds	r7, #28
 800448e:	46bd      	mov	sp, r7
 8004490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004494:	4770      	bx	lr
 8004496:	bf00      	nop
 8004498:	40012c00 	.word	0x40012c00
 800449c:	40014000 	.word	0x40014000
 80044a0:	40014400 	.word	0x40014400
 80044a4:	40014800 	.word	0x40014800

080044a8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80044a8:	b480      	push	{r7}
 80044aa:	b087      	sub	sp, #28
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	6078      	str	r0, [r7, #4]
 80044b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	6a1b      	ldr	r3, [r3, #32]
 80044b6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	6a1b      	ldr	r3, [r3, #32]
 80044bc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	685b      	ldr	r3, [r3, #4]
 80044c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	69db      	ldr	r3, [r3, #28]
 80044ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80044d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80044da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	f023 0303 	bic.w	r3, r3, #3
 80044e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80044e4:	683b      	ldr	r3, [r7, #0]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	68fa      	ldr	r2, [r7, #12]
 80044ea:	4313      	orrs	r3, r2
 80044ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80044ee:	697b      	ldr	r3, [r7, #20]
 80044f0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80044f4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80044f6:	683b      	ldr	r3, [r7, #0]
 80044f8:	689b      	ldr	r3, [r3, #8]
 80044fa:	021b      	lsls	r3, r3, #8
 80044fc:	697a      	ldr	r2, [r7, #20]
 80044fe:	4313      	orrs	r3, r2
 8004500:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	4a23      	ldr	r2, [pc, #140]	@ (8004594 <TIM_OC3_SetConfig+0xec>)
 8004506:	4293      	cmp	r3, r2
 8004508:	d10d      	bne.n	8004526 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800450a:	697b      	ldr	r3, [r7, #20]
 800450c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004510:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004512:	683b      	ldr	r3, [r7, #0]
 8004514:	68db      	ldr	r3, [r3, #12]
 8004516:	021b      	lsls	r3, r3, #8
 8004518:	697a      	ldr	r2, [r7, #20]
 800451a:	4313      	orrs	r3, r2
 800451c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800451e:	697b      	ldr	r3, [r7, #20]
 8004520:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004524:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	4a1a      	ldr	r2, [pc, #104]	@ (8004594 <TIM_OC3_SetConfig+0xec>)
 800452a:	4293      	cmp	r3, r2
 800452c:	d00b      	beq.n	8004546 <TIM_OC3_SetConfig+0x9e>
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	4a19      	ldr	r2, [pc, #100]	@ (8004598 <TIM_OC3_SetConfig+0xf0>)
 8004532:	4293      	cmp	r3, r2
 8004534:	d007      	beq.n	8004546 <TIM_OC3_SetConfig+0x9e>
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	4a18      	ldr	r2, [pc, #96]	@ (800459c <TIM_OC3_SetConfig+0xf4>)
 800453a:	4293      	cmp	r3, r2
 800453c:	d003      	beq.n	8004546 <TIM_OC3_SetConfig+0x9e>
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	4a17      	ldr	r2, [pc, #92]	@ (80045a0 <TIM_OC3_SetConfig+0xf8>)
 8004542:	4293      	cmp	r3, r2
 8004544:	d113      	bne.n	800456e <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004546:	693b      	ldr	r3, [r7, #16]
 8004548:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800454c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800454e:	693b      	ldr	r3, [r7, #16]
 8004550:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004554:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004556:	683b      	ldr	r3, [r7, #0]
 8004558:	695b      	ldr	r3, [r3, #20]
 800455a:	011b      	lsls	r3, r3, #4
 800455c:	693a      	ldr	r2, [r7, #16]
 800455e:	4313      	orrs	r3, r2
 8004560:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004562:	683b      	ldr	r3, [r7, #0]
 8004564:	699b      	ldr	r3, [r3, #24]
 8004566:	011b      	lsls	r3, r3, #4
 8004568:	693a      	ldr	r2, [r7, #16]
 800456a:	4313      	orrs	r3, r2
 800456c:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	693a      	ldr	r2, [r7, #16]
 8004572:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	68fa      	ldr	r2, [r7, #12]
 8004578:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800457a:	683b      	ldr	r3, [r7, #0]
 800457c:	685a      	ldr	r2, [r3, #4]
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	697a      	ldr	r2, [r7, #20]
 8004586:	621a      	str	r2, [r3, #32]
}
 8004588:	bf00      	nop
 800458a:	371c      	adds	r7, #28
 800458c:	46bd      	mov	sp, r7
 800458e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004592:	4770      	bx	lr
 8004594:	40012c00 	.word	0x40012c00
 8004598:	40014000 	.word	0x40014000
 800459c:	40014400 	.word	0x40014400
 80045a0:	40014800 	.word	0x40014800

080045a4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80045a4:	b480      	push	{r7}
 80045a6:	b087      	sub	sp, #28
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	6078      	str	r0, [r7, #4]
 80045ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6a1b      	ldr	r3, [r3, #32]
 80045b2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	6a1b      	ldr	r3, [r3, #32]
 80045b8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	685b      	ldr	r3, [r3, #4]
 80045c4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	69db      	ldr	r3, [r3, #28]
 80045ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80045d2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80045d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80045de:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80045e0:	683b      	ldr	r3, [r7, #0]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	021b      	lsls	r3, r3, #8
 80045e6:	68fa      	ldr	r2, [r7, #12]
 80045e8:	4313      	orrs	r3, r2
 80045ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80045ec:	693b      	ldr	r3, [r7, #16]
 80045ee:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80045f2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80045f4:	683b      	ldr	r3, [r7, #0]
 80045f6:	689b      	ldr	r3, [r3, #8]
 80045f8:	031b      	lsls	r3, r3, #12
 80045fa:	693a      	ldr	r2, [r7, #16]
 80045fc:	4313      	orrs	r3, r2
 80045fe:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	4a16      	ldr	r2, [pc, #88]	@ (800465c <TIM_OC4_SetConfig+0xb8>)
 8004604:	4293      	cmp	r3, r2
 8004606:	d00b      	beq.n	8004620 <TIM_OC4_SetConfig+0x7c>
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	4a15      	ldr	r2, [pc, #84]	@ (8004660 <TIM_OC4_SetConfig+0xbc>)
 800460c:	4293      	cmp	r3, r2
 800460e:	d007      	beq.n	8004620 <TIM_OC4_SetConfig+0x7c>
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	4a14      	ldr	r2, [pc, #80]	@ (8004664 <TIM_OC4_SetConfig+0xc0>)
 8004614:	4293      	cmp	r3, r2
 8004616:	d003      	beq.n	8004620 <TIM_OC4_SetConfig+0x7c>
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	4a13      	ldr	r2, [pc, #76]	@ (8004668 <TIM_OC4_SetConfig+0xc4>)
 800461c:	4293      	cmp	r3, r2
 800461e:	d109      	bne.n	8004634 <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004620:	697b      	ldr	r3, [r7, #20]
 8004622:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004626:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004628:	683b      	ldr	r3, [r7, #0]
 800462a:	695b      	ldr	r3, [r3, #20]
 800462c:	019b      	lsls	r3, r3, #6
 800462e:	697a      	ldr	r2, [r7, #20]
 8004630:	4313      	orrs	r3, r2
 8004632:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	697a      	ldr	r2, [r7, #20]
 8004638:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	68fa      	ldr	r2, [r7, #12]
 800463e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004640:	683b      	ldr	r3, [r7, #0]
 8004642:	685a      	ldr	r2, [r3, #4]
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	693a      	ldr	r2, [r7, #16]
 800464c:	621a      	str	r2, [r3, #32]
}
 800464e:	bf00      	nop
 8004650:	371c      	adds	r7, #28
 8004652:	46bd      	mov	sp, r7
 8004654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004658:	4770      	bx	lr
 800465a:	bf00      	nop
 800465c:	40012c00 	.word	0x40012c00
 8004660:	40014000 	.word	0x40014000
 8004664:	40014400 	.word	0x40014400
 8004668:	40014800 	.word	0x40014800

0800466c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800466c:	b480      	push	{r7}
 800466e:	b087      	sub	sp, #28
 8004670:	af00      	add	r7, sp, #0
 8004672:	6078      	str	r0, [r7, #4]
 8004674:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6a1b      	ldr	r3, [r3, #32]
 800467a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	6a1b      	ldr	r3, [r3, #32]
 8004680:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	685b      	ldr	r3, [r3, #4]
 800468c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004692:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800469a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800469e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80046a0:	683b      	ldr	r3, [r7, #0]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	68fa      	ldr	r2, [r7, #12]
 80046a6:	4313      	orrs	r3, r2
 80046a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80046aa:	693b      	ldr	r3, [r7, #16]
 80046ac:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80046b0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80046b2:	683b      	ldr	r3, [r7, #0]
 80046b4:	689b      	ldr	r3, [r3, #8]
 80046b6:	041b      	lsls	r3, r3, #16
 80046b8:	693a      	ldr	r2, [r7, #16]
 80046ba:	4313      	orrs	r3, r2
 80046bc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	4a15      	ldr	r2, [pc, #84]	@ (8004718 <TIM_OC5_SetConfig+0xac>)
 80046c2:	4293      	cmp	r3, r2
 80046c4:	d00b      	beq.n	80046de <TIM_OC5_SetConfig+0x72>
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	4a14      	ldr	r2, [pc, #80]	@ (800471c <TIM_OC5_SetConfig+0xb0>)
 80046ca:	4293      	cmp	r3, r2
 80046cc:	d007      	beq.n	80046de <TIM_OC5_SetConfig+0x72>
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	4a13      	ldr	r2, [pc, #76]	@ (8004720 <TIM_OC5_SetConfig+0xb4>)
 80046d2:	4293      	cmp	r3, r2
 80046d4:	d003      	beq.n	80046de <TIM_OC5_SetConfig+0x72>
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	4a12      	ldr	r2, [pc, #72]	@ (8004724 <TIM_OC5_SetConfig+0xb8>)
 80046da:	4293      	cmp	r3, r2
 80046dc:	d109      	bne.n	80046f2 <TIM_OC5_SetConfig+0x86>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80046de:	697b      	ldr	r3, [r7, #20]
 80046e0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80046e4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80046e6:	683b      	ldr	r3, [r7, #0]
 80046e8:	695b      	ldr	r3, [r3, #20]
 80046ea:	021b      	lsls	r3, r3, #8
 80046ec:	697a      	ldr	r2, [r7, #20]
 80046ee:	4313      	orrs	r3, r2
 80046f0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	697a      	ldr	r2, [r7, #20]
 80046f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	68fa      	ldr	r2, [r7, #12]
 80046fc:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80046fe:	683b      	ldr	r3, [r7, #0]
 8004700:	685a      	ldr	r2, [r3, #4]
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	693a      	ldr	r2, [r7, #16]
 800470a:	621a      	str	r2, [r3, #32]
}
 800470c:	bf00      	nop
 800470e:	371c      	adds	r7, #28
 8004710:	46bd      	mov	sp, r7
 8004712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004716:	4770      	bx	lr
 8004718:	40012c00 	.word	0x40012c00
 800471c:	40014000 	.word	0x40014000
 8004720:	40014400 	.word	0x40014400
 8004724:	40014800 	.word	0x40014800

08004728 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004728:	b480      	push	{r7}
 800472a:	b087      	sub	sp, #28
 800472c:	af00      	add	r7, sp, #0
 800472e:	6078      	str	r0, [r7, #4]
 8004730:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	6a1b      	ldr	r3, [r3, #32]
 8004736:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	6a1b      	ldr	r3, [r3, #32]
 800473c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	685b      	ldr	r3, [r3, #4]
 8004748:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800474e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004756:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800475a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800475c:	683b      	ldr	r3, [r7, #0]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	021b      	lsls	r3, r3, #8
 8004762:	68fa      	ldr	r2, [r7, #12]
 8004764:	4313      	orrs	r3, r2
 8004766:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004768:	693b      	ldr	r3, [r7, #16]
 800476a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800476e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004770:	683b      	ldr	r3, [r7, #0]
 8004772:	689b      	ldr	r3, [r3, #8]
 8004774:	051b      	lsls	r3, r3, #20
 8004776:	693a      	ldr	r2, [r7, #16]
 8004778:	4313      	orrs	r3, r2
 800477a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	4a16      	ldr	r2, [pc, #88]	@ (80047d8 <TIM_OC6_SetConfig+0xb0>)
 8004780:	4293      	cmp	r3, r2
 8004782:	d00b      	beq.n	800479c <TIM_OC6_SetConfig+0x74>
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	4a15      	ldr	r2, [pc, #84]	@ (80047dc <TIM_OC6_SetConfig+0xb4>)
 8004788:	4293      	cmp	r3, r2
 800478a:	d007      	beq.n	800479c <TIM_OC6_SetConfig+0x74>
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	4a14      	ldr	r2, [pc, #80]	@ (80047e0 <TIM_OC6_SetConfig+0xb8>)
 8004790:	4293      	cmp	r3, r2
 8004792:	d003      	beq.n	800479c <TIM_OC6_SetConfig+0x74>
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	4a13      	ldr	r2, [pc, #76]	@ (80047e4 <TIM_OC6_SetConfig+0xbc>)
 8004798:	4293      	cmp	r3, r2
 800479a:	d109      	bne.n	80047b0 <TIM_OC6_SetConfig+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800479c:	697b      	ldr	r3, [r7, #20]
 800479e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80047a2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80047a4:	683b      	ldr	r3, [r7, #0]
 80047a6:	695b      	ldr	r3, [r3, #20]
 80047a8:	029b      	lsls	r3, r3, #10
 80047aa:	697a      	ldr	r2, [r7, #20]
 80047ac:	4313      	orrs	r3, r2
 80047ae:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	697a      	ldr	r2, [r7, #20]
 80047b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	68fa      	ldr	r2, [r7, #12]
 80047ba:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80047bc:	683b      	ldr	r3, [r7, #0]
 80047be:	685a      	ldr	r2, [r3, #4]
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	693a      	ldr	r2, [r7, #16]
 80047c8:	621a      	str	r2, [r3, #32]
}
 80047ca:	bf00      	nop
 80047cc:	371c      	adds	r7, #28
 80047ce:	46bd      	mov	sp, r7
 80047d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d4:	4770      	bx	lr
 80047d6:	bf00      	nop
 80047d8:	40012c00 	.word	0x40012c00
 80047dc:	40014000 	.word	0x40014000
 80047e0:	40014400 	.word	0x40014400
 80047e4:	40014800 	.word	0x40014800

080047e8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80047e8:	b480      	push	{r7}
 80047ea:	b087      	sub	sp, #28
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	60f8      	str	r0, [r7, #12]
 80047f0:	60b9      	str	r1, [r7, #8]
 80047f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	6a1b      	ldr	r3, [r3, #32]
 80047f8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	6a1b      	ldr	r3, [r3, #32]
 80047fe:	f023 0201 	bic.w	r2, r3, #1
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	699b      	ldr	r3, [r3, #24]
 800480a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800480c:	693b      	ldr	r3, [r7, #16]
 800480e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004812:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	011b      	lsls	r3, r3, #4
 8004818:	693a      	ldr	r2, [r7, #16]
 800481a:	4313      	orrs	r3, r2
 800481c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800481e:	697b      	ldr	r3, [r7, #20]
 8004820:	f023 030a 	bic.w	r3, r3, #10
 8004824:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004826:	697a      	ldr	r2, [r7, #20]
 8004828:	68bb      	ldr	r3, [r7, #8]
 800482a:	4313      	orrs	r3, r2
 800482c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	693a      	ldr	r2, [r7, #16]
 8004832:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	697a      	ldr	r2, [r7, #20]
 8004838:	621a      	str	r2, [r3, #32]
}
 800483a:	bf00      	nop
 800483c:	371c      	adds	r7, #28
 800483e:	46bd      	mov	sp, r7
 8004840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004844:	4770      	bx	lr

08004846 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004846:	b480      	push	{r7}
 8004848:	b087      	sub	sp, #28
 800484a:	af00      	add	r7, sp, #0
 800484c:	60f8      	str	r0, [r7, #12]
 800484e:	60b9      	str	r1, [r7, #8]
 8004850:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	6a1b      	ldr	r3, [r3, #32]
 8004856:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	6a1b      	ldr	r3, [r3, #32]
 800485c:	f023 0210 	bic.w	r2, r3, #16
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	699b      	ldr	r3, [r3, #24]
 8004868:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800486a:	693b      	ldr	r3, [r7, #16]
 800486c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004870:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	031b      	lsls	r3, r3, #12
 8004876:	693a      	ldr	r2, [r7, #16]
 8004878:	4313      	orrs	r3, r2
 800487a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800487c:	697b      	ldr	r3, [r7, #20]
 800487e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004882:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004884:	68bb      	ldr	r3, [r7, #8]
 8004886:	011b      	lsls	r3, r3, #4
 8004888:	697a      	ldr	r2, [r7, #20]
 800488a:	4313      	orrs	r3, r2
 800488c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	693a      	ldr	r2, [r7, #16]
 8004892:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	697a      	ldr	r2, [r7, #20]
 8004898:	621a      	str	r2, [r3, #32]
}
 800489a:	bf00      	nop
 800489c:	371c      	adds	r7, #28
 800489e:	46bd      	mov	sp, r7
 80048a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a4:	4770      	bx	lr

080048a6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80048a6:	b480      	push	{r7}
 80048a8:	b085      	sub	sp, #20
 80048aa:	af00      	add	r7, sp, #0
 80048ac:	6078      	str	r0, [r7, #4]
 80048ae:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	689b      	ldr	r3, [r3, #8]
 80048b4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80048bc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80048be:	683a      	ldr	r2, [r7, #0]
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	4313      	orrs	r3, r2
 80048c4:	f043 0307 	orr.w	r3, r3, #7
 80048c8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	68fa      	ldr	r2, [r7, #12]
 80048ce:	609a      	str	r2, [r3, #8]
}
 80048d0:	bf00      	nop
 80048d2:	3714      	adds	r7, #20
 80048d4:	46bd      	mov	sp, r7
 80048d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048da:	4770      	bx	lr

080048dc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80048dc:	b480      	push	{r7}
 80048de:	b087      	sub	sp, #28
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	60f8      	str	r0, [r7, #12]
 80048e4:	60b9      	str	r1, [r7, #8]
 80048e6:	607a      	str	r2, [r7, #4]
 80048e8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	689b      	ldr	r3, [r3, #8]
 80048ee:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80048f0:	697b      	ldr	r3, [r7, #20]
 80048f2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80048f6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80048f8:	683b      	ldr	r3, [r7, #0]
 80048fa:	021a      	lsls	r2, r3, #8
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	431a      	orrs	r2, r3
 8004900:	68bb      	ldr	r3, [r7, #8]
 8004902:	4313      	orrs	r3, r2
 8004904:	697a      	ldr	r2, [r7, #20]
 8004906:	4313      	orrs	r3, r2
 8004908:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	697a      	ldr	r2, [r7, #20]
 800490e:	609a      	str	r2, [r3, #8]
}
 8004910:	bf00      	nop
 8004912:	371c      	adds	r7, #28
 8004914:	46bd      	mov	sp, r7
 8004916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491a:	4770      	bx	lr

0800491c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800491c:	b480      	push	{r7}
 800491e:	b087      	sub	sp, #28
 8004920:	af00      	add	r7, sp, #0
 8004922:	60f8      	str	r0, [r7, #12]
 8004924:	60b9      	str	r1, [r7, #8]
 8004926:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004928:	68bb      	ldr	r3, [r7, #8]
 800492a:	f003 031f 	and.w	r3, r3, #31
 800492e:	2201      	movs	r2, #1
 8004930:	fa02 f303 	lsl.w	r3, r2, r3
 8004934:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	6a1a      	ldr	r2, [r3, #32]
 800493a:	697b      	ldr	r3, [r7, #20]
 800493c:	43db      	mvns	r3, r3
 800493e:	401a      	ands	r2, r3
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	6a1a      	ldr	r2, [r3, #32]
 8004948:	68bb      	ldr	r3, [r7, #8]
 800494a:	f003 031f 	and.w	r3, r3, #31
 800494e:	6879      	ldr	r1, [r7, #4]
 8004950:	fa01 f303 	lsl.w	r3, r1, r3
 8004954:	431a      	orrs	r2, r3
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	621a      	str	r2, [r3, #32]
}
 800495a:	bf00      	nop
 800495c:	371c      	adds	r7, #28
 800495e:	46bd      	mov	sp, r7
 8004960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004964:	4770      	bx	lr
	...

08004968 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004968:	b480      	push	{r7}
 800496a:	b085      	sub	sp, #20
 800496c:	af00      	add	r7, sp, #0
 800496e:	6078      	str	r0, [r7, #4]
 8004970:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004978:	2b01      	cmp	r3, #1
 800497a:	d101      	bne.n	8004980 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800497c:	2302      	movs	r3, #2
 800497e:	e054      	b.n	8004a2a <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	2201      	movs	r2, #1
 8004984:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	2202      	movs	r2, #2
 800498c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	685b      	ldr	r3, [r3, #4]
 8004996:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	689b      	ldr	r3, [r3, #8]
 800499e:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	4a24      	ldr	r2, [pc, #144]	@ (8004a38 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80049a6:	4293      	cmp	r3, r2
 80049a8:	d108      	bne.n	80049bc <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80049b0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80049b2:	683b      	ldr	r3, [r7, #0]
 80049b4:	685b      	ldr	r3, [r3, #4]
 80049b6:	68fa      	ldr	r2, [r7, #12]
 80049b8:	4313      	orrs	r3, r2
 80049ba:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80049c2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80049c4:	683b      	ldr	r3, [r7, #0]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	68fa      	ldr	r2, [r7, #12]
 80049ca:	4313      	orrs	r3, r2
 80049cc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	68fa      	ldr	r2, [r7, #12]
 80049d4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	4a17      	ldr	r2, [pc, #92]	@ (8004a38 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80049dc:	4293      	cmp	r3, r2
 80049de:	d00e      	beq.n	80049fe <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80049e8:	d009      	beq.n	80049fe <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	4a13      	ldr	r2, [pc, #76]	@ (8004a3c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80049f0:	4293      	cmp	r3, r2
 80049f2:	d004      	beq.n	80049fe <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	4a11      	ldr	r2, [pc, #68]	@ (8004a40 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80049fa:	4293      	cmp	r3, r2
 80049fc:	d10c      	bne.n	8004a18 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80049fe:	68bb      	ldr	r3, [r7, #8]
 8004a00:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004a04:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004a06:	683b      	ldr	r3, [r7, #0]
 8004a08:	689b      	ldr	r3, [r3, #8]
 8004a0a:	68ba      	ldr	r2, [r7, #8]
 8004a0c:	4313      	orrs	r3, r2
 8004a0e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	68ba      	ldr	r2, [r7, #8]
 8004a16:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	2201      	movs	r2, #1
 8004a1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	2200      	movs	r2, #0
 8004a24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004a28:	2300      	movs	r3, #0
}
 8004a2a:	4618      	mov	r0, r3
 8004a2c:	3714      	adds	r7, #20
 8004a2e:	46bd      	mov	sp, r7
 8004a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a34:	4770      	bx	lr
 8004a36:	bf00      	nop
 8004a38:	40012c00 	.word	0x40012c00
 8004a3c:	40000400 	.word	0x40000400
 8004a40:	40014000 	.word	0x40014000

08004a44 <HAL_MultiProcessor_Init>:
  *        HAL_MultiProcessorEx_AddressLength_Set() must be called after
  *        HAL_MultiProcessor_Init().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MultiProcessor_Init(UART_HandleTypeDef *huart, uint8_t Address, uint32_t WakeUpMethod)
{
 8004a44:	b580      	push	{r7, lr}
 8004a46:	b084      	sub	sp, #16
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	60f8      	str	r0, [r7, #12]
 8004a4c:	460b      	mov	r3, r1
 8004a4e:	607a      	str	r2, [r7, #4]
 8004a50:	72fb      	strb	r3, [r7, #11]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d101      	bne.n	8004a5c <HAL_MultiProcessor_Init+0x18>
  {
    return HAL_ERROR;
 8004a58:	2301      	movs	r3, #1
 8004a5a:	e059      	b.n	8004b10 <HAL_MultiProcessor_Init+0xcc>
  }

  /* Check the wake up method parameter */
  assert_param(IS_UART_WAKEUPMETHOD(WakeUpMethod));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d106      	bne.n	8004a72 <HAL_MultiProcessor_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	2200      	movs	r2, #0
 8004a68:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004a6c:	68f8      	ldr	r0, [r7, #12]
 8004a6e:	f7fc fda1 	bl	80015b4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	2224      	movs	r2, #36	@ 0x24
 8004a76:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	681a      	ldr	r2, [r3, #0]
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f022 0201 	bic.w	r2, r2, #1
 8004a86:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d002      	beq.n	8004a96 <HAL_MultiProcessor_Init+0x52>
  {
    UART_AdvFeatureConfig(huart);
 8004a90:	68f8      	ldr	r0, [r7, #12]
 8004a92:	f000 fd07 	bl	80054a4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004a96:	68f8      	ldr	r0, [r7, #12]
 8004a98:	f000 fbce 	bl	8005238 <UART_SetConfig>
 8004a9c:	4603      	mov	r3, r0
 8004a9e:	2b01      	cmp	r3, #1
 8004aa0:	d101      	bne.n	8004aa6 <HAL_MultiProcessor_Init+0x62>
  {
    return HAL_ERROR;
 8004aa2:	2301      	movs	r3, #1
 8004aa4:	e034      	b.n	8004b10 <HAL_MultiProcessor_Init+0xcc>
  }

  /* In multiprocessor mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register. */
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	685a      	ldr	r2, [r3, #4]
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004ab4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	689a      	ldr	r2, [r3, #8]
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004ac4:	609a      	str	r2, [r3, #8]

  if (WakeUpMethod == UART_WAKEUPMETHOD_ADDRESSMARK)
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004acc:	d10a      	bne.n	8004ae4 <HAL_MultiProcessor_Init+0xa0>
  {
    /* If address mark wake up method is chosen, set the USART address node */
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ADD, ((uint32_t)Address << UART_CR2_ADDRESS_LSB_POS));
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	685b      	ldr	r3, [r3, #4]
 8004ad4:	f023 417f 	bic.w	r1, r3, #4278190080	@ 0xff000000
 8004ad8:	7afb      	ldrb	r3, [r7, #11]
 8004ada:	061a      	lsls	r2, r3, #24
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	430a      	orrs	r2, r1
 8004ae2:	605a      	str	r2, [r3, #4]
  }

  /* Set the wake up method by setting the WAKE bit in the CR1 register */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_WAKE, WakeUpMethod);
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f423 6100 	bic.w	r1, r3, #2048	@ 0x800
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	687a      	ldr	r2, [r7, #4]
 8004af4:	430a      	orrs	r2, r1
 8004af6:	601a      	str	r2, [r3, #0]

  __HAL_UART_ENABLE(huart);
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	681a      	ldr	r2, [r3, #0]
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f042 0201 	orr.w	r2, r2, #1
 8004b06:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004b08:	68f8      	ldr	r0, [r7, #12]
 8004b0a:	f000 fd6d 	bl	80055e8 <UART_CheckIdleState>
 8004b0e:	4603      	mov	r3, r0
}
 8004b10:	4618      	mov	r0, r3
 8004b12:	3710      	adds	r7, #16
 8004b14:	46bd      	mov	sp, r7
 8004b16:	bd80      	pop	{r7, pc}

08004b18 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b18:	b580      	push	{r7, lr}
 8004b1a:	b08a      	sub	sp, #40	@ 0x28
 8004b1c:	af02      	add	r7, sp, #8
 8004b1e:	60f8      	str	r0, [r7, #12]
 8004b20:	60b9      	str	r1, [r7, #8]
 8004b22:	603b      	str	r3, [r7, #0]
 8004b24:	4613      	mov	r3, r2
 8004b26:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004b2c:	2b20      	cmp	r3, #32
 8004b2e:	d177      	bne.n	8004c20 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8004b30:	68bb      	ldr	r3, [r7, #8]
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d002      	beq.n	8004b3c <HAL_UART_Transmit+0x24>
 8004b36:	88fb      	ldrh	r3, [r7, #6]
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d101      	bne.n	8004b40 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004b3c:	2301      	movs	r3, #1
 8004b3e:	e070      	b.n	8004c22 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	2200      	movs	r2, #0
 8004b44:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	2221      	movs	r2, #33	@ 0x21
 8004b4c:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004b4e:	f7fc feb3 	bl	80018b8 <HAL_GetTick>
 8004b52:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	88fa      	ldrh	r2, [r7, #6]
 8004b58:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	88fa      	ldrh	r2, [r7, #6]
 8004b60:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	689b      	ldr	r3, [r3, #8]
 8004b68:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004b6c:	d108      	bne.n	8004b80 <HAL_UART_Transmit+0x68>
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	691b      	ldr	r3, [r3, #16]
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d104      	bne.n	8004b80 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8004b76:	2300      	movs	r3, #0
 8004b78:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004b7a:	68bb      	ldr	r3, [r7, #8]
 8004b7c:	61bb      	str	r3, [r7, #24]
 8004b7e:	e003      	b.n	8004b88 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8004b80:	68bb      	ldr	r3, [r7, #8]
 8004b82:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004b84:	2300      	movs	r3, #0
 8004b86:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004b88:	e02f      	b.n	8004bea <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004b8a:	683b      	ldr	r3, [r7, #0]
 8004b8c:	9300      	str	r3, [sp, #0]
 8004b8e:	697b      	ldr	r3, [r7, #20]
 8004b90:	2200      	movs	r2, #0
 8004b92:	2180      	movs	r1, #128	@ 0x80
 8004b94:	68f8      	ldr	r0, [r7, #12]
 8004b96:	f000 fdcf 	bl	8005738 <UART_WaitOnFlagUntilTimeout>
 8004b9a:	4603      	mov	r3, r0
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d004      	beq.n	8004baa <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	2220      	movs	r2, #32
 8004ba4:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8004ba6:	2303      	movs	r3, #3
 8004ba8:	e03b      	b.n	8004c22 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8004baa:	69fb      	ldr	r3, [r7, #28]
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d10b      	bne.n	8004bc8 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004bb0:	69bb      	ldr	r3, [r7, #24]
 8004bb2:	881a      	ldrh	r2, [r3, #0]
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004bbc:	b292      	uxth	r2, r2
 8004bbe:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8004bc0:	69bb      	ldr	r3, [r7, #24]
 8004bc2:	3302      	adds	r3, #2
 8004bc4:	61bb      	str	r3, [r7, #24]
 8004bc6:	e007      	b.n	8004bd8 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004bc8:	69fb      	ldr	r3, [r7, #28]
 8004bca:	781a      	ldrb	r2, [r3, #0]
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8004bd2:	69fb      	ldr	r3, [r7, #28]
 8004bd4:	3301      	adds	r3, #1
 8004bd6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004bde:	b29b      	uxth	r3, r3
 8004be0:	3b01      	subs	r3, #1
 8004be2:	b29a      	uxth	r2, r3
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004bf0:	b29b      	uxth	r3, r3
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d1c9      	bne.n	8004b8a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004bf6:	683b      	ldr	r3, [r7, #0]
 8004bf8:	9300      	str	r3, [sp, #0]
 8004bfa:	697b      	ldr	r3, [r7, #20]
 8004bfc:	2200      	movs	r2, #0
 8004bfe:	2140      	movs	r1, #64	@ 0x40
 8004c00:	68f8      	ldr	r0, [r7, #12]
 8004c02:	f000 fd99 	bl	8005738 <UART_WaitOnFlagUntilTimeout>
 8004c06:	4603      	mov	r3, r0
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d004      	beq.n	8004c16 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	2220      	movs	r2, #32
 8004c10:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8004c12:	2303      	movs	r3, #3
 8004c14:	e005      	b.n	8004c22 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	2220      	movs	r2, #32
 8004c1a:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8004c1c:	2300      	movs	r3, #0
 8004c1e:	e000      	b.n	8004c22 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8004c20:	2302      	movs	r3, #2
  }
}
 8004c22:	4618      	mov	r0, r3
 8004c24:	3720      	adds	r7, #32
 8004c26:	46bd      	mov	sp, r7
 8004c28:	bd80      	pop	{r7, pc}
	...

08004c2c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004c2c:	b580      	push	{r7, lr}
 8004c2e:	b0ba      	sub	sp, #232	@ 0xe8
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	69db      	ldr	r3, [r3, #28]
 8004c3a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	689b      	ldr	r3, [r3, #8]
 8004c4e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004c52:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8004c56:	f640 030f 	movw	r3, #2063	@ 0x80f
 8004c5a:	4013      	ands	r3, r2
 8004c5c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8004c60:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d115      	bne.n	8004c94 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004c68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004c6c:	f003 0320 	and.w	r3, r3, #32
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d00f      	beq.n	8004c94 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004c74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004c78:	f003 0320 	and.w	r3, r3, #32
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d009      	beq.n	8004c94 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	f000 82ab 	beq.w	80051e0 <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004c8e:	6878      	ldr	r0, [r7, #4]
 8004c90:	4798      	blx	r3
      }
      return;
 8004c92:	e2a5      	b.n	80051e0 <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004c94:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	f000 8117 	beq.w	8004ecc <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004c9e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004ca2:	f003 0301 	and.w	r3, r3, #1
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d106      	bne.n	8004cb8 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004caa:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8004cae:	4b85      	ldr	r3, [pc, #532]	@ (8004ec4 <HAL_UART_IRQHandler+0x298>)
 8004cb0:	4013      	ands	r3, r2
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	f000 810a 	beq.w	8004ecc <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004cb8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004cbc:	f003 0301 	and.w	r3, r3, #1
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d011      	beq.n	8004ce8 <HAL_UART_IRQHandler+0xbc>
 8004cc4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004cc8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d00b      	beq.n	8004ce8 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	2201      	movs	r2, #1
 8004cd6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004cde:	f043 0201 	orr.w	r2, r3, #1
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004ce8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004cec:	f003 0302 	and.w	r3, r3, #2
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d011      	beq.n	8004d18 <HAL_UART_IRQHandler+0xec>
 8004cf4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004cf8:	f003 0301 	and.w	r3, r3, #1
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d00b      	beq.n	8004d18 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	2202      	movs	r2, #2
 8004d06:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004d0e:	f043 0204 	orr.w	r2, r3, #4
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004d18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004d1c:	f003 0304 	and.w	r3, r3, #4
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d011      	beq.n	8004d48 <HAL_UART_IRQHandler+0x11c>
 8004d24:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004d28:	f003 0301 	and.w	r3, r3, #1
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d00b      	beq.n	8004d48 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	2204      	movs	r2, #4
 8004d36:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004d3e:	f043 0202 	orr.w	r2, r3, #2
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004d48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004d4c:	f003 0308 	and.w	r3, r3, #8
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d017      	beq.n	8004d84 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004d54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004d58:	f003 0320 	and.w	r3, r3, #32
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d105      	bne.n	8004d6c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004d60:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004d64:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d00b      	beq.n	8004d84 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	2208      	movs	r2, #8
 8004d72:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004d7a:	f043 0208 	orr.w	r2, r3, #8
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004d84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004d88:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d012      	beq.n	8004db6 <HAL_UART_IRQHandler+0x18a>
 8004d90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004d94:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d00c      	beq.n	8004db6 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004da4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004dac:	f043 0220 	orr.w	r2, r3, #32
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	f000 8211 	beq.w	80051e4 <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004dc2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004dc6:	f003 0320 	and.w	r3, r3, #32
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d00d      	beq.n	8004dea <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004dce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004dd2:	f003 0320 	and.w	r3, r3, #32
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d007      	beq.n	8004dea <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d003      	beq.n	8004dea <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004de6:	6878      	ldr	r0, [r7, #4]
 8004de8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004df0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	689b      	ldr	r3, [r3, #8]
 8004dfa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004dfe:	2b40      	cmp	r3, #64	@ 0x40
 8004e00:	d005      	beq.n	8004e0e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004e02:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004e06:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d04f      	beq.n	8004eae <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004e0e:	6878      	ldr	r0, [r7, #4]
 8004e10:	f000 fcff 	bl	8005812 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	689b      	ldr	r3, [r3, #8]
 8004e1a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e1e:	2b40      	cmp	r3, #64	@ 0x40
 8004e20:	d141      	bne.n	8004ea6 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	3308      	adds	r3, #8
 8004e28:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e2c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004e30:	e853 3f00 	ldrex	r3, [r3]
 8004e34:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004e38:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004e3c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004e40:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	3308      	adds	r3, #8
 8004e4a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004e4e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004e52:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e56:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004e5a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004e5e:	e841 2300 	strex	r3, r2, [r1]
 8004e62:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004e66:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d1d9      	bne.n	8004e22 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d013      	beq.n	8004e9e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004e7a:	4a13      	ldr	r2, [pc, #76]	@ (8004ec8 <HAL_UART_IRQHandler+0x29c>)
 8004e7c:	635a      	str	r2, [r3, #52]	@ 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004e82:	4618      	mov	r0, r3
 8004e84:	f7fc ff6f 	bl	8001d66 <HAL_DMA_Abort_IT>
 8004e88:	4603      	mov	r3, r0
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d017      	beq.n	8004ebe <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004e92:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e94:	687a      	ldr	r2, [r7, #4]
 8004e96:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8004e98:	4610      	mov	r0, r2
 8004e9a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e9c:	e00f      	b.n	8004ebe <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004e9e:	6878      	ldr	r0, [r7, #4]
 8004ea0:	f000 f9b4 	bl	800520c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ea4:	e00b      	b.n	8004ebe <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004ea6:	6878      	ldr	r0, [r7, #4]
 8004ea8:	f000 f9b0 	bl	800520c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004eac:	e007      	b.n	8004ebe <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004eae:	6878      	ldr	r0, [r7, #4]
 8004eb0:	f000 f9ac 	bl	800520c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	2200      	movs	r2, #0
 8004eb8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8004ebc:	e192      	b.n	80051e4 <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ebe:	bf00      	nop
    return;
 8004ec0:	e190      	b.n	80051e4 <HAL_UART_IRQHandler+0x5b8>
 8004ec2:	bf00      	nop
 8004ec4:	04000120 	.word	0x04000120
 8004ec8:	080058db 	.word	0x080058db

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004ed0:	2b01      	cmp	r3, #1
 8004ed2:	f040 814b 	bne.w	800516c <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004ed6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004eda:	f003 0310 	and.w	r3, r3, #16
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	f000 8144 	beq.w	800516c <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004ee4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004ee8:	f003 0310 	and.w	r3, r3, #16
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	f000 813d 	beq.w	800516c <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	2210      	movs	r2, #16
 8004ef8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	689b      	ldr	r3, [r3, #8]
 8004f00:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f04:	2b40      	cmp	r3, #64	@ 0x40
 8004f06:	f040 80b5 	bne.w	8005074 <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	685b      	ldr	r3, [r3, #4]
 8004f12:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004f16:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	f000 8164 	beq.w	80051e8 <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8004f26:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004f2a:	429a      	cmp	r2, r3
 8004f2c:	f080 815c 	bcs.w	80051e8 <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004f36:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004f3e:	699b      	ldr	r3, [r3, #24]
 8004f40:	2b20      	cmp	r3, #32
 8004f42:	f000 8086 	beq.w	8005052 <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f4e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004f52:	e853 3f00 	ldrex	r3, [r3]
 8004f56:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004f5a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004f5e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004f62:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	461a      	mov	r2, r3
 8004f6c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8004f70:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004f74:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f78:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004f7c:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004f80:	e841 2300 	strex	r3, r2, [r1]
 8004f84:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004f88:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d1da      	bne.n	8004f46 <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	3308      	adds	r3, #8
 8004f96:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f98:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004f9a:	e853 3f00 	ldrex	r3, [r3]
 8004f9e:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004fa0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004fa2:	f023 0301 	bic.w	r3, r3, #1
 8004fa6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	3308      	adds	r3, #8
 8004fb0:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004fb4:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004fb8:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fba:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004fbc:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004fc0:	e841 2300 	strex	r3, r2, [r1]
 8004fc4:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004fc6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d1e1      	bne.n	8004f90 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	3308      	adds	r3, #8
 8004fd2:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fd4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004fd6:	e853 3f00 	ldrex	r3, [r3]
 8004fda:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004fdc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004fde:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004fe2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	3308      	adds	r3, #8
 8004fec:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004ff0:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004ff2:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ff4:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004ff6:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004ff8:	e841 2300 	strex	r3, r2, [r1]
 8004ffc:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004ffe:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005000:	2b00      	cmp	r3, #0
 8005002:	d1e3      	bne.n	8004fcc <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	2220      	movs	r2, #32
 8005008:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2200      	movs	r2, #0
 8005010:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005018:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800501a:	e853 3f00 	ldrex	r3, [r3]
 800501e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005020:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005022:	f023 0310 	bic.w	r3, r3, #16
 8005026:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	461a      	mov	r2, r3
 8005030:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005034:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005036:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005038:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800503a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800503c:	e841 2300 	strex	r3, r2, [r1]
 8005040:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005042:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005044:	2b00      	cmp	r3, #0
 8005046:	d1e4      	bne.n	8005012 <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800504c:	4618      	mov	r0, r3
 800504e:	f7fc fe4c 	bl	8001cea <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	2202      	movs	r2, #2
 8005056:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005064:	b29b      	uxth	r3, r3
 8005066:	1ad3      	subs	r3, r2, r3
 8005068:	b29b      	uxth	r3, r3
 800506a:	4619      	mov	r1, r3
 800506c:	6878      	ldr	r0, [r7, #4]
 800506e:	f000 f8d7 	bl	8005220 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005072:	e0b9      	b.n	80051e8 <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005080:	b29b      	uxth	r3, r3
 8005082:	1ad3      	subs	r3, r2, r3
 8005084:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800508e:	b29b      	uxth	r3, r3
 8005090:	2b00      	cmp	r3, #0
 8005092:	f000 80ab 	beq.w	80051ec <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 8005096:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800509a:	2b00      	cmp	r3, #0
 800509c:	f000 80a6 	beq.w	80051ec <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050a8:	e853 3f00 	ldrex	r3, [r3]
 80050ac:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80050ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80050b0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80050b4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	461a      	mov	r2, r3
 80050be:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80050c2:	647b      	str	r3, [r7, #68]	@ 0x44
 80050c4:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050c6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80050c8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80050ca:	e841 2300 	strex	r3, r2, [r1]
 80050ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80050d0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d1e4      	bne.n	80050a0 <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	3308      	adds	r3, #8
 80050dc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050e0:	e853 3f00 	ldrex	r3, [r3]
 80050e4:	623b      	str	r3, [r7, #32]
   return(result);
 80050e6:	6a3b      	ldr	r3, [r7, #32]
 80050e8:	f023 0301 	bic.w	r3, r3, #1
 80050ec:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	3308      	adds	r3, #8
 80050f6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80050fa:	633a      	str	r2, [r7, #48]	@ 0x30
 80050fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050fe:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005100:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005102:	e841 2300 	strex	r3, r2, [r1]
 8005106:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005108:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800510a:	2b00      	cmp	r3, #0
 800510c:	d1e3      	bne.n	80050d6 <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	2220      	movs	r2, #32
 8005112:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	2200      	movs	r2, #0
 800511a:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	2200      	movs	r2, #0
 8005120:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005128:	693b      	ldr	r3, [r7, #16]
 800512a:	e853 3f00 	ldrex	r3, [r3]
 800512e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	f023 0310 	bic.w	r3, r3, #16
 8005136:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	461a      	mov	r2, r3
 8005140:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8005144:	61fb      	str	r3, [r7, #28]
 8005146:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005148:	69b9      	ldr	r1, [r7, #24]
 800514a:	69fa      	ldr	r2, [r7, #28]
 800514c:	e841 2300 	strex	r3, r2, [r1]
 8005150:	617b      	str	r3, [r7, #20]
   return(result);
 8005152:	697b      	ldr	r3, [r7, #20]
 8005154:	2b00      	cmp	r3, #0
 8005156:	d1e4      	bne.n	8005122 <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	2202      	movs	r2, #2
 800515c:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800515e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005162:	4619      	mov	r1, r3
 8005164:	6878      	ldr	r0, [r7, #4]
 8005166:	f000 f85b 	bl	8005220 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800516a:	e03f      	b.n	80051ec <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800516c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005170:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005174:	2b00      	cmp	r3, #0
 8005176:	d00e      	beq.n	8005196 <HAL_UART_IRQHandler+0x56a>
 8005178:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800517c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005180:	2b00      	cmp	r3, #0
 8005182:	d008      	beq.n	8005196 <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800518c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800518e:	6878      	ldr	r0, [r7, #4]
 8005190:	f000 fbe3 	bl	800595a <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005194:	e02d      	b.n	80051f2 <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005196:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800519a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d00e      	beq.n	80051c0 <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80051a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80051a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d008      	beq.n	80051c0 <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d01c      	beq.n	80051f0 <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80051ba:	6878      	ldr	r0, [r7, #4]
 80051bc:	4798      	blx	r3
    }
    return;
 80051be:	e017      	b.n	80051f0 <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80051c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80051c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d012      	beq.n	80051f2 <HAL_UART_IRQHandler+0x5c6>
 80051cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80051d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d00c      	beq.n	80051f2 <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 80051d8:	6878      	ldr	r0, [r7, #4]
 80051da:	f000 fb94 	bl	8005906 <UART_EndTransmit_IT>
    return;
 80051de:	e008      	b.n	80051f2 <HAL_UART_IRQHandler+0x5c6>
      return;
 80051e0:	bf00      	nop
 80051e2:	e006      	b.n	80051f2 <HAL_UART_IRQHandler+0x5c6>
    return;
 80051e4:	bf00      	nop
 80051e6:	e004      	b.n	80051f2 <HAL_UART_IRQHandler+0x5c6>
      return;
 80051e8:	bf00      	nop
 80051ea:	e002      	b.n	80051f2 <HAL_UART_IRQHandler+0x5c6>
      return;
 80051ec:	bf00      	nop
 80051ee:	e000      	b.n	80051f2 <HAL_UART_IRQHandler+0x5c6>
    return;
 80051f0:	bf00      	nop
  }

}
 80051f2:	37e8      	adds	r7, #232	@ 0xe8
 80051f4:	46bd      	mov	sp, r7
 80051f6:	bd80      	pop	{r7, pc}

080051f8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80051f8:	b480      	push	{r7}
 80051fa:	b083      	sub	sp, #12
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005200:	bf00      	nop
 8005202:	370c      	adds	r7, #12
 8005204:	46bd      	mov	sp, r7
 8005206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520a:	4770      	bx	lr

0800520c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800520c:	b480      	push	{r7}
 800520e:	b083      	sub	sp, #12
 8005210:	af00      	add	r7, sp, #0
 8005212:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005214:	bf00      	nop
 8005216:	370c      	adds	r7, #12
 8005218:	46bd      	mov	sp, r7
 800521a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800521e:	4770      	bx	lr

08005220 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005220:	b480      	push	{r7}
 8005222:	b083      	sub	sp, #12
 8005224:	af00      	add	r7, sp, #0
 8005226:	6078      	str	r0, [r7, #4]
 8005228:	460b      	mov	r3, r1
 800522a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800522c:	bf00      	nop
 800522e:	370c      	adds	r7, #12
 8005230:	46bd      	mov	sp, r7
 8005232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005236:	4770      	bx	lr

08005238 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005238:	b580      	push	{r7, lr}
 800523a:	b088      	sub	sp, #32
 800523c:	af00      	add	r7, sp, #0
 800523e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005240:	2300      	movs	r3, #0
 8005242:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	689a      	ldr	r2, [r3, #8]
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	691b      	ldr	r3, [r3, #16]
 800524c:	431a      	orrs	r2, r3
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	695b      	ldr	r3, [r3, #20]
 8005252:	431a      	orrs	r2, r3
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	69db      	ldr	r3, [r3, #28]
 8005258:	4313      	orrs	r3, r2
 800525a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	681a      	ldr	r2, [r3, #0]
 8005262:	4b8a      	ldr	r3, [pc, #552]	@ (800548c <UART_SetConfig+0x254>)
 8005264:	4013      	ands	r3, r2
 8005266:	687a      	ldr	r2, [r7, #4]
 8005268:	6812      	ldr	r2, [r2, #0]
 800526a:	6979      	ldr	r1, [r7, #20]
 800526c:	430b      	orrs	r3, r1
 800526e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	685b      	ldr	r3, [r3, #4]
 8005276:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	68da      	ldr	r2, [r3, #12]
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	430a      	orrs	r2, r1
 8005284:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	699b      	ldr	r3, [r3, #24]
 800528a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	6a1b      	ldr	r3, [r3, #32]
 8005290:	697a      	ldr	r2, [r7, #20]
 8005292:	4313      	orrs	r3, r2
 8005294:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	689b      	ldr	r3, [r3, #8]
 800529c:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	697a      	ldr	r2, [r7, #20]
 80052a6:	430a      	orrs	r2, r1
 80052a8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	4a78      	ldr	r2, [pc, #480]	@ (8005490 <UART_SetConfig+0x258>)
 80052b0:	4293      	cmp	r3, r2
 80052b2:	d120      	bne.n	80052f6 <UART_SetConfig+0xbe>
 80052b4:	4b77      	ldr	r3, [pc, #476]	@ (8005494 <UART_SetConfig+0x25c>)
 80052b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052b8:	f003 0303 	and.w	r3, r3, #3
 80052bc:	2b03      	cmp	r3, #3
 80052be:	d817      	bhi.n	80052f0 <UART_SetConfig+0xb8>
 80052c0:	a201      	add	r2, pc, #4	@ (adr r2, 80052c8 <UART_SetConfig+0x90>)
 80052c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052c6:	bf00      	nop
 80052c8:	080052d9 	.word	0x080052d9
 80052cc:	080052e5 	.word	0x080052e5
 80052d0:	080052eb 	.word	0x080052eb
 80052d4:	080052df 	.word	0x080052df
 80052d8:	2300      	movs	r3, #0
 80052da:	77fb      	strb	r3, [r7, #31]
 80052dc:	e01d      	b.n	800531a <UART_SetConfig+0xe2>
 80052de:	2302      	movs	r3, #2
 80052e0:	77fb      	strb	r3, [r7, #31]
 80052e2:	e01a      	b.n	800531a <UART_SetConfig+0xe2>
 80052e4:	2304      	movs	r3, #4
 80052e6:	77fb      	strb	r3, [r7, #31]
 80052e8:	e017      	b.n	800531a <UART_SetConfig+0xe2>
 80052ea:	2308      	movs	r3, #8
 80052ec:	77fb      	strb	r3, [r7, #31]
 80052ee:	e014      	b.n	800531a <UART_SetConfig+0xe2>
 80052f0:	2310      	movs	r3, #16
 80052f2:	77fb      	strb	r3, [r7, #31]
 80052f4:	e011      	b.n	800531a <UART_SetConfig+0xe2>
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	4a67      	ldr	r2, [pc, #412]	@ (8005498 <UART_SetConfig+0x260>)
 80052fc:	4293      	cmp	r3, r2
 80052fe:	d102      	bne.n	8005306 <UART_SetConfig+0xce>
 8005300:	2300      	movs	r3, #0
 8005302:	77fb      	strb	r3, [r7, #31]
 8005304:	e009      	b.n	800531a <UART_SetConfig+0xe2>
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	4a64      	ldr	r2, [pc, #400]	@ (800549c <UART_SetConfig+0x264>)
 800530c:	4293      	cmp	r3, r2
 800530e:	d102      	bne.n	8005316 <UART_SetConfig+0xde>
 8005310:	2300      	movs	r3, #0
 8005312:	77fb      	strb	r3, [r7, #31]
 8005314:	e001      	b.n	800531a <UART_SetConfig+0xe2>
 8005316:	2310      	movs	r3, #16
 8005318:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	69db      	ldr	r3, [r3, #28]
 800531e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005322:	d15a      	bne.n	80053da <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 8005324:	7ffb      	ldrb	r3, [r7, #31]
 8005326:	2b08      	cmp	r3, #8
 8005328:	d827      	bhi.n	800537a <UART_SetConfig+0x142>
 800532a:	a201      	add	r2, pc, #4	@ (adr r2, 8005330 <UART_SetConfig+0xf8>)
 800532c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005330:	08005355 	.word	0x08005355
 8005334:	0800535d 	.word	0x0800535d
 8005338:	08005365 	.word	0x08005365
 800533c:	0800537b 	.word	0x0800537b
 8005340:	0800536b 	.word	0x0800536b
 8005344:	0800537b 	.word	0x0800537b
 8005348:	0800537b 	.word	0x0800537b
 800534c:	0800537b 	.word	0x0800537b
 8005350:	08005373 	.word	0x08005373
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005354:	f7fe f902 	bl	800355c <HAL_RCC_GetPCLK1Freq>
 8005358:	61b8      	str	r0, [r7, #24]
        break;
 800535a:	e013      	b.n	8005384 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800535c:	f7fe f920 	bl	80035a0 <HAL_RCC_GetPCLK2Freq>
 8005360:	61b8      	str	r0, [r7, #24]
        break;
 8005362:	e00f      	b.n	8005384 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005364:	4b4e      	ldr	r3, [pc, #312]	@ (80054a0 <UART_SetConfig+0x268>)
 8005366:	61bb      	str	r3, [r7, #24]
        break;
 8005368:	e00c      	b.n	8005384 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800536a:	f7fe f897 	bl	800349c <HAL_RCC_GetSysClockFreq>
 800536e:	61b8      	str	r0, [r7, #24]
        break;
 8005370:	e008      	b.n	8005384 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005372:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005376:	61bb      	str	r3, [r7, #24]
        break;
 8005378:	e004      	b.n	8005384 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 800537a:	2300      	movs	r3, #0
 800537c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800537e:	2301      	movs	r3, #1
 8005380:	77bb      	strb	r3, [r7, #30]
        break;
 8005382:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005384:	69bb      	ldr	r3, [r7, #24]
 8005386:	2b00      	cmp	r3, #0
 8005388:	d074      	beq.n	8005474 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800538a:	69bb      	ldr	r3, [r7, #24]
 800538c:	005a      	lsls	r2, r3, #1
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	685b      	ldr	r3, [r3, #4]
 8005392:	085b      	lsrs	r3, r3, #1
 8005394:	441a      	add	r2, r3
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	685b      	ldr	r3, [r3, #4]
 800539a:	fbb2 f3f3 	udiv	r3, r2, r3
 800539e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80053a0:	693b      	ldr	r3, [r7, #16]
 80053a2:	2b0f      	cmp	r3, #15
 80053a4:	d916      	bls.n	80053d4 <UART_SetConfig+0x19c>
 80053a6:	693b      	ldr	r3, [r7, #16]
 80053a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80053ac:	d212      	bcs.n	80053d4 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80053ae:	693b      	ldr	r3, [r7, #16]
 80053b0:	b29b      	uxth	r3, r3
 80053b2:	f023 030f 	bic.w	r3, r3, #15
 80053b6:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80053b8:	693b      	ldr	r3, [r7, #16]
 80053ba:	085b      	lsrs	r3, r3, #1
 80053bc:	b29b      	uxth	r3, r3
 80053be:	f003 0307 	and.w	r3, r3, #7
 80053c2:	b29a      	uxth	r2, r3
 80053c4:	89fb      	ldrh	r3, [r7, #14]
 80053c6:	4313      	orrs	r3, r2
 80053c8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	89fa      	ldrh	r2, [r7, #14]
 80053d0:	60da      	str	r2, [r3, #12]
 80053d2:	e04f      	b.n	8005474 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 80053d4:	2301      	movs	r3, #1
 80053d6:	77bb      	strb	r3, [r7, #30]
 80053d8:	e04c      	b.n	8005474 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80053da:	7ffb      	ldrb	r3, [r7, #31]
 80053dc:	2b08      	cmp	r3, #8
 80053de:	d828      	bhi.n	8005432 <UART_SetConfig+0x1fa>
 80053e0:	a201      	add	r2, pc, #4	@ (adr r2, 80053e8 <UART_SetConfig+0x1b0>)
 80053e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053e6:	bf00      	nop
 80053e8:	0800540d 	.word	0x0800540d
 80053ec:	08005415 	.word	0x08005415
 80053f0:	0800541d 	.word	0x0800541d
 80053f4:	08005433 	.word	0x08005433
 80053f8:	08005423 	.word	0x08005423
 80053fc:	08005433 	.word	0x08005433
 8005400:	08005433 	.word	0x08005433
 8005404:	08005433 	.word	0x08005433
 8005408:	0800542b 	.word	0x0800542b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800540c:	f7fe f8a6 	bl	800355c <HAL_RCC_GetPCLK1Freq>
 8005410:	61b8      	str	r0, [r7, #24]
        break;
 8005412:	e013      	b.n	800543c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005414:	f7fe f8c4 	bl	80035a0 <HAL_RCC_GetPCLK2Freq>
 8005418:	61b8      	str	r0, [r7, #24]
        break;
 800541a:	e00f      	b.n	800543c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800541c:	4b20      	ldr	r3, [pc, #128]	@ (80054a0 <UART_SetConfig+0x268>)
 800541e:	61bb      	str	r3, [r7, #24]
        break;
 8005420:	e00c      	b.n	800543c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005422:	f7fe f83b 	bl	800349c <HAL_RCC_GetSysClockFreq>
 8005426:	61b8      	str	r0, [r7, #24]
        break;
 8005428:	e008      	b.n	800543c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800542a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800542e:	61bb      	str	r3, [r7, #24]
        break;
 8005430:	e004      	b.n	800543c <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8005432:	2300      	movs	r3, #0
 8005434:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005436:	2301      	movs	r3, #1
 8005438:	77bb      	strb	r3, [r7, #30]
        break;
 800543a:	bf00      	nop
    }

    if (pclk != 0U)
 800543c:	69bb      	ldr	r3, [r7, #24]
 800543e:	2b00      	cmp	r3, #0
 8005440:	d018      	beq.n	8005474 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	685b      	ldr	r3, [r3, #4]
 8005446:	085a      	lsrs	r2, r3, #1
 8005448:	69bb      	ldr	r3, [r7, #24]
 800544a:	441a      	add	r2, r3
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	685b      	ldr	r3, [r3, #4]
 8005450:	fbb2 f3f3 	udiv	r3, r2, r3
 8005454:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005456:	693b      	ldr	r3, [r7, #16]
 8005458:	2b0f      	cmp	r3, #15
 800545a:	d909      	bls.n	8005470 <UART_SetConfig+0x238>
 800545c:	693b      	ldr	r3, [r7, #16]
 800545e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005462:	d205      	bcs.n	8005470 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005464:	693b      	ldr	r3, [r7, #16]
 8005466:	b29a      	uxth	r2, r3
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	60da      	str	r2, [r3, #12]
 800546e:	e001      	b.n	8005474 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8005470:	2301      	movs	r3, #1
 8005472:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	2200      	movs	r2, #0
 8005478:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	2200      	movs	r2, #0
 800547e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8005480:	7fbb      	ldrb	r3, [r7, #30]
}
 8005482:	4618      	mov	r0, r3
 8005484:	3720      	adds	r7, #32
 8005486:	46bd      	mov	sp, r7
 8005488:	bd80      	pop	{r7, pc}
 800548a:	bf00      	nop
 800548c:	efff69f3 	.word	0xefff69f3
 8005490:	40013800 	.word	0x40013800
 8005494:	40021000 	.word	0x40021000
 8005498:	40004400 	.word	0x40004400
 800549c:	40004800 	.word	0x40004800
 80054a0:	007a1200 	.word	0x007a1200

080054a4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80054a4:	b480      	push	{r7}
 80054a6:	b083      	sub	sp, #12
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054b0:	f003 0308 	and.w	r3, r3, #8
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d00a      	beq.n	80054ce <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	685b      	ldr	r3, [r3, #4]
 80054be:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	430a      	orrs	r2, r1
 80054cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054d2:	f003 0301 	and.w	r3, r3, #1
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d00a      	beq.n	80054f0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	685b      	ldr	r3, [r3, #4]
 80054e0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	430a      	orrs	r2, r1
 80054ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054f4:	f003 0302 	and.w	r3, r3, #2
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d00a      	beq.n	8005512 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	685b      	ldr	r3, [r3, #4]
 8005502:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	430a      	orrs	r2, r1
 8005510:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005516:	f003 0304 	and.w	r3, r3, #4
 800551a:	2b00      	cmp	r3, #0
 800551c:	d00a      	beq.n	8005534 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	685b      	ldr	r3, [r3, #4]
 8005524:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	430a      	orrs	r2, r1
 8005532:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005538:	f003 0310 	and.w	r3, r3, #16
 800553c:	2b00      	cmp	r3, #0
 800553e:	d00a      	beq.n	8005556 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	689b      	ldr	r3, [r3, #8]
 8005546:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	430a      	orrs	r2, r1
 8005554:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800555a:	f003 0320 	and.w	r3, r3, #32
 800555e:	2b00      	cmp	r3, #0
 8005560:	d00a      	beq.n	8005578 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	689b      	ldr	r3, [r3, #8]
 8005568:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	430a      	orrs	r2, r1
 8005576:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800557c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005580:	2b00      	cmp	r3, #0
 8005582:	d01a      	beq.n	80055ba <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	685b      	ldr	r3, [r3, #4]
 800558a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	430a      	orrs	r2, r1
 8005598:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800559e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80055a2:	d10a      	bne.n	80055ba <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	685b      	ldr	r3, [r3, #4]
 80055aa:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	430a      	orrs	r2, r1
 80055b8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d00a      	beq.n	80055dc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	685b      	ldr	r3, [r3, #4]
 80055cc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	430a      	orrs	r2, r1
 80055da:	605a      	str	r2, [r3, #4]
  }
}
 80055dc:	bf00      	nop
 80055de:	370c      	adds	r7, #12
 80055e0:	46bd      	mov	sp, r7
 80055e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e6:	4770      	bx	lr

080055e8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80055e8:	b580      	push	{r7, lr}
 80055ea:	b098      	sub	sp, #96	@ 0x60
 80055ec:	af02      	add	r7, sp, #8
 80055ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	2200      	movs	r2, #0
 80055f4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80055f8:	f7fc f95e 	bl	80018b8 <HAL_GetTick>
 80055fc:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	f003 0308 	and.w	r3, r3, #8
 8005608:	2b08      	cmp	r3, #8
 800560a:	d12e      	bne.n	800566a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800560c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005610:	9300      	str	r3, [sp, #0]
 8005612:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005614:	2200      	movs	r2, #0
 8005616:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800561a:	6878      	ldr	r0, [r7, #4]
 800561c:	f000 f88c 	bl	8005738 <UART_WaitOnFlagUntilTimeout>
 8005620:	4603      	mov	r3, r0
 8005622:	2b00      	cmp	r3, #0
 8005624:	d021      	beq.n	800566a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800562c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800562e:	e853 3f00 	ldrex	r3, [r3]
 8005632:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005634:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005636:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800563a:	653b      	str	r3, [r7, #80]	@ 0x50
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	461a      	mov	r2, r3
 8005642:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005644:	647b      	str	r3, [r7, #68]	@ 0x44
 8005646:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005648:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800564a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800564c:	e841 2300 	strex	r3, r2, [r1]
 8005650:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005652:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005654:	2b00      	cmp	r3, #0
 8005656:	d1e6      	bne.n	8005626 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	2220      	movs	r2, #32
 800565c:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	2200      	movs	r2, #0
 8005662:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005666:	2303      	movs	r3, #3
 8005668:	e062      	b.n	8005730 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	f003 0304 	and.w	r3, r3, #4
 8005674:	2b04      	cmp	r3, #4
 8005676:	d149      	bne.n	800570c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005678:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800567c:	9300      	str	r3, [sp, #0]
 800567e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005680:	2200      	movs	r2, #0
 8005682:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005686:	6878      	ldr	r0, [r7, #4]
 8005688:	f000 f856 	bl	8005738 <UART_WaitOnFlagUntilTimeout>
 800568c:	4603      	mov	r3, r0
 800568e:	2b00      	cmp	r3, #0
 8005690:	d03c      	beq.n	800570c <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005698:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800569a:	e853 3f00 	ldrex	r3, [r3]
 800569e:	623b      	str	r3, [r7, #32]
   return(result);
 80056a0:	6a3b      	ldr	r3, [r7, #32]
 80056a2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80056a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	461a      	mov	r2, r3
 80056ae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80056b0:	633b      	str	r3, [r7, #48]	@ 0x30
 80056b2:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056b4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80056b6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80056b8:	e841 2300 	strex	r3, r2, [r1]
 80056bc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80056be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d1e6      	bne.n	8005692 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	3308      	adds	r3, #8
 80056ca:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056cc:	693b      	ldr	r3, [r7, #16]
 80056ce:	e853 3f00 	ldrex	r3, [r3]
 80056d2:	60fb      	str	r3, [r7, #12]
   return(result);
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	f023 0301 	bic.w	r3, r3, #1
 80056da:	64bb      	str	r3, [r7, #72]	@ 0x48
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	3308      	adds	r3, #8
 80056e2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80056e4:	61fa      	str	r2, [r7, #28]
 80056e6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056e8:	69b9      	ldr	r1, [r7, #24]
 80056ea:	69fa      	ldr	r2, [r7, #28]
 80056ec:	e841 2300 	strex	r3, r2, [r1]
 80056f0:	617b      	str	r3, [r7, #20]
   return(result);
 80056f2:	697b      	ldr	r3, [r7, #20]
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d1e5      	bne.n	80056c4 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	2220      	movs	r2, #32
 80056fc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	2200      	movs	r2, #0
 8005704:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005708:	2303      	movs	r3, #3
 800570a:	e011      	b.n	8005730 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	2220      	movs	r2, #32
 8005710:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	2220      	movs	r2, #32
 8005716:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	2200      	movs	r2, #0
 800571e:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	2200      	movs	r2, #0
 8005724:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	2200      	movs	r2, #0
 800572a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800572e:	2300      	movs	r3, #0
}
 8005730:	4618      	mov	r0, r3
 8005732:	3758      	adds	r7, #88	@ 0x58
 8005734:	46bd      	mov	sp, r7
 8005736:	bd80      	pop	{r7, pc}

08005738 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005738:	b580      	push	{r7, lr}
 800573a:	b084      	sub	sp, #16
 800573c:	af00      	add	r7, sp, #0
 800573e:	60f8      	str	r0, [r7, #12]
 8005740:	60b9      	str	r1, [r7, #8]
 8005742:	603b      	str	r3, [r7, #0]
 8005744:	4613      	mov	r3, r2
 8005746:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005748:	e04f      	b.n	80057ea <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800574a:	69bb      	ldr	r3, [r7, #24]
 800574c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005750:	d04b      	beq.n	80057ea <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005752:	f7fc f8b1 	bl	80018b8 <HAL_GetTick>
 8005756:	4602      	mov	r2, r0
 8005758:	683b      	ldr	r3, [r7, #0]
 800575a:	1ad3      	subs	r3, r2, r3
 800575c:	69ba      	ldr	r2, [r7, #24]
 800575e:	429a      	cmp	r2, r3
 8005760:	d302      	bcc.n	8005768 <UART_WaitOnFlagUntilTimeout+0x30>
 8005762:	69bb      	ldr	r3, [r7, #24]
 8005764:	2b00      	cmp	r3, #0
 8005766:	d101      	bne.n	800576c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005768:	2303      	movs	r3, #3
 800576a:	e04e      	b.n	800580a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	f003 0304 	and.w	r3, r3, #4
 8005776:	2b00      	cmp	r3, #0
 8005778:	d037      	beq.n	80057ea <UART_WaitOnFlagUntilTimeout+0xb2>
 800577a:	68bb      	ldr	r3, [r7, #8]
 800577c:	2b80      	cmp	r3, #128	@ 0x80
 800577e:	d034      	beq.n	80057ea <UART_WaitOnFlagUntilTimeout+0xb2>
 8005780:	68bb      	ldr	r3, [r7, #8]
 8005782:	2b40      	cmp	r3, #64	@ 0x40
 8005784:	d031      	beq.n	80057ea <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	69db      	ldr	r3, [r3, #28]
 800578c:	f003 0308 	and.w	r3, r3, #8
 8005790:	2b08      	cmp	r3, #8
 8005792:	d110      	bne.n	80057b6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	2208      	movs	r2, #8
 800579a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800579c:	68f8      	ldr	r0, [r7, #12]
 800579e:	f000 f838 	bl	8005812 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	2208      	movs	r2, #8
 80057a6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	2200      	movs	r2, #0
 80057ae:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80057b2:	2301      	movs	r3, #1
 80057b4:	e029      	b.n	800580a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	69db      	ldr	r3, [r3, #28]
 80057bc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80057c0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80057c4:	d111      	bne.n	80057ea <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80057ce:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80057d0:	68f8      	ldr	r0, [r7, #12]
 80057d2:	f000 f81e 	bl	8005812 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	2220      	movs	r2, #32
 80057da:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	2200      	movs	r2, #0
 80057e2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80057e6:	2303      	movs	r3, #3
 80057e8:	e00f      	b.n	800580a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	69da      	ldr	r2, [r3, #28]
 80057f0:	68bb      	ldr	r3, [r7, #8]
 80057f2:	4013      	ands	r3, r2
 80057f4:	68ba      	ldr	r2, [r7, #8]
 80057f6:	429a      	cmp	r2, r3
 80057f8:	bf0c      	ite	eq
 80057fa:	2301      	moveq	r3, #1
 80057fc:	2300      	movne	r3, #0
 80057fe:	b2db      	uxtb	r3, r3
 8005800:	461a      	mov	r2, r3
 8005802:	79fb      	ldrb	r3, [r7, #7]
 8005804:	429a      	cmp	r2, r3
 8005806:	d0a0      	beq.n	800574a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005808:	2300      	movs	r3, #0
}
 800580a:	4618      	mov	r0, r3
 800580c:	3710      	adds	r7, #16
 800580e:	46bd      	mov	sp, r7
 8005810:	bd80      	pop	{r7, pc}

08005812 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005812:	b480      	push	{r7}
 8005814:	b095      	sub	sp, #84	@ 0x54
 8005816:	af00      	add	r7, sp, #0
 8005818:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005820:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005822:	e853 3f00 	ldrex	r3, [r3]
 8005826:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005828:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800582a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800582e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	461a      	mov	r2, r3
 8005836:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005838:	643b      	str	r3, [r7, #64]	@ 0x40
 800583a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800583c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800583e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005840:	e841 2300 	strex	r3, r2, [r1]
 8005844:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005846:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005848:	2b00      	cmp	r3, #0
 800584a:	d1e6      	bne.n	800581a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	3308      	adds	r3, #8
 8005852:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005854:	6a3b      	ldr	r3, [r7, #32]
 8005856:	e853 3f00 	ldrex	r3, [r3]
 800585a:	61fb      	str	r3, [r7, #28]
   return(result);
 800585c:	69fb      	ldr	r3, [r7, #28]
 800585e:	f023 0301 	bic.w	r3, r3, #1
 8005862:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	3308      	adds	r3, #8
 800586a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800586c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800586e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005870:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005872:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005874:	e841 2300 	strex	r3, r2, [r1]
 8005878:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800587a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800587c:	2b00      	cmp	r3, #0
 800587e:	d1e5      	bne.n	800584c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005884:	2b01      	cmp	r3, #1
 8005886:	d118      	bne.n	80058ba <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	e853 3f00 	ldrex	r3, [r3]
 8005894:	60bb      	str	r3, [r7, #8]
   return(result);
 8005896:	68bb      	ldr	r3, [r7, #8]
 8005898:	f023 0310 	bic.w	r3, r3, #16
 800589c:	647b      	str	r3, [r7, #68]	@ 0x44
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	461a      	mov	r2, r3
 80058a4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80058a6:	61bb      	str	r3, [r7, #24]
 80058a8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058aa:	6979      	ldr	r1, [r7, #20]
 80058ac:	69ba      	ldr	r2, [r7, #24]
 80058ae:	e841 2300 	strex	r3, r2, [r1]
 80058b2:	613b      	str	r3, [r7, #16]
   return(result);
 80058b4:	693b      	ldr	r3, [r7, #16]
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d1e6      	bne.n	8005888 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	2220      	movs	r2, #32
 80058be:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	2200      	movs	r2, #0
 80058c6:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	2200      	movs	r2, #0
 80058cc:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80058ce:	bf00      	nop
 80058d0:	3754      	adds	r7, #84	@ 0x54
 80058d2:	46bd      	mov	sp, r7
 80058d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d8:	4770      	bx	lr

080058da <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80058da:	b580      	push	{r7, lr}
 80058dc:	b084      	sub	sp, #16
 80058de:	af00      	add	r7, sp, #0
 80058e0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058e6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	2200      	movs	r2, #0
 80058ec:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	2200      	movs	r2, #0
 80058f4:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80058f8:	68f8      	ldr	r0, [r7, #12]
 80058fa:	f7ff fc87 	bl	800520c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80058fe:	bf00      	nop
 8005900:	3710      	adds	r7, #16
 8005902:	46bd      	mov	sp, r7
 8005904:	bd80      	pop	{r7, pc}

08005906 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005906:	b580      	push	{r7, lr}
 8005908:	b088      	sub	sp, #32
 800590a:	af00      	add	r7, sp, #0
 800590c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	e853 3f00 	ldrex	r3, [r3]
 800591a:	60bb      	str	r3, [r7, #8]
   return(result);
 800591c:	68bb      	ldr	r3, [r7, #8]
 800591e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005922:	61fb      	str	r3, [r7, #28]
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	461a      	mov	r2, r3
 800592a:	69fb      	ldr	r3, [r7, #28]
 800592c:	61bb      	str	r3, [r7, #24]
 800592e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005930:	6979      	ldr	r1, [r7, #20]
 8005932:	69ba      	ldr	r2, [r7, #24]
 8005934:	e841 2300 	strex	r3, r2, [r1]
 8005938:	613b      	str	r3, [r7, #16]
   return(result);
 800593a:	693b      	ldr	r3, [r7, #16]
 800593c:	2b00      	cmp	r3, #0
 800593e:	d1e6      	bne.n	800590e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	2220      	movs	r2, #32
 8005944:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	2200      	movs	r2, #0
 800594a:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800594c:	6878      	ldr	r0, [r7, #4]
 800594e:	f7ff fc53 	bl	80051f8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005952:	bf00      	nop
 8005954:	3720      	adds	r7, #32
 8005956:	46bd      	mov	sp, r7
 8005958:	bd80      	pop	{r7, pc}

0800595a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800595a:	b480      	push	{r7}
 800595c:	b083      	sub	sp, #12
 800595e:	af00      	add	r7, sp, #0
 8005960:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005962:	bf00      	nop
 8005964:	370c      	adds	r7, #12
 8005966:	46bd      	mov	sp, r7
 8005968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800596c:	4770      	bx	lr
	...

08005970 <siprintf>:
 8005970:	b40e      	push	{r1, r2, r3}
 8005972:	b500      	push	{lr}
 8005974:	b09c      	sub	sp, #112	@ 0x70
 8005976:	ab1d      	add	r3, sp, #116	@ 0x74
 8005978:	9002      	str	r0, [sp, #8]
 800597a:	9006      	str	r0, [sp, #24]
 800597c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8005980:	4809      	ldr	r0, [pc, #36]	@ (80059a8 <siprintf+0x38>)
 8005982:	9107      	str	r1, [sp, #28]
 8005984:	9104      	str	r1, [sp, #16]
 8005986:	4909      	ldr	r1, [pc, #36]	@ (80059ac <siprintf+0x3c>)
 8005988:	f853 2b04 	ldr.w	r2, [r3], #4
 800598c:	9105      	str	r1, [sp, #20]
 800598e:	6800      	ldr	r0, [r0, #0]
 8005990:	9301      	str	r3, [sp, #4]
 8005992:	a902      	add	r1, sp, #8
 8005994:	f000 f9a4 	bl	8005ce0 <_svfiprintf_r>
 8005998:	9b02      	ldr	r3, [sp, #8]
 800599a:	2200      	movs	r2, #0
 800599c:	701a      	strb	r2, [r3, #0]
 800599e:	b01c      	add	sp, #112	@ 0x70
 80059a0:	f85d eb04 	ldr.w	lr, [sp], #4
 80059a4:	b003      	add	sp, #12
 80059a6:	4770      	bx	lr
 80059a8:	2000000c 	.word	0x2000000c
 80059ac:	ffff0208 	.word	0xffff0208

080059b0 <memset>:
 80059b0:	4402      	add	r2, r0
 80059b2:	4603      	mov	r3, r0
 80059b4:	4293      	cmp	r3, r2
 80059b6:	d100      	bne.n	80059ba <memset+0xa>
 80059b8:	4770      	bx	lr
 80059ba:	f803 1b01 	strb.w	r1, [r3], #1
 80059be:	e7f9      	b.n	80059b4 <memset+0x4>

080059c0 <strcat>:
 80059c0:	b510      	push	{r4, lr}
 80059c2:	4602      	mov	r2, r0
 80059c4:	7814      	ldrb	r4, [r2, #0]
 80059c6:	4613      	mov	r3, r2
 80059c8:	3201      	adds	r2, #1
 80059ca:	2c00      	cmp	r4, #0
 80059cc:	d1fa      	bne.n	80059c4 <strcat+0x4>
 80059ce:	3b01      	subs	r3, #1
 80059d0:	f811 2b01 	ldrb.w	r2, [r1], #1
 80059d4:	f803 2f01 	strb.w	r2, [r3, #1]!
 80059d8:	2a00      	cmp	r2, #0
 80059da:	d1f9      	bne.n	80059d0 <strcat+0x10>
 80059dc:	bd10      	pop	{r4, pc}
	...

080059e0 <__errno>:
 80059e0:	4b01      	ldr	r3, [pc, #4]	@ (80059e8 <__errno+0x8>)
 80059e2:	6818      	ldr	r0, [r3, #0]
 80059e4:	4770      	bx	lr
 80059e6:	bf00      	nop
 80059e8:	2000000c 	.word	0x2000000c

080059ec <__libc_init_array>:
 80059ec:	b570      	push	{r4, r5, r6, lr}
 80059ee:	4d0d      	ldr	r5, [pc, #52]	@ (8005a24 <__libc_init_array+0x38>)
 80059f0:	4c0d      	ldr	r4, [pc, #52]	@ (8005a28 <__libc_init_array+0x3c>)
 80059f2:	1b64      	subs	r4, r4, r5
 80059f4:	10a4      	asrs	r4, r4, #2
 80059f6:	2600      	movs	r6, #0
 80059f8:	42a6      	cmp	r6, r4
 80059fa:	d109      	bne.n	8005a10 <__libc_init_array+0x24>
 80059fc:	4d0b      	ldr	r5, [pc, #44]	@ (8005a2c <__libc_init_array+0x40>)
 80059fe:	4c0c      	ldr	r4, [pc, #48]	@ (8005a30 <__libc_init_array+0x44>)
 8005a00:	f000 fc66 	bl	80062d0 <_init>
 8005a04:	1b64      	subs	r4, r4, r5
 8005a06:	10a4      	asrs	r4, r4, #2
 8005a08:	2600      	movs	r6, #0
 8005a0a:	42a6      	cmp	r6, r4
 8005a0c:	d105      	bne.n	8005a1a <__libc_init_array+0x2e>
 8005a0e:	bd70      	pop	{r4, r5, r6, pc}
 8005a10:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a14:	4798      	blx	r3
 8005a16:	3601      	adds	r6, #1
 8005a18:	e7ee      	b.n	80059f8 <__libc_init_array+0xc>
 8005a1a:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a1e:	4798      	blx	r3
 8005a20:	3601      	adds	r6, #1
 8005a22:	e7f2      	b.n	8005a0a <__libc_init_array+0x1e>
 8005a24:	0800636c 	.word	0x0800636c
 8005a28:	0800636c 	.word	0x0800636c
 8005a2c:	0800636c 	.word	0x0800636c
 8005a30:	08006370 	.word	0x08006370

08005a34 <__retarget_lock_acquire_recursive>:
 8005a34:	4770      	bx	lr

08005a36 <__retarget_lock_release_recursive>:
 8005a36:	4770      	bx	lr

08005a38 <_free_r>:
 8005a38:	b538      	push	{r3, r4, r5, lr}
 8005a3a:	4605      	mov	r5, r0
 8005a3c:	2900      	cmp	r1, #0
 8005a3e:	d041      	beq.n	8005ac4 <_free_r+0x8c>
 8005a40:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005a44:	1f0c      	subs	r4, r1, #4
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	bfb8      	it	lt
 8005a4a:	18e4      	addlt	r4, r4, r3
 8005a4c:	f000 f8e0 	bl	8005c10 <__malloc_lock>
 8005a50:	4a1d      	ldr	r2, [pc, #116]	@ (8005ac8 <_free_r+0x90>)
 8005a52:	6813      	ldr	r3, [r2, #0]
 8005a54:	b933      	cbnz	r3, 8005a64 <_free_r+0x2c>
 8005a56:	6063      	str	r3, [r4, #4]
 8005a58:	6014      	str	r4, [r2, #0]
 8005a5a:	4628      	mov	r0, r5
 8005a5c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005a60:	f000 b8dc 	b.w	8005c1c <__malloc_unlock>
 8005a64:	42a3      	cmp	r3, r4
 8005a66:	d908      	bls.n	8005a7a <_free_r+0x42>
 8005a68:	6820      	ldr	r0, [r4, #0]
 8005a6a:	1821      	adds	r1, r4, r0
 8005a6c:	428b      	cmp	r3, r1
 8005a6e:	bf01      	itttt	eq
 8005a70:	6819      	ldreq	r1, [r3, #0]
 8005a72:	685b      	ldreq	r3, [r3, #4]
 8005a74:	1809      	addeq	r1, r1, r0
 8005a76:	6021      	streq	r1, [r4, #0]
 8005a78:	e7ed      	b.n	8005a56 <_free_r+0x1e>
 8005a7a:	461a      	mov	r2, r3
 8005a7c:	685b      	ldr	r3, [r3, #4]
 8005a7e:	b10b      	cbz	r3, 8005a84 <_free_r+0x4c>
 8005a80:	42a3      	cmp	r3, r4
 8005a82:	d9fa      	bls.n	8005a7a <_free_r+0x42>
 8005a84:	6811      	ldr	r1, [r2, #0]
 8005a86:	1850      	adds	r0, r2, r1
 8005a88:	42a0      	cmp	r0, r4
 8005a8a:	d10b      	bne.n	8005aa4 <_free_r+0x6c>
 8005a8c:	6820      	ldr	r0, [r4, #0]
 8005a8e:	4401      	add	r1, r0
 8005a90:	1850      	adds	r0, r2, r1
 8005a92:	4283      	cmp	r3, r0
 8005a94:	6011      	str	r1, [r2, #0]
 8005a96:	d1e0      	bne.n	8005a5a <_free_r+0x22>
 8005a98:	6818      	ldr	r0, [r3, #0]
 8005a9a:	685b      	ldr	r3, [r3, #4]
 8005a9c:	6053      	str	r3, [r2, #4]
 8005a9e:	4408      	add	r0, r1
 8005aa0:	6010      	str	r0, [r2, #0]
 8005aa2:	e7da      	b.n	8005a5a <_free_r+0x22>
 8005aa4:	d902      	bls.n	8005aac <_free_r+0x74>
 8005aa6:	230c      	movs	r3, #12
 8005aa8:	602b      	str	r3, [r5, #0]
 8005aaa:	e7d6      	b.n	8005a5a <_free_r+0x22>
 8005aac:	6820      	ldr	r0, [r4, #0]
 8005aae:	1821      	adds	r1, r4, r0
 8005ab0:	428b      	cmp	r3, r1
 8005ab2:	bf04      	itt	eq
 8005ab4:	6819      	ldreq	r1, [r3, #0]
 8005ab6:	685b      	ldreq	r3, [r3, #4]
 8005ab8:	6063      	str	r3, [r4, #4]
 8005aba:	bf04      	itt	eq
 8005abc:	1809      	addeq	r1, r1, r0
 8005abe:	6021      	streq	r1, [r4, #0]
 8005ac0:	6054      	str	r4, [r2, #4]
 8005ac2:	e7ca      	b.n	8005a5a <_free_r+0x22>
 8005ac4:	bd38      	pop	{r3, r4, r5, pc}
 8005ac6:	bf00      	nop
 8005ac8:	200004e4 	.word	0x200004e4

08005acc <sbrk_aligned>:
 8005acc:	b570      	push	{r4, r5, r6, lr}
 8005ace:	4e0f      	ldr	r6, [pc, #60]	@ (8005b0c <sbrk_aligned+0x40>)
 8005ad0:	460c      	mov	r4, r1
 8005ad2:	6831      	ldr	r1, [r6, #0]
 8005ad4:	4605      	mov	r5, r0
 8005ad6:	b911      	cbnz	r1, 8005ade <sbrk_aligned+0x12>
 8005ad8:	f000 fba6 	bl	8006228 <_sbrk_r>
 8005adc:	6030      	str	r0, [r6, #0]
 8005ade:	4621      	mov	r1, r4
 8005ae0:	4628      	mov	r0, r5
 8005ae2:	f000 fba1 	bl	8006228 <_sbrk_r>
 8005ae6:	1c43      	adds	r3, r0, #1
 8005ae8:	d103      	bne.n	8005af2 <sbrk_aligned+0x26>
 8005aea:	f04f 34ff 	mov.w	r4, #4294967295
 8005aee:	4620      	mov	r0, r4
 8005af0:	bd70      	pop	{r4, r5, r6, pc}
 8005af2:	1cc4      	adds	r4, r0, #3
 8005af4:	f024 0403 	bic.w	r4, r4, #3
 8005af8:	42a0      	cmp	r0, r4
 8005afa:	d0f8      	beq.n	8005aee <sbrk_aligned+0x22>
 8005afc:	1a21      	subs	r1, r4, r0
 8005afe:	4628      	mov	r0, r5
 8005b00:	f000 fb92 	bl	8006228 <_sbrk_r>
 8005b04:	3001      	adds	r0, #1
 8005b06:	d1f2      	bne.n	8005aee <sbrk_aligned+0x22>
 8005b08:	e7ef      	b.n	8005aea <sbrk_aligned+0x1e>
 8005b0a:	bf00      	nop
 8005b0c:	200004e0 	.word	0x200004e0

08005b10 <_malloc_r>:
 8005b10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005b14:	1ccd      	adds	r5, r1, #3
 8005b16:	f025 0503 	bic.w	r5, r5, #3
 8005b1a:	3508      	adds	r5, #8
 8005b1c:	2d0c      	cmp	r5, #12
 8005b1e:	bf38      	it	cc
 8005b20:	250c      	movcc	r5, #12
 8005b22:	2d00      	cmp	r5, #0
 8005b24:	4606      	mov	r6, r0
 8005b26:	db01      	blt.n	8005b2c <_malloc_r+0x1c>
 8005b28:	42a9      	cmp	r1, r5
 8005b2a:	d904      	bls.n	8005b36 <_malloc_r+0x26>
 8005b2c:	230c      	movs	r3, #12
 8005b2e:	6033      	str	r3, [r6, #0]
 8005b30:	2000      	movs	r0, #0
 8005b32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005b36:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005c0c <_malloc_r+0xfc>
 8005b3a:	f000 f869 	bl	8005c10 <__malloc_lock>
 8005b3e:	f8d8 3000 	ldr.w	r3, [r8]
 8005b42:	461c      	mov	r4, r3
 8005b44:	bb44      	cbnz	r4, 8005b98 <_malloc_r+0x88>
 8005b46:	4629      	mov	r1, r5
 8005b48:	4630      	mov	r0, r6
 8005b4a:	f7ff ffbf 	bl	8005acc <sbrk_aligned>
 8005b4e:	1c43      	adds	r3, r0, #1
 8005b50:	4604      	mov	r4, r0
 8005b52:	d158      	bne.n	8005c06 <_malloc_r+0xf6>
 8005b54:	f8d8 4000 	ldr.w	r4, [r8]
 8005b58:	4627      	mov	r7, r4
 8005b5a:	2f00      	cmp	r7, #0
 8005b5c:	d143      	bne.n	8005be6 <_malloc_r+0xd6>
 8005b5e:	2c00      	cmp	r4, #0
 8005b60:	d04b      	beq.n	8005bfa <_malloc_r+0xea>
 8005b62:	6823      	ldr	r3, [r4, #0]
 8005b64:	4639      	mov	r1, r7
 8005b66:	4630      	mov	r0, r6
 8005b68:	eb04 0903 	add.w	r9, r4, r3
 8005b6c:	f000 fb5c 	bl	8006228 <_sbrk_r>
 8005b70:	4581      	cmp	r9, r0
 8005b72:	d142      	bne.n	8005bfa <_malloc_r+0xea>
 8005b74:	6821      	ldr	r1, [r4, #0]
 8005b76:	1a6d      	subs	r5, r5, r1
 8005b78:	4629      	mov	r1, r5
 8005b7a:	4630      	mov	r0, r6
 8005b7c:	f7ff ffa6 	bl	8005acc <sbrk_aligned>
 8005b80:	3001      	adds	r0, #1
 8005b82:	d03a      	beq.n	8005bfa <_malloc_r+0xea>
 8005b84:	6823      	ldr	r3, [r4, #0]
 8005b86:	442b      	add	r3, r5
 8005b88:	6023      	str	r3, [r4, #0]
 8005b8a:	f8d8 3000 	ldr.w	r3, [r8]
 8005b8e:	685a      	ldr	r2, [r3, #4]
 8005b90:	bb62      	cbnz	r2, 8005bec <_malloc_r+0xdc>
 8005b92:	f8c8 7000 	str.w	r7, [r8]
 8005b96:	e00f      	b.n	8005bb8 <_malloc_r+0xa8>
 8005b98:	6822      	ldr	r2, [r4, #0]
 8005b9a:	1b52      	subs	r2, r2, r5
 8005b9c:	d420      	bmi.n	8005be0 <_malloc_r+0xd0>
 8005b9e:	2a0b      	cmp	r2, #11
 8005ba0:	d917      	bls.n	8005bd2 <_malloc_r+0xc2>
 8005ba2:	1961      	adds	r1, r4, r5
 8005ba4:	42a3      	cmp	r3, r4
 8005ba6:	6025      	str	r5, [r4, #0]
 8005ba8:	bf18      	it	ne
 8005baa:	6059      	strne	r1, [r3, #4]
 8005bac:	6863      	ldr	r3, [r4, #4]
 8005bae:	bf08      	it	eq
 8005bb0:	f8c8 1000 	streq.w	r1, [r8]
 8005bb4:	5162      	str	r2, [r4, r5]
 8005bb6:	604b      	str	r3, [r1, #4]
 8005bb8:	4630      	mov	r0, r6
 8005bba:	f000 f82f 	bl	8005c1c <__malloc_unlock>
 8005bbe:	f104 000b 	add.w	r0, r4, #11
 8005bc2:	1d23      	adds	r3, r4, #4
 8005bc4:	f020 0007 	bic.w	r0, r0, #7
 8005bc8:	1ac2      	subs	r2, r0, r3
 8005bca:	bf1c      	itt	ne
 8005bcc:	1a1b      	subne	r3, r3, r0
 8005bce:	50a3      	strne	r3, [r4, r2]
 8005bd0:	e7af      	b.n	8005b32 <_malloc_r+0x22>
 8005bd2:	6862      	ldr	r2, [r4, #4]
 8005bd4:	42a3      	cmp	r3, r4
 8005bd6:	bf0c      	ite	eq
 8005bd8:	f8c8 2000 	streq.w	r2, [r8]
 8005bdc:	605a      	strne	r2, [r3, #4]
 8005bde:	e7eb      	b.n	8005bb8 <_malloc_r+0xa8>
 8005be0:	4623      	mov	r3, r4
 8005be2:	6864      	ldr	r4, [r4, #4]
 8005be4:	e7ae      	b.n	8005b44 <_malloc_r+0x34>
 8005be6:	463c      	mov	r4, r7
 8005be8:	687f      	ldr	r7, [r7, #4]
 8005bea:	e7b6      	b.n	8005b5a <_malloc_r+0x4a>
 8005bec:	461a      	mov	r2, r3
 8005bee:	685b      	ldr	r3, [r3, #4]
 8005bf0:	42a3      	cmp	r3, r4
 8005bf2:	d1fb      	bne.n	8005bec <_malloc_r+0xdc>
 8005bf4:	2300      	movs	r3, #0
 8005bf6:	6053      	str	r3, [r2, #4]
 8005bf8:	e7de      	b.n	8005bb8 <_malloc_r+0xa8>
 8005bfa:	230c      	movs	r3, #12
 8005bfc:	6033      	str	r3, [r6, #0]
 8005bfe:	4630      	mov	r0, r6
 8005c00:	f000 f80c 	bl	8005c1c <__malloc_unlock>
 8005c04:	e794      	b.n	8005b30 <_malloc_r+0x20>
 8005c06:	6005      	str	r5, [r0, #0]
 8005c08:	e7d6      	b.n	8005bb8 <_malloc_r+0xa8>
 8005c0a:	bf00      	nop
 8005c0c:	200004e4 	.word	0x200004e4

08005c10 <__malloc_lock>:
 8005c10:	4801      	ldr	r0, [pc, #4]	@ (8005c18 <__malloc_lock+0x8>)
 8005c12:	f7ff bf0f 	b.w	8005a34 <__retarget_lock_acquire_recursive>
 8005c16:	bf00      	nop
 8005c18:	200004dc 	.word	0x200004dc

08005c1c <__malloc_unlock>:
 8005c1c:	4801      	ldr	r0, [pc, #4]	@ (8005c24 <__malloc_unlock+0x8>)
 8005c1e:	f7ff bf0a 	b.w	8005a36 <__retarget_lock_release_recursive>
 8005c22:	bf00      	nop
 8005c24:	200004dc 	.word	0x200004dc

08005c28 <__ssputs_r>:
 8005c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005c2c:	688e      	ldr	r6, [r1, #8]
 8005c2e:	461f      	mov	r7, r3
 8005c30:	42be      	cmp	r6, r7
 8005c32:	680b      	ldr	r3, [r1, #0]
 8005c34:	4682      	mov	sl, r0
 8005c36:	460c      	mov	r4, r1
 8005c38:	4690      	mov	r8, r2
 8005c3a:	d82d      	bhi.n	8005c98 <__ssputs_r+0x70>
 8005c3c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005c40:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8005c44:	d026      	beq.n	8005c94 <__ssputs_r+0x6c>
 8005c46:	6965      	ldr	r5, [r4, #20]
 8005c48:	6909      	ldr	r1, [r1, #16]
 8005c4a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005c4e:	eba3 0901 	sub.w	r9, r3, r1
 8005c52:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005c56:	1c7b      	adds	r3, r7, #1
 8005c58:	444b      	add	r3, r9
 8005c5a:	106d      	asrs	r5, r5, #1
 8005c5c:	429d      	cmp	r5, r3
 8005c5e:	bf38      	it	cc
 8005c60:	461d      	movcc	r5, r3
 8005c62:	0553      	lsls	r3, r2, #21
 8005c64:	d527      	bpl.n	8005cb6 <__ssputs_r+0x8e>
 8005c66:	4629      	mov	r1, r5
 8005c68:	f7ff ff52 	bl	8005b10 <_malloc_r>
 8005c6c:	4606      	mov	r6, r0
 8005c6e:	b360      	cbz	r0, 8005cca <__ssputs_r+0xa2>
 8005c70:	6921      	ldr	r1, [r4, #16]
 8005c72:	464a      	mov	r2, r9
 8005c74:	f000 fae8 	bl	8006248 <memcpy>
 8005c78:	89a3      	ldrh	r3, [r4, #12]
 8005c7a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8005c7e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005c82:	81a3      	strh	r3, [r4, #12]
 8005c84:	6126      	str	r6, [r4, #16]
 8005c86:	6165      	str	r5, [r4, #20]
 8005c88:	444e      	add	r6, r9
 8005c8a:	eba5 0509 	sub.w	r5, r5, r9
 8005c8e:	6026      	str	r6, [r4, #0]
 8005c90:	60a5      	str	r5, [r4, #8]
 8005c92:	463e      	mov	r6, r7
 8005c94:	42be      	cmp	r6, r7
 8005c96:	d900      	bls.n	8005c9a <__ssputs_r+0x72>
 8005c98:	463e      	mov	r6, r7
 8005c9a:	6820      	ldr	r0, [r4, #0]
 8005c9c:	4632      	mov	r2, r6
 8005c9e:	4641      	mov	r1, r8
 8005ca0:	f000 faa8 	bl	80061f4 <memmove>
 8005ca4:	68a3      	ldr	r3, [r4, #8]
 8005ca6:	1b9b      	subs	r3, r3, r6
 8005ca8:	60a3      	str	r3, [r4, #8]
 8005caa:	6823      	ldr	r3, [r4, #0]
 8005cac:	4433      	add	r3, r6
 8005cae:	6023      	str	r3, [r4, #0]
 8005cb0:	2000      	movs	r0, #0
 8005cb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005cb6:	462a      	mov	r2, r5
 8005cb8:	f000 fad4 	bl	8006264 <_realloc_r>
 8005cbc:	4606      	mov	r6, r0
 8005cbe:	2800      	cmp	r0, #0
 8005cc0:	d1e0      	bne.n	8005c84 <__ssputs_r+0x5c>
 8005cc2:	6921      	ldr	r1, [r4, #16]
 8005cc4:	4650      	mov	r0, sl
 8005cc6:	f7ff feb7 	bl	8005a38 <_free_r>
 8005cca:	230c      	movs	r3, #12
 8005ccc:	f8ca 3000 	str.w	r3, [sl]
 8005cd0:	89a3      	ldrh	r3, [r4, #12]
 8005cd2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005cd6:	81a3      	strh	r3, [r4, #12]
 8005cd8:	f04f 30ff 	mov.w	r0, #4294967295
 8005cdc:	e7e9      	b.n	8005cb2 <__ssputs_r+0x8a>
	...

08005ce0 <_svfiprintf_r>:
 8005ce0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ce4:	4698      	mov	r8, r3
 8005ce6:	898b      	ldrh	r3, [r1, #12]
 8005ce8:	061b      	lsls	r3, r3, #24
 8005cea:	b09d      	sub	sp, #116	@ 0x74
 8005cec:	4607      	mov	r7, r0
 8005cee:	460d      	mov	r5, r1
 8005cf0:	4614      	mov	r4, r2
 8005cf2:	d510      	bpl.n	8005d16 <_svfiprintf_r+0x36>
 8005cf4:	690b      	ldr	r3, [r1, #16]
 8005cf6:	b973      	cbnz	r3, 8005d16 <_svfiprintf_r+0x36>
 8005cf8:	2140      	movs	r1, #64	@ 0x40
 8005cfa:	f7ff ff09 	bl	8005b10 <_malloc_r>
 8005cfe:	6028      	str	r0, [r5, #0]
 8005d00:	6128      	str	r0, [r5, #16]
 8005d02:	b930      	cbnz	r0, 8005d12 <_svfiprintf_r+0x32>
 8005d04:	230c      	movs	r3, #12
 8005d06:	603b      	str	r3, [r7, #0]
 8005d08:	f04f 30ff 	mov.w	r0, #4294967295
 8005d0c:	b01d      	add	sp, #116	@ 0x74
 8005d0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d12:	2340      	movs	r3, #64	@ 0x40
 8005d14:	616b      	str	r3, [r5, #20]
 8005d16:	2300      	movs	r3, #0
 8005d18:	9309      	str	r3, [sp, #36]	@ 0x24
 8005d1a:	2320      	movs	r3, #32
 8005d1c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005d20:	f8cd 800c 	str.w	r8, [sp, #12]
 8005d24:	2330      	movs	r3, #48	@ 0x30
 8005d26:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8005ec4 <_svfiprintf_r+0x1e4>
 8005d2a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005d2e:	f04f 0901 	mov.w	r9, #1
 8005d32:	4623      	mov	r3, r4
 8005d34:	469a      	mov	sl, r3
 8005d36:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005d3a:	b10a      	cbz	r2, 8005d40 <_svfiprintf_r+0x60>
 8005d3c:	2a25      	cmp	r2, #37	@ 0x25
 8005d3e:	d1f9      	bne.n	8005d34 <_svfiprintf_r+0x54>
 8005d40:	ebba 0b04 	subs.w	fp, sl, r4
 8005d44:	d00b      	beq.n	8005d5e <_svfiprintf_r+0x7e>
 8005d46:	465b      	mov	r3, fp
 8005d48:	4622      	mov	r2, r4
 8005d4a:	4629      	mov	r1, r5
 8005d4c:	4638      	mov	r0, r7
 8005d4e:	f7ff ff6b 	bl	8005c28 <__ssputs_r>
 8005d52:	3001      	adds	r0, #1
 8005d54:	f000 80a7 	beq.w	8005ea6 <_svfiprintf_r+0x1c6>
 8005d58:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005d5a:	445a      	add	r2, fp
 8005d5c:	9209      	str	r2, [sp, #36]	@ 0x24
 8005d5e:	f89a 3000 	ldrb.w	r3, [sl]
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	f000 809f 	beq.w	8005ea6 <_svfiprintf_r+0x1c6>
 8005d68:	2300      	movs	r3, #0
 8005d6a:	f04f 32ff 	mov.w	r2, #4294967295
 8005d6e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005d72:	f10a 0a01 	add.w	sl, sl, #1
 8005d76:	9304      	str	r3, [sp, #16]
 8005d78:	9307      	str	r3, [sp, #28]
 8005d7a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005d7e:	931a      	str	r3, [sp, #104]	@ 0x68
 8005d80:	4654      	mov	r4, sl
 8005d82:	2205      	movs	r2, #5
 8005d84:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005d88:	484e      	ldr	r0, [pc, #312]	@ (8005ec4 <_svfiprintf_r+0x1e4>)
 8005d8a:	f7fa fa29 	bl	80001e0 <memchr>
 8005d8e:	9a04      	ldr	r2, [sp, #16]
 8005d90:	b9d8      	cbnz	r0, 8005dca <_svfiprintf_r+0xea>
 8005d92:	06d0      	lsls	r0, r2, #27
 8005d94:	bf44      	itt	mi
 8005d96:	2320      	movmi	r3, #32
 8005d98:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005d9c:	0711      	lsls	r1, r2, #28
 8005d9e:	bf44      	itt	mi
 8005da0:	232b      	movmi	r3, #43	@ 0x2b
 8005da2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005da6:	f89a 3000 	ldrb.w	r3, [sl]
 8005daa:	2b2a      	cmp	r3, #42	@ 0x2a
 8005dac:	d015      	beq.n	8005dda <_svfiprintf_r+0xfa>
 8005dae:	9a07      	ldr	r2, [sp, #28]
 8005db0:	4654      	mov	r4, sl
 8005db2:	2000      	movs	r0, #0
 8005db4:	f04f 0c0a 	mov.w	ip, #10
 8005db8:	4621      	mov	r1, r4
 8005dba:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005dbe:	3b30      	subs	r3, #48	@ 0x30
 8005dc0:	2b09      	cmp	r3, #9
 8005dc2:	d94b      	bls.n	8005e5c <_svfiprintf_r+0x17c>
 8005dc4:	b1b0      	cbz	r0, 8005df4 <_svfiprintf_r+0x114>
 8005dc6:	9207      	str	r2, [sp, #28]
 8005dc8:	e014      	b.n	8005df4 <_svfiprintf_r+0x114>
 8005dca:	eba0 0308 	sub.w	r3, r0, r8
 8005dce:	fa09 f303 	lsl.w	r3, r9, r3
 8005dd2:	4313      	orrs	r3, r2
 8005dd4:	9304      	str	r3, [sp, #16]
 8005dd6:	46a2      	mov	sl, r4
 8005dd8:	e7d2      	b.n	8005d80 <_svfiprintf_r+0xa0>
 8005dda:	9b03      	ldr	r3, [sp, #12]
 8005ddc:	1d19      	adds	r1, r3, #4
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	9103      	str	r1, [sp, #12]
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	bfbb      	ittet	lt
 8005de6:	425b      	neglt	r3, r3
 8005de8:	f042 0202 	orrlt.w	r2, r2, #2
 8005dec:	9307      	strge	r3, [sp, #28]
 8005dee:	9307      	strlt	r3, [sp, #28]
 8005df0:	bfb8      	it	lt
 8005df2:	9204      	strlt	r2, [sp, #16]
 8005df4:	7823      	ldrb	r3, [r4, #0]
 8005df6:	2b2e      	cmp	r3, #46	@ 0x2e
 8005df8:	d10a      	bne.n	8005e10 <_svfiprintf_r+0x130>
 8005dfa:	7863      	ldrb	r3, [r4, #1]
 8005dfc:	2b2a      	cmp	r3, #42	@ 0x2a
 8005dfe:	d132      	bne.n	8005e66 <_svfiprintf_r+0x186>
 8005e00:	9b03      	ldr	r3, [sp, #12]
 8005e02:	1d1a      	adds	r2, r3, #4
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	9203      	str	r2, [sp, #12]
 8005e08:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005e0c:	3402      	adds	r4, #2
 8005e0e:	9305      	str	r3, [sp, #20]
 8005e10:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8005ed4 <_svfiprintf_r+0x1f4>
 8005e14:	7821      	ldrb	r1, [r4, #0]
 8005e16:	2203      	movs	r2, #3
 8005e18:	4650      	mov	r0, sl
 8005e1a:	f7fa f9e1 	bl	80001e0 <memchr>
 8005e1e:	b138      	cbz	r0, 8005e30 <_svfiprintf_r+0x150>
 8005e20:	9b04      	ldr	r3, [sp, #16]
 8005e22:	eba0 000a 	sub.w	r0, r0, sl
 8005e26:	2240      	movs	r2, #64	@ 0x40
 8005e28:	4082      	lsls	r2, r0
 8005e2a:	4313      	orrs	r3, r2
 8005e2c:	3401      	adds	r4, #1
 8005e2e:	9304      	str	r3, [sp, #16]
 8005e30:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005e34:	4824      	ldr	r0, [pc, #144]	@ (8005ec8 <_svfiprintf_r+0x1e8>)
 8005e36:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005e3a:	2206      	movs	r2, #6
 8005e3c:	f7fa f9d0 	bl	80001e0 <memchr>
 8005e40:	2800      	cmp	r0, #0
 8005e42:	d036      	beq.n	8005eb2 <_svfiprintf_r+0x1d2>
 8005e44:	4b21      	ldr	r3, [pc, #132]	@ (8005ecc <_svfiprintf_r+0x1ec>)
 8005e46:	bb1b      	cbnz	r3, 8005e90 <_svfiprintf_r+0x1b0>
 8005e48:	9b03      	ldr	r3, [sp, #12]
 8005e4a:	3307      	adds	r3, #7
 8005e4c:	f023 0307 	bic.w	r3, r3, #7
 8005e50:	3308      	adds	r3, #8
 8005e52:	9303      	str	r3, [sp, #12]
 8005e54:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005e56:	4433      	add	r3, r6
 8005e58:	9309      	str	r3, [sp, #36]	@ 0x24
 8005e5a:	e76a      	b.n	8005d32 <_svfiprintf_r+0x52>
 8005e5c:	fb0c 3202 	mla	r2, ip, r2, r3
 8005e60:	460c      	mov	r4, r1
 8005e62:	2001      	movs	r0, #1
 8005e64:	e7a8      	b.n	8005db8 <_svfiprintf_r+0xd8>
 8005e66:	2300      	movs	r3, #0
 8005e68:	3401      	adds	r4, #1
 8005e6a:	9305      	str	r3, [sp, #20]
 8005e6c:	4619      	mov	r1, r3
 8005e6e:	f04f 0c0a 	mov.w	ip, #10
 8005e72:	4620      	mov	r0, r4
 8005e74:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005e78:	3a30      	subs	r2, #48	@ 0x30
 8005e7a:	2a09      	cmp	r2, #9
 8005e7c:	d903      	bls.n	8005e86 <_svfiprintf_r+0x1a6>
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d0c6      	beq.n	8005e10 <_svfiprintf_r+0x130>
 8005e82:	9105      	str	r1, [sp, #20]
 8005e84:	e7c4      	b.n	8005e10 <_svfiprintf_r+0x130>
 8005e86:	fb0c 2101 	mla	r1, ip, r1, r2
 8005e8a:	4604      	mov	r4, r0
 8005e8c:	2301      	movs	r3, #1
 8005e8e:	e7f0      	b.n	8005e72 <_svfiprintf_r+0x192>
 8005e90:	ab03      	add	r3, sp, #12
 8005e92:	9300      	str	r3, [sp, #0]
 8005e94:	462a      	mov	r2, r5
 8005e96:	4b0e      	ldr	r3, [pc, #56]	@ (8005ed0 <_svfiprintf_r+0x1f0>)
 8005e98:	a904      	add	r1, sp, #16
 8005e9a:	4638      	mov	r0, r7
 8005e9c:	f3af 8000 	nop.w
 8005ea0:	1c42      	adds	r2, r0, #1
 8005ea2:	4606      	mov	r6, r0
 8005ea4:	d1d6      	bne.n	8005e54 <_svfiprintf_r+0x174>
 8005ea6:	89ab      	ldrh	r3, [r5, #12]
 8005ea8:	065b      	lsls	r3, r3, #25
 8005eaa:	f53f af2d 	bmi.w	8005d08 <_svfiprintf_r+0x28>
 8005eae:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005eb0:	e72c      	b.n	8005d0c <_svfiprintf_r+0x2c>
 8005eb2:	ab03      	add	r3, sp, #12
 8005eb4:	9300      	str	r3, [sp, #0]
 8005eb6:	462a      	mov	r2, r5
 8005eb8:	4b05      	ldr	r3, [pc, #20]	@ (8005ed0 <_svfiprintf_r+0x1f0>)
 8005eba:	a904      	add	r1, sp, #16
 8005ebc:	4638      	mov	r0, r7
 8005ebe:	f000 f879 	bl	8005fb4 <_printf_i>
 8005ec2:	e7ed      	b.n	8005ea0 <_svfiprintf_r+0x1c0>
 8005ec4:	08006330 	.word	0x08006330
 8005ec8:	0800633a 	.word	0x0800633a
 8005ecc:	00000000 	.word	0x00000000
 8005ed0:	08005c29 	.word	0x08005c29
 8005ed4:	08006336 	.word	0x08006336

08005ed8 <_printf_common>:
 8005ed8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005edc:	4616      	mov	r6, r2
 8005ede:	4698      	mov	r8, r3
 8005ee0:	688a      	ldr	r2, [r1, #8]
 8005ee2:	690b      	ldr	r3, [r1, #16]
 8005ee4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005ee8:	4293      	cmp	r3, r2
 8005eea:	bfb8      	it	lt
 8005eec:	4613      	movlt	r3, r2
 8005eee:	6033      	str	r3, [r6, #0]
 8005ef0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005ef4:	4607      	mov	r7, r0
 8005ef6:	460c      	mov	r4, r1
 8005ef8:	b10a      	cbz	r2, 8005efe <_printf_common+0x26>
 8005efa:	3301      	adds	r3, #1
 8005efc:	6033      	str	r3, [r6, #0]
 8005efe:	6823      	ldr	r3, [r4, #0]
 8005f00:	0699      	lsls	r1, r3, #26
 8005f02:	bf42      	ittt	mi
 8005f04:	6833      	ldrmi	r3, [r6, #0]
 8005f06:	3302      	addmi	r3, #2
 8005f08:	6033      	strmi	r3, [r6, #0]
 8005f0a:	6825      	ldr	r5, [r4, #0]
 8005f0c:	f015 0506 	ands.w	r5, r5, #6
 8005f10:	d106      	bne.n	8005f20 <_printf_common+0x48>
 8005f12:	f104 0a19 	add.w	sl, r4, #25
 8005f16:	68e3      	ldr	r3, [r4, #12]
 8005f18:	6832      	ldr	r2, [r6, #0]
 8005f1a:	1a9b      	subs	r3, r3, r2
 8005f1c:	42ab      	cmp	r3, r5
 8005f1e:	dc26      	bgt.n	8005f6e <_printf_common+0x96>
 8005f20:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005f24:	6822      	ldr	r2, [r4, #0]
 8005f26:	3b00      	subs	r3, #0
 8005f28:	bf18      	it	ne
 8005f2a:	2301      	movne	r3, #1
 8005f2c:	0692      	lsls	r2, r2, #26
 8005f2e:	d42b      	bmi.n	8005f88 <_printf_common+0xb0>
 8005f30:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005f34:	4641      	mov	r1, r8
 8005f36:	4638      	mov	r0, r7
 8005f38:	47c8      	blx	r9
 8005f3a:	3001      	adds	r0, #1
 8005f3c:	d01e      	beq.n	8005f7c <_printf_common+0xa4>
 8005f3e:	6823      	ldr	r3, [r4, #0]
 8005f40:	6922      	ldr	r2, [r4, #16]
 8005f42:	f003 0306 	and.w	r3, r3, #6
 8005f46:	2b04      	cmp	r3, #4
 8005f48:	bf02      	ittt	eq
 8005f4a:	68e5      	ldreq	r5, [r4, #12]
 8005f4c:	6833      	ldreq	r3, [r6, #0]
 8005f4e:	1aed      	subeq	r5, r5, r3
 8005f50:	68a3      	ldr	r3, [r4, #8]
 8005f52:	bf0c      	ite	eq
 8005f54:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005f58:	2500      	movne	r5, #0
 8005f5a:	4293      	cmp	r3, r2
 8005f5c:	bfc4      	itt	gt
 8005f5e:	1a9b      	subgt	r3, r3, r2
 8005f60:	18ed      	addgt	r5, r5, r3
 8005f62:	2600      	movs	r6, #0
 8005f64:	341a      	adds	r4, #26
 8005f66:	42b5      	cmp	r5, r6
 8005f68:	d11a      	bne.n	8005fa0 <_printf_common+0xc8>
 8005f6a:	2000      	movs	r0, #0
 8005f6c:	e008      	b.n	8005f80 <_printf_common+0xa8>
 8005f6e:	2301      	movs	r3, #1
 8005f70:	4652      	mov	r2, sl
 8005f72:	4641      	mov	r1, r8
 8005f74:	4638      	mov	r0, r7
 8005f76:	47c8      	blx	r9
 8005f78:	3001      	adds	r0, #1
 8005f7a:	d103      	bne.n	8005f84 <_printf_common+0xac>
 8005f7c:	f04f 30ff 	mov.w	r0, #4294967295
 8005f80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f84:	3501      	adds	r5, #1
 8005f86:	e7c6      	b.n	8005f16 <_printf_common+0x3e>
 8005f88:	18e1      	adds	r1, r4, r3
 8005f8a:	1c5a      	adds	r2, r3, #1
 8005f8c:	2030      	movs	r0, #48	@ 0x30
 8005f8e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005f92:	4422      	add	r2, r4
 8005f94:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005f98:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005f9c:	3302      	adds	r3, #2
 8005f9e:	e7c7      	b.n	8005f30 <_printf_common+0x58>
 8005fa0:	2301      	movs	r3, #1
 8005fa2:	4622      	mov	r2, r4
 8005fa4:	4641      	mov	r1, r8
 8005fa6:	4638      	mov	r0, r7
 8005fa8:	47c8      	blx	r9
 8005faa:	3001      	adds	r0, #1
 8005fac:	d0e6      	beq.n	8005f7c <_printf_common+0xa4>
 8005fae:	3601      	adds	r6, #1
 8005fb0:	e7d9      	b.n	8005f66 <_printf_common+0x8e>
	...

08005fb4 <_printf_i>:
 8005fb4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005fb8:	7e0f      	ldrb	r7, [r1, #24]
 8005fba:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005fbc:	2f78      	cmp	r7, #120	@ 0x78
 8005fbe:	4691      	mov	r9, r2
 8005fc0:	4680      	mov	r8, r0
 8005fc2:	460c      	mov	r4, r1
 8005fc4:	469a      	mov	sl, r3
 8005fc6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005fca:	d807      	bhi.n	8005fdc <_printf_i+0x28>
 8005fcc:	2f62      	cmp	r7, #98	@ 0x62
 8005fce:	d80a      	bhi.n	8005fe6 <_printf_i+0x32>
 8005fd0:	2f00      	cmp	r7, #0
 8005fd2:	f000 80d2 	beq.w	800617a <_printf_i+0x1c6>
 8005fd6:	2f58      	cmp	r7, #88	@ 0x58
 8005fd8:	f000 80b9 	beq.w	800614e <_printf_i+0x19a>
 8005fdc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005fe0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005fe4:	e03a      	b.n	800605c <_printf_i+0xa8>
 8005fe6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005fea:	2b15      	cmp	r3, #21
 8005fec:	d8f6      	bhi.n	8005fdc <_printf_i+0x28>
 8005fee:	a101      	add	r1, pc, #4	@ (adr r1, 8005ff4 <_printf_i+0x40>)
 8005ff0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005ff4:	0800604d 	.word	0x0800604d
 8005ff8:	08006061 	.word	0x08006061
 8005ffc:	08005fdd 	.word	0x08005fdd
 8006000:	08005fdd 	.word	0x08005fdd
 8006004:	08005fdd 	.word	0x08005fdd
 8006008:	08005fdd 	.word	0x08005fdd
 800600c:	08006061 	.word	0x08006061
 8006010:	08005fdd 	.word	0x08005fdd
 8006014:	08005fdd 	.word	0x08005fdd
 8006018:	08005fdd 	.word	0x08005fdd
 800601c:	08005fdd 	.word	0x08005fdd
 8006020:	08006161 	.word	0x08006161
 8006024:	0800608b 	.word	0x0800608b
 8006028:	0800611b 	.word	0x0800611b
 800602c:	08005fdd 	.word	0x08005fdd
 8006030:	08005fdd 	.word	0x08005fdd
 8006034:	08006183 	.word	0x08006183
 8006038:	08005fdd 	.word	0x08005fdd
 800603c:	0800608b 	.word	0x0800608b
 8006040:	08005fdd 	.word	0x08005fdd
 8006044:	08005fdd 	.word	0x08005fdd
 8006048:	08006123 	.word	0x08006123
 800604c:	6833      	ldr	r3, [r6, #0]
 800604e:	1d1a      	adds	r2, r3, #4
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	6032      	str	r2, [r6, #0]
 8006054:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006058:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800605c:	2301      	movs	r3, #1
 800605e:	e09d      	b.n	800619c <_printf_i+0x1e8>
 8006060:	6833      	ldr	r3, [r6, #0]
 8006062:	6820      	ldr	r0, [r4, #0]
 8006064:	1d19      	adds	r1, r3, #4
 8006066:	6031      	str	r1, [r6, #0]
 8006068:	0606      	lsls	r6, r0, #24
 800606a:	d501      	bpl.n	8006070 <_printf_i+0xbc>
 800606c:	681d      	ldr	r5, [r3, #0]
 800606e:	e003      	b.n	8006078 <_printf_i+0xc4>
 8006070:	0645      	lsls	r5, r0, #25
 8006072:	d5fb      	bpl.n	800606c <_printf_i+0xb8>
 8006074:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006078:	2d00      	cmp	r5, #0
 800607a:	da03      	bge.n	8006084 <_printf_i+0xd0>
 800607c:	232d      	movs	r3, #45	@ 0x2d
 800607e:	426d      	negs	r5, r5
 8006080:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006084:	4859      	ldr	r0, [pc, #356]	@ (80061ec <_printf_i+0x238>)
 8006086:	230a      	movs	r3, #10
 8006088:	e011      	b.n	80060ae <_printf_i+0xfa>
 800608a:	6821      	ldr	r1, [r4, #0]
 800608c:	6833      	ldr	r3, [r6, #0]
 800608e:	0608      	lsls	r0, r1, #24
 8006090:	f853 5b04 	ldr.w	r5, [r3], #4
 8006094:	d402      	bmi.n	800609c <_printf_i+0xe8>
 8006096:	0649      	lsls	r1, r1, #25
 8006098:	bf48      	it	mi
 800609a:	b2ad      	uxthmi	r5, r5
 800609c:	2f6f      	cmp	r7, #111	@ 0x6f
 800609e:	4853      	ldr	r0, [pc, #332]	@ (80061ec <_printf_i+0x238>)
 80060a0:	6033      	str	r3, [r6, #0]
 80060a2:	bf14      	ite	ne
 80060a4:	230a      	movne	r3, #10
 80060a6:	2308      	moveq	r3, #8
 80060a8:	2100      	movs	r1, #0
 80060aa:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80060ae:	6866      	ldr	r6, [r4, #4]
 80060b0:	60a6      	str	r6, [r4, #8]
 80060b2:	2e00      	cmp	r6, #0
 80060b4:	bfa2      	ittt	ge
 80060b6:	6821      	ldrge	r1, [r4, #0]
 80060b8:	f021 0104 	bicge.w	r1, r1, #4
 80060bc:	6021      	strge	r1, [r4, #0]
 80060be:	b90d      	cbnz	r5, 80060c4 <_printf_i+0x110>
 80060c0:	2e00      	cmp	r6, #0
 80060c2:	d04b      	beq.n	800615c <_printf_i+0x1a8>
 80060c4:	4616      	mov	r6, r2
 80060c6:	fbb5 f1f3 	udiv	r1, r5, r3
 80060ca:	fb03 5711 	mls	r7, r3, r1, r5
 80060ce:	5dc7      	ldrb	r7, [r0, r7]
 80060d0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80060d4:	462f      	mov	r7, r5
 80060d6:	42bb      	cmp	r3, r7
 80060d8:	460d      	mov	r5, r1
 80060da:	d9f4      	bls.n	80060c6 <_printf_i+0x112>
 80060dc:	2b08      	cmp	r3, #8
 80060de:	d10b      	bne.n	80060f8 <_printf_i+0x144>
 80060e0:	6823      	ldr	r3, [r4, #0]
 80060e2:	07df      	lsls	r7, r3, #31
 80060e4:	d508      	bpl.n	80060f8 <_printf_i+0x144>
 80060e6:	6923      	ldr	r3, [r4, #16]
 80060e8:	6861      	ldr	r1, [r4, #4]
 80060ea:	4299      	cmp	r1, r3
 80060ec:	bfde      	ittt	le
 80060ee:	2330      	movle	r3, #48	@ 0x30
 80060f0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80060f4:	f106 36ff 	addle.w	r6, r6, #4294967295
 80060f8:	1b92      	subs	r2, r2, r6
 80060fa:	6122      	str	r2, [r4, #16]
 80060fc:	f8cd a000 	str.w	sl, [sp]
 8006100:	464b      	mov	r3, r9
 8006102:	aa03      	add	r2, sp, #12
 8006104:	4621      	mov	r1, r4
 8006106:	4640      	mov	r0, r8
 8006108:	f7ff fee6 	bl	8005ed8 <_printf_common>
 800610c:	3001      	adds	r0, #1
 800610e:	d14a      	bne.n	80061a6 <_printf_i+0x1f2>
 8006110:	f04f 30ff 	mov.w	r0, #4294967295
 8006114:	b004      	add	sp, #16
 8006116:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800611a:	6823      	ldr	r3, [r4, #0]
 800611c:	f043 0320 	orr.w	r3, r3, #32
 8006120:	6023      	str	r3, [r4, #0]
 8006122:	4833      	ldr	r0, [pc, #204]	@ (80061f0 <_printf_i+0x23c>)
 8006124:	2778      	movs	r7, #120	@ 0x78
 8006126:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800612a:	6823      	ldr	r3, [r4, #0]
 800612c:	6831      	ldr	r1, [r6, #0]
 800612e:	061f      	lsls	r7, r3, #24
 8006130:	f851 5b04 	ldr.w	r5, [r1], #4
 8006134:	d402      	bmi.n	800613c <_printf_i+0x188>
 8006136:	065f      	lsls	r7, r3, #25
 8006138:	bf48      	it	mi
 800613a:	b2ad      	uxthmi	r5, r5
 800613c:	6031      	str	r1, [r6, #0]
 800613e:	07d9      	lsls	r1, r3, #31
 8006140:	bf44      	itt	mi
 8006142:	f043 0320 	orrmi.w	r3, r3, #32
 8006146:	6023      	strmi	r3, [r4, #0]
 8006148:	b11d      	cbz	r5, 8006152 <_printf_i+0x19e>
 800614a:	2310      	movs	r3, #16
 800614c:	e7ac      	b.n	80060a8 <_printf_i+0xf4>
 800614e:	4827      	ldr	r0, [pc, #156]	@ (80061ec <_printf_i+0x238>)
 8006150:	e7e9      	b.n	8006126 <_printf_i+0x172>
 8006152:	6823      	ldr	r3, [r4, #0]
 8006154:	f023 0320 	bic.w	r3, r3, #32
 8006158:	6023      	str	r3, [r4, #0]
 800615a:	e7f6      	b.n	800614a <_printf_i+0x196>
 800615c:	4616      	mov	r6, r2
 800615e:	e7bd      	b.n	80060dc <_printf_i+0x128>
 8006160:	6833      	ldr	r3, [r6, #0]
 8006162:	6825      	ldr	r5, [r4, #0]
 8006164:	6961      	ldr	r1, [r4, #20]
 8006166:	1d18      	adds	r0, r3, #4
 8006168:	6030      	str	r0, [r6, #0]
 800616a:	062e      	lsls	r6, r5, #24
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	d501      	bpl.n	8006174 <_printf_i+0x1c0>
 8006170:	6019      	str	r1, [r3, #0]
 8006172:	e002      	b.n	800617a <_printf_i+0x1c6>
 8006174:	0668      	lsls	r0, r5, #25
 8006176:	d5fb      	bpl.n	8006170 <_printf_i+0x1bc>
 8006178:	8019      	strh	r1, [r3, #0]
 800617a:	2300      	movs	r3, #0
 800617c:	6123      	str	r3, [r4, #16]
 800617e:	4616      	mov	r6, r2
 8006180:	e7bc      	b.n	80060fc <_printf_i+0x148>
 8006182:	6833      	ldr	r3, [r6, #0]
 8006184:	1d1a      	adds	r2, r3, #4
 8006186:	6032      	str	r2, [r6, #0]
 8006188:	681e      	ldr	r6, [r3, #0]
 800618a:	6862      	ldr	r2, [r4, #4]
 800618c:	2100      	movs	r1, #0
 800618e:	4630      	mov	r0, r6
 8006190:	f7fa f826 	bl	80001e0 <memchr>
 8006194:	b108      	cbz	r0, 800619a <_printf_i+0x1e6>
 8006196:	1b80      	subs	r0, r0, r6
 8006198:	6060      	str	r0, [r4, #4]
 800619a:	6863      	ldr	r3, [r4, #4]
 800619c:	6123      	str	r3, [r4, #16]
 800619e:	2300      	movs	r3, #0
 80061a0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80061a4:	e7aa      	b.n	80060fc <_printf_i+0x148>
 80061a6:	6923      	ldr	r3, [r4, #16]
 80061a8:	4632      	mov	r2, r6
 80061aa:	4649      	mov	r1, r9
 80061ac:	4640      	mov	r0, r8
 80061ae:	47d0      	blx	sl
 80061b0:	3001      	adds	r0, #1
 80061b2:	d0ad      	beq.n	8006110 <_printf_i+0x15c>
 80061b4:	6823      	ldr	r3, [r4, #0]
 80061b6:	079b      	lsls	r3, r3, #30
 80061b8:	d413      	bmi.n	80061e2 <_printf_i+0x22e>
 80061ba:	68e0      	ldr	r0, [r4, #12]
 80061bc:	9b03      	ldr	r3, [sp, #12]
 80061be:	4298      	cmp	r0, r3
 80061c0:	bfb8      	it	lt
 80061c2:	4618      	movlt	r0, r3
 80061c4:	e7a6      	b.n	8006114 <_printf_i+0x160>
 80061c6:	2301      	movs	r3, #1
 80061c8:	4632      	mov	r2, r6
 80061ca:	4649      	mov	r1, r9
 80061cc:	4640      	mov	r0, r8
 80061ce:	47d0      	blx	sl
 80061d0:	3001      	adds	r0, #1
 80061d2:	d09d      	beq.n	8006110 <_printf_i+0x15c>
 80061d4:	3501      	adds	r5, #1
 80061d6:	68e3      	ldr	r3, [r4, #12]
 80061d8:	9903      	ldr	r1, [sp, #12]
 80061da:	1a5b      	subs	r3, r3, r1
 80061dc:	42ab      	cmp	r3, r5
 80061de:	dcf2      	bgt.n	80061c6 <_printf_i+0x212>
 80061e0:	e7eb      	b.n	80061ba <_printf_i+0x206>
 80061e2:	2500      	movs	r5, #0
 80061e4:	f104 0619 	add.w	r6, r4, #25
 80061e8:	e7f5      	b.n	80061d6 <_printf_i+0x222>
 80061ea:	bf00      	nop
 80061ec:	08006341 	.word	0x08006341
 80061f0:	08006352 	.word	0x08006352

080061f4 <memmove>:
 80061f4:	4288      	cmp	r0, r1
 80061f6:	b510      	push	{r4, lr}
 80061f8:	eb01 0402 	add.w	r4, r1, r2
 80061fc:	d902      	bls.n	8006204 <memmove+0x10>
 80061fe:	4284      	cmp	r4, r0
 8006200:	4623      	mov	r3, r4
 8006202:	d807      	bhi.n	8006214 <memmove+0x20>
 8006204:	1e43      	subs	r3, r0, #1
 8006206:	42a1      	cmp	r1, r4
 8006208:	d008      	beq.n	800621c <memmove+0x28>
 800620a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800620e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006212:	e7f8      	b.n	8006206 <memmove+0x12>
 8006214:	4402      	add	r2, r0
 8006216:	4601      	mov	r1, r0
 8006218:	428a      	cmp	r2, r1
 800621a:	d100      	bne.n	800621e <memmove+0x2a>
 800621c:	bd10      	pop	{r4, pc}
 800621e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006222:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006226:	e7f7      	b.n	8006218 <memmove+0x24>

08006228 <_sbrk_r>:
 8006228:	b538      	push	{r3, r4, r5, lr}
 800622a:	4d06      	ldr	r5, [pc, #24]	@ (8006244 <_sbrk_r+0x1c>)
 800622c:	2300      	movs	r3, #0
 800622e:	4604      	mov	r4, r0
 8006230:	4608      	mov	r0, r1
 8006232:	602b      	str	r3, [r5, #0]
 8006234:	f7fb fa74 	bl	8001720 <_sbrk>
 8006238:	1c43      	adds	r3, r0, #1
 800623a:	d102      	bne.n	8006242 <_sbrk_r+0x1a>
 800623c:	682b      	ldr	r3, [r5, #0]
 800623e:	b103      	cbz	r3, 8006242 <_sbrk_r+0x1a>
 8006240:	6023      	str	r3, [r4, #0]
 8006242:	bd38      	pop	{r3, r4, r5, pc}
 8006244:	200004d8 	.word	0x200004d8

08006248 <memcpy>:
 8006248:	440a      	add	r2, r1
 800624a:	4291      	cmp	r1, r2
 800624c:	f100 33ff 	add.w	r3, r0, #4294967295
 8006250:	d100      	bne.n	8006254 <memcpy+0xc>
 8006252:	4770      	bx	lr
 8006254:	b510      	push	{r4, lr}
 8006256:	f811 4b01 	ldrb.w	r4, [r1], #1
 800625a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800625e:	4291      	cmp	r1, r2
 8006260:	d1f9      	bne.n	8006256 <memcpy+0xe>
 8006262:	bd10      	pop	{r4, pc}

08006264 <_realloc_r>:
 8006264:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006268:	4680      	mov	r8, r0
 800626a:	4615      	mov	r5, r2
 800626c:	460c      	mov	r4, r1
 800626e:	b921      	cbnz	r1, 800627a <_realloc_r+0x16>
 8006270:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006274:	4611      	mov	r1, r2
 8006276:	f7ff bc4b 	b.w	8005b10 <_malloc_r>
 800627a:	b92a      	cbnz	r2, 8006288 <_realloc_r+0x24>
 800627c:	f7ff fbdc 	bl	8005a38 <_free_r>
 8006280:	2400      	movs	r4, #0
 8006282:	4620      	mov	r0, r4
 8006284:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006288:	f000 f81a 	bl	80062c0 <_malloc_usable_size_r>
 800628c:	4285      	cmp	r5, r0
 800628e:	4606      	mov	r6, r0
 8006290:	d802      	bhi.n	8006298 <_realloc_r+0x34>
 8006292:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8006296:	d8f4      	bhi.n	8006282 <_realloc_r+0x1e>
 8006298:	4629      	mov	r1, r5
 800629a:	4640      	mov	r0, r8
 800629c:	f7ff fc38 	bl	8005b10 <_malloc_r>
 80062a0:	4607      	mov	r7, r0
 80062a2:	2800      	cmp	r0, #0
 80062a4:	d0ec      	beq.n	8006280 <_realloc_r+0x1c>
 80062a6:	42b5      	cmp	r5, r6
 80062a8:	462a      	mov	r2, r5
 80062aa:	4621      	mov	r1, r4
 80062ac:	bf28      	it	cs
 80062ae:	4632      	movcs	r2, r6
 80062b0:	f7ff ffca 	bl	8006248 <memcpy>
 80062b4:	4621      	mov	r1, r4
 80062b6:	4640      	mov	r0, r8
 80062b8:	f7ff fbbe 	bl	8005a38 <_free_r>
 80062bc:	463c      	mov	r4, r7
 80062be:	e7e0      	b.n	8006282 <_realloc_r+0x1e>

080062c0 <_malloc_usable_size_r>:
 80062c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80062c4:	1f18      	subs	r0, r3, #4
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	bfbc      	itt	lt
 80062ca:	580b      	ldrlt	r3, [r1, r0]
 80062cc:	18c0      	addlt	r0, r0, r3
 80062ce:	4770      	bx	lr

080062d0 <_init>:
 80062d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062d2:	bf00      	nop
 80062d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80062d6:	bc08      	pop	{r3}
 80062d8:	469e      	mov	lr, r3
 80062da:	4770      	bx	lr

080062dc <_fini>:
 80062dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062de:	bf00      	nop
 80062e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80062e2:	bc08      	pop	{r3}
 80062e4:	469e      	mov	lr, r3
 80062e6:	4770      	bx	lr
